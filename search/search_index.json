{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Architect's Insight Hub: Elevate Your Learning Experience","text":"<p>This website is my personal endeavor, focusing on software architecture resources that help you keep up with the latest trends. I selectively gather content that I find useful, presenting summaries and insights to give you a snapshot of current trends and innovations. It's an experimental project, leveraging open-source models and GPT-4 capabilities. Please note, while I aim for accuracy, the nature of summarization means that details may not be exhaustive, and there could be minor inaccuracies. If a topic catches your interest, I encourage you to delve into the original articles or videos linked as sources, ensuring you get the full scope of the information. </p>"},{"location":"#summaries","title":"Summaries","text":"<ul> <li>GOTO Conferences - Software architecture playlist</li> <li>GOTO Conferences - Design thinking and UI/UX playlist</li> <li>GOTO Conferences - Programming languages playlist</li> </ul>"},{"location":"#blogs","title":"Blogs","text":""},{"location":"#architecture","title":"Architecture","text":"<ul> <li>Building Distributed Applications with Event-Driven Architecture - Eric Johnson's presentation at GOTO 2023</li> </ul>"},{"location":"#design","title":"Design:","text":"<ul> <li>Design for the Utopia You Want, Not the Dystopia You're In: Insights from Chris Atherton at GOTO Conference 2022</li> </ul>"},{"location":"#programming","title":"Programming","text":""},{"location":"#other","title":"Other","text":""},{"location":"goto_best_of_v1/","title":"Goto best of v1","text":""},{"location":"goto_best_of_v1/#one-rule-to-rule-them-all-pragmatic-dave-thomas-goto-2023","title":"One Rule to Rule Them All \u2022 Pragmatic Dave Thomas \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ug8XX2MpzEw</p> <ul> <li>The speaker presented the rule \"make it easier to change\" as a guiding principle in software development</li> <li>They emphasized that this is not a hard and fast rule, but rather a value that can help guide decision-making</li> <li>The speaker discussed their experiences with refactoring code and how they've learned to trust their intuition when estimating the cost of change</li> <li>They encouraged the audience to observe and learn from their own experiences in order to improve their estimation skills</li> <li>The speaker also emphasized the importance of making software development a fun and enjoyable process.</li> </ul>"},{"location":"goto_best_of_v1/#programmings-greatest-mistakes-mark-rendle-goto-2023","title":"Programming's Greatest Mistakes \u2022 Mark Rendle \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=Y9clBHENy4Q</p> <ul> <li>The title of the talk is \"Computers are stupid\"</li> <li>The speaker argues that computers cannot be trusted with important decisions because they lack common sense and can only do what they are programmed to do</li> <li>They are prone to errors, especially when dealing with ambiguity or unexpected situations</li> <li>Examples of computer failures include:<ul> <li>A computer-guided missile missing its target by 10 miles during the Gulf War</li> <li>The Therac-25 radiation therapy machine overdosing patients and causing their deaths</li> <li>Amazon's AI-powered hiring tool discriminating against women</li> <li>Google's image recognition algorithm labeling black people as gorillas</li> </ul> </li> <li>The speaker also mentions that computer algorithms are often biased because they are based on data created by humans, who are themselves biased</li> <li>The speaker concludes that computers are not intelligent and should not be trusted with important decisions, especially when human lives are at stake.</li> </ul>"},{"location":"goto_best_of_v1/#building-owly-an-ai-comic-video-generator-for-my-son-agustinus-nalwan-yow-2023","title":"Building Owly: An AI Comic Video Generator for My Son \u2022 Agustinus Nalwan \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=jkHCI4XCOg4</p> <ul> <li>The speaker presented a project using the stable diffusion model to generate comics based on user input.</li> <li>The stable diffusion model is a text-to-image generation model that can create images from text descriptions.</li> <li>The speaker used the model to generate images for each panel of a comic, with the text for each panel provided by the user.</li> <li>The project also included features such as off-riding existing concepts and enhancing engagement through storytelling.</li> <li>The speaker encouraged audience members to reach out to them for more information or to connect.</li> </ul>"},{"location":"goto_best_of_v1/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm in data management</li> <li>It allows for decentralized production and consumption of data</li> <li>Governance in the data world will be a big focus, but it needs to be federated through tooling</li> <li>Vendors have high motivation to get you on board right now, so it's important to be mindful of their motivations</li> </ul>"},{"location":"goto_best_of_v1/#cultivating-instinct-katrina-owen-yow-2023","title":"Cultivating Instinct \u2022 Katrina Owen \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=4As7GDQ8EYg</p> <ul> <li>The talk is about the importance of perceptual expertise in programming.</li> <li>Perceptual expertise is the ability to quickly and accurately recognize patterns, which allows experts to focus on higher level thinking.</li> <li>Programming requires a high level of perceptual expertise because it involves processing many different dimensions at once.</li> <li>The brain has to figure out which dimensions are important and how to categorize them, which can be overwhelming for new programmers.</li> <li>Over the past 50 years, the number of programmers in the world has doubled roughly every five years.</li> <li>Many new programmers may not be exposed to good patterns, useful distinctions, or signal that would help them develop perceptual expertise.</li> <li>Compressing these lessons can help new developers waste less time on mechanics and focus more on solving meaningful problems.</li> </ul>"},{"location":"goto_best_of_v1/#is-software-engineering-real-engineering-hillel-wayne-yow-2023","title":"Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=CmIGPGPdxTI</p> <ul> <li>The speaker discusses their experience of entering the software industry from a non-traditional background.</li> <li>They emphasize the importance of learning and adapting in order to succeed in a new field.</li> <li>They encourage others to seek out people with diverse backgrounds and experiences in order to learn from them.</li> <li>They suggest that there is much to be gained from learning about other fields and how they intersect with software engineering.</li> <li>The speaker encourages the audience to talk to people who have entered software from unusual directions in order to learn from their experiences.</li> </ul>"},{"location":"goto_best_of_v1/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ul> <li>Low-level programming is writing code that runs directly on the hardware, without an operating system or virtual machine.</li> <li>It can be useful for tasks such as embedded systems and kernel development.</li> <li>Rust is a good language for low-level programming because it allows for fine control over memory management while also providing safety features to prevent common errors.</li> <li>The ARM Cortex-M4 microcontroller is a popular choice for low-level programming, due to its wide availability and powerful capabilities.</li> <li>When working with low-level programming, it's important to have access to the datasheet and reference manuals for the hardware being used.</li> <li>Low-level programming can be challenging but rewarding, as it allows for greater control over the hardware and more efficient use of resources.</li> </ul>"},{"location":"goto_best_of_v1/#have-i-been-pwned-troy-hunt-goto-2023","title":"Have I Been Pwned? \u2022 Troy Hunt \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=pxPEdUFdayA</p> <ul> <li>The talk was about the Genesis Market, a darknet marketplace that sold access to compromised machines.</li> <li>The presenter discussed how the FBI took down the site and arrested its administrators in Operation Cookie Monster.</li> <li>The FBI used binary code and hoodies as imagery in their operations, which the presenter found amusing.</li> <li>The presentation ended on a positive note, highlighting the FBI's sense of humor.</li> </ul>"},{"location":"goto_best_of_v1/#plain-text-dylan-beattie-goto-2023","title":"Plain Text \u2022 Dylan Beattie \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=4mRxIgu9R70</p> <ul> <li>Pike Matchbox is a text encoding tool that optimizes plain text files for different cultural and linguistic contexts.</li> <li>It supports several encodings, such as ASCII, UTF-8, and UTF-16.</li> <li>It also considers language-specific features, such as Danish spelling reform, Norwegian orthography, Finnish alphabet, Swedish alphabet, and big and little endian conventions.</li> <li>The tool can be used in different operating systems and text editors.</li> <li>Pike Matchbox was developed to address the issues of unpredictability in plain text files and to ensure that the text is displayed correctly across different platforms and devices.</li> <li>The history of teleprinters and their encoding conventions also played a role in shaping Pike Matchbox's design.</li> <li>The talk encourages developers to consider cultural and linguistic contexts when working with plain text files and to use tools like Pike Matchbox to optimize them for their intended audience.</li> </ul>"},{"location":"goto_best_of_v1/#hot-deploying-low-latency-services-for-247-operation-martin-thompson-yow-2022","title":"Hot Deploying Low-Latency Services for 24/7 Operation \u2022 Martin Thompson \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=_KvFapRkR9I</p> <ul> <li>Real-time systems require coordination between different components</li> <li>Aeron is an open-source project for building clusters that can handle fault tolerance and low latency</li> <li>Coordination is done through messaging, where components send messages to each other to communicate</li> <li>Components must be versioned to keep track of conversations between them and ensure compatibility</li> <li>Background tasks are used to perform time-consuming computations without pausing the system</li> <li>Customers have driven the development of Aeron towards supporting 24/7 operation and hot deployment.</li> </ul>"},{"location":"goto_best_of_v1/#scaling-python-for-machine-learning-beyond-data-parallelism-holden-karau-goto-2023","title":"Scaling Python for Machine Learning: Beyond Data Parallelism \u2022 Holden Karau \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=IX3300umebg</p> <ul> <li>Dask is a flexible library for parallel computing in Python.</li> <li>It can be used to process large datasets that do not fit into memory by breaking them down into smaller chunks and processing them in parallel.</li> <li>It can also be used to parallelize existing code and scale up computations on multi-core machines or clusters of machines.</li> <li>Dask is designed to be used with Pandas, Numpy, and Scikit-learn, so it integrates well with existing scientific computing workflows in Python.</li> <li>It includes a number of built-in algorithms for common data processing tasks, such as sorting, filtering, and aggregating data.</li> <li>Dask can be used to parallelize machine learning models and perform distributed training.</li> <li>It is also useful for performing exploratory data analysis on large datasets by allowing users to write interactive code that scales up to handle larger datasets.</li> <li>Dask has a number of built-in visualization tools for monitoring the progress of computations and diagnosing performance issues.</li> <li>The speaker recommends using Dask with Jupyter notebooks for interactive data processing and exploration.</li> <li>Dask is not a replacement for existing parallel computing libraries such as MPI or Hadoop, but rather it is designed to be used alongside these libraries to provide additional functionality and flexibility.</li> </ul>"},{"location":"goto_best_of_v1/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>Started by showing a GraphQL API built using Prisma</li> <li>Showed how to run a query in the playground and explained what it does</li> <li>Added a new field <code>reviews</code> to the schema, which returns an array of reviews for a given post</li> <li>Explained that this requires making changes to both the schema and the resolver</li> <li>Modified the GraphQL schema by adding the <code>reviews</code> field to the <code>Post</code> type</li> <li>Updated the database model in Prisma's <code>schema.prisma</code> file to include a relation between posts and reviews</li> <li>Redeployed the API using <code>prisma deploy</code></li> <li>Showed how the new field can now be queried in the playground</li> <li>Added a mutation for creating new reviews</li> <li>Modified the <code>getPost</code> resolver function to make use of the new review data</li> <li>Explained that this required changing the contract of the <code>getPost</code> function to include review information</li> <li>Deployed changes and tested in the playground</li> </ul>"},{"location":"goto_best_of_v1/#why-is-my-app-slow-defining-reliability-in-platform-engineering-jez-humble-goto-2023","title":"Why Is My App SLOw? Defining Reliability in Platform Engineering \u2022 Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=es3DNd5Qipg</p> <ul> <li>The talk is about using statistical methods to model and predict system behavior in Site Reliability Engineering (SRE).</li> <li>The presenter, David Blank-Edelman, emphasizes the importance of understanding system behavior as a prerequisite for effective SRE.</li> <li>He introduces the concept of \"stationarity,\" which refers to the idea that certain characteristics of a system remain constant over time.</li> <li>By identifying and modeling these stationary characteristics, SREs can make more accurate predictions about system behavior and respond more effectively to incidents.</li> <li>Blank-Edelman also discusses a technique called \"time series analysis\" for analyzing stationary data and predicting future behavior.</li> <li>He then describes how Google has implemented this approach at scale using a tool called \"Borgmon,\" which can process large volumes of time series data in real time.</li> <li>The presenter emphasizes the importance of statistical modeling and prediction in SRE, and encourages practitioners to explore these techniques further.</li> <li>He also mentions that there are resources available on the sre.google website for those who want to learn more about this topic.</li> </ul>"},{"location":"goto_best_of_v1/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ul> <li>Flix is a functional, imperative, and logic programming language.</li> <li>It was developed by more than 50 people, including the speaker's research group.</li> <li>The language allows writing functions with some logic programming inside them.</li> <li>Flix has several unique features:<ul> <li>Strong typing</li> <li>Pattern matching</li> <li>Higher-order functions</li> <li>Type inference</li> <li>Logic programming</li> <li>Side effects (through monads)</li> </ul> </li> <li>Flix is designed for building scalable and efficient applications, particularly in the area of data analytics.</li> <li>The language has a visual studio code extension, documentation, and a playground available on its website.</li> <li>It is fully open source.</li> </ul>"},{"location":"goto_dt_ui_ux/","title":"Goto dt ui ux","text":""},{"location":"goto_dt_ui_ux/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ul> <li>Introduction to Playwright<ul> <li>Cross-browser testing (Chrome, Firefox, Safari)</li> <li>Visual regression testing with Chromatic<ul> <li>Screenshots of UI changes</li> <li>Side-by-side comparison of old and new versions</li> <li>Review and feedback from co-workers and stakeholders</li> <li>Synchronization with GitHub, gitlab, bitbucket</li> <li>Blocking PRs from merging until reviews pass</li> </ul> </li> </ul> </li> <li>Documentation with Storybook<ul> <li>MDX2 support for mixing text content with rendered components</li> <li>Doc blocks to create documentation pages for components</li> <li>Auto DOCs to automatically generate documentation based on stories</li> <li>Figma Integrations<ul> <li>Add-on designs package for Storybook</li> <li>Figma add-on Plugin for live implementation of a story</li> <li>Chromatic integration with Figma, showing screenshot, live view, and Figma design on the same page</li> </ul> </li> </ul> </li> <li>Improving the ecosystem around Storybook<ul> <li>Tool sets for community-built Storybook Integrations</li> <li>Ecosystem CI to test compatibility with different libraries and frameworks</li> <li>Automated code mods to upgrade existing Storybooks to new versions</li> </ul> </li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ul> <li>Stephanie Stimac is a designer, front-end developer, and product manager with experience at Microsoft</li> <li>She has written a book called \"Design for Developers,\" which covers the basics of design principles and how they apply to the web</li> <li>The book is aimed at people who are new to design or want to learn more about it, and covers topics such as typography, color, layout, and user experience</li> <li>Stephanie emphasizes the importance of understanding the basics of design in order to create effective and accessible websites</li> <li>She also discusses the role of empathy in design, and how considering the needs and perspectives of users can lead to better outcomes</li> <li>In her career, Stephanie has found that having a broad range of skills and knowledge has been beneficial, as it allows her to understand and communicate with different teams and stakeholders</li> <li>She encourages people to continue learning and expanding their skillsets, as this can open up new opportunities and make them more valuable assets in the workplace</li> <li>The book is available for purchase online, and Stephanie is available for consulting work through her website.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=i2_lVtZZdbE</p> <ul> <li>The digital world is constantly evolving and growing</li> <li>There are currently 5.2 billion unique mobile users worldwide, with 3.8 billion of them using social media</li> <li>By 2025, there will be 75 billion connected devices</li> <li>The average person spends around 145 minutes per day on social media</li> <li>The internet minute in 2021:<ul> <li>197 million emails are sent</li> <li>4.62 million videos are streamed on Netflix</li> <li>500 hours of video are uploaded to YouTube</li> <li>347,222 stories are shared on Instagram</li> <li>500 hours of content are consumed on TikTok</li> </ul> </li> <li>The digital world can be overwhelming and it's important to be mindful of our consumption</li> <li>It's easy to get lost in the digital world and forget about the real world</li> <li>There is a trend towards digital minimalism and taking breaks from technology</li> <li>It's important to find a balance between the digital and physical worlds</li> <li>The key is to use technology as a tool, not let it consume our lives</li> <li>We need to be aware of how much time we are spending online and make conscious decisions about our usage</li> <li>There is a growing movement towards creating more ethical and responsible technology</li> <li>Companies are starting to realize the importance of designing products that are good for society, not just their bottom line</li> <li>The future of technology is about enhancing humanity, not replacing it.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022_1","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ul> <li>The future of technology is about merging hardware and infotech to create something that is good for people</li> <li>There is a way to use technology to help people, rather than hijack their attention and time</li> <li>Now Watch is an example of this - it measures stress levels through sweat and helps users become more aware of their inner world</li> <li>The Humane Tech organization (formerly Time Well Spent) aims to create technology that enhances the world outside the device</li> <li>Architects of our digital world have the power to add value and enhance humanity, rather than just keep people's attention for as long as possible.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ul> <li>The speaker is discussing the importance of user-centered design in government services.</li> <li>They mention that their team had to quickly respond to new regulations due to the COVID-19 pandemic, and how having a design system in place allowed them to move quickly.</li> <li>The speaker emphasizes the importance of having a budget for user-centered design and having a government that believes in funding digital services.</li> <li>They also mention the role of representatives in making these decisions, and encourage the audience to vote.</li> <li>The speaker discusses the importance of privacy protection and having organizations like Data Inspectorate in place to protect it.</li> <li>They mention the need for diverse teams and output in design, and encourage the audience to notice if they find themselves in \"learned helplessness\" and to rehearse things that they believe to be good.</li> <li>The speaker also encourages the audience to refuse to engage in arguments with people who don't act for them when they should, and to act for the utopia they want.</li> </ul> <p>Additional notes:</p> <ul> <li>The speaker mentions Keanu Reeves and Greta Thunberg as examples of people who inspire them.</li> <li>They also mention the importance of having laptops and other technology in place for remote work, which allowed their team to continue working during the pandemic.</li> <li>The speaker encourages the audience to use white hat bad actors to simulate potential misuse of products and to think more actively rather than reactively.</li> <li>They also mention the need to specify \"should not\" in products and to be mindful of what we are teaching AI.</li> </ul>"},{"location":"goto_dt_ui_ux/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ul> <li>Attention is a limited resource and can be easily distracted</li> <li>Visual attention has three dimensions: what, where, and when</li> <li>The \"gutenberg diagram\" describes how people read text on a page, with the primary optical area (POA) being the most important</li> <li>People spend 80% of their time looking at the left half of the screen and 20% on the right</li> <li>F-shaped pattern is common in web reading where users scan in an F shape, focusing on headlines and subheadings</li> <li>Attention jacking is a technique used to grab user's attention by interrupting their flow with something unexpected or interesting</li> <li>Images are processed faster than text and can be used to guide user's attention</li> <li>Visual hierarchy is important for guiding user's attention, with larger and bolder elements being more noticeable</li> <li>Attention is not just visual, but also auditory, and can be easily distracted by sounds</li> <li>Screen reader users have a linear flow of attention and cannot skip around like sighted users</li> <li>Tips for designing for screen readers include getting to the point, prioritizing content carefully, and not auto-playing media</li> <li>Howie experience website is an example of bad design that fails to consider user's attention.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-experience-centric-organization-simon-clatworthy-goto-2021","title":"The Experience-Centric Organization \u2022 Simon Clatworthy \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=P9hobIfPw_0</p> <ul> <li>Experiential design is a holistic approach that considers all aspects of a service, from the customer's perspective</li> <li>It is important to understand the characteristics of your project and find the right mix of functional, usable, emotional, social, idealistic, and self-promoting elements</li> <li>The journey of the customer should be considered, including before, during, and after using the service</li> <li>A personality should be defined for the service, based on the organization's values and tone of voice</li> <li>Experiential design relates to the entire organization, including technology, platforms, routines, hierarchies, and kpis</li> <li>It is important to plan your maturity model and make experience a core part of your strategy</li> </ul> <p>Notes from transcript:</p> <ul> <li>Experiential design is a holistic approach that considers all aspects of a service from the customer's perspective (0:25)</li> <li>It is important to understand the characteristics of your project and find the right mix of functional, usable, emotional, social, idealistic, and self-promoting elements (3:14)</li> <li>The journey of the customer should be considered, including before, during, and after using the service (5:07)</li> <li>A personality should be defined for the service, based on the organization's values and tone of voice (6:32)</li> <li>Experiential design relates to the entire organization, including technology, platforms, routines, hierarchies, and kpis (14:58)</li> <li>It is important to plan your maturity model and make experience a core part of your strategy (17:06)</li> </ul> <p>Additional notes:</p> <ul> <li>The customer's perspective is key in experiential design (0:25)</li> <li>Finding the right mix of elements is important for a successful project (3:14)</li> <li>Considering the entire journey of the customer, including before and after using the service, is important (5:07)</li> <li>Defining a personality for the service that aligns with the organization's values and tone of voice is important (6:32)</li> <li>Experiential design relates to the entire organization and should be considered in all aspects (14:58)</li> <li>Planning your maturity model and making experience a core part of your strategy will help ensure success (17:06)</li> </ul>"},{"location":"goto_dt_ui_ux/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>The speaker, Stefan Judis, discusses the complexity of modern web development and the impact it has on user experience.</li> <li>He mentions that when he first started doing web development in 2010, a \"hello world\" website was only 10 kilobytes, but now it is 40 kilobytes.</li> <li>The speaker also mentions that setting up a simple site project now requires knowledge of frameworks and bundlers such as webpack, which can be difficult to debug and understand for new developers.</li> <li>He brings up the example of tinyhelpers.dev, a website he built where users can add their own tools in the form of JSON files. However, to do so, they have to download 700 megabytes worth of javascript pipeline, which is excessive.</li> <li>The speaker also mentions that there seems to be a divide in front-end development between those who focus on javascript driven frameworks and those who care about UX and CSS architecture.</li> <li>He argues that developers are prioritizing their own job satisfaction over the needs of users, by using the latest and greatest technologies instead of focusing on user experience.</li> <li>The speaker then talks about his own journey in web development, starting with a cutting edge javascript framework for three years, then moving to a pure approach, reducing page weight by 64% and build time by four minutes.</li> <li>He mentions that he no longer has a javascript pipeline and if he needs javascript he puts in custom elements from github or elsewhere.</li> <li>The speaker also mentions that after rebuilding his site using a pure approach, he has an entire green lighthouse score because he didn't add anything that makes it slow.</li> <li>He concludes by saying \"use whatever makes you happy\" but to consider the trade-offs that come with certain technology choices and to focus on building sites that just work instead of worrying about the technology powering them.</li> </ul> <p>[Note: The speaker does not provide any context for his talk, it is assumed that he is speaking from his own experience and knowledge in web development.]</p>"},{"location":"goto_dt_ui_ux/#how-technology-influences-our-decisions-chris-atherton-fabio-pereira-goto-2019","title":"How Technology Influences Our Decisions \u2022 Chris Atherton &amp; Fabio Pereira \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Jya6WTAB9io</p> <ul> <li>The internet has changed the way we communicate and access information, but it also has its downsides such as addiction and misinformation.</li> <li>Social media platforms can be addictive due to their variable reward systems, which activate the brain's dopamine pathways.</li> <li>Social media algorithms prioritize engagement over accuracy, leading to the spread of misinformation and fake news.</li> <li>The internet has also led to a decline in face-to-face communication, which is important for building trust and empathy.</li> <li>To combat addiction and misinformation, we need to be more conscious about how we use technology and prioritize real-life connections over digital ones.</li> <li>Designers have a responsibility to create technology that is ethical and promotes well-being.</li> <li>We should also be critical of the information we consume online and verify it through multiple sources.</li> <li>Social media platforms can be used for positive change, such as raising awareness about social issues and mobilizing communities.</li> <li>The internet has made it easier to connect with people from different cultures and backgrounds, but it has also led to a decline in empathy and understanding.</li> <li>We need to find a balance between using technology and prioritizing real-life connections.</li> <li>Freezing time in 1993, when the internet was still text-based and slower-paced, would be ideal for some.</li> <li>Reconnecting with nature and prioritizing real-life connections are important elements to bring from the past to the present and future.</li> </ul>"},{"location":"goto_dt_ui_ux/#build-agility-with-design-sprints-gary-crawford-goto-2020","title":"Build Agility with Design Sprints \u2022 Gary Crawford \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=oRjY5_VACts</p> <ul> <li>Design sprints are a way to quickly test and validate ideas in a short amount of time</li> <li>They consist of five phases: Understand, Diverge, Decide, Prototype, and Test</li> <li>The goal is to get customer feedback as soon as possible to determine if an idea is worth pursuing</li> <li>Design sprints can be used for any type of product or service, including physical products</li> <li>They are a collaborative process that involves cross-functional teams and customers from the beginning</li> <li>Design sprints can help build agility within an organization by encouraging rapid experimentation and learning</li> <li>The tools and methods used in design sprints can be applied to any type of project or problem</li> <li>To run a design sprint, you will need a diverse team, a facilitator, and a dedicated space</li> <li>It's important to have clear goals and objectives for the sprint, as well as a defined target customer</li> <li>The Understand phase involves researching the problem and gathering insights about the customer</li> <li>The Diverge phase is about generating a wide range of ideas and solutions</li> <li>The Decide phase is about narrowing down the options and making a decision about which idea to pursue</li> <li>The Prototype phase is about creating a simple, tangible representation of the idea</li> <li>The Test phase involves getting feedback from customers on the prototype</li> <li>Design sprints can be used to test out different variations of a product or service</li> <li>They can also be used to validate assumptions and hypotheses</li> <li>It's important to remember that design sprints are not about building a final product, but rather about testing and learning</li> <li>The goal is to get customer feedback as soon as possible to determine if an idea is worth pursuing</li> <li>Design sprints can help build agility within an organization by encouraging rapid experimentation and learning.</li> </ul>"},{"location":"goto_dt_ui_ux/#server-driven-ui-on-mobile-jj-qi-goto-2020","title":"Server Driven UI on Mobile \u2022 JJ Qi \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=CtSfG8tYRdg</p> <ul> <li>Server-driven UI allows for dynamic and customizable user interfaces by specifying templates on the backend that are then rendered on the frontend.</li> <li>This approach can be useful for A/B testing, dynamic messaging, and customized user setups.</li> <li>To implement server-driven UI, it is helpful to start with a specific use case and define a template for that use case.</li> <li>It can be beneficial to begin with a static JSON contract and gradually build out the backend implementation as needed.</li> <li>Some considerations when implementing server-driven UI include determining whether it is always worth the effort to convert a feature to be server-driven, and deciding on the best ways to test the UI.</li> </ul>"},{"location":"goto_dt_ui_ux/#building-an-accessibility-culture-ayesha-mazumdar-goto-2020","title":"Building an Accessibility Culture \u2022 Ayesha Mazumdar \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Lf3YVI-9lA0</p> <ul> <li>Ayesha Kemas, Director of Product Design at Optimizely, gave a talk on building an accessibility culture in product design</li> <li>Accessibility is often overlooked in the planning and development phases of product design</li> <li>Building an accessibility culture involves creating awareness, encouraging action, scaling changes, and refining the product</li> <li>To create awareness, Ayesha and her team presented on accessibility, shared articles, and held discussions</li> <li>Encouraging action involved making small improvements to the product, such as fixing line graphs and focus states</li> <li>Scaling changes will involve propagating these fixes throughout the entire legacy codebase</li> <li>Refining the product involves making it not just usable but also enjoyable for all users</li> <li>Resources for building an accessibility culture include Fable and Access Works for usability testing, The A11Y Project for checklists and introductory articles, and the Web Content Accessibility Guidelines for technical information</li> <li>Ayesha recommends reaching out to her on Twitter or LinkedIn for further discussion.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2019","title":"Design For The Utopia You Want, Not The Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=pUn8Ox7ai6I</p> <ul> <li>Social media platforms have a responsibility to design for how people are, not how they want people to be</li> <li>The attention economy is real and it's impacting our brains in negative ways</li> <li>We need to be more mindful of the time we spend on social media and the actions we take while using these platforms</li> <li>Designers should use behavioral mechanics for good, not to manipulate users into addictive behaviors</li> <li>Transparency is important in design, especially when it comes to data privacy</li> <li>Self-care is crucial for designers and users alike, including taking breaks from social media and practicing good digital hygiene</li> <li>State dependent learning teaches us that the state we are in when we learn something is the best state for retrieving that information later, so it's important to practice self-care in order to retain information.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ul> <li>Accessibility is important for all users, not just those with disabilities</li> <li>Consider the diversity of your audience when designing for accessibility</li> <li>Use clear language and provide alternatives to complex information</li> <li>Make sure interactive elements are easy to use and understand</li> <li>Animation can enhance usability by providing feedback, steering attention, and creating a sense of physicality</li> <li>Follow Disney's animation principles for smooth and effective animations</li> <li>Consider the potential impact on your audience when deciding whether or not to include certain features</li> </ul> <p>No context:</p> <ul> <li>\"Accessibility is about making things accessible to all people\"</li> <li>\"It's about designing for diversity\"</li> <li>\"Complex information can be overwhelming\"</li> <li>\"Interactive elements should be easy to use and understand\"</li> <li>\"Animation can enhance usability\"</li> <li>\"Disney has great principles for animation\"</li> <li>\"Consider the potential impact on your audience\"</li> </ul>"},{"location":"goto_dt_ui_ux/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ul> <li>The speaker is discussing the importance of fostering a DevUX culture within teams.</li> <li>DevUX stands for developer user experience and refers to the practice of involving developers in the design process to create better user experiences.</li> <li>The speaker emphasizes that trust is the foundation of any successful team, and it is essential to build this trust in order to grow and improve as a team.</li> <li>To build trust, the speaker suggests starting by breaking the ice with designers and sharing vulnerabilities. This can help create empathy and understanding between developers and designers.</li> <li>The speaker also recommends organizing regular DevUX drinks or other social events where developers and designers can get to know each other and share their experiences.</li> <li>By building trust and fostering a culture of collaboration, teams can create better user experiences and improve their overall productivity and success.</li> <li>The speaker mentions the Five Dysfunctions of a Team by Patrick Lencioni as a useful resource for understanding how to build trust and improve team dynamics.</li> <li>The speaker also recommends checking out the DevUX culture website and joining the DevUX slack community to connect with other professionals and share experiences.</li> </ul>"},{"location":"goto_dt_ui_ux/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ul> <li>Persuasive design is the practice of designing interfaces and experiences to influence user behavior</li> <li>There are two types of motivation: intrinsic and extrinsic<ul> <li>Extrinsic motivation comes from external factors such as points, levels, badges, and scoreboards</li> <li>Intrinsic motivation is driven by internal factors such as curiosity, mastery, and getting feedback on work</li> </ul> </li> <li>Intrinsic motivation is more sustainable and leads to long-term engagement, while extrinsic motivation is more short-lived</li> <li>To design for intrinsic motivation, it's important to understand user goals and align them with business goals</li> <li>One way to facilitate intrinsic motivation is through appropriate challenges, which can be achieved by using the flow channel concept from Mihaly Csikszentmihalyi<ul> <li>The flow channel is a balance between skill level and challenge, where the challenge is just enough to keep the user engaged without causing anxiety or boredom</li> </ul> </li> <li>Persuasive design can be used to seduce users to sign up, get them to start using a product, and facilitate ongoing engagement</li> <li>It's important to use persuasive design in an ethical way, by focusing on facilitating intrinsic motivation rather than manipulating or coercing users</li> <li>The persuasive continuum is a tool for determining the level of influence a design has, ranging from coercion to seduction to facilitation.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-balance-tech-content-location-for-the-ultimate-ux-in-mixed-reality-jason-yim-goto-2017","title":"How to Balance Tech, Content &amp; Location for the Ultimate UX in Mixed Reality \u2022 Jason Yim \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=qTVqkCV56gk</p> <ul> <li>AR/VR technology is becoming more prevalent in various industries</li> <li>Companies are using AR/VR to create unique and engaging experiences for users</li> <li>Challenges in developing AR/VR experiences include hardware limitations, user fatigue, and calibration issues</li> <li>It's important to consider the user experience and make sure the content is worth downloading and can be enjoyed in the first minute, hour, and week</li> <li>Depth of content and experience is key to keep users engaged</li> <li>Fish Designer at Lego House is an example of a successful AR experience that is fun and engaging for users</li> <li>Compass calibration can be a challenge in AR experiences, it's better to work around it or build it into the experience itself</li> <li>Magic Leap is a mixed reality company that uses light-filled technology, but it's still not released and facing some technical challenges.</li> </ul>"},{"location":"goto_dt_ui_ux/#using-lean-concepts-that-help-the-design-transformation-at-nordstrom-jyoti-shukla-goto-2017","title":"Using Lean Concepts that Help the Design Transformation at Nordstrom \u2022 Jyoti Shukla \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=2yQvwgRJSbc</p> <ul> <li>Lean UX is a practice that emphasizes collaboration, customer feedback, and rapid iteration.</li> <li>Nordstrom has been using lean UX for about two years.</li> <li>The company started by incorporating developers into the design process from the beginning.</li> <li>Developers are involved in usability sketching, bringing products to life, attending usability sessions, and looking at software with customers.</li> <li>Lean UX has helped Nordstrom become more data-driven and make better decisions about what to build.</li> <li>The practice has also helped the company move faster and be more agile.</li> <li>It took about six to nine months for leadership to fully understand and support lean UX.</li> <li>Design sprints have been used at Nordstrom to quickly gather information and create MVPs.</li> <li>The next step after paper prototyping depends on the project, but generally it's best to move to a wireframe or interaction design as quickly as possible.</li> <li>There are many tools available to help with rapid prototyping.</li> <li>Lean UX is not a perfect science and requires experimentation and iteration.</li> <li>It's important to involve developers in the design process from the beginning.</li> <li>Customer feedback is crucial for making informed decisions about what to build.</li> <li>Lean UX can help companies become more data-driven, agile, and customer-focused.</li> </ul>"},{"location":"goto_dt_ui_ux/#lean-design-thinking-michael-mckay-goto-2017","title":"Lean Design Thinking \u2022 Michael McKay \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=w1qrVpeYSYo</p> <p>Error</p>"},{"location":"goto_dt_ui_ux/#smoke-mirrors-the-magic-behind-wonderful-ui-in-android-israel-ferrer-camacho-goto-2016","title":"Smoke &amp; Mirrors the Magic behind Wonderful UI in Android \u2022 Israel Ferrer Camacho \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=912hbLVdIQE</p> <ul> <li>ClipPadding and ClipChildren can be used to draw over parents and paddings</li> <li>ViewOverlay is a best friend for animations, allowing you to draw over the whole layer hierarchy</li> <li>Shared element transition doesn't allow user control without events, but can be achieved with single activity and creating your own navigation</li> <li>Fast animations can hide any problem with implementation</li> <li>Repo with code is available for reference</li> <li>Nick Butcher's Plaid application has more examples of smoke and mirrors techniques.</li> </ul>"},{"location":"goto_dt_ui_ux/#emergent-design-neal-ford-goto-2013","title":"Emergent Design \u2022 Neal Ford \u2022 GOTO 2013","text":"<p>URL: https://www.youtube.com/watch?v=tqmiUJtxaF4</p> <ul> <li>Evolutionary architecture and emergent design require good engineering practices</li> <li>TDD codebase makes it easier to do exercises for refactoring</li> <li>Predicting the future leads to over-engineering, which is a bad thing</li> <li>Prefer being proactive about things that are known to happen in the future and instantly reactive as things happen in the code base</li> <li>Combination of proactive and reactive works better than trying to get better at predicting the future</li> <li>Good engineering practices include:<ul> <li>Automated testing</li> <li>Continuous integration</li> <li>Code reviews</li> <li>Version control</li> <li>Refactoring</li> <li>Short iterations</li> <li>Regular releases</li> <li>Simple design</li> <li>Small teams</li> <li>Collocation</li> <li>Face-to-face communication</li> </ul> </li> <li>Anti-patterns:<ul> <li>Analysis paralysis - overthinking and not taking action</li> <li>Gold plating - adding unnecessary features or functionality</li> <li>Over-engineering - making something more complex than it needs to be</li> <li>Premature optimization - optimizing before it's necessary</li> <li>Cargo culting - following practices without understanding why they are being used</li> </ul> </li> <li>Last responsible moment - the point at which a decision must be made, but not before</li> <li>Inflection points in complexity over time on a project indicate that a component may have taken on too many responsibilities</li> <li>Spikes - experimental coding exercises to determine to get rid of uncertainty for things like estimates</li> <li>Give me estimates now anti-pattern - speculating about how long something will take without enough information leads to ironclad contracts and risking lives to meet deadlines</li> <li>Agile architects need a better awareness of current events in the code base to make determinations about last responsible moments and inflection points</li> <li>Evolutionary architecture and emergent design are about finding and harvesting idiomatic patterns, taking a design that is too complicated to build with the tools available and flipping it over backwards to build something simpler</li> <li>Pac-man example of anti object approach - all intelligence built into the maze, not the individual pac-man guy, using pac-man smell and decaying quickly to determine ghost movement</li> <li>Objects should do the opposite of what you think they should be doing as a way of modeling something that's simpler</li> <li>Anti objects are inspired by the real world but go too far in creating objects that mimic reality</li> <li>Simple design is key - \"the art of maximizing the amount of work not done\" - Agile Manifesto</li> <li>Small teams, collocation, and face-to-face communication are important for good engineering practices</li> <li>Version control, automated testing, continuous integration, code reviews, refactoring, short iterations, regular releases, simple design, and keeping things as small as possible are all part of good engineering practices.</li> </ul>"},{"location":"goto_dt_ui_ux/#why-ux-is-not-only-the-responsibility-of-the-uxer-janne-jul-jensen-goto-2015","title":"Why UX is not only the Responsibility of the UX'er \u2022 Janne Jul Jensen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Tbu6G08n_Gw</p> <ul> <li>UX is about designing software that meets user needs and expectations</li> <li>Good UX can increase user satisfaction, reduce errors, and improve productivity</li> <li>Key principles of good UX design include simplicity, consistency, feedback, flexibility, and error prevention</li> <li>To evaluate the UX of a product, consider its usability, accessibility, desirability, and value</li> <li>Usability testing is an important part of evaluating UX, and can be done at any stage of development</li> <li>Remote usability testing is a cost-effective way to test UX with real users</li> <li>Legal terms and conditions can be presented in a less intrusive way that doesn't interfere with the user experience</li> <li>Developers who care about UX but are facing time pressure should try to raise awareness of the importance of UX among their colleagues and management</li> <li>If raising awareness is not effective, consider looking for a job at a company that values good UX design.</li> </ul>"},{"location":"goto_dt_ui_ux/#adaptive-ui-sam-davies-goto-2015","title":"Adaptive UI \u2022 Sam Davies \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Z8QA9IYB67o</p> <ul> <li>Adaptive Layout is a way to create layouts that work on different screen sizes and orientations</li> <li>Auto Layout is a tool used to create Adaptive Layout</li> <li>Use the \"Vary for Traits\" button in Interface Builder to create size class overrides</li> <li>Start with a base layout and override for specific size classes</li> <li>Use stack views to make layout easier, they work well with adaptivity</li> <li>Tips for using Adaptive Layout:<ul> <li>Get to know Auto Layout</li> <li>Use Adaptive Layout for broad strokes layouts</li> <li>Always start with a base layout and override</li> <li>Life is easier with stack views</li> <li>Now is the time to get Adaptive</li> </ul> </li> <li>Questions:<ul> <li>How do you deal with assignments that want everything pixel perfect?<ul> <li>It's a challenge, but it's important to educate designers that pixel perfect designs are not always possible or practical for multiple screen sizes and orientations. Content is the most important thing, and the layout should be designed to best present that content in different situations.</li> </ul> </li> </ul> </li> </ul>"},{"location":"goto_dt_ui_ux/#designing-the-right-product-michele-ide-smith-goto-2014","title":"Designing the Right Product \u2022 Michele Ide-Smith \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=ZuDD5s_EOeQ</p> <ul> <li>Designing digital products</li> <li>Lean UX approach</li> <li>Treat requirements as assumptions</li> <li>Get out of the building - conduct user research</li> <li>Build a shared understanding within the team</li> <li>Rapid cycles - learn and validate quickly</li> <li>Efficiency vs. effectiveness</li> </ul> <p>Lean UX Approach</p> <ul> <li>Based on Lean Startup principles</li> <li>Validate ideas before investing in development</li> <li>Involve the whole team in the user experience design process</li> <li>Make data-driven decisions</li> </ul> <p>Treat Requirements as Assumptions</p> <ul> <li>Test assumptions with real users</li> <li>Use rapid cycles to learn and validate quickly</li> <li>Don't get attached to your ideas, be willing to pivot based on feedback</li> </ul> <p>Get Out of the Building - Conduct User Research</p> <ul> <li>Observe users in their natural environment</li> <li>Interview users to understand their needs and pain points</li> <li>Use usability testing, A/B testing, click tests, and analytics to validate designs</li> </ul> <p>Build a Shared Understanding Within the Team</p> <ul> <li>Everyone on the team should have a deep understanding of the user's needs and pain points</li> <li>Encourage collaboration and open communication</li> <li>Make sure everyone is aligned on the goals and objectives of the product</li> </ul> <p>Rapid Cycles - Learn and Validate Quickly</p> <ul> <li>Go through multiple iterations to refine the product</li> <li>Use rapid cycles to learn and validate quickly</li> <li>Don't get attached to your ideas, be willing to pivot based on feedback</li> </ul> <p>Efficiency vs. Effectiveness</p> <ul> <li>Efficiency is about doing things right</li> <li>Effectiveness is about doing the right thing</li> <li>Focus on creating a product that solves real user problems and meets their needs</li> </ul> <p>Additional Tips</p> <ul> <li>Don't get lazy - continue to conduct user research throughout the development process</li> <li>Get the whole team to own the user experience of the product</li> <li>Don't compromise quality - create a minimum viable product (MVP) that is high-quality and meets user needs.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-for-mobile-chris-atherton-goto-2014","title":"UX for Mobile \u2022 Chris Atherton \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=R5ByPrFldN8</p> <ul> <li>Attention is a limited resource</li> <li>We can only attend to a small portion of our visual field at once, and we tend to focus on the center of our vision</li> <li>The order in which information is presented affects how we perceive it</li> <li>Context matters - people need help remembering where they are and what they're doing, especially if there are big changes to the interface</li> <li>Mobile first design can be beneficial even for non-mobile applications because it forces designers to focus on what's truly important</li> <li>Toggle buttons can be confusing because it's unclear whether they show an action or a state</li> <li>Using cheap attentional tricks like making something flash or blink can help draw people's attention to where you want it to go</li> <li>There may be some things that are too complex to be shown on a small screen, but breaking down complex tasks into smaller screens can help</li> <li>Sound and touch follow similar attentional rules as vision, but smell is less filtered and can remind us of past experiences.</li> </ul>"},{"location":"goto_dt_ui_ux/#mixing-lean-ux-agile-development-courtney-hemphill-goto-2014","title":"Mixing Lean UX &amp; Agile Development \u2022 Courtney Hemphill \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NoVTpeY3vOg</p> <ul> <li>Agile development process</li> <li>Two-week sprints</li> <li>Standups every morning to discuss what was done the previous day and what will be worked on that day</li> <li>Planning poker to estimate story points for each task</li> <li>Stories are broken down into tasks, which are then assigned point values based on complexity and effort required</li> <li>Velocity is calculated by adding up the total points of completed stories in a sprint</li> <li>Retrospectives are held at the end of each sprint to discuss what went well and what could be improved</li> <li>Code reviews are done before code is merged into the main branch</li> <li>QA testing is done throughout the sprint, not just at the end</li> <li>Design and user experience are considered from the beginning of the project</li> <li>Collaboration between developers, designers, and product managers is encouraged</li> <li>Weekly check-ins with clients to ensure alignment with their goals and expectations</li> <li>Flexibility to adjust the plan as needed based on new information or changes in priorities</li> <li>Focus on delivering value to the end user</li> <li>Education process for clients to help them understand what features will provide the most value for the product</li> <li>Velocity is used to estimate when features will be completed</li> <li>Refactoring and bug fixing are done throughout the project, not just at the end</li> <li>Standups, planning poker, retrospectives, and check-ins with clients are all important aspects of the agile development process.</li> <li>Stories are broken down into tasks and assigned point values based on complexity and effort required.</li> <li>Velocity is calculated by adding up the total points of completed stories in a sprint.</li> <li>Retrospectives are held at the end of each sprint to discuss what went well and what could be improved.</li> <li>Code reviews, QA testing, and collaboration between developers, designers, and product managers are all important for delivering high-quality products.</li> <li>Weekly check-ins with clients ensure alignment with their goals and expectations.</li> <li>Flexibility to adjust the plan as needed based on new information or changes in priorities is crucial.</li> <li>Focus on delivering value to the end user.</li> <li>Education process for clients to help them understand what features will provide the most value for the product.</li> <li>Velocity is used to estimate when features will be completed.</li> <li>Refactoring and bug fixing are done throughout the project, not just at the end.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-in-an-agile-process-janne-jul-jensen-goto-2014","title":"UX in an Agile Process \u2022 Janne Jul Jensen \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NdqtTlCi4cE</p> <ul> <li>Danske Bank's mobile app development process was not a textbook one</li> <li>The initial goal of the project was to create an iPhone and Android app for basic banking services, such as transfers between own accounts, transfers within the bank, transfers to other banks, and payments</li> <li>The team consisted of 7-8 people and the development period was from May to September</li> <li>Danske Bank already had a backend infrastructure in place which helped speed up the development process</li> <li>The app was developed using an agile approach with two week sprints</li> <li>The team used a middleware development to piggyback on the bank's existing backend infrastructure</li> <li>In addition to internal testing, the team also did user testing once the NDA expired</li> <li>The team tested the app on multiple devices and operating systems using Less Painful, a spin-off company that created a test procedure for hooking in multiple phones and running test scenarios</li> <li>Users' expectations have changed over the years and they have become increasingly demanding as they see more and more apps and move more of their digital world onto mobile phones</li> <li>Danske Bank now has more users on their app than they do on their mobile website</li> <li>The app has been successful in Denmark with 5.5 million people, 1.5 million of whom have downloaded the app</li> <li>The app has also been successful in other countries such as Sweden, Norway, Finland, Ireland and England</li> <li>The app has received positive press and high ratings on both iPhone and Android platforms</li> <li>The original team that developed the app consisted of developers, UX, and graphic designers who all tested the app continuously using standardized test cases</li> <li>Danske Bank now has 50 internal testers who test the app on an ongoing basis.</li> </ul>"},{"location":"goto_dt_ui_ux/#user-interface-ux-techniques-janne-jul-jensen-goto-2012","title":"User Interface (UX) Techniques \u2022 Janne Jul Jensen \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=7OSkB4BCx00</p> <ul> <li>The speaker is discussing user-centered design methods.</li> <li>User-centered design is about understanding the user and their needs, and designing with those in mind.</li> <li>It's important to involve users in the design process as early as possible.</li> <li>One method for doing this is through paper prototyping tests, where you create a rough version of your design on paper and test it with users.</li> <li>This allows you to get feedback on your design before investing too much time and resources into it.</li> <li>Another method is through use cases and user stories, which help you understand how users will interact with your system.</li> <li>It's important to involve stakeholders in the design process as well, to ensure that their needs are also being met.</li> <li>One way to do this is by creating a sitemap or workflow of what you want on your website or app, and getting input from stakeholders on what should be included.</li> <li>The speaker emphasizes the importance of testing early and often in the design process.</li> <li>They also mention that it's important to involve users and stakeholders in the design process as much as possible.</li> <li>The speaker encourages using a variety of user-centered design methods, including paper prototyping tests, use cases and user stories, and sitemaps or workflows.</li> <li>They also suggest looking at competitors and related fields for inspiration.</li> <li>It's important to remember that the goal is not necessarily to come up with something completely new, but to create something that works well for your users and stakeholders.</li> </ul> <p>No context:</p> <ul> <li>User-centered design methods are discussed.</li> <li>Involving users and stakeholders in the design process is emphasized.</li> <li>Testing early and often is encouraged.</li> <li>A variety of user-centered design methods are suggested, including paper prototyping tests, use cases and user stories, and sitemaps or workflows.</li> <li>Competitors and related fields can be a source of inspiration for design ideas.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-design-linda-rising-goto-2012","title":"How to Design \u2022 Linda Rising \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=tbemtSmVoBY</p> <p>Here are the notes from the video transcript in bullet point form, written as if I am a student attending the conference:</p> <ul> <li>The speaker has a lot of experience in the field and has worked in various roles such as industry, academia, and research.</li> <li>They have always struggled with making difficult topics easy to understand for students who don't have any industrial experience.</li> <li>Their main interest is in design, which was also their PhD research topic.</li> <li>The speaker shares a scenario about teaching a difficult design concept in their data structures class.</li> <li>A student named Chris comes to the speaker's office to show them his code for a program he has been working on.</li> <li>The speaker admits that they can't guess what the code does and asks Chris to explain it to them.</li> <li>Chris struggles to explain the code, so the speaker uses an analogy of a younger sister named Stephanie who is learning how to program.</li> <li>They ask Chris if he thinks Stephanie could read and understand his code, implying that it's too difficult for someone without much experience.</li> <li>The speaker then asks Chris to imagine a scenario where both he and Stephanie work at the same company in the future, and she is asked to maintain this complex code.</li> <li>They emphasize the importance of writing code that can be understood by others, including oneself in the future.</li> <li>The speaker suggests that when writing code, one should write it as if a smart programmer will look at it and appreciate its elegance and beauty.</li> <li>They challenge Chris to rewrite his code in a beautiful way, like a song that sings.</li> <li>The speaker implies that they might start grading on the beauty of code.</li> <li>Chris gets the point and leaves to make the world a better place.</li> </ul> <p>Overall, the speaker emphasizes the importance of making complex concepts accessible to students with no industrial experience, using design as an example. They also stress the significance of writing clear, elegant, and beautiful code that can be understood by others. The use of analogies and scenarios helps make their point more relatable and engaging for the audience.</p>"},{"location":"goto_dt_ui_ux/#multi-touch-ui-a-touchy-subject-alan-boykiw-goto-2012","title":"Multi-touch UI: A Touchy Subject \u2022 Alan Boykiw \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=mEXudZ3bH_k</p> <ul> <li>Anoto's technology is based on digital pens and paper</li> <li>The company has been around for 15 years, started as a spin-off from Ericsson</li> <li>Anoto's technology uses microdots to track the position of the pen on the paper</li> <li>The dots are printed in a pattern that covers the entire surface of the paper</li> <li>The pens have a small camera that reads the pattern and sends the data to a computer or mobile device via Bluetooth</li> <li>The company has sold over 20 million pens and has partnerships with major companies such as Nike, Adidas, and Hallmark</li> <li>Anoto's technology is used in various industries such as healthcare, education, and retail</li> <li>The company is currently working on new products and exploring new markets</li> <li>One of the challenges for Anoto is the emergence of capacitive touch technology which is becoming cheaper</li> <li>Another challenge is the ergonomic issues with off-screen gestures, as they are not natural or intuitive</li> <li>Anoto's new product is a multi-user interactive whiteboard that uses object recognition to track multiple pens at once</li> <li>The whiteboard can recognize different objects such as pens, erasers and fingers</li> <li>It has a 60 inch screen and can be used for collaboration, brainstorming and presentations</li> <li>Anoto's technology is also being used in the disability space, allowing people with disabilities to write using their elbows or other body parts</li> <li>The company is not actively working on standardizing gestures but sees the value in it.</li> </ul>"},{"location":"goto_programming_lang/","title":"Goto programming lang","text":""},{"location":"goto_programming_lang/#composing-all-the-things-with-kotlin-multiplatform-garth-gilmour-goto-2023","title":"Composing All The Things with Kotlin Multiplatform \u2022 Garth Gilmour \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iq2tTtG3zs4</p> <ol> <li>SC Gilmore, a developer advocate at JetBrains, discusses Compose Multiplatform.</li> <li>A framework for creating awesome user interfaces across multiple platforms, built on Kotlin Multiplatform and powered by Google's Jetpack Compose.</li> <li>Supports sharing code across different platforms, simplifying cross-platform projects.</li> <li>iOS support is in Alpha stage with an example using the ImageViewer application.</li> <li>Demos showcasing Compose Multiplatform usage for various tasks.</li> <li>Cotland Multiplatform: A framework with multiple compilers for different platforms.</li> <li>Composed Multiplatform: Built on top of Cotland, allows sharing code across platforms.</li> <li>Ecosystem of libraries for various tasks.</li> <li>Creating UI in Compose using a declarative approach with composable functions.</li> <li>Demos showcasing basic button counter, performance optimization, text input, and microservice integration.</li> <li>Composable functions allow efficient UI rendering by avoiding unnecessary recomposition.</li> <li>View models separate state and event handlers from the UI.</li> <li>State can be derived in composable functions using other states.</li> <li>Private observable state can be modified within event handlers.</li> <li>Composable UI can be used on Android, iOS, and desktop with minimal changes.</li> <li>Multiplatform libraries handle networking, marshalling, and concurrency.</li> <li>Co-routines manage jobs of work and cancel them when needed.</li> <li>State management is done using a single state object for the UI.</li> <li>Compos offers incremental learning, supports multiple platforms, and leverages Kotlin ecosystem.</li> <li>Allows developers to choose their approach based on specific needs.</li> <li>Offers concurrency via co-routines, making it easier to handle user interface events.</li> <li>State management is done using a single state object for the UI.</li> </ol>"},{"location":"goto_programming_lang/#the-reflex-architecture-ben-kolera-yow-2019","title":"The Reflex Architecture \u2022 Ben Kolera \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5ACqm2ee-XI</p> <ul> <li>Reflex is an FP library with Dom framework, Platform, and Obelis.</li> <li>Functional Programming (FP) focuses on dynamic values based on events.</li> <li>Dynamic values change over time in response to events.</li> <li>Reducer functions handle event and state for new states.</li> <li>Reflex uses fold D to manage dynamic values.</li> <li>Event Rider is an analog of dispatchers, allowing reusable widgets.</li> <li>Widgets are components with specific constraints, building DOM elements and emitting events.</li> <li>Reflex centralizes state and simplifies UI development.</li> <li>Monad Reader adds time-varying values to context for complex UI behavior.</li> <li>Reflex focuses on composable and reusable widgets without a magic store like Redux or Relay.</li> <li>Conduit app demonstrates real-world usage of Reflex.</li> <li>A functioning Nyx Obelisk environment is required for the workshop.</li> <li>Virtual Box setup instructions are provided in the program.</li> </ul>"},{"location":"goto_programming_lang/#scodec-for-scala-3-michael-pilquist-yow-2020","title":"Scodec for Scala 3 \u2022 Michael Pilquist \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=Uo9S4iKw8NA</p> <ol> <li>Sodc is a library for binary processing.</li> <li>Scala 3 macro system revamp: less powerful but more stable.</li> <li>Macro implementation example: hex string literal interpolation.</li> <li>Inline keyword in Scala 3: code gets inlined at call site.</li> <li>Extension method syntax used to support hex followed by a string.</li> <li>Compile time validation via unlift operation.</li> <li>Sodc library transition from Scala 2 to Scala 3 focuses on source and binary compatibility, simplifying established libraries.</li> <li>Introducing the Scy 2 macro system and its impact on library authors.</li> <li>Using Scala 3's inline keyword for compile time execution.</li> <li>Implementing a hex string literal support using custom numeric literals.</li> <li>Sodec at core project: building codecs with simple algebra and combinators.</li> <li>Comparison of three methods to generate nested tuples in Sodec for Scala 2.</li> <li>Using heterogeneous lists from Shapeless directly in the API of the library.</li> <li>Scola 3 introduces new ways to handle codecs and tuples.</li> <li>Tuple arity can be abstracted, allowing generic code that preserves tuple size.</li> <li>Cons operator is right associative in Scala 3.</li> <li>Two generic operations are needed: one for consing a codec of A onto B (Tuple) and another for consing any two arbitrary codics.</li> <li>Extension methods are used to implement these operations, ensuring they're always in implicit scope.</li> <li>Implementation of codic operations in Scola 3 using extension methods.</li> <li>Extension methods for consing two arbitrary types A and B, ensuring right associativity.</li> <li>Simple extensions not used due to issues with eraser and implicit scope.</li> <li>Drop units operation removes unit values from a codec, returning a smaller tupal or the same tupal if no units were present.</li> <li>Match type feature in Scola 3 allows defining type functions at the type level.</li> <li>Implementation: Recursive pattern matching on Tuple structure, removing unit values from the head or tail.</li> <li>Inline definitions: Used to perform these operations at compilation time.</li> <li>Converting codecs: Mapping between Tuple and case class structures using Scala 3's syntax and implicit functions.</li> <li>Compile-time meta programming: Using Scholar.deriving package for reflection and generic programming against product and sum types.</li> <li>Scala 3's type class derivation allows generating coherent codec instances.</li> <li>Derives keyword can be used to derive a single canonical instance for a given type class.</li> <li>Implement derived method in the companion object of the target type class.</li> <li>Require compiler to give a mirror of whatever is being derived.</li> <li>Three abstract methods need implementation: encode, decode, and codecError.</li> <li>Use Scala 3's new syntax for enumerations and adts.</li> <li>Introducing a codec for enumerations in Scala 3.</li> <li>Deriving a codec for ADTs with arbitrary complexity.</li> <li>SizeBound method implementation: Product case - Sum the binary sizes of each element type; Sum case - Use an unsigned 8bit integer to select the Su type member and encode it, followed by the encoded data.</li> <li>Scola 3 compatibility with Scala 2 libraries (no macros).</li> <li>Cats Effect 3 and FS2 support for Dy.</li> <li>Simplified implementation and use of Scala 3.</li> <li>Easier maintenance, less dependencies, and better readability compared to previous approaches.</li> <li>Improving compatibility between Scala 2 and Scala 3.</li> <li>Bidirectional cross-compatibility with no macro usage in Scala 2.</li> <li>Open source ecosystem porting libraries for Scala 3.</li> <li>Encouragement to try Scala 3 and seek help from the community.</li> </ol>"},{"location":"goto_programming_lang/#jakarta-ee-10-modern-lightweight-cloud-application-development-ivar-grimstad-goto-2023","title":"Jakarta EE 10: Modern &amp; Lightweight Cloud Application Development \u2022 Ivar Grimstad \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2749IF7gAbI</p> <ol> <li>Jakar E10 is a comprehensive platform with various specifications and APIs.</li> <li>New core profile targets microservices or headless services, similar to the web profile for traditional web applications.</li> <li>Security updates include standardized OpenID Connect support in Jakar applications.</li> <li>Persistence minor update adds UIDs as basic Java types, simplifying usage.</li> <li>Jakar Restful API 3.1 allows Java SE bootstrapping without an application server.</li> <li>Demonstration of a Jakarta application using S bootstrap for simple web services.</li> <li>Core profile aims to improve runtime performance and compatibility with smaller runtimes.</li> <li>CDI light is designed for restricted environments, resolving dynamic features at build time.</li> <li>Migration from Java EE to Jakarta: Transformation tools can automatically update code without touching it.</li> <li>Demo application showcases a complete Duke application with database, repository, business service layer, and REST API using JSON binding.</li> <li>Upgrade to Jakarta EE by using migration tools like Apache TomEE and Eclipse Transformer.</li> <li>Fix Imports, XML schema namespaces, and property files with changes from Java X to Jakarta.</li> <li>Check for any other Java X dependencies and update them accordingly.</li> <li>Ensure proper bootstrapping files are renamed if needed (e.g., Java X Enterprise Inject SBI extension).</li> <li>Test the updated application and fix any issues that arise.</li> <li>Update XML configurations to persistent XML.</li> <li>Change properties files for Java X to Jakarta.</li> <li>Check for CDI extensions and rename bootstrapping files.</li> <li>Verify dynamic data in applications and update if needed.</li> <li>Upgrade application versions by changing version numbers and fixing compilation errors.</li> <li>Use a trick to make JSON binding work with records.</li> <li>In 10, the issue with getters and setters is fixed, so no coding changes are required for this specific case.</li> <li>Demonstrated a system where a B XML file is required for CDI activation in Spring.</li> <li>Showcased a simple Spring application with dependencies and validation.</li> <li>Upgraded the application to Spring 3, resulting in compilation issues due to missing symbols.</li> <li>Updated the JPA persistence API and Jakar validation versions to fix the issue.</li> <li>Compiled the Spring Boot application successfully after dependency version updates.</li> <li>Upgrade to newer versions of dependencies and frameworks for better compatibility.</li> <li>Use Eclipse Transformer to update libraries with new Jakarta namespace.</li> <li>Publish updated libraries in Maven repository for use in projects.</li> <li>Follow a two-year release cadence for Jakarta, with Java SE LTS version as the base.</li> <li>Discussions on MVC and NoSQL integration are ongoing; contribute if interested.</li> <li>RPC is not likely to be included in Jakarta.</li> <li>Oracle contributes code to RPC project but needs more contributors to move forward.</li> <li>Hope for Jakarta Data, even without NoSQL, to provide data management capabilities.</li> <li>Jakarta release cadence: 6 months after Java SE LTS version</li> <li>Jakarta 11 based on Java 17 or 21 (depending on APIs)</li> <li>Jakarta 11 runtime will be Java SE 21</li> <li>MVC and NoSQL for discussion, but not confirmed for inclusion in Jakarta EE</li> <li>Jakarta RPC not included, join the project if interested</li> <li>Jakarta Data hoped to be included, input needed on repository pattern vs active record</li> <li>Jakarta 9 focused on namespace, 10 added new specifications and bridged 11 and 17</li> <li>Resources: Jakarta website, starter, LinkedIn course (with QR code)</li> </ol>"},{"location":"goto_programming_lang/#concurrency-abstractions-for-application-security-bram-verburg-goto-2023","title":"Concurrency Abstractions for Application Security \u2022 Bram Verburg \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=snCylAGgcxw</p> <ul> <li>Memory management evolution: From explicit allocation to automatic memory management with garbage collection.</li> <li>Concurrency: Dealing with parallelism and asynchronous interactions within an application.</li> <li>Automatic concurrency management: Pushing responsibilities into the runtime, providing abstractions for developers.</li> <li>Language impact: Functional programming languages often have immutable data structures and pattern matching for message handling.</li> <li>Runtime support: Green threads, schedulers, isolated processes with no shared state.</li> <li>Automatic concurrency management aims to simplify development by providing abstractions and runtime support.</li> <li>Immutable data, isolated processes, and resilience can lead to better security through integrity, confidentiality, and availability.</li> <li>The actor model with lightweight green threads helps ensure integrity by making state changes explicit and transactional.</li> <li>Confidentiality is improved by shortlived processes with dedicated scopes that limit access to relevant data.</li> <li>Resilience provides fault tolerance by allowing for process monitoring and recovery from failures.</li> <li>Clarity: Focus on the happy path and avoid handling errors that shouldn't occur.</li> <li>Simplicity: Keep code simple to minimize risk of bugs and make it easier for future developers.</li> <li>Functional programming: Consider using pure functions for testing purposes as they are easy to test due to their predictable behavior.</li> <li>Separate runtime or language for full benefits of concurrency abstractions.</li> <li>Airong (Elixir, Erlang) has actor model, lightweight threads, non-blocking IO, and OTP principles.</li> <li>Security features like isolation, access controls, code signing, static typing can be improved.</li> <li>Other languages like Go have some of the features but not all.</li> <li>Discusses the need for better security, integrity, and isolation in applications.</li> <li>Mentions various languages and frameworks that address some of these issues but lack complete solutions.</li> <li>Encourages awareness and collaboration among developers to improve concurrency and security.</li> </ul>"},{"location":"goto_programming_lang/#genetic-algorithms-in-elixir-sean-moriarity-bruce-tate-goto-2023","title":"Genetic Algorithms in Elixir \u2022 Sean Moriarity &amp; Bruce Tate \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vS1_Z4xaeqQ</p> <ol> <li>Bruce Tate interviews Sean Moriarity, creator of Axon and co-creator of Nx projects.</li> <li>Axon focuses on machine learning in Elixir with competitive performance to Python ecosystem.</li> <li>Nx (Numerical Elixir) is the foundation for the Elixir machine learning ecosystem, providing numerical routines and automatic differentiation.</li> <li>Defn allows for numerical functions in Elixir, similar to JAX's just-in-time compilation behavior.</li> <li>Axon is an Elixir library for creating and training neural networks, inspired by Keras, TensorFlow, and PyTorch.</li> <li>The Elixir ecosystem benefits from the slow and careful approach of building these libraries on top of functional programming languages.</li> <li>Nx and Axon aim to make machine learning more accessible and maintainable while leveraging the strengths of their underlying language.</li> <li>Nx Serving provides an efficient serving abstraction that supports distribution, fault tolerance, and good concurrency.</li> <li>The combination of Elixir's strengths with machine learning capabilities creates exciting opportunities in the ecosystem.</li> <li>Bumblebee library interoperates with Python ecosystem, allowing use of pre-trained models in Elixir applications.</li> <li>ONNX support enables running ONNX models with Nx abstractions.</li> <li>Low code requirements make machine learning accessible to non-experts.</li> <li>Elixir's concurrency and robustness make it potentially better for machine learning than other languages.</li> <li>Elixir ecosystem lacks machine learning experience, but Bumblebee provides easy access.</li> <li>Abstractions in the Elixir ecosystem are good for building robust and concurrent applications.</li> <li>Immutability helps with reasoning about complex data pipelines.</li> <li>Nx's JIT compilation overcomes immutability issues.</li> <li>Initial challenges included GPU compilation, autograd implementation, and numerical correctness issues.</li> <li>Elixir's versatility makes it ideal for machine learning startups as it handles the entire pipeline from application development to model training and deployment.</li> <li>A new book, \"Machine Learning in Elixir,\" teaches the fundamentals of the ML ecosystem in Elixir. The speaker encourages listeners to check out the book and report any issues found during beta testing.</li> </ol>"},{"location":"goto_programming_lang/#problem-solving-with-erlang-the-beam-robert-virding-francesco-cesarini-goto-2023","title":"Problem Solving with Erlang &amp; the BEAM \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=I7A5Y5wHDHI</p> <ol> <li>Erlang, a programming language and ecosystem, was developed for telecom applications.</li> <li>Ericsson used Erlang in their products starting from 1994.</li> <li>The language became open-source in 1998, leading to more companies using it.</li> <li>Bluetail was the first company outside of Ericsson to use Erlang in a product.</li> <li>Erlang's success is attributed to its ability to adapt and evolve with new technologies.</li> <li>Mnesia, an early distributed database, provided key-value storage and fault tolerance but lacked strong consistency for transactional use cases.</li> <li>The Erlang ecosystem has spread across various industries such as telecom, banking, and web servers.</li> <li>Elixir emerged as a significant addition to the ecosystem, bringing new tools and frameworks for web development.</li> <li>Nerves is making embedded systems more accessible in production.</li> <li>Phoenix framework is similar to Ruby on Rails but focused on web development.</li> <li>Jose Valim aims to bring Erlang's power to a wide range of communities through Elixir and Phoenix.</li> <li>Nerves is making progress in production and real-world use cases for embedded systems.</li> <li>More languages are expected to emerge in the ecosystem, with statically typed languages gaining traction.</li> <li>The Erlang ecosystem's versatility allows new ideas to be built on top of it.</li> <li>Continuous evolution of the Erlang language, virtual machine (BEAM), and new features contribute to its longevity.</li> <li>Recent changes include the addition of a JIT compiler for performance gains.</li> <li>New languages and packages are being developed on top of existing systems.</li> <li>The system's focus on concurrency, parallelism, and ease of use is appreciated by users.</li> <li>Adaptation to change is necessary for continued growth and improvement.</li> </ol>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=wFlyUzUVFhw</p> <ol> <li>Different ways to obtain software: upstream binary distribution, system package manager (e.g., apt, yum), and obtaining from source code.</li> <li>Importance of the configure phase in building software from source.</li> <li>Understand available options and choices during configuration.</li> <li>Respecting the configure phase avoids issues while building software.</li> <li>Choose a prefix for installation within your home directory, maintain consistency across operating systems (if cross-platform), or cater to audience preferences on Windows.</li> <li>During build phase, use make with proper CPU usage and install without sudo if in home directory.</li> <li>Pick stable release versions when building from source.</li> <li>Avoid using Docker or virtual machines for basic tasks; follow normal processes and report issues clearly.</li> <li>Learn basics before attempting advanced techniques.</li> <li>Dependencies are crucial, either build them separately or use prebuilt packages.</li> <li>Troubleshooting tips: check dependencies, test on different OS/compilers, and fix caching issues.</li> <li>Use proper tools for your project's language (e.g., CMake for C++).</li> <li>New build system: Zig Build System - portable, easy installation with binary distribution, compiles C/C++ code without additional tools, uses clang for compilation, parallelism and efficient resource usage, solves caching problems with a hash-based system, improved M time granularity by checking file changes.</li> <li>The Zig build system is featured in the next release of Zig.</li> <li>Donations are encouraged for Zig Software Foundation, a non-profit organization.</li> </ol>"},{"location":"goto_programming_lang/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ol> <li>Low-level programming skills can be learned by anyone interested in them.</li> <li>Rust is suitable for embedded software development due to its type system, focus on compiler error messages, and well-designed libraries.</li> <li>Learning unfamiliar data structures and algorithms is essential for personal growth.</li> <li>Fashion is a form of communication that impacts how others perceive us; it can be seen as a language constantly evolving.</li> <li>Steve Jobs' fashion choices were deliberate, focusing on meaningful creative decisions in his work.</li> <li>Tech industry fashion can convey opinions about people without conscious awareness.</li> <li>BBC micro:bit is recommended for learning embedded systems.</li> <li>Rust has a cortex M runtime library and high-level APIs for easier development.</li> <li>Cargo embed tool helps build programs and upload code to devices.</li> <li>Low-level programming involves configuring GPIOs, using volatile instructions, and working with hardware.</li> <li>Embedded programming has different levels of abstraction, from high-level APIs to low-level details like pin concepts.</li> <li>Cross compiling is used for compiling code for various architectures.</li> <li>Flash memory and flashing are essential in embedded systems; consider memory usage.</li> <li>Serial ports are an older I/O interface found in various devices.</li> <li>Semi-hosting should be avoided due to timing issues.</li> <li>Pin concept: Memory location for performing actions on a device.</li> <li>Learn through projects, documentation, debugging errors, and successes.</li> <li>i2C protocol is used in embedded systems; master and slave communication via clock and data lines.</li> <li>Interrupts are asynchronous events in hardware, similar to callbacks in JavaScript.</li> <li>Debuggers play a crucial role in embedded development for examining system state while it's running.</li> <li>Embedded documentation is extensive but can have errors like any other documentation.</li> <li>Test-driven development (TDD) is less common in embedded programming, but tools like Rust's CI integration can help.</li> <li>Useful resources for learning embedded programming include The Embedded Rust book, Comprehensive Rust, and various rust books.</li> <li>Digikey and Mouser are popular websites for buying hardware and finding documentation.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-yow-2022","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A-f7md5exaE</p> <ol> <li>Francesco and Robert are founders of Ireland Solutions, focusing on language expertise.</li> <li>Concurrency-oriented programming (COP) was introduced by Joe Armstrong in 2002, emphasizing concurrent processes, data sharing, and communication through message passing.</li> <li>Erlang was developed to solve Telecom system problems with a focus on fault tolerance and scalability, using processes as its main building block.</li> <li>Beam VM enables fast process creation with minimal memory allocation.</li> <li>Elixir's process-based ecosystem decouples concurrency from the underlying operating system, similar to Erlang.</li> <li>Processes communicate via asynchronous message passing without guarantees on receiving messages.</li> <li>Failure detection in Airline uses two linked processes for crash detection and appropriate actions.</li> <li>The \"let it crash\" principle allows for a reliable system by detecting issues and handling them efficiently.</li> <li>Co-inventors of the first mobile phone systems focused on reliability, leading to human monitoring and redundancy in processes.</li> <li>Erlang's concurrency model based on no shared memory and message passing enables distribution, scalability, and reliability.</li> <li>Concurrency and parallelism are different concepts: concurrency is about doing things at the same time while parallelism is about executing tasks simultaneously.</li> <li>Erlang focuses on concurrency with no shared memory, making it suitable for distributed systems and scalability.</li> <li>JVM prioritizes speed and parallelism but can achieve concurrency through frameworks like Akka.</li> <li>WhatsApp used concurrency to reduce operational overhead and hardware costs by handling a large number of users simultaneously.</li> <li>Phoenix (Elixir) enabled 2 million socket connections in a stable way, showcasing the language's potential.</li> <li>Elixir's popularity is due to its concurrency features and ease of adoption for new communities.</li> <li>The goal is to solve problems related to running massive things simultaneously without crashing servers.</li> <li>Erlang's web server benchmarks outperformed Apache in 2001 but wasn't packaged as a standalone application.</li> <li>Web servers are examples of similar problems, handling massive connections without crashing.</li> <li>Elixir's syntax is inspired by Ruby for familiarity and reduced psychological barriers.</li> <li>Challenges in orchestration and distribution, containerization, and Kubernetes.</li> <li>Importance of considering concurrency from the start when designing languages.</li> <li>Airline philosophy on handling errors: let processes crash without affecting the whole system.</li> <li>Consistent error handling across programs for various scenarios.</li> <li>Focus on dealing with small chunks of the system, ensuring it keeps running and restarts when necessary.</li> <li>Letting a process crash is about managing software errors in a standardized way across programs.</li> <li>Handling machine crashes is difficult but having two machines can help create a fault-tolerant system.</li> </ol>"},{"location":"goto_programming_lang/#scala-implicits-revisited-martin-odersky-yow-2020","title":"Scala Implicits Revisited \u2022 Martin Odersky \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=dr0PUXQhg3M</p> <ol> <li>Implicits are a key feature in Scala, used in 98% of projects.</li> <li>Implicit conversions led to issues, and later, implicit parameters were introduced with limitations.</li> <li>Contextual implicit resolution caused problems, leading to coherence and locality rules for clarity.</li> <li>Scala 3 aims to improve implicit design decisions by focusing on term inference and introducing given instances (Givens).</li> <li>Givens are synthesized values for specific types, abstracting from how they're produced.</li> <li>Future improvements include better error messages, more explicitness, clearer rules, and support for Scala 3.0 with implicit conversions.</li> <li>Scala 3 introduces improvements in indentation, optional braces, cross-compilation, and uniform syntax.</li> <li>Tools like editors help maintain code reliability through meta properties of indentation.</li> <li>House Color 3 experience shows positive results, including shorter programs with better writing flow.</li> <li>No downsides found for refactoring or large settings.</li> </ol>"},{"location":"goto_programming_lang/#calling-functions-across-languages-richard-feldman-goto-2023","title":"Calling Functions Across Languages \u2022 Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ZOvxa9aKCCg</p> <ol> <li>Calling functions across languages can be achieved using different methods, such as HTTP requests and responses or direct communication between processes.</li> <li>Optimizing the process involves removing HTTP boilerplate, focusing on data transfer, and using localhost and binary encoding instead of JSON.</li> <li>Inter-process communication (IPC) like Unix sockets can further reduce overhead.</li> <li>The goal is to call a Ruby function from JavaScript within a single process with minimal overhead.</li> <li>To achieve this, opcode manipulation is used to combine JavaScript and Ruby in one process by jumping between their instructions.</li> <li>This approach has risks like type mismatches due to lack of type information.</li> <li>C can be used as an intermediate representation between JavaScript and Ruby via Node.js for direct function calling.</li> <li>Ruby linear algebra can be imported into Node.js without inter-process communication or network overhead.</li> <li>CFFI (C Foreign Function Interface) is a tool that can be used in other languages like Python to call functions across different languages.</li> <li>Overhead occurs due to conversions between different number representations, and a Gnome2js library could eliminate the need for C intermediary.</li> <li>Type checking can be challenging with C bindings as they don't support type definitions; Rust has Russ bindgen for this purpose.</li> <li>The programming language Rock aims to make it easy to embed in other languages, focusing on being nice to call from them.</li> <li>Rock Glue generates Rust types and bindings from Rock code, making it easy to call Rock functions from Rust.</li> <li>This approach can be applied to other languages like Node.js for interoperability.</li> <li>The goal is to provide a consistent user experience regardless of the target language.</li> <li>Each approach has trade-offs: network communication offers distribution across multiple machines, while same process ensures minimal overhead and stateful runtime guarantees.</li> <li>Language server protocol uses inter-process communication for editor extensions without affecting the entire editor.</li> <li>WebAssembly provides more control over memory management but doesn't automatically protect against segmentation faults or memory corruption.</li> </ol>"},{"location":"goto_programming_lang/#effective-programming-in-ocaml-kc-sivaramakrishnan-yow-2021","title":"Effective Programming in OCaml \u2022 KC Sivaramakrishnan \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=X28PFYvZ_V8</p> <ol> <li>Multicolor Camel is a project that adds native support for concurrency and parallelism to OCaml through effect handlers and domains.</li> <li>Effect handlers provide composability, well-behaved libraries, and first-class restartable exceptions using exception handling syntax.</li> <li>The language extension implements lightweight threading with fork and yield effects, managed by a scheduler.</li> <li>Effects are hidden behind signatures, making it look like sequential code for users.</li> <li>Multicolor Camel demonstrates handling continuations and concurrency in a language, including generators for non-continuous traversals.</li> <li>The project maintains backwards compatibility while transforming synchronous code into asynchronous using FX (effects) for handling IO operations.</li> <li>It introduces defensive programming for exceptional behavior, making synchronous code asynchronous with a scheduler queue and discontinue primitive.</li> <li>Performance overhead measurements include stack switching, generators, and web server implementation with effect handlers.</li> <li>OCaml Multi-Core is an open source project that allows users to install and use the techniques discussed.</li> <li>The approach based on effect handlers is comparable in performance to Go and LWT, without relying on monads or sacrificing program pausing capabilities.</li> </ol>"},{"location":"goto_programming_lang/#hashing-modulo-alpha-equivalence-simon-peyton-jones-yow-2021","title":"Hashing Modulo Alpha Equivalence \u2022 Simon Peyton Jones \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=PltixgJiRrw</p> <ul> <li>The problem is finding equivalent sub-expressions in a program and making small rewrites.</li> <li>Hashconzing can be used for incremental analysis but doesn't work well with lambdas due to false positives and negatives.</li> <li>Using Divine notation removes names from lambdas, but introduces new issues: overheads in the compiler and both false positives and negatives.</li> <li>The speaker didn't find a perfect solution for this problem during their talk.</li> <li>Dubai notation has issues with false positives and negatives.</li> <li>E-summary is a solution to find Alpha equivalent subexpressions.</li> <li>E-summary consists of structure and free variable map.</li> <li>Hash codes are extracted from e-summaries for efficient comparison.</li> <li>Collisions can occur, but should be infrequent.</li> <li>The approach focuses on Isamu first, then extracts hash codes and uses a table to save nodes with the same hash code.</li> <li>Introducing e-summaries: A pair of a structure and a free variable map.</li> <li>Structure: Describes the shape of an expression without mentioning identities or locations of variables.</li> <li>Variable Map: Maps variables to their positions in the structure.</li> <li>E-summary for single variable: Structure is svar, variable map maps variable to P here.</li> <li>Lambdas: Recursively call summarize and extract structure and variable map from summary.</li> <li>Application nodes: Use e-summaries of children expressions to create e-summary of application node.</li> <li>No two position trees point to the same location.</li> <li>E7 concept: Structure and free verbal map.</li> <li>S-dam container (Repository) vs. Pository.</li> <li>Summarize function: Takes an expression, delivers e-summary.</li> <li>Hash summaries: Replace structures with structure hashes, positives with pository hashes for more efficient reconstruction.</li> <li>Handling shadowing in e-summaries: No issues as they're anonymous and don't have names.</li> <li>Next step: Discussing app nodes.</li> <li>E summaries deal with shadowing by treating them as anonymous variables.</li> <li>Hash summaries use structure hashes and pository hashes for more efficient reconstruction.</li> <li>App nodes require attention to every element of both VAR Maps, leading to O(n^2) work in unbalanced trees.</li> <li>Solution: Only adjust items in smaller map, recording depth and bigger map flag in structures.</li> <li>This approach allows efficient rebuilding while maintaining perfect inversion.</li> <li>Discussed the process of combining and splitting variable maps in a tree structure.</li> <li>The complexity is O(n log n) due to work done on smaller trees.</li> <li>Considered using hashes for variable maps, but deleting elements from them was problematic.</li> <li>Introduced exclusive or (XOR) as a solution: hash of a variable map is the XOR of its key value pairs' hashes.</li> <li>Deletion can be achieved by XORing the hash of the deleted element with the available map hash.</li> <li>Synthetic benchmarks and real-world tests show that the proposed method outperforms other correct algorithms.</li> <li>Synthetic test cases show balanced and unbalanced expressions.</li> <li>Green circles algorithm is the best, with faster performance than locally nameless.</li> <li>Locally nameless is correct but has worse complexity.</li> <li>The speaker found it surprising that there was a gap in literature regarding this issue.</li> <li>Algorithm is simple yet efficient, requiring mathematical and formal reasoning for improvements.</li> </ul>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023_1","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vKKTMBoxpS8</p> <ol> <li>Obtain software through various methods: upstream binary distribution, system package manager (e.g., apt, yum), and source code compilation.</li> <li>Understand the importance of the configure phase in building software from source.</li> <li>Focus on using a custom prefix during configuration to simplify uninstallation and avoid conflicts with other software.</li> <li>For Windows, consider catering to its specific needs while maintaining consistency across platforms.</li> <li>When building from source, use release versions and stick to the system toolchain.</li> <li>Avoid using Docker or virtual machines unless necessary; focus on learning how to build from source.</li> <li>Don't modify header files or perform weird workarounds during the build process.</li> <li>Learn the basics before attempting advanced techniques.</li> <li>Dependencies are crucial for building software from source, so ensure they're installed correctly.</li> <li>Troubleshooting tips: check dependencies, test on different OS/compilers, and fix broken caching issues.</li> <li>Use alternative build systems like Ninja instead of Make to avoid caching problems.</li> <li>Introduce the Zig Build System for efficient and portable compilation.</li> <li>Parallelism is achieved by constructing a build graph in the script.</li> <li>Implement a cache system for better resource usage and avoiding false positives.</li> <li>Create a package manager with manifest files for dependency management.</li> <li>Rebuild Groove Basin music player using Zig.</li> <li>The Zig build system is easy to use, allowing contributors to run it without complex instructions.</li> <li>Support the non-profit Zig Software Foundation through donations.</li> </ol>"},{"location":"goto_programming_lang/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ol> <li>Flix is a functional programming language with effect systems, which help in understanding programs better and enable optimizations.</li> <li>Type and effect systems characterize values and computational effects respectively.</li> <li>Effect systems allow capturing purity or impurity of functions through effect polymorphism.</li> <li>Libraries can benefit from effect systems by enabling parallel execution without race conditions or deadlocks.</li> <li>Flix forces equals and hash functions to be pure for trustworthy implementations.</li> <li>Region-based memory management allows pure functions to use mutable data structures temporarily within a lexical block.</li> <li>Iterators are efficient ways to iterate through collections, with terminal and non-terminal operations managing suspended effects.</li> <li>Effect systems clarify how code works by managing suspended effects and mutable memory for iterators.</li> <li>Pure functions in languages with type and effect systems are easier to understand and optimize for parallelism.</li> <li>Library authors can use reflection on function purity to enable parallel evaluation safely when needed.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-goto-2023","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=AvA97AB8cAA</p> <ol> <li>Francesco and Robert, co-inventors of Erlang, discussed their experiences in building a programming language for telecom applications with concurrency, fault tolerance, and upgradability while running.</li> <li>They demonstrated the concept using an electric train simulation at a conference, focusing on concurrency and processes.</li> <li>Key ideas behind Erlang include concepts like concurrent systems, data isolation, and asynchronous communication.</li> <li>Processes in Erlang are lightweight and efficient, allowing millions to interact simultaneously. When a process ends normally or crashes, the memory is freed immediately.</li> <li>Communication between processes happens through messages with PIDs (process identifiers).</li> <li>Asynchronous communication can lead to lost messages, so acknowledgments are used for confirmation. Failure detection is achieved by monitoring processes and linking them together.</li> <li>Early mobile telephony systems had manual error handling, but Erlang's approach allows processes to monitor and link to each other, sending exit signals when a linked process crashes.</li> <li>Trap exits enable processes to handle errors in a custom way, while supervisors monitor other processes and take appropriate actions (restart, terminate).</li> <li>Concurrency models based on notion memory and message passing provide distribution, scalability, and reliability.</li> <li>Three pioneers in concurrency research developed similar solutions for different problems: Carl Hewitt, Tony Hoare, and Joe Armstrong.</li> <li>Concurrency is a property of the problem being solved while parallelism is a property of the underlying system. These models allow efficient distribution and scalability without worrying about hardware architecture.</li> <li>Beam and JVM have differences in focus: Beam emphasizes scalability and resilience, while JVM focuses on speed/parallelism.</li> <li>Concurrency model in Java was implemented through Akka by Jonas Bon\u00e9r, inspired by Erlang's OTP systems.</li> <li>WhatsApp used Airline for their backend servers with 2 million TCP connections on one machine.</li> <li>Elixir is an ecosystem of languages built on top of the Airline and Beam virtual machine, aiming to bring the power of Airline to new programming communities.</li> <li>Alexa became a first-class citizen in the Airline ecosystem, showcasing its potential as an ecosystem.</li> <li>Statically typed languages like Elixir are important for device security.</li> <li>Jose Valim created Elixir to bring Erlang's power to new programming communities, focusing on runtime and language principles for effective concurrency implementation.</li> </ol>"},{"location":"goto_programming_lang/#why-static-typing-came-back-richard-feldman-goto-2022","title":"Why Static Typing Came Back \u2022 Richard Feldman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Tml94je2edk</p> <ol> <li>In the 1950s to 1990s, statically typed languages were more prevalent than dynamically typed ones.</li> <li>The 1990s saw a boom in dynamic languages due to web growth and fast feedback loops.</li> <li>Popular dynamic languages include JavaScript, Ruby, PHP, Python, and R.</li> <li>Statically typed languages had advantages like runtime performance but were less relevant in the 1990s context.</li> <li>Gradual typing systems emerged for dynamic languages, leading to more popularity for statically typed ones.</li> <li>In the 1990s, dynamic languages dominated web use cases due to their fast feedback loops and concise syntax.</li> <li>The LAMP stack became popular for early web needs.</li> <li>Two dynamic languages made the top 20 most popular programming languages: PowerShell and CoffeeScript.</li> <li>Statically typed languages like C#, ActionScript, Go, Rust, Dart, Kotlin, TypeScript, and Swift have gained popularity in recent years.</li> <li>Modern JavaScript has less ceremony than older versions.</li> <li>TypeScript adds minimal static typing without much ceremony.</li> <li>The speaker's view of static typing has evolved over time.</li> <li>Minimal ceremony in JavaScript leads to success.</li> <li>Upgrading to Modern JavaScript involves minor changes.</li> <li>Static typing in TypeScript adds minimal extra code compared to Java's static typing.</li> <li>Advantages of Java implementation include better equals and hashcode implementations, early JSON validation, and useful Getters/Setters.</li> <li>Rock programming language uses type inference for early JSON validation without explicit type annotations.</li> <li>Concise code can be achieved with proper language design and features.</li> <li>Null pointer exceptions are not innate to static typing; some languages have null-aware type checkers.</li> <li>Elm and Haskell have sound type systems, leading to fewer runtime errors.</li> <li>Error messages in modern languages are improving, becoming clearer and more helpful.</li> <li>IDEs can be laggy but performance has improved with multi-core processors.</li> <li>Static typing has improved over time, with better error messages and IDE performance.</li> <li>Feedback loops have also become faster in statically typed languages like Haskell.</li> <li>The main benefit of static typing for many people is the red squiggle (syntax errors) in their IDEs, which helps them catch issues earlier than runtime crashes.</li> <li>Static typing has become more popular with languages like TypeScript and Elm, showing that it can be enjoyable to use.</li> <li>In the past, static typing was seen as slow with feedback loops.</li> <li>Modern languages have improved this by offering faster feedback and non-blocking errors.</li> <li>Three hypothetical futures: 1) Dynamic typing returns, 2) Gradual typing becomes popular, or 3) Static typing without gradual typing grows.</li> <li>The pendulum swinging back to dynamic typing is less likely as statically typed languages can offer the same benefits.</li> <li>Future of static and dynamic typing will depend on how well they adapt to new technologies and user needs.</li> <li>Gradual typing has become more popular by adding static type checking to existing dynamically typed ones.</li> <li>ActionScript and Dart were the only gradually typed languages from the start, but Dart later switched to full static typing.</li> <li>Static typing has a simpler design space compared to gradual typing, which needs to model all dynamic behavior.</li> <li>Gradual typing introduces runtime overhead due to checking types at both compile time and runtime.</li> <li>Historical evidence doesn't support the claim that gradually typed languages will become mainstream in the future.</li> <li>Static typing has become more popular due to improvements in statically typed languages that adopt benefits of dynamically typed ones.</li> <li>Gradual typing is not the best solution as it comes with unavoidable downsides, such as runtime overhead and complexity.</li> <li>Rock language aims for simplicity, performance, and ease of use without sacrificing benefits of statically typed languages.</li> <li>Prediction: Among the next five popular programming languages, most or all will be statically but not gradually typed.</li> </ol>"},{"location":"goto_programming_lang/#the-java-agent-modifying-bytecode-at-runtime-to-protect-against-log4j-joe-beeton-goto-2022","title":"The Java Agent: Modifying Bytecode at Runtime to Protect Against Log4J \u2022 Joe Beeton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=ZrGOv44iTC8</p> <ol> <li>Java instrumentation API enables dynamic and static analysis of running Java applications.</li> <li>Dynamic attachment involves creating a Unix socket, loading the agent jar file, and calling its main method with arguments.</li> <li>Manifest files in agent jars contain pre-main, agent class, native prefix, and permissions for modifying bytecode.</li> <li>JBomb creates a bill of materials for running Java applications by attaching to them at runtime.</li> <li>Static attachment is simpler; add the Java agent flag with jar location on startup.</li> <li>Protect is a tool that detects and blocks potential vulnerabilities like SQL injection or remote code execution.</li> <li>Log4Shell allows remote code execution through specific strings in log files, which can be blocked using tools like Protect.</li> <li>JNDI lookup can lead to remote code execution if an attacker controls the JNDI server.</li> <li>Oracle disabled default remote class loading in Java updates after October 2018.</li> <li>Other ways of exploiting Log4j include Spring Boot Tomcat's Apache Bean Factory and JavaScript engine removal in Java 15.</li> <li>A malicious JNDI server can return a payload that executes commands on the application.</li> <li>Demonstrated a JNDI vulnerability in Spring Boot Tomcat using Apache Bean Factory.</li> <li>Showed how to modify the JNDI lookup class to block the vulnerability using ASM and Java agent.</li> <li>Discussed other security issues and resources available for developers.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-zig-programming-language-linters-andrew-kelley-jeroen-engels-goto-2022","title":"Expert Talk: Zig Programming Language &amp; Linters \u2022 Andrew Kelley &amp; Jeroen Engels \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=zKmZmiOU6qE</p> <ol> <li>Jeroen and Andrew discuss their experiences with linters, focusing on Elm and Zig languages.</li> <li>They mention the lack of powerful refactoring tools in Elm compared to other languages like Java.</li> <li>Conditional compilation is important for future language development.</li> <li>Code smells can be false positives in linter rules; examples from different languages are provided.</li> <li>Assertions may help reduce false positives, but they might not be possible if type information is missing.</li> <li>Linting fixes can simplify developers' lives, but they need to be trustworthy and provide details about the changes made.</li> <li>Elm-review uses prompts for every error with a suggested fix, allowing users to build trust in the tool.</li> <li>The tradeoff between linting errors and compilation is separating the steps, ensuring code quality while still allowing flexibility in development.</li> <li>In pull requests with green tests, there's a guarantee that all used code has been checked by the linter.</li> <li>Context matters when evaluating the usefulness of linting in different scenarios.</li> <li>Continuous integration is related to linting, as it enforces rules during development.</li> <li>Some projects may not have a separate integration phase or focus on guarantees.</li> <li>Nim language focuses more on flexibility and power rather than guarantees.</li> <li>Zig prioritizes readability and maintainability over other aspects.</li> <li>Elm has referential transparency due to functional programming, ensuring the same input yields the same output.</li> <li>Guarantees can simplify code and make refactoring easier.</li> <li>Referential transparency is an essential aspect of purely functional languages, where the same inputs always result in the same outputs.</li> </ol>"},{"location":"goto_programming_lang/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ol> <li>The speaker emphasizes the significance of JavaScript in modern software development.</li> <li>He presents an ideal stack consisting of a universal scripting language, serverless architecture, and optimized infrastructure.</li> <li>Dino is introduced as a framework that implements this stack, focusing on simplicity, security, and optimization.</li> <li>Features include TypeScript integration, browser compatibility, and easy dependency management through npm.</li> <li>Dino Deploy builds serverless systems using Dino, hosting at the edge in 34 data centers worldwide with GitHub integration for code deployment.</li> <li>Dino is a local development runtime similar to Node, focusing on serverless systems for JavaScript.</li> <li>Dino Deploy provides a white label serverless system for websites like Netlify Edge functions and Super based Edge functions.</li> <li>A fresh web framework is built for speed, rendering everything just in time on the server, automatically inlines CSS, uses Tailwind, and has TypeScript out of the box with no configuration.</li> <li>Comparison between a fresh app (84KB) and a create react app (339MB) shows significant optimization potential in server-side JavaScript.</li> <li>Efforts are being made to improve frameworks and cloud deployment for better optimization.</li> </ol>"},{"location":"goto_programming_lang/#beam-concurrency-in-action-sasa-juric-yow-2022","title":"BEAM Concurrency in Action \u2022 Sasa Juric \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A4x6IfceJCM</p> <ol> <li>Beam concurrency revolves around processes, which are sequential programs that can spawn other processes and communicate through messages.</li> <li>Message passing is the primary way for processes to coordinate or cooperate; each process has a mailbox for received messages.</li> <li>Beam runtime starts with an OS process containing all the processes, encouraging lightweight, independent processes in abundance.</li> <li>Concurrency is essential even for small systems as it allows multiple capabilities and vertical scalability.</li> <li>In the example given, an analyst process handles requests and spawns a query process to run long-running tasks separately, decoupling execution flows.</li> <li>Beam is a framework for concurrent programming using event-driven, reactive style with lightweight processes.</li> <li>Data processing pipelines can be implemented using Beam, making it suitable for event-driven microservices and handling data streams.</li> <li>Concurrent thinking in Beam: Split processes to separate execution flows and failures.</li> <li>Registry pattern maps logical roles to physical addresses for service discovery.</li> <li>Managing load in the pipeline involves batching efficiently to handle high loads without falling behind reality.</li> <li>Cancellation is crucial in concurrency technology, often overlooked; it can involve stopping processes with reasons and cleaning up resources before stopping.</li> <li>Elixir's process hierarchy allows concurrent execution of builds with custom termination for each process in a tree structure.</li> <li>Observability and metrics are essential for understanding distributed systems.</li> <li>Erlang and Elixir have flexible, in-memory standard libraries that aid debugging multi-process Beam programs.</li> <li>Dealing with side effects before process cancellation requires custom termination, such as cleaning up caches or draining commands.</li> <li>Transactions can be handled by closing sockets or using saga patterns for distributed messaging systems.</li> </ol>"},{"location":"goto_programming_lang/#rust-in-action-tim-mcnamara-richard-feldman-goto-2023","title":"Rust in Action \u2022 Tim McNamara &amp; Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iYJ6bLITZsI</p> <ol> <li>Tim McNamara, author of \"Rust in Action\", shares his background as a Python developer and transition to Rust.</li> <li>The book aims to teach Rust while incorporating concepts from systems programming for people with dynamic or Java backgrounds.</li> <li>Rust offers a different experience compared to languages like C++, with fewer segmentation faults and more developer happiness.</li> <li>\"Rust in Action\" provides extra context on low-level computer concepts while learning Rust.</li> <li>The Rust community is welcoming and interested in preventing people from feeling excluded, making it more accessible for new entrants.</li> <li>Teaching Rust effectively to beginners can be challenging, with strings being one of the hardest concepts due to its unique handling.</li> <li>Lifetime annotations help manage data access validity in Rust programs.</li> <li>The borrow checker ensures every data access is valid and can never be invalidated.</li> <li>Unsafe code in Rust is intentional and used for low-level tasks, but it's essential to understand its purpose.</li> <li>Atomic clocks and network time protocols help synchronize time across distributed systems, with monotonic ordering crucial for logs or messages to be roughly in order.</li> </ol>"},{"location":"goto_programming_lang/#intro-to-the-zig-programming-language-andrew-kelley-goto-2022","title":"Intro to the Zig Programming Language \u2022 Andrew Kelley \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=YXrb-DqsBNU</p> <ol> <li>Zig is a general-purpose programming language and toolchain for creating robust, optimal, and reusable software.</li> <li>The project aims to enhance technology by incrementally improving the commons.</li> <li>Zig CC is a drop-in C++ compiler with better defaults, enabling hermetic builds and undefined behavior sanitizer.</li> <li>Real-world applications are using Zig CC, finding bugs, and fixing them.</li> <li>The project focuses on raising standards of software as a craft through tooling, open source libraries, and student education.</li> <li>Use Zig CC for better defaults, cross compilation, and simplified installation.</li> <li>Leverage the Zig build system to create a unified build process for C/C++ projects.</li> <li>Write components in Zig for improved dependency management across different operating systems.</li> <li>Compiler with Zig build system; Level 2: Exploiting C dependencies in Zig build system; Level 3: Integrating Zig code into projects; Mixing C and Zig code seamlessly.</li> <li>Non-profits vs. for-profit companies; Timeline of a typical VC-backed startup: unsustainable product, tight grip on resources, acquisition or failure.</li> <li>Examples of companies with varying fates: Wikipedia, Google, Fitbit, Progressive Roofing, Rad Game Tools, SQLite.</li> <li>Zig Software Foundation's stable and mission-focused approach.</li> <li>Zig language's versatility in various applications: low-level infrastructure (river Window Manager), high-performance applications, resource-constrained environments, webassembly.</li> <li>Arraylist implementation in Zig is simple and easy to understand; Inline loops allow printing any value without complex code; Hash maps from the standard library provide efficient data storage.</li> <li>Zig language focuses on application understanding, not esoteric rules; Inline loops and reflection for convenience; Hash maps with auto array functionality; Multi-array lists for data oriented design.</li> <li>C integration through demos like a roguelike deck builder.</li> <li>Zig is a CT plus compiler toolchain and build system for simplifying maintenance of existing projects, but can be used without the language.</li> <li>The software foundation aims to improve software engineering craft throughout the industry; Cross compilation and C integration are supported, allowing for easier maintenance of existing projects.</li> <li>Sponsorship is encouraged for those who like what they do.</li> </ol>"},{"location":"goto_programming_lang/#the-perfect-language-bodil-stokke-yow-2017","title":"The Perfect Language \u2022 Bodil Stokke \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=vnv8MGIN7A8</p> <ol> <li>A perfect language doesn't exist as they are designed for specific purposes.</li> <li>Popular programming languages include JavaScript, Rust, and Esperanto based on GitHub metrics.</li> <li>JavaScript features functional aspects and type handling in Rust.</li> <li>Rust emphasizes ownership and borrowing concepts to avoid memory issues.</li> <li>Consider improving existing languages instead of creating new ones.</li> <li>Ideal language should focus on abstraction, simplicity, garbage collection, immutability, higher-order programming, and FFI for interoperability.</li> <li>Scarlet combines functional programming ideas with familiar syntax.</li> <li>Modular 2 aims to make JavaScript programmers more comfortable with Haskell concepts.</li> <li>Design a language that combines the simplicity of JavaScript with the power of functional programming.</li> <li>Focus on tooling, community, and documentation for language adoption.</li> <li>Explore ideas like transpilers, bridging gaps between existing languages, and dependent types.</li> <li>Build a universal package manager for any language to facilitate code sharing.</li> <li>Consider building a language that combines aspects of PureScript and TypeScript or use a subset of JavaScript for server-side development.</li> <li>Explore dependent types in languages like Idris to make them more accessible.</li> <li>Keep learning new programming languages and tools to improve skills.</li> <li>If you find an interesting idea, consider building your own niche language.</li> </ol>"},{"location":"goto_programming_lang/#typescript-vs-kotlinjs-eamonn-boyle-garth-gilmour-goto-2022","title":"TypeScript vs KotlinJS \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=GlU8ZyJNI7Q</p> <ol> <li>Both Typescript and Kotlin are loved by developers, but Kotlin is more versatile.</li> <li>Creating a Kotlin JS project with IntelliJ wizard and using Gradle for build system integration.</li> <li>Documentation provides clear information on library availability in Kotlin JS.</li> <li>Dependencies can be managed through npm or pre-built wrappers.</li> <li>Kotlin JS projects follow a similar structure to JavaScript, with main() and app creation.</li> <li>Kotlin JS uses low-level DOM API for browser rendering.</li> <li>Kotlin.js allows using existing libraries and integrates with Gradle.</li> <li>Typescript is more popular than Kotlin.js, making it easier to reuse JavaScript assets.</li> <li>Kotlin's community is growing but needs to catch up in comparison.</li> <li>Interoperability with JavaScript is possible through wrappers or automatic generation tools like CAT.</li> <li>Kotlin offers escape hatches for working with untyped objects, similar to JavaScript.</li> <li>Typescript has a larger community and better compatibility with JavaScript.</li> <li>Kotlin's new DSL is nicer but needs updated documentation.</li> <li>Typescript has powerful type systems with features like unions and intersections.</li> <li>Kotlin lacks overloads, a feature that allows multiple functions with the same name to accept different arguments.</li> <li>Typescript has powerful type system with features like unions and intersections.</li> <li>Kotlin has suspending functions for asynchronous tasks.</li> <li>Transitioning from JavaScript to Kotlin requires extra work in some cases.</li> <li>JSX is purpose-built for HTML and easier for designers.</li> <li>Suspending functions can be used for lazy evaluation and have various use cases.</li> <li>Both languages are good, but Typescript might be preferred for stable engineering due to its larger community, bug fixes, and documentation.</li> <li>For building on the JavaScript ecosystem, Typescript solves problems that Kotlin doesn't address.</li> <li>Consider other languages like Kotlin for specific use cases outside of web development.</li> <li>Learning JavaScript/TypeScript is inevitable for developers working in web development.</li> <li>If you have no context, write 'no context'.</li> </ol>"},{"location":"goto_programming_lang/#simplifying-systems-with-elixir-sasa-juric-yow-2020","title":"Simplifying Systems with Elixir \u2022 Sasa Juric \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=EDfm2fVS4Bo</p> <ul> <li>Elixir, a programming language with Erlang runtime (BEAM) benefits, offers embedded support for microservices, multi-core capabilities, and concurrency.</li> <li>The Earlangelist is an example of a simple system written in Elixir, organized as independent processes internally but presented as a monolithic project.</li> <li>Erlangelist is another example, a blog site built with Elixir showcasing microservices.</li> <li>Phoenix web framework provides process organization for multi-core capability, vertical scalability, separation of failures and latencies.</li> <li>No need for additional components like nginx, simplifying implementation.</li> <li>A custom lightweight database eliminates external dependencies, while a stats collector handles concurrent requests efficiently.</li> <li>Separation of failures and latencies through independent processes.</li> <li>Periodic jobs are handled by two processes: scheduler and task performer, improving testability compared to third-party components like Cron jobs.</li> <li>Serving HTTPS traffic with Let's Encrypt for added security and privacy.</li> <li>Certifier process handles certificate renewal without additional dependencies or external tools.</li> <li>A dashboard provides insights into the system's usage and state.</li> <li>Tests verify various aspects of the system, including HTTP redirects to HTTPS, endpoint certifications, and other features.</li> <li>Elixir and Erlang provide a simple, monolithic approach to development.</li> <li>Docker simplifies operation by allowing self-contained releases.</li> <li>A programmable API allows for user-friendly interfaces on top of the core functionality.</li> <li>Start with a single language and expand as needed, reducing technical complexity.</li> <li>Utilize databases for proper data persistence.</li> <li>Explore other technologies when necessary.</li> <li>Benefits include reduced complexity, easier testing, and increased confidence in the system.</li> <li>The speaker is a huge fan of Elixir and BEAM languages.</li> </ul>"},{"location":"goto_programming_lang/#streamlining-large-scale-java-development-using-error-prone-sander-mak-goto-2022","title":"Streamlining Large-Scale Java Development Using Error Prone \u2022 Sander Mak \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=C5MBsKZHqrY</p> <ol> <li>Error Prone is an open-source tool by Google, automating Java code improvements through a compiler plugin.</li> <li>Supports various Java versions and offers built-in checks for uniformity and development process improvement.</li> <li>Demonstrated with examples of unused methods and incorrect exception handling.</li> <li>Customizable via enabling/disabling specific checks or suppressing warnings.</li> <li>Can use the far check feature to assume local variables and parameters as final, requiring explicit annotations for mutable ones.</li> <li>Error Prone can be customized by creating your own book Checker implementations to find specific patterns in code.</li> <li>Auto Service from Google simplifies making classes service loadable, used by Error Prone.</li> <li>Refactor is a solution that expresses patterns in concrete Java syntax for ErrorProne to rewrite automatically.</li> <li>Create refaster templates with before and after templates for matching and rewriting code.</li> <li>Use ErrorProne to apply generated rules to the code base, making it easier to migrate between APIs or libraries.</li> </ol>"},{"location":"goto_programming_lang/#interview-with-louis-pilfold-on-elixir-gleam-yow-2022","title":"Interview with Louis Pilfold on Elixir Gleam \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=kDfa7AVeugw</p> <ol> <li>Gleam is a new functional programming language that combines strengths of Beam and typed functional languages.</li> <li>It offers features like actor model for concurrency, type system, and editor tooling.</li> <li>Inspired by Rust, Go, and Elixir, the goal is to make Gleam accessible for businesses and various applications.</li> <li>Gleam's syntax draws inspiration from Rust and Go, focusing on simplicity with a small set of useful features and an easy learning curve.</li> <li>The weirdness budget concept helps in designing language features.</li> <li>Gleam aims to be used by businesses for diverse tasks.</li> <li>No plans for traits or ad hoc polymorphism due to readability concerns.</li> <li>Gleam is compatible with other Beam languages, ensuring interoperability and access to existing libraries.</li> <li>JavaScript compatibility is slightly more challenging due to differences between both languages.</li> <li>Compiled code maintains human-readable appearance in Erlang and JavaScript runtimes.</li> <li>Gloom is a language that uses immutable data structures and doesn't mutate, with its own mutable list library for use with JavaScript.</li> <li>Gleam's standard library is modular, allowing users to choose which version they want.</li> <li>The latest release focuses on implementing the Language Server Protocol for IDE integration.</li> <li>Future releases will add auto completion, type-directed refactorings, and more features.</li> <li>Community growth is essential, with plans to improve the onboarding process, make it easier to try Gleam in a browser, and foster a welcoming environment through a Discord server for discussion and community.</li> </ol>"},{"location":"goto_programming_lang/#full-stack-haskell-from-prototype-to-production-ryan-trinkle-yow-2018","title":"Full-Stack Haskell: From Prototype to Production \u2022 Ryan Trinkle \u2022 YOW! 2018","text":"<p>URL: https://www.youtube.com/watch?v=guhrVxY63tg</p> <ol> <li>Speaker shares experience of using functional programming in a full stack web and mobile app development company.</li> <li>Benefits include improved focus, collaboration, reduced latency, and fun work environment.</li> <li>Functional programming is better at full stack development due to its strong typing and pure functions.</li> <li>Code reusability increases as Haskell forces explicit dependency declaration.</li> <li>Contributing fixes upstream became a habit for the speaker's company, making it easier to maintain dependencies.</li> <li>Haskell makes code more reusable, allowing for different compilation methods.</li> <li>Contributing fixes upstream is easier with functional programming and strong typing.</li> <li>NYX provides a consistent development environment for packages.</li> <li>Fixing bugs upstream saves money and improves teamwork.</li> <li>Obsidian doesn't believe in prototypes, preferring refactoring instead.</li> <li>Haskell's compiler feedback makes writing code easier and more predictable.</li> <li>Avoid prototyping and focus on refactoring, as Haskell code can be easily improved.</li> <li>Recognize the cost-benefit of perfectionism in Haskell, knowing when to stop proving things with types.</li> <li>Use end-to-end solutions instead of breaking down projects into components.</li> <li>Be cautious about using new language extensions and libraries, as they can have a high cognitive overhead.</li> <li>Remember that great software can be built without advanced features like type classes or Singletons.</li> <li>Refactoring is important but can be challenging with new language extensions and libraries.</li> <li>Obelisk helps build a sensible default for web and mobile app development, making it easier to learn and work in the ecosystem.</li> <li>It provides tools for setting up projects, development, and deployment.</li> <li>Demo shows how to use Obelisk to create a simple website and deploy it to production.</li> <li>Plans for improving documentation, support for ghcjs 8.2 and 8.4, and community contributions.</li> <li>Recognition of the Haskell ecosystem's impact on software development.</li> <li>Aiming to move from prototype mentality to production mentality in Haskell.</li> </ol>"},{"location":"goto_programming_lang/#building-your-own-compiler-the-slightly-easier-way-with-llvm-erik-corry-yow-2016","title":"Building Your Own Compiler The Slightly Easier Way With LLVM \u2022 Erik Corry \u2022 YOW! 2016","text":"<p>URL: https://www.youtube.com/watch?v=_XbOTRunqHk</p> <ol> <li>Speaker discusses creating a language and mentions LVM, an open source compiler framework.</li> <li>Demonstrates building a simple regular expression parser in a new language.</li> <li>Explains the need for data structures to represent abstract syntax trees (AST) in regular expressions.</li> <li>Introduces classes for literal characters, alternatives, disjunctions, and empty alternatives as AST nodes.</li> <li>Shares the importance of passing up the AST to the compiler.</li> <li>Design a recursive descent parser for a simple regular expression language.</li> <li>Create an AST class and data structures for the abstract syntax tree.</li> <li>Use graphviz to visualize the tree by adding unique names for each node.</li> <li>Add dump methods to every class to print ASCII representation of nodes.</li> <li>Include test string methods for regular expressions.</li> <li>Create a makefile with commands to run the program and generate output.</li> <li>Upside down jokes and tree visualization: AST node naming convention (F0, F1), dumping nodes into ASCII file for printing, using visitor pattern for recursive dumping, generating C code with llvm to represent AST nodes, optimizing generated functions using llvm, abstract class and methods for matching input characters.</li> <li>Generated a regular expression parser in C++ using LLVM.</li> <li>Created a driver to test the parser on input lines.</li> <li>Compiled the code into an executable named 'grit'.</li> <li>Tested the program with a sample input, showing efficiency and performance.</li> <li>Generating llvm intermediate code from Dart.</li> <li>Compiling down to assembler using clang.</li> <li>Efficient regular expression language.</li> <li>Comparing grep performance with the generated code.</li> <li>Inlining optimizations in llvm.</li> <li>Code quality of LVM is good, but Dragon book may not be suitable for compiler study.</li> </ol>"},{"location":"goto_programming_lang/#idioms-for-building-fault-tolerant-applications-with-elixir-jose-valim-yow-2021","title":"Idioms for Building Fault-tolerant Applications with Elixir \u2022 Jos\u00e9 Valim \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=mkGq1WoEvI4</p> <ol> <li>Elixir, a functional programming language, combines functional principles with the Erlang VM (BEAM) for efficient distributed applications.</li> <li>Functional programming helps by making state explicit and immutable, improving code clarity and reducing issues with concurrency.</li> <li>BEAM was designed to solve specific use cases like telecommunication systems, enabling high concurrency.</li> <li>Elixir uses lightweight processes that are isolated by default for efficient concurrent applications.</li> <li>Processes communicate through message passing, ensuring fault tolerance as failure in one process doesn't affect others.</li> <li>Phoenix is an Elixir web framework built on these principles, using processes and supervision trees to manage applications.</li> <li>Elixir's accessibility allows libraries like Acto for database interaction and NX for numerical computing on GPUs.</li> <li>Focus on productivity through first-class documentation, tooling, and community support.</li> <li>Hex package manager provides access to various libraries and frameworks like Phoenix for web applications and Nerves for embedded software.</li> <li>Pinterest case study: reduced servers by 95%, improved performance and reliability, saving $2 million annually in server costs.</li> </ol>"},{"location":"goto_programming_lang/#a-tour-of-the-modern-java-platform-james-ward-ryan-knight-goto-2022","title":"A Tour of the Modern Java Platform \u2022 James Ward &amp; Ryan Knight \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=BU_zIpQI5Dg</p> <ol> <li>Modern Java includes features like algebraic data types, product types (represented by records), and sum types with sealed interfaces for improved type safety and handling complexity.</li> <li>Testing for records in Java 17 is discussed as an improvement.</li> <li>Algebraic data types (ADTs) and sum types are introduced with sealed interfaces, enabling exhaustive pattern matching.</li> <li>Kotlin handles null values better with explicit nullability and forcing developers to handle null cases.</li> <li>Option types in Scala and Kotlin provide some (value exists) or none (no value).</li> <li>Test containers automatically manage service dependencies for different services like PostgreSQL, providing consistency across environments.</li> <li>R2DBC and Spring support non-blocking database connections with reactive databases like PostgreSQL.</li> <li>Kotlin co-routines allow efficient resource usage by avoiding thread blocking.</li> <li>Reactor Crud repository provides a reactive interface to non-blocking database access.</li> <li>Test containers can be used for local development and integration testing, ensuring consistency across environments.</li> <li>Spring Boot uses build packs to containerize applications for easy deployment on platforms like Kubernetes.</li> <li>Container images are created with layers for operating system, JVM, dependencies, and application.</li> <li>Cloud Native Build Packs can be used to turn any Java application into a container image.</li> <li>Docker is used to run the application and check its performance.</li> <li>GraalVM native image allows ahead of time compilation, reducing memory usage and startup times.</li> <li>Spring Native addresses challenges with reflection in AOT compiling.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-f-50-beyond-don-syme-yow-2021","title":"What\u2019s New in F# 5.0 &amp; Beyond \u2022 Don Syme \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=1cqvmiaj6SI</p> <ol> <li>F# is a functional programming language designed for the .NET ecosystem, bringing benefits to both object-oriented and functional communities.</li> <li>The history of programming languages includes the object-oriented tidal wave, impacting Microsoft and functional programming communities.</li> <li>Reactions to this wave include developing object calculi, integrating functional features into OOP languages, and creating multi-language runtimes.</li> <li>F#'s core remains consistent throughout its evolution, focusing on functional programming experiences for the .NET ecosystem.</li> <li>Object-oriented programming (OOP) has influenced the industry with languages like C++ and Java, while functional programming led to languages like F#, Scala, and C# incorporating functional features.</li> <li>F# is an open source, cross-platform language suitable for JavaScript development using tools like Fable. It offers high performance due to its integration with ASP.NET Core.</li> <li>Functional programming has become more practical, interoperable, reusable, and tooled over time.</li> <li>F# is available on Linux as an open source, cross-platform tool chain with a functional first approach, high performance, and interoperability.</li> <li>Fable allows using F# in the Node.js ecosystem. Functional programming leads to safer languages like F#.</li> <li>The language design process is open for contributions from various communities.</li> <li>F# 4.1 introduced unboxed tuples, records, and union types for better performance. F# 5.0 added span of T, a low-level feature for high-performance code. Tooling updates focused on improving async debugging.</li> <li>F# 4.6 improved record types with anonymous support, while F# 4.7 enhanced computational expressions and syntax for whitespace.</li> <li>F# history focuses on functional programming, interoperability, and performance, combining static typing, succinctness, scalability, explorative libraries, and efficiency.</li> <li>Domain modeling in F# is relevant to areas like theorem proving, with a focus on domain data structures and metalanguage for programming over them.</li> <li>The F# Advent calendar showcases various uses of the language. Functional programming is relevant to user interface development, especially with languages like Elm.</li> <li>Not all functional code is good; Curry and uncurrying can lead to confusing code. Focus on writing clear, debuggable code instead of using advanced functional features.</li> <li>Embrace object programming over full object orientation in F#. Introduce computation expressions for powerful and intuitive code. Prioritize clear, readable, and practical functional code. Learn from the Udemy course to learn F# effectively.</li> </ol>"},{"location":"goto_programming_lang/#spring-boot-up-running-mark-heckler-thomas-vitale-goto-2022","title":"Spring Boot: Up &amp; Running \u2022 Mark Heckler &amp; Thomas Vitale \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=F0BJiE2LnpQ</p> <ol> <li>Mark Heckler, a Principal Engineer at Microsoft, shares his passion for aviation and its relation to software development.</li> <li>The importance of trusting software in critical domains like aviation is discussed, emphasizing the need for reliable and resilient data, hardware, and software.</li> <li>Mark wrote \"Spring Boot: Up and Running,\" a book covering Spring Boot fundamentals and best practices. It serves as a comprehensive guide for developers learning about the framework while also being a reference for experienced users.</li> <li>The challenges of writing a technical book are mentioned, including balancing workload and perspective.</li> <li>Spring Boot is considered a game changer in the Java ecosystem by simplifying development and focusing on business logic.</li> <li>Mark's experience with Spring Boot highlights the importance of perspective when evaluating code and features.</li> <li>Spring Boot was a game changer for developers, allowing them to focus on business logic instead of infrastructure.</li> <li>The transition from Java EE to Spring can be disconcerting initially due to reduced boilerplate code.</li> <li>Spring framework and Spring Boot provide opinionated ways of doing things while still being flexible.</li> <li>Learning about Spring Boot's features, such as dependency management, auto-configuration, and data integration, helps newcomers understand how it works.</li> <li>Technology is the foundation of Spring, a rigorous framework. The book focuses on Spring Boot fundamentals and data integration with various databases.</li> <li>Aviation domain is used for live data examples in the book. Reactive programming is covered, allowing developers to build scalable, resilient, and cost-efficient applications using the same programming model as imperative.</li> <li>Benefits of reactive programming are discussed, including its potential to be more natural for some developers.</li> <li>Spring security is another important topic covered in the book, focusing on abstractions used by the framework. It covers forms-based authentication, OpenID, OAuth2, and authorization concepts.</li> <li>The importance of understanding nonfunctional requirements like security is emphasized.</li> <li>Spring Boot simplifies building production-ready applications with embedded servers and executable standalone Java apps. Native compilation is an important part of the story but not all workloads will go native.</li> <li>Spring Boot offers various deployment options, including executable JARs, container-based applications, and native images in containers. Upgrading to newer versions of Spring framework improves performance even without using native code.</li> <li>Testing is crucial for development life cycle, but balancing testing coverage with the topic being covered can be challenging.</li> <li>Configuration options for Spring Boot applications are discussed. Mark Heckler recommends his book \"Spring Boot: Up and Running\" as a valuable resource for learning about Spring Boot.</li> <li>Twitter is the best way to reach Mark Heckler online. The conference speakers thank each other and look forward to future discussions.</li> </ol>"},{"location":"goto_programming_lang/#the-quick-python-book-naomi-ceder-luciano-ramalho-goto-2022","title":"The Quick Python Book \u2022 Naomi Ceder &amp; Luciano Ramalho \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7CwmUmQjvYg</p> <ol> <li>Naomi Sidder's \"The Quick Python Book\" covers various aspects of data processing and handling, including ETL, FTP servers, APIs, databases, and data science tools like Pandas and Jupyter.</li> <li>The book is a great starting point for learning Python, with many readers finding success in their careers after using it.</li> <li>The third edition includes an extensive case study involving parsing data.</li> <li>Discussions on the use of functions and classes in programming: Functions are basic concepts, while classes are advanced. Overemphasizing classes can be problematic for beginners.</li> <li>Static typing is not covered in depth in some Python books but is an evolving area within the language.</li> <li>The community's diversity makes it difficult to determine the best approach for everyone; static typing may not be essential for all users.</li> <li>For those who don't need static typing, learning other relevant skills could be more beneficial.</li> <li>Python's success is due to its focus on aesthetics, readability, and community, with a diverse library ecosystem similar to CPAN in the past.</li> <li>Syntactic macros (PEP 638) are an idea that allows easier experimentation with language features without rewriting code; they could be used for implementing new features like sync awaits and match case statements as library keywords instead of deep interpreter changes.</li> </ol>"},{"location":"goto_programming_lang/#growing-together-with-the-beam-stavros-aronis-hans-nahringbauer-code-beam-2022","title":"Growing Together with the BEAM \u2022 Stavros Aronis &amp; Hans Nahringbauer \u2022 Code BEAM 2022","text":"<p>URL: https://www.youtube.com/watch?v=OXlC6f8indM</p> <ol> <li>Telaes is a Nordic contact center solution provider that uses Erlang for its robustness, cost efficiency, and scalability.</li> <li>Ace has over 96,000 users and handles millions of interactions annually with the help of Erlang-based systems.</li> <li>The company has been using Erlang since 1997 and continues to build new solutions on it.</li> <li>Telaes utilizes natural language understanding and other technologies for their solutions.</li> <li>First system created for Destination Gotland with 70 agents, using Alan on Windows Server and now running in the cloud.</li> <li>Convinced sponsors to use Alan due to lower cost and robustness.</li> <li>Rewrote code in 2000, used Angelo for routing calls and managing states.</li> <li>Introduced virtualization with VMware for better redundancy.</li> <li>Created Ace Clusterware for handling web clients and scaling.</li> <li>Adopted JavaScript and Angular for client structure.</li> <li>Clusterware maintains state, synchronizes, and communicates with existing systems.</li> <li>Telia's journey involved building a new recording solution and IVR system using AWS cloud services.</li> <li>Clusterware remains in the middle, handling routing and connecting to telco systems.</li> <li>Telia's cloud migration involves AWS and integrating with Microsoft Teams.</li> <li>There's a movement back to on-premise data centers due to regulatory issues.</li> <li>Telia is building new modules for IVR and recording, using partners like Avasa.</li> <li>Google Cloud AI Platform (CCAI) helps virtual agents solve customer problems.</li> <li>Agent Assist will coach live agents during calls or chats.</li> <li>Insights feature uses interaction analytics to understand conversations.</li> <li>Global uses Google CCAI platform for natural language processing.</li> <li>Virtual agents empowered by the Google CCAI engine help customers solve issues and transfer to live agents if needed.</li> <li>Agent Assist is added to coach or help agents during interactions.</li> <li>Insights feature provides interaction analytics to improve entire companies' workings in real time.</li> <li>Erlang played a crucial role in the success of their cloud service.</li> <li>Global has offices worldwide, with around 250 employees and 80 developers working on development.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-whats-next-for-net-hannes-lowette-martin-thwaites-goto-2022","title":"Expert Talk: What\u2019s Next For .NET? \u2022 Hannes Lowette &amp; Martin Thwaites \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzywu1ol-b8</p> <ol> <li>Over the past two decades, .NET has evolved significantly, with notable changes in compatibility and technology.</li> <li>The transition from .NET 1.1 to 2.0 introduced challenges due to compatibility issues.</li> <li>Documentation improvements have made learning easier for newcomers.</li> <li>WebForms had its challenges but helped bridge the gap between desktop developers and web development.</li> <li>MVC and other frameworks simplified workflows, lowering barriers for smaller applications.</li> <li>.NET Core focuses on performance and web development, with a strong emphasis on cross-platform support.</li> <li>Dependency injection is now a first-class citizen in the ecosystem.</li> <li>Minimal APIs make it easier for new developers while still allowing traditional approaches.</li> <li>The language specification remains unchanged throughout .NET's evolution.</li> <li>Maintaining backward compatibility with older frameworks and technologies like Core WCF is crucial.</li> <li>Focusing on the future, leaving past issues behind, is essential for continued growth.</li> <li>MVC's approach with extensibility and dependency injection benefits developers.</li> <li>WCF was overengineered but still useful due to its powerful tools.</li> <li>Core WCF aims to maintain backward compatibility for those who prefer older technologies.</li> <li>Converting from WCF to gRPC can be challenging, requiring significant codebase changes.</li> <li>.NET Core focuses on making the right thing easier and more accessible.</li> <li>Logging frameworks like ILogger are now standardized, reducing custom solutions' need.</li> <li>Containerization has changed how applications are deployed and monitored.</li> <li>Application Insights offers visibility into production code but requires manual instrumentation for better insights.</li> <li>New Relic and similar tools provide out-of-the-box visibility on performance numbers and metrics without log statements.</li> <li>The DevOps movement has pushed developers to care about their production environment and system outputs.</li> <li>Observability is crucial for understanding system performance and debugging issues in complex distributed systems.</li> <li>Instrumentation can help identify problems by monitoring code execution instead of logging everything.</li> <li>Overengineering may occur due to software complexity, but keeping it simple is recommended.</li> <li>OpenTelemetry could revolutionize how we look at code in production with standardized ways of collecting and analyzing data.</li> <li>The .NET ecosystem's rapid evolution makes it an exciting time for developers.</li> </ol>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2021","title":"Life After Business Objects: Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Q2p_iqjfekI</p> <ol> <li>Object-oriented languages may have insufficient default implementations, causing issues for new developers.</li> <li>Functional programming offers cleaner code and clear intentions, with immutable data structures making concurrency easier.</li> <li>Learning from others' mistakes is crucial for improving code quality; metrics show the importance of considering future developers and readability.</li> <li>Separating data and operations in business objects can solve visibility issues; focus on them as different entities.</li> <li>Real-world examples highlight the need for subjective decisions regarding method placement.</li> <li>Discussions cover handling order processing, organizing classes/data types, and the importance of algebraic data types (ADTs) in functional programming languages like F#.</li> <li>Caution against using optional values in domain models; hybrid approaches combining object-oriented and functional programming are possible, but F# offers a better full functional experience.</li> <li>Consider mutability when choosing a language for specific needs; compare OOP and actor models, highlighting the advantages of the latter.</li> <li>Use types to keep domain models tight, compact, and easy to understand; avoid nulls and options with the principle of making illegal states unrepresentable.</li> <li>Utilize modules for better visibility of operations and avoid exposing unsafe ones; adopt functional programming communication between actor model objects using Akka.net.</li> <li>Observe responsiveness to quick changes, compact code, and strong type checking in F#.</li> <li>Use communication channels to contact the speaker or vote for their session on a conference app.</li> </ol>"},{"location":"goto_programming_lang/#ready-for-rust-erik-doernenburg-goto-2021","title":"Ready for Rust \u2022 Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=WgLlwjZNEtY</p> <ol> <li>Rust is a modern programming language gaining popularity due to its safety and efficiency, attracting interest from companies like Microsoft.</li> <li>Apple, Google, and Mozilla created their own alternatives to C: Swift, Go, and Rust respectively.</li> <li>Companies struggle with writing secure C code due to memory management issues, leading them to consider languages like Rust for its safety and interoperability.</li> <li>Rust's toolchain installation is simple, and cargo is an effective package manager.</li> <li>The language focuses on keeping dependencies small for security and performance.</li> <li>Rust supports multiple editions to target older versions of the language.</li> <li>A genetic programming simulator was used as a real-world example to demonstrate building something in Rust.</li> <li>Rust is ideal for long-lived, large code bases that require a more complex programming language.</li> <li>The language supports object-oriented and functional programming styles.</li> <li>Macros allow extending the language's functionality.</li> <li>Memory management uses automatic reference counting to avoid memory leaks.</li> <li>Passing references to functions avoids ownership issues.</li> <li>Immutable and mutable references are allowed, preventing data races.</li> <li>Dangling pointers are not allowed in Rust.</li> <li>Functions can be passed as parameters for abstraction.</li> <li>Rust's borrow checker ensures data race avoidance and semantic correctness.</li> <li>Parallelism is easier in Rust compared to other languages due to explicit multi-threading and memory management.</li> <li>The language was used to improve performance of a simulation application, achieving 25 million cycles per second with an optimized build.</li> </ol>"},{"location":"goto_programming_lang/#fail-kevlin-henney-goto-2021","title":"#FAIL \u2022 Kevlin Henney \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Lc13xKEJZTc</p> <ul> <li>Software development involves time travel, allowing undoing actions and exploring different timelines.</li> <li>Facebook's use of user feedback led to political interference.</li> <li>C library's time function can cause systems to default to January 1st, 1970, due to generating value zero.</li> <li>Nan (not a number) is a feature of IEEE 754 from the '80s; it can be generated by various languages.</li> <li>Prototype code vs production-ready code: When to consider it ready for use.</li> <li>Failure of state modeling in software development.</li> <li>Defect-driven testing (DDT) helps fix bugs and increase traceability.</li> <li>Importance of understanding and learning from past successes in software development.</li> <li>Testing is crucial for preventing failures, even if not detecting everything in advance.</li> <li>DDT helps increase knowledge and traceability.</li> <li>Validate data and check it as it comes in to avoid issues like buffer overruns.</li> <li>Keep code simple for correctness; focus on attention management during development.</li> <li>Importance of clear code and attention management in programming.</li> <li>Binary search algorithm issue discovered in 2006, present since 1983.</li> <li>Muffet's law: Correcting others' work often leads to errors.</li> <li>Avoid being too clever with code; let the compiler optimize.</li> <li>Humility is key when writing code.</li> <li>Understand the context of your code and how it interacts with other systems.</li> <li>Collective intelligence is crucial for software development.</li> <li>Consider safety critical aspects when designing systems.</li> <li>Review code from different perspectives and learn from past failures.</li> <li>1996 Ariane 5 launch failure due to hardcoded values in code.</li> <li>Code reuse from Ariane 4 led to dead code in Ariane 5, causing issues.</li> <li>Assumptions are crucial but difficult to identify until contradicted.</li> <li>Dead code can lead to significant losses.</li> <li>Configuration errors can be latent and go undetected for long periods.</li> <li>Configuration is often considered separate from source code, but it's part of the system.</li> <li>Flight control system issue due to incorrect settings for mission originating from a new launch site.</li> <li>Configuration errors are often not detected until late, and people tend to downplay their significance.</li> <li>Spreadsheets can be considered functional programming systems with issues in type systems that invite errors.</li> <li>Excel now supports Turing completeness with lambda functions.</li> <li>Gene name conversions in scientific literature have caused problems due to automatic conversion by excel.</li> <li>Earth's temperature averages are defined using the arithmetic mean, and choosing different methods can lead to varying results.</li> <li>Scientific literature has seen issues with gene name conversions in Excel.</li> <li>Errors in Excel can lead to significant changes in scientific practices.</li> <li>Earth's temperature averages are crucial for understanding climate change.</li> <li>A critique of climate deniers showed how incorrect calculations led to misleading results.</li> <li>Spreadsheet errors can have major consequences, such as austerity economics and potential deaths due to health budget cuts.</li> <li>Learning from past mistakes requires conscious effort and acknowledging the importance of practices.</li> </ul>"},{"location":"goto_programming_lang/#expert-talk-grpc-kubernetes-net-mark-rendle-matt-turner-goto-2022","title":"Expert Talk: gRPC, Kubernetes &amp; .NET \u2022 Mark Rendle &amp; Matt Turner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzqzLSJWo3k</p> <ol> <li>Matt shares his recent experience at QCon, focusing on API gateways, service meshes, and shift left tooling for API development.</li> <li>The importance of defining APIs upfront is discussed, along with tools like Swashbuckle and Nswag for generating documentation and client libraries.</li> <li>Matt highlights gRPC as a powerful option in .NET, offering fast implementation and virtual method overriding features.</li> <li>Challenges of load balancing in HTTPClient are mentioned, with potential improvements in future versions of .NET.</li> <li>gRPC implementation in C# offers a base class for service inheritance and virtual methods.</li> <li>Service mesh like Istio provides additional features but can be complicated to set up; Linkerd is more opinionated and easier for most cases.</li> <li>gRPC combines transport, encoding, and HTTP 2 multiplexing with generated stubs for messaging.</li> <li>API built on top of gRPC can be RPC or REST/CRUD style.</li> <li>Discussed the benefits of gRPC, Istio, and Linkerd, along with monitoring and observability tools like Open Telemetry.</li> <li>Tracing is highlighted for visibility into network calls and application performance.</li> <li>The evolution of computing technology from mainframes to cloud services is discussed, including platforms like Kubernetes.</li> <li>Terraform's declarative approach is praised, while Pulumi's logic-based API calls are criticized. Crossplane is introduced as a potential solution for managing cloud resources with reconciliation loops.</li> <li>PolyScale is described as a startup providing cloud database services as a proxy/cache in front of databases to reduce load and improve performance.</li> <li>Kubernetes' evolution from mainframe scheduling systems is mentioned, offering distributed computing capabilities.</li> <li>Different implementations of Kubernetes are discussed, including micro k8s, k3s, k0s, minikube, OpenShift, etc., all based on the same code and API standard.</li> <li>The complexity of Kubernetes can be challenging for some users but provides a wide range of possibilities for various applications.</li> <li>Updating software in a cluster is addressed, with Kubernetes handling complexity well. Smaller distributions like CoreOS or Flatcar are mentioned as alternatives for rolling updates.</li> <li>Microsoft's implementation of gRPC in .NET 7 allows browsers to talk to gRPC services.</li> <li>Discussion on middleware standards in .NET and how it evolved over time, along with comparisons of different languages like Kotlin and Rust.</li> <li>Challenges with Rust's lifetime feature are mentioned. Appreciation for modern compilers providing more helpful error messages is expressed.</li> <li>Discussions on coding standards, syntax highlighting, and IDEs are touched upon.</li> <li>Comparison of different programming languages and their evolution is addressed.</li> <li>DOS's abort, retry, ignore, and cancel options are mentioned.</li> <li>A new comedy project on programming's greatest mistakes is introduced.</li> </ol>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ol> <li>The speaker's journey in web development over the years has seen the emergence of frameworks like Angular 1 and React.</li> <li>A personal blog example highlights the importance of performance, with a high Lighthouse score but slow page load time.</li> <li>Mistakes made by the speaker include shipping too many JavaScript files, large index HTML file, and not considering lazy loading.</li> <li>Lighthouse performance score is calculated based on speed index, accessibility, SEO, and best practices.</li> <li>Optimizing websites for better user experience and search engine ranking is crucial.</li> <li>JavaScript's importance to Google lies in its impact on user experience and website speed.</li> <li>Aim for a simple, pure approach in web development for better performance.</li> <li>Universal Javascript apps can be optimized through code splitting and lazy loading.</li> <li>Static site generators like 11ty help create websites with high Lighthouse scores.</li> <li>Focus on user benefits rather than adding unnecessary features to a website.</li> <li>Complex universal JavaScript apps for content sites can slow down user experience.</li> <li>Progressive enhancement ensures basic functionality works without JavaScript.</li> <li>React's redesign and rebuild may not significantly improve user experience.</li> <li>Sending more data for the same experience can harm user experience in regions with limited mobile contracts.</li> <li>A website called \"What does my site cost?\" shows how much loading a specific site costs in different parts of the world.</li> <li>Excessive JavaScript usage can harm user experience.</li> <li>Gmail is an example of a site with high JS usage but good experience.</li> <li>Client-side navigation breaks accessibility for assistive technology.</li> <li>New proposals like document transition aim to improve the situation.</li> <li>Astro and Svelte are frameworks that focus on reducing JavaScript usage.</li> <li>React teams are working on improving server-side components.</li> <li>A great site should just work, focusing on HTML, CSS, and JavaScript foundations.</li> <li>Challenges of modern web development include complexity, accessibility, security, and simplicity.</li> <li>Understanding HTML basics and avoiding unnecessary frameworks is crucial.</li> <li>Use tools like Netlify, Vercel, and serverless functions to simplify development.</li> <li>Focus on building sites that just work rather than worrying about the technology powering them.</li> <li>There's a divide between front-end developers who focus on JavaScript frameworks and those who prioritize UX and CSS architecture.</li> <li>Developers should consider the trade-offs of technology choices before using them.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-native-vs-cross-platform-sebastiano-poggi-carl-gustaf-harroch-goto-2022","title":"Expert Talk: Native vs Cross-Platform \u2022 Sebastiano Poggi &amp; Carl-Gustaf Harroch \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=cNXDpl-rfrM</p> <ol> <li>Choosing between native or cross-platform apps depends on factors like product needs, company capabilities, and organizational structure.</li> <li>Native apps may be better for complex features tied to specific platforms, while cross-platform frameworks can save time and resources.</li> <li>Organizational dysfunction can lead to problems in mobile app development, such as misaligned priorities between tech and product teams.</li> <li>Back-end APIs might not consider mobile app needs, leading to issues like lack of offline support or inefficient data usage.</li> <li>Mobile apps are proactive and event-driven, requiring different API design compared to web applications.</li> <li>Collaboration between teams from the start is crucial to avoid mismatched expectations.</li> <li>Vertical teams that work closely together can help prevent issues caused by disconnected teams.</li> <li>Different approaches to team structure have been tried, with varying success.</li> <li>Vertical teams that work closely together can be more effective than separate back-end and front-end teams.</li> <li>Communication is key for successful collaboration between different teams.</li> <li>Cross-functional teams may not always work well due to individual preferences and skillsets.</li> <li>Microservices can help create structure within cross-functional teams, but they can also lead to fragmentation over time.</li> <li>Teams working together on Android and iOS platforms are possible with constructive collaboration and shared goals.</li> <li>Business models can complicate matters when revenue is involved, as each platform may have different performance metrics.</li> <li>Discussing the challenges of native app development between iOS and Android platforms.</li> <li>Importance of understanding target audience for each platform.</li> <li>Suggestions to improve collaboration include code reviews, shared language, and cross-platform thinking.</li> <li>Cross-platform frameworks allow a single team to target both platforms using a single language and build tools.</li> <li>Flutter is an example of a successful cross-platform framework, with growing usage in the mobile industry.</li> <li>React Native and Xamarin are also mentioned but have different communities and focuses.</li> <li>Declarative UIs are becoming a big trend in native mobile development.</li> <li>Kotlin and Swift UI may bring Android and iOS closer in terms of UI development.</li> <li>It's unlikely for Google to adopt Swift or Apple to adopt Kotlin, but their mindsets could become more similar.</li> </ol>"},{"location":"goto_programming_lang/#programming-language-stereotypes-pj-hagerty-goto-2021","title":"Programming Language Stereotypes \u2022 PJ Hagerty \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3o_nCe67wA4</p> <ul> <li>Misconceptions about programming languages and identities.</li> <li>Ruby is beautiful, not synonymous with Rails; it's used by big companies like Netflix, Zendesk, IBM, etc.</li> <li>Perception of open source developers as building trivial apps.</li> <li>Ruby on Rails is a framework, not the language itself.</li> <li>PHP powers about 70% of the internet despite misconceptions around its speed and security.</li> <li>Java remains popular despite being considered dead by some young developers.</li> <li>Python has uses beyond academia and analytics.</li> <li>Linux has commercial applications and is enterprise ready.</li> <li>Pearl's perception of being dead might be due to lack of updates, but it still exists with version 6 released in 2014.</li> <li>Don't limit yourself to one programming language; explore various options.</li> <li>Importance of communities in tech industry: break out of silos, learn from others, attend meetups, conferences, and online events outside your usual community.</li> <li>Understand other developers' needs and incorporate their ideas into your work.</li> <li>Build a greater tech community through collaboration.</li> <li>Importance of cross-pollination between different tech communities: open source and enterprise developers can learn from each other.</li> <li>Recognize and eliminate biases to improve collaboration.</li> <li>Focus on teaching, mentoring, and sharing knowledge with others.</li> <li>Encourage diversity in hiring and team building.</li> <li>Discusses the use of unrealistic job titles like \"rock star wizard ninja\": focus on work, not myths or legends.</li> <li>Mentor people from diverse backgrounds to improve diversity.</li> <li>Inclusion of diverse perspectives leads to better products and a more inclusive workplace.</li> </ul>"},{"location":"goto_programming_lang/#expert-talk-functional-programming-russ-olsen-christian-romney-goto-2022","title":"Expert Talk: Functional Programming \u2022 Russ Olsen &amp; Christian Romney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=AbCWHZljhkM</p> <ol> <li>Functional programming is a different approach to building programs, making them simpler and easier to understand.</li> <li>Pure functions are the foundation of functional programming; they don't have side effects or depend on external state.</li> <li>The goal is to minimize side effects in a program while achieving desired results.</li> <li>Misconceptions about functional programming include it being overly complex and requiring extensive study before understanding.</li> <li>Functional programming is about producing side effects but using them as little as possible.</li> <li>Misconceptions include the idea that functional programming is complex and requires deep understanding of terminologies from mathematics.</li> <li>To understand functional programming, you only need pure functions, immutable data structures, and efficient ways to handle these concepts.</li> <li>Category theory isn't necessary for understanding functional programming; it may be more relevant in languages with strong typing.</li> <li>The speaker started as a mechanical engineer but found programming more enjoyable and began exploring how programming languages work.</li> <li>Transitioning from object-oriented to functional programming can be liberating, simplifying the process.</li> <li>A disastrous project example: Rewriting a C++ program into a functional style could have made it easier to understand and work with.</li> <li>Functional programming helps avoid getting lost in tools and infrastructure of programs.</li> <li>Functional programming can help avoid certain bugs and simplify code changes.</li> <li>Immutable data structures and pure functions make code more predictable.</li> <li>For new functional programmers, start with a familiar problem and learn by solving it in a functional way.</li> <li>Find an interesting, medium-sized problem and write a functional program to solve it.</li> <li>Understand the details of the problem and focus on solving it in a different way.</li> <li>Learning a new programming style helps in understanding a new language.</li> </ol>"},{"location":"goto_programming_lang/#live-coding-a-dashboard-with-ksql-python-javascript-kris-jenkins-goto-2021","title":"Live-Coding a Dashboard with KSQL, Python &amp; JavaScript \u2022 Kris Jenkins \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=8bPDiuJGGh0</p> <ol> <li>The speaker is building a live dashboard for streaming sales data using various technologies.</li> <li>He connects to a Kafka database, which acts as an event stream and can be summarized into a static table.</li> <li>A one-row summary table is created from the Kafka database, showing real-time updates.</li> <li>The speaker writes a Python websocket server to connect to the Kafka database and stream data.</li> <li>He uses packages like websockets, simplejson, and confluent kafka drivers for development.</li> <li>The speaker plans to expand the connection handler function to handle more complex tasks.</li> <li>Key features include creating a Python websocket server using the websockets library, connecting to Kafka database, handling different message types, configuring consumer settings, deserializing data with schema registry, and broadcasting updates to clients.</li> <li>The speaker also addresses issues like race conditions, connection messages, and frontend development.</li> <li>He connects the web app to the websocket server, parses JSON data for display on the dashboard, and emphasizes the importance of quick internal tools for easy data access.</li> <li>Suggestions include considering Kafka for real-time data streaming in systems.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>Lars introduces Stefan and Kevlin, who discuss the current state of web development.</li> <li>Stefan highlights the increase in complexity and performance issues due to JavaScript dominance.</li> <li>Google's Lighthouse is pushing for better performance, leading to a potential shift towards simpler solutions.</li> <li>Kevlin emphasizes understanding dependencies and their consequences on security, performance, and software agility.</li> <li>Complexity in software development leads to issues like performance, security vulnerabilities, and reduced agility.</li> <li>Dependency management is crucial, but responsibility lies with everyone involved: developers, tool vendors, site providers, etc.</li> <li>Cultural shifts within companies can help improve practices such as reducing dependencies, updating them regularly, and prioritizing good user experiences.</li> <li>Numbers and data are essential for understanding the impact of these issues and driving change.</li> <li>Importance of responsibility in data and software engineering.</li> <li>Need for collective understanding and culture within teams.</li> <li>Learning from past incidents like the Left Pad event.</li> <li>Striving for self-containment and awareness of dependencies.</li> <li>Desire for frameworks to offer simpler solutions for less experienced developers.</li> <li>Maintain simplicity in code and consider trade-offs.</li> <li>Don't always go for the latest technology.</li> <li>Be aware of changing needs over time.</li> <li>Legacy code can be good, but the world around it may change.</li> <li>Slow down and evaluate decisions carefully.</li> <li>Importance of slowing down and being aware when making decisions.</li> <li>Trade-offs change over time, what was good before may not be now.</li> <li>Awareness is key to understanding the context and relevancy of decisions.</li> <li>Responsibility comes with adopting dependencies in code.</li> <li>Balancing between duplication and dependency avoidance.</li> <li>JavaScript ecosystem has evolved rapidly, leading to duplication and reinventing patterns.</li> <li>People tend to copy code from others when learning, which can lead to duplication.</li> <li>Tooling can help with awareness and identifying duplicate code.</li> <li>Communication and group intelligence are crucial for addressing duplication issues.</li> <li>There's no one-size-fits-all solution; it depends on the context and team dynamics.</li> <li>Duplication is not always bad; it can help identify patterns and abstractions.</li> <li>Tools should extend human capabilities, not define the way of working.</li> <li>Learning from observations and iterations is crucial for understanding code.</li> <li>Keep an eye on potential issues without making premature decisions.</li> </ol>"},{"location":"goto_programming_lang/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>Ideal programming languages depend on the problem domain.</li> <li>Richard and Erik prefer functional programming, but appreciate the benefits of object-oriented programming.</li> <li>They value ergonomic type systems with helpful error messages, automatic memory management, and languages that allow both functional and object-oriented programming.</li> <li>Some people struggle to adapt to new languages due to familiarity with existing patterns.</li> <li>Functional programming can be useful for transforming data between different systems.</li> <li>Humans enjoy classification, but it may not always benefit code productivity.</li> <li>Premature abstraction and overuse of inheritance can lead to inefficiencies.</li> <li>Testability should be considered during language design.</li> <li>Rust's approach to package manager and unit testing integration is an inspiration for other languages.</li> <li>Discussions on language design, focusing on testability and memory management.</li> <li>Rust's package manager and unit testing integration are seen as positive examples.</li> <li>Automatic reference counting (ARC) is considered less appealing than tracing garbage collection due to GC pauses.</li> <li>Compiler time ARC detection in languages like Roc is being explored.</li> <li>Apple's focus on automatic reference counting for Swift, potentially influencing hardware optimization.</li> <li>Cyclical dependencies and their impact on memory management are discussed.</li> <li>Apple's hardware-level optimizations for automatic reference counting could influence other processor makers.</li> <li>Elixir and Erlang have a powerful concurrency model, suitable for distributed systems.</li> <li>SIMD (Single Instruction Multiple Data) is an efficient low-level data parallelism technique used in some languages like SIMD JSON.</li> <li>Rust, Roc, and Zig are upcoming languages with different approaches to solving similar problems.</li> <li>Discussed parallelism, specifically low-level data parallelism on CPUs using SIMD.</li> <li>Zig and Roc languages mentioned as up-and-coming alternatives to Rust for specific niches like game development.</li> <li>WebAssembly's potential impact on web application programming languages is being watched closely.</li> <li>Elm and Roc can compile to WebAssembly, with Roc already doing so.</li> <li>Predictions suggest WebAssembly might mainly affect games in the near future.</li> <li>Discussion on programming languages and web development.</li> <li>WebAssembly is seen as a promising step towards using any language in the browser, but not necessarily improving performance.</li> <li>JavaScript, CoffeeScript, and TypeScript have strong cultural momentum.</li> <li>In-house applications may benefit from WebAssembly and alternative languages like C# (Blazor).</li> <li>Performance is important for web browsers but not the main factor driving change.</li> <li>Large organizations with in-house apps could be more open to new technologies.</li> </ol>"},{"location":"goto_programming_lang/#programming-now-then-eamonn-boyle-garth-gilmour-goto-2021","title":"Programming: Now &amp; Then \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=52jnUWrO9i8</p> <ol> <li>Three old men discuss changes in the industry over time.</li> <li>Access to open source and community editions has allowed self-education at home, making learning more accessible.</li> <li>Work-life balance varies for individuals; some prefer socializing with colleagues while others enjoy working from home.</li> <li>Learning resources were limited in the late '90s compared to today's online tutorials and community editions.</li> <li>Self-education using open source and community editions is seen as a positive change.</li> <li>The transition from physical documentation to online resources has made self-education easier.</li> <li>Companies value capabilities over paper credentials, with certifications still holding some monetary value.</li> <li>Cloud computing may lead to a shift in learning paradigms, potentially requiring on-site training for serverless learning.</li> <li>Product management becomes increasingly important as users expect quality features and interactivity.</li> <li>Energy consumption could influence future programming languages and platforms.</li> <li>Serverless architecture offers scalability and better resource utilization but may lead to less efficient code execution.</li> <li>Discussions about early programming experiences with different machines and their limitations.</li> <li>Comparison of modern programming languages to older ones, highlighting the importance of understanding memory management for efficiency in certain professions.</li> <li>Nostalgia for the past and appreciation for current advancements in technology.</li> <li>Discussions on the evolution of computer science and industry needs.</li> <li>The importance of understanding memory, algorithms, and mathematics in computer science education.</li> <li>The need for segmentation within the IT industry to cater to different subgroups.</li> <li>Comparison between current programming and early computing methods.</li> <li>How each generation faces different challenges and problems.</li> <li>Discussions on how technology has evolved and the impact it has had on different generations.</li> <li>The importance of being grateful for the privileges in the IT industry, while acknowledging the stresses involved.</li> <li>Philosophy's role in IT as people gain more experience and refine their understanding of fundamental principles.</li> </ol>"},{"location":"goto_programming_lang/#erlang-the-hidden-gem-solving-problems-at-scale-for-30-years-francesco-cesarini-goto-2021","title":"Erlang, the Hidden Gem: Solving Problems at Scale for 30+ Years \u2022 Francesco Cesarini \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-m31ag9z4VY</p> <ul> <li>Erlang Solutions' Francesco Cesarini discusses the history and features of Erlang.</li> <li>BEAM virtual machine is highly optimized for large-scale concurrency, featuring a JIT compiler.</li> <li>OTP abstracts from concurrency models, increasing productivity and ensuring resilience by default.</li> <li>Elixir runs on the same VM as Erlang, expanding its reach to more developers.</li> <li>Fault tolerance in OTP is achieved through processes not sharing state or memory, allowing termination of faulty processes without affecting others.</li> <li>The inventor of Erlang aimed to make it accessible for a wider range of programmers, initially focusing on web developers.</li> <li>Attempts to bring Erlang to the web failed due to different requirements and toolings needed for telecom and web development.</li> <li>Akka framework was inspired by OTP but lacks full emulation of BEAM semantics.</li> <li>BEAM runs a scheduler for every core on a machine, ensuring fair distribution of processes across threads and migration between them.</li> <li>Lua framework allowed running Erlang on iPhones but didn't make it into production.</li> <li>Elixir is making its way into embedded spaces like IoT devices and cars due to performance improvements in JIT compiler and numerical capabilities.</li> <li>The original Erlang language evolves very little, with most changes happening around libraries, frameworks, and the BEAM virtual machine.</li> </ul>"},{"location":"goto_programming_lang/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Functional programming is a style that avoids mutation and side effects, focusing on immutability, pure functions, and functional languages.</li> <li>Pure functional languages support only pure functions, which ensure predictable behavior and enable caching techniques like memoization.</li> <li>Performance advantages of functional programming include caching, pre-computing, and parallelization; disadvantages include increased memory usage due to immutability and potential performance issues with recursion.</li> <li>Functional languages focus on immutability, pure functions, and functional programming concepts.</li> <li>Caching strategies include memoization, which is easier to implement with pure functions. Precomputing can be done at build time for known constants or function calls, reducing runtime costs.</li> <li>Parallelization can speed up functional programs but requires thread safety inherent in pure functions.</li> <li>Managed effects offer an alternative to side effects by creating tasks instead of immediately executing actions like promises; this approach improves performance and simplifies code.</li> <li>Pure functional programming offers benefits for development, such as fewer flaky tests due to minimized effects, no need for mocking, and the ability to test effects through simulation.</li> <li>Rearranging code in functional languages is possible without affecting the result. Global mutable variables create implicit dependencies and make debugging difficult; pure functions have explicit dependencies and are easier to debug.</li> <li>Side effects introduce implicit dependencies, increasing search space for bugs. In pure functional programming, explicit dependencies make debugging simpler.</li> <li>Functional programming offers benefits like caching, parallelization, testing, code revision, debugging, and ecosystem advantages. Pure functional languages provide a more reliable experience compared to imperative ones.</li> </ol>"},{"location":"goto_programming_lang/#modernizing-enterprise-java-markus-eisele-natale-vinto-ana-maria-mihalceanu-goto-2021","title":"Modernizing Enterprise Java \u2022 Markus Eisele, Natale Vinto &amp; Ana-Maria Mihalceanu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=tSjCFMSp9oY</p> <ul> <li>Key points for migrating from monolithic to cloud-native applications:</li> <li>Understand business and non-functional requirements.</li> <li>Choose the right approach (refactoring is optimal).</li> <li>Use modern Java frameworks for cloud-native apps.</li> <li>Monolithic apps can still be useful with well-architected designs.</li> <li>Pros and cons of monolithic vs microservices architecture discussed.</li> <li>Kubernetes as a popular operational platform for various workloads, including stateful applications.</li> <li>Importance of understanding how components work together in cloud native environments.</li> <li>\"Concise Cloud Native Guide\" provides practical examples and guidance on migrating Java projects to the cloud.</li> <li>Readers can choose theory or hands-on experience with examples.</li> <li>Book focuses on Java migration, rehosting, re-platforming, or complete rewrite decisions.</li> <li>Challenges in migrating traditional applications include poor architecture, technical limitations, and lack of documentation.</li> <li>Three approaches to modernization: refactoring, lift and shift, and hybrid (split complexity).</li> <li>OSGI framework helps build modular monoliths with loose coupling.</li> <li>Container technology speeds up development and deployment by standardizing application packaging and simplifying infrastructure management.</li> <li>Three approaches for modernizing applications: refactoring, lift and shift in containers, or hybrid approach.</li> <li>Container technology brings standardization and portability to application development and deployment.</li> <li>Challenges in developer productivity with containerized systems.</li> <li>Improving Java productivity through runtime ecosystems like GraalVM for serverless workloads.</li> <li>Building and orchestrating apps in containers is a challenge.</li> <li>The book focuses on being agnostic and open source, improving Java productivity for developers.</li> <li>GraalVM has advantages for serverless workloads.</li> <li>Optimization and frameworks are important for Java development.</li> <li>Containers help with universality and best practices.</li> <li>Quarkus conserves existing knowledge while scaling.</li> <li>The book addresses cloud native concepts, focusing on practical aspects rather than theoretical ones.</li> <li>Authors prefer calling it \"Kubernetes native\" due to its specific execution environment.</li> <li>Book aims to provide practical guidance for Java developers in the new era of technology.</li> <li>Covers various frameworks and technologies while not delving too deeply into each one, offering pointers or links instead.</li> <li>Authors believe their book is a great starting point for modernizing existing applications and adopting Kubernetes native approaches.</li> </ul>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2021","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9p60bBBpG6A</p> <ol> <li>Evan Boyle and Garth Gilmore, both TypeScript and Kotlin enthusiasts, built a WebGL game in Kotlin JS to compare it with a similar project in TypeScript.</li> <li>IntelliJ provides good support for Kotlin JS development, while Gradle serves as the build system for multi-platform compilation.</li> <li>Dependencies can be managed through regular and npm methods.</li> <li>The speakers found Kotlin JS to be a viable alternative to TypeScript in certain situations.</li> <li>Kotlin's Domain Specific Language (KDSL) is more modern than Groovy, while multi-platform allows compiling common code for various platforms.</li> <li>Integrating with JavaScript libraries is easy using Gradle files and external declarations.</li> <li>TypeScript is popular due to its established nature, easy integration with JavaScript, and automatic generation tool (Ducat).</li> <li>Kotlin's popularity has grown quickly but still needs time to catch up with TypeScript.</li> <li>TypeScript is a superset of JavaScript, making it easier to use and interoperable.</li> <li>Kotlin offers good interop with JavaScript through Gradle files and external declaration files.</li> <li>Ducat tool helps in automatic generation for TypeScript declaration files.</li> <li>Kotlin supports dynamic typing (dynamic) and object creation similar to TypeScript.</li> <li>Kotlin's KDSL can be awkward, but it has a lambda with receiver feature for DSL support.</li> <li>Advanced features of TypeScript include union types, intersections, conditional types, generics, map types, and type inference with generics.</li> <li>Suspending functions in Kotlin make it more versatile than JavaScript for asynchronous programming.</li> <li>Kotlin's syntax is generally considered nicer due to its modern design.</li> <li>Destructuring in JavaScript and TypeScript is more flexible than Kotlin's approach.</li> <li>Both languages have their strengths and weaknesses; it depends on the context and preferences of the developer.</li> <li>Jetpack Compose is a game changer as it provides a single DSL for structuring UIs across different platforms (Android, Desktop, Web).</li> </ol>"},{"location":"goto_programming_lang/#how-to-read-complex-code-felienne-hermans-goto-2021","title":"How to Read Complex Code? \u2022 Felienne Hermans \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=az-MX_M11lg</p> <ol> <li>Many people learned programming through self-exploration, which has influenced how they teach children today.</li> <li>Books for kids often focus on the difficulty of programming and fun in making mistakes while overlooking syntax rules. This stereotype is prevalent among professionals who learned programming at a young age.</li> <li>Python's precision can be misleading, as it requires following rules and syntax. Telling children that programming is hard may discourage them from learning.</li> <li>Research shows that kids often learn programming skills but then flatline. Teaching reading code should be emphasized alongside exploration and experimentation.</li> <li>The Advent of Code focuses on writing small programs, which could be more effective for learning new languages. Reading code is crucial as it takes up 60% of programmers' time.</li> <li>Reading code models can apply natural language processing theories to programming. Short-term memory issues and short-term memory overload can cause confusion in code.</li> <li>Improving reading comprehension involves building mental models, learning programming fundamentals, and practicing reading code. Understanding programming languages and their syntax helps with code reading.</li> <li>Techniques for enhancing code reading include flashcards, state tables, reproducing code, summarizing it, and understanding the goal of a program. The \"Programmer's Brain\" book offers more insights into improving code reading skills.</li> <li>Starting a code reading club at work can help colleagues learn together. Benefits include team building, knowledge sharing, and deliberate practice.</li> <li>Resources for learning more: Felienne's website (flinders.com), Twitter (@sfelienne), Software Engineering podcast (se-radio.net). Free resources on code reading clubs are available at felina.com/club.</li> </ol>"},{"location":"goto_programming_lang/#java-security-the-java-ecosystem-nicolas-frankel-goto-2021","title":"Java Security &amp; the Java Ecosystem \u2022 Nicolas Frankel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uVob-4aXbxY</p> <ol> <li>Changing Java class types is no longer possible in recent JDKs, making it harder to manipulate bytecode for malicious purposes.</li> <li>Attaching a JVM to another can be used for both good and bad reasons; the security manager should apply to all dependencies.</li> <li>Auditing source code and building libraries yourself ensures trust in external dependencies. Untrusted code includes any library or dependency used in a project.</li> <li>Managing transitive dependencies is challenging, but restricting them is recommended.</li> <li>Discussion on security issues in the JVM ecosystem focuses on Java, with concerns about Oracle's approach to feedback and community involvement.</li> <li>Deprecation of the security manager in Java 17 raises concerns for companies relying on it.</li> <li>Stability has been a key factor in Java's success, but its current strategy may be causing issues.</li> <li>Concerns about the future of Java and JVM include community involvement decreasing, Java becoming more centralized affecting adoption, stability replaced by faster release cadence, fragmentation due to module system, and possible negative impact on Java adoption.</li> <li>Suggestions for a middle ground between stability and innovation are needed.</li> </ol>"},{"location":"goto_programming_lang/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility is the practice of designing products for everyone to use, regardless of their abilities.</li> <li>Web accessibility focuses on navigation, auditory, visual, sound, and motor capabilities.</li> <li>It's crucial for legal reasons and human aspects.</li> <li>This talk will focus on writing accessible JavaScript.</li> <li>Importance of accessibility: Understanding how people with disabilities use technology.</li> <li>JavaScript and accessibility: Interacting with content, communicating updates to screen readers, and handling navigation for keyboard users.</li> <li>Methods for accessible JavaScript: Using area hidden property, aria live attribute, and custom elements.</li> <li>Example of handling navigation: Creating focusable elements that can be reached through tabbing on a page.</li> <li>Demonstrate how to handle content updates for screen readers.</li> <li>Create custom elements with proper tab indexes and focus management.</li> <li>Use skip to main content links for better user experience.</li> <li>Ensure interaction with your site is accessible through both mouse and keyboard events.</li> <li>Handle handler events in JavaScript: Ensure equal keyboard and mouse events for custom elements.</li> <li>Testing accessibility: Use tools like lighthouse, wave, chromevox, ally.js, and accessibility checklists.</li> <li>Accessibility resources: Check out articles, presentations, and wai-aria authoring practices.</li> <li>Stay updated on accessibility: Join communities, attend conferences, and follow experts for the latest information.</li> </ol>"},{"location":"goto_programming_lang/#object-oriented-programming-vs-functional-programming-dave-farley-goto-2021","title":"Object Oriented Programming vs Functional Programming \u2022 Dave Farley \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-VADIcicpcg</p> <ul> <li>Programming paradigms have evolved from unstructured languages to structured, object-oriented (OO), and functional programming.</li> <li>Each paradigm imposes specific constraints on programming aspects such as flow control in structured programming or assignment in functional programming.</li> <li>Different paradigms can coexist within a language, with the choice depending on context and personal preference.</li> <li>The value of each paradigm lies in its imposed constraints that help programmers avoid mistakes and write better code.</li> <li>Functional programming offers advantages like abstraction, stability, and provability.</li> <li>Object-oriented programming (OOP) is more aligned with human thinking and easier to understand.</li> <li>Limiting side effects in code is beneficial.</li> <li>The speaker disagrees with Bob Martin about finding all programming paradigms.</li> <li>A new approach called \"reactive\" limits synchronous calls between modules, resulting in higher performance than functional or OOP designs.</li> </ul>"},{"location":"goto_programming_lang/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Explosive velocity in web development involves moving fast and safely with technologies like Next.js, Tailwind CSS, and Typescript.</li> <li>Next.js offers various rendering methods, handles routing, and optimizes code splitting.</li> <li>Tailwind CSS provides atomic classes, auto-completion, and efficient build processes.</li> <li>Typescript compiles ahead of time, offers auto-completion, and protects from errors.</li> <li>Combining these technologies enables fast web development with predictability.</li> <li>Create a project with dependencies for speed across the stack.</li> <li>Initialize tailwind and Next.js to build a simple web page.</li> <li>Transform the page into a basic to-do list app using React.</li> <li>Add input field, button, and handle adding new items.</li> <li>Use React's useState hook to manage state for to-do items.</li> <li>Demonstrate how opinions in frameworks help developers move fast.</li> <li>Create a to-do list app with React, add checkboxes, and manage state using hooks.</li> <li>Utilize Back4App for free backend services.</li> <li>Create a database table for to-do items, query and mutate data from the database.</li> <li>Connect the client to the database.</li> <li>Use GraphQL for efficient data fetching.</li> <li>Added mutation to database, auto-completion helps with parameterized to-do item creation.</li> <li>Fetched to-do items from the database and debugged issues with adding new to-dos.</li> <li>Integrated Tailwind CSS for better UI design.</li> <li>Scalability can be achieved through hosting options like AWS, GCP, and cloud providers.</li> <li>Predictability leads to velocity in development.</li> <li>Utilized tools like Hasura and Heroku for load management.</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-through-the-lens-of-a-philosopher-linguist-anjana-vakil-goto-2021","title":"Functional Programming Through the Lens of a Philosopher &amp; Linguist \u2022 Anjana Vakil \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=0kI-as3K4Zo</p> <ol> <li>Lars and Anjana discuss various topics, including functional programming, linguistics, philosophy, and readable code.</li> <li>Anjana's background in linguistics and philosophy led her to software development through computational linguistics.</li> <li>Programming languages are primarily for human communication with computers; focus on readability and maintainability.</li> <li>Human performance factor is crucial: consider time spent writing, updating, and maintaining code.</li> <li>Adam Tornhill's idea of using Git data to understand social aspects of codebases.</li> <li>Functional programming languages support pure functions, no state changes, and functional programming styles.</li> <li>Multi-paradigm languages can be considered functional if they have features that support functional programming.</li> <li>Pure functional languages constrain you to work in a functional paradigm; multi-paradigm languages allow for different programming styles.</li> <li>Having first-class functions and utilities like mapping and filtering makes functional programming easier.</li> <li>Some developers prefer pure functional languages due to their constraints, while others find it useful to have multiple paradigms in a language.</li> <li>Functional programming offers predictability, making testing and debugging easier.</li> <li>Pure functional languages can help with debugging, testing, maintaining, changing, and refactoring code.</li> <li>Functional programming is beneficial for scaling up systems and improving performance.</li> <li>Learning different paradigms helps appreciate the benefits of one's preferred language.</li> <li>Functional programming has been around since the 1930s but became more practical in recent decades.</li> <li>Gatekeeping in computer science can be a problem, but there's potential for more inclusivity and accessibility.</li> <li>Functional programming has the potential to become even more prevalent in the future.</li> <li>Challenges of understanding programming concepts and how they can be made more accessible.</li> <li>Importance of welcoming new people into the field, regardless of their backgrounds.</li> <li>Examples of functional programming languages: Elixir and Elm.</li> <li>Functional programming community should focus on improving communication and accessibility.</li> <li>Everyone can contribute to making learning easier by helping others understand complex topics.</li> <li>Attend conferences, events, and connect with others in the field.</li> <li>Speaker emphasizes explaining concepts to beginners for better understanding.</li> </ol>"},{"location":"goto_programming_lang/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix Live View is a real-time web framework built on Elixir, providing efficient communication between server and client via websockets.</li> <li>It sends only changed HTML markup, enabling features like form validation and file uploads in real time.</li> <li>Reusable components with their own state allow for live navigation without unnecessary markup.</li> <li>The framework is built on Elixir and Phoenix, highly recommended for web development.</li> <li>Demonstrated by converting a traditional controller-driven app to a real-time one using Phoenix Live View.</li> <li>In the example, they used Elixir and Phoenix for a real-time stock updates application, focusing on live views for interactive features.</li> <li>LiveView provides real-time updates without page refreshes.</li> <li>The speaker converted a Phoenix app to live view by following steps from readme and using generators for real-time communication.</li> <li>They created a fake database with a publish/subscribe mechanism for updating prices and companies.</li> <li>Subscribed to updates in the socket's connect function, achieving real-time communication between server and client.</li> <li>Added live chat functionality with fallback options for users without JavaScript enabled.</li> <li>Handled submitted comments and updated list of companies in real time.</li> <li>Implemented temporary assigns to handle large amounts of data efficiently.</li> <li>Used pattern matching to handle new comments and update socket connections.</li> <li>Demonstrated real-time chat with high update frequencies, showing the importance of diffing algorithms for efficient updates without reloading entire pages.</li> <li>A book called \"Phoenix in Action\" is mentioned, along with a discount code. Encouraged further exploration of the project's code on GitHub.</li> </ol>"},{"location":"goto_programming_lang/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte is a compiler-based web framework with no dependencies and no virtual DOM.</li> <li>StealthKit extends Svelte, offering features like file-based page routing, rest services, layouts, code splitting, hot module reloading, static pages, tooling setup, and serverless functions.</li> <li>To start a project with StealthKit, run <code>npm init svelt</code> and configure settings.</li> <li>Development mode can be started using <code>npm run dev</code>, while deployment is done via <code>npm build</code>. Code checking and formatting are handled by <code>npm run lint</code>/<code>format</code>.</li> <li>A sample ToDo app demonstrates StealthKit's functionality, showcasing its components and features.</li> <li>Svelte offers unique benefits like compact code without the 'this' keyword, efficient rendering of to-do components, reactive declarations for updates, and built-in animations.</li> <li>State management is achieved through variables and reactive statements, while CSS is scoped by default with clear global placement.</li> <li>Svelte has a small bundle size and fast performance due to its efficient virtual DOM.</li> <li>Component state management can be done using stores for shared data access across components.</li> <li>Pros/cons of using Svelte include its less popular status but easy learning curve, different component splitting approach, and more open source libraries than SvelteKit.</li> <li>Related tools include VS Code extensions, testing libraries, mobile app development with Smelt Native, and resources like Rich Harris' talk on rethinking reactivity.</li> </ol>"},{"location":"goto_programming_lang/#command-line-the-underestimated-tool-bert-jan-schrijver-goto-2021","title":"Command-line, The Underestimated Tool \u2022 Bert Jan Schrijver \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=bWDuXAQJX8Y</p> <ol> <li>Command line tools are simple, powerful, and efficient for tasks like quick data manipulation and automation.</li> <li>Bash is a common shell that interprets commands and can handle built-in commands or external binaries.</li> <li>Utilities such as cut, grep, sed, and awk are useful for basic data manipulation tasks.</li> <li>Automating repetitive tasks saves time and increases productivity.</li> <li>Use standard utilities like cut, grep, sed, awk for cross-platform compatibility.</li> <li>On Windows, use WSL (Windows Subsystem for Linux) to access Linux commands.</li> <li>Improve skills by exploring commands and reading documentation.</li> <li>Command line proficiency can enhance productivity, troubleshooting, and understanding of applications.</li> </ol>"},{"location":"goto_programming_lang/#a-beginners-guide-to-ebpf-programming-with-go-liz-rice-goto-2021","title":"A Beginner's Guide to eBPF Programming with Go \u2022 Liz Rice \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uBqRv8bDroc</p> <ul> <li>EBPF (Extended Berkeley Packet Filter) is a powerful technology that enables running custom programs within the Linux kernel.</li> <li>BPF, originally known as Barclay Packet Filters, is now used interchangeably with ebpf; it involves writing C programs and converting them into bytecode instructions for execution in a bpf virtual machine.</li> <li>Maps facilitate data transfer between user space and the kernel, allowing programs to respond to various events.</li> <li>Events trigger EBPF programs, including system calls, function entries/exits, network packet arrivals, etc., using system calls like perf_event_open and ioctl.</li> <li>A library such as libbpf provides higher-level abstraction for interacting with these system calls, simplifying development.</li> <li>EBPF programs are compiled into object files that can be inserted into the kernel to run alongside other programs.</li> <li>User space code manages loading and attaching programs to events, ensuring they're triggered correctly.</li> </ul>"},{"location":"goto_programming_lang/#from-objective-c-to-swift-and-the-latest-innovations-at-apple-daniel-h-steinberg-goto-2019","title":"From Objective-C to Swift and the Latest Innovations at Apple \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=qynCRtJlV8I</p> <ul> <li>Daniel Steinberg, a key figure in iOS and Swift development, shares his journey.</li> <li>Early iPhone development used Objective-C as its language.</li> <li>Apple transitioned from Objective-C to Swift, responding to community feedback.</li> <li>Recent iOS and Swift updates include ABI Stability, Module Stability, SwiftUI, and Combine frameworks.</li> <li>Apple's swift move from Objective-C to Swift was faster than anticipated.</li> <li>ABI and Module Stability enhance app stability across versions.</li> <li>SwiftUI and Combine change how developers approach building apps.</li> <li>Apple's control over both hardware and software allows for rapid innovation.</li> <li>Indoor mapping is an example of their focus on improving existing technologies.</li> <li>Beacons were used for indoor navigation but had limitations; Apple improves with more precise sensors.</li> <li>Near Field Communication (NFC) enables content sharing without contact.</li> <li>Apple Pay customizes its features for different markets.</li> <li>Steinberg's book focuses on SwiftUI, teaching advanced concepts and differences from UIKit.</li> <li>Future updates will likely strengthen SwiftUI and improve AR and machine learning capabilities.</li> <li>HomeKit ecosystem could benefit from more support from Apple.</li> <li>Package Manager is expected to evolve further with resources and binaries.</li> <li>Steinberg frequently teaches private classes in various European countries.</li> </ul>"},{"location":"goto_programming_lang/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Jamstack is a web development approach focused on static sites, build processes, and deployment to edge servers/CDNs.</li> <li>It evolved from the initial focus on JavaScript, APIs, and markup.</li> <li>Key components include static site generators, CICD process, and deployment to CDN/edge servers.</li> <li>Complexity has increased with tools like serverless functions, incremental static regeneration, and distributed persistent rendering.</li> <li>The goal is to simplify the deployment process while still allowing for complex features locally.</li> <li>Jamstack has evolved from simple static sites to complex ones with features like distributed persistent rendering and incremental static regeneration.</li> <li>Managing complexity is a tradeoff, as some people prefer handling it locally rather than on production servers.</li> <li>As Jamstack gains mainstream adoption, it's becoming more versatile and can handle larger websites and complex use cases.</li> <li>Inline editing tools are emerging to make content management easier for non-technical users.</li> <li>While there were once clear limitations for static sites, they have become increasingly adaptable with the evolution of Jamstack.</li> <li>E-commerce is being supported by Jamstack.</li> <li>User-generated content can be managed using various methods in Jamstack.</li> <li>Favorite static site generators: Eleventy (Node.js) and Hugo (Go).</li> <li>Next.js is used for complex UI interactions.</li> <li>Challenges with framework-based solutions include understanding where variables are created and accessed.</li> <li>Debate within the community about broadening Jamstack definition to focus on edge deployments and tooling.</li> <li>Server-side rendering and pre-built routes will continue evolving.</li> <li>Jamstack could become the default way of building websites in the future.</li> <li>A book on Jamstack is available through Manning Early Access Program, with a physical version expected in fall.</li> </ol>"},{"location":"goto_programming_lang/#graphql-anywhere-our-journey-with-graphql-mesh-schema-stitching-uri-goldshtein-goto-2021","title":"GraphQL Anywhere - Our Journey With GraphQL Mesh &amp; Schema Stitching \u2022 Uri Goldshtein \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=2vwlkJnaV0Y</p> <ol> <li>GraphQL is a query language for data, allowing users to describe the data and its structure.</li> <li>Benefits include better organization of code, automation, and orchestration between teams and data sources.</li> <li>Start with an existing process and automate it when introducing GraphQL into a company.</li> <li>GraphQL is a powerful tool that can automate processes and improve developer experience.</li> <li>It can be used on the client, server, or between services for various benefits.</li> <li>GraphQL Mesh allows querying existing data sources as if they were graphical without requiring changes to those sources.</li> <li>Merging different graphical sources is possible using portal federation or schema stitching.</li> <li>Schema stitching can be a good option, even for those who previously used it and thought it was deprecated, as it provides benefits within the GraphQL ecosystem.</li> <li>GraphQL Mesh can generate gateways or SDKs for distributed execution.</li> <li>The Guild's product, GraphQL Hive, is a powerful registry for managing metadata.</li> <li>People are using GraphQL Hive even without actual GraphQL services due to its ease of use and developer tools.</li> </ol>"},{"location":"goto_programming_lang/#should-kotlin-be-your-go-to-language-garth-gilmour-eamonn-boyle-goto-2019","title":"Should Kotlin Be Your Go-To Language? \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=FcrkrsxYigM</p> <ul> <li>Both speakers have a background in retro computing, transitioning into professional tech careers.</li> <li>They've worked on various platforms like C++, telecoms, desktop applications, and mobile apps. One speaker also pursued philosophy and psychology before becoming a trainer.</li> <li>The journey from criminology to IT training is discussed, highlighting the importance of staying updated with new technologies.</li> <li>Kotlin is mentioned as their favorite programming language due to its expressiveness and modern design.</li> <li>Kotlin's convergence with other languages makes it attractive for developers.</li> <li>The speaker's company chose Kotlin for its simplicity and readability over options like Scala.</li> <li>Understanding hardware architecture is essential, but prioritize readability and maintainability in code writing.</li> <li>Performance testing is crucial to measure efficiency; find a balance between performance and simplicity for most developers.</li> </ul>"},{"location":"goto_programming_lang/#erlang-elixir-blockchain-serverless-what-ulf-wiger-sasa-juric-eric-johnson-goto-2019","title":"Erlang, Elixir, Blockchain &amp; Serverless\u2026 What?! \u2022 Ulf Wiger, Sasa Juric &amp; Eric Johnson \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=2QNA6uaBHY4</p> <ul> <li>GOTO conference with Eric Johnson, Sa\u0161a Juri\u0107, and Ulf Wiger discussing Erlang and Elixir.</li> <li>Erlang history: visible outside Ericsson in '92, Sa\u0161a started using it 10 years ago, Elixir released in 2014.</li> <li>Elixir is an evolution of Erlang with better ergonomics and UX focus.</li> <li>Differences between languages: Elixir more expressive and complex, while Erlang simpler and direct.</li> <li>Elixir attracts web developers seeking scalability, robust servers, and messaging durability.</li> <li>Both Erlang and Elixir are used for building software systems with 15+ languages built on Beam runtime.</li> <li>Erlang is simple and straightforward, while Elixir offers more expressiveness and complexity.</li> <li>Eternity blockchain uses Erlang due to its suitability for specific problems.</li> <li>The best language depends on programmer expertise and language fit for the domain.</li> <li>Erlang and Elixir are good for building rather than executing code in cloud environments.</li> <li>Serverless environments may not be ideal for these languages due to their distributed nature.</li> <li>A custom runtime allows using other languages with serverless environments.</li> <li>Lambda is stateless, while Erlang and Elixir focus on networking between processes.</li> <li>Blockchain's distributed nature fits well with the concurrency semantics of these languages.</li> <li>Custom runtime allows bringing own language, with examples for Elixir and Erlang.</li> <li>Erlang originated from controlling telephone switches but evolved into a general-purpose language.</li> <li>Sumo wrestling analogy: Both languages are lightweight and wouldn't compete due to their different purposes.</li> </ul>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ul> <li>10 years of web development journey</li> <li>Frontend performance best practices</li> <li>Building a personal blog with universal javascript framework</li> <li>Lighthouse scores and website performance comparison</li> <li>Difference in performance due to complexity, optimization, and resource usage</li> <li>Javascript's impact on browser performance: Importance of page speed and user experience</li> <li>Single-threaded browser environment can cause frustration for users</li> <li>Overly optimized websites may not be as fast as they seem, especially on low-end devices</li> <li>Universal Javascript apps might add unnecessary overhead for content sites</li> <li>Consider using tools like 11ty that focus on performance and don't add extra features by default</li> <li>Progressive enhancement is important for ensuring a good user experience regardless of JavaScript availability</li> <li>React documentation example shows that the JavaScript version is heavier without offering more functionality</li> <li>Average website page weight is 2 megabytes, which could be expensive in some countries</li> <li>App frameworks may not always be suitable for content sites</li> <li>Gmail offers a low data version with minimal JavaScript, providing a good user experience even on slow connections</li> <li>The web is complex and heavy, with varying costs across countries</li> <li>Javascript frameworks are popular but not necessarily the best for all scenarios</li> <li>HTML, CSS, and JS should be the foundation of building great sites</li> <li>Misuse of HTML leads to accessibility issues</li> <li>Only 6% of websites use Content Security Policy (CSP) for security</li> <li>The web is losing quality due to complexities in technology choices</li> <li>Web accessibility issues are common due to misuse of HTML</li> <li>Only 6% of websites use Content Security Policy (CSP) for security</li> <li>Vulnerable JavaScript libraries are used in 80% of websites</li> <li>The web is losing quality, but developers have become more productive</li> <li>Serverless functions allow easy API creation with minimal code</li> <li>Complexity in modern tech stacks can be overwhelming for newcomers</li> <li>Fundamentals like HTML, CSS, and JavaScript are essential for good user experiences</li> <li>Consider splitting frontend roles into javascript engineers and UX engineers</li> <li>Focus on delivering a good user experience regardless of the underlying technology</li> <li>Framework choices impact company's bottom line</li> <li>Web developers should focus on building good user experiences</li> <li>Consider using simpler tools and prioritize end-user experience over developer experience</li> <li>In 2020, front-end developers may need to be more versatile, focusing on different aspects of web development</li> <li>Strive for a complete green Lighthouse score and better user experience</li> <li>Use the right technology for each project instead of relying on a specific stack</li> </ul>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2020","title":"Life After Business Objects - Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=UBUYwpDl3-g</p> <ol> <li>The speaker shares their journey as a veteran of object-oriented programming (OOP) and emphasizes the importance of choosing the right programming paradigm based on individual needs and preferences.</li> <li>An example is given to compare modeling a point class in C#, which is not thread safe, with its functional programming equivalent in F#.</li> <li>Functional programming languages like F# provide safer defaults that prevent developers from making unconscious mistakes through features such as immutable state and types.</li> <li>Immutability makes concurrency management easier in functional programming.</li> <li>The speaker highlights the need to consider the right paradigm for each developer's needs, acknowledging that there is no one best solution.</li> <li>Functional programming languages with immutable state and types are beneficial for concurrency management.</li> <li>Access visibility in OOP can be limiting, as it doesn't solve the problem of exposing certain methods for specific scenarios. Separating logic into different models based on scenarios allows more control over accessibility.</li> <li>Mixing data and operations in OOP can lead to subjectivity and difficulty in defining where certain operations belong. Splitting business objects into multiple classes per scenario provides better clarity and separation of concerns.</li> <li>Object-oriented development can be subjective, as data and operations are mixed.</li> <li>Approaches to class design differ between languages like C# and Java.</li> <li>Functional programming uses algebraic data types for tight domain modeling.</li> <li>Adopting functional programming in traditional object-oriented languages is possible but not always ideal.</li> <li>Recommendations for using C++ include functional, persistent data structures, magnetic operations, and function composition.</li> <li>Rich Hickey's talk on the harm of optional values highlights differences between sets and slots.</li> <li>Adopting functional programming in object-oriented languages is possible but not always ideal.</li> <li>C# is evolving to include more FP features, but its core remains object-oriented with mutable data structures.</li> <li>F# offers algebraic types for better domain expression and immutable records.</li> <li>Functional programming has shortened development cycles, leading to quicker feature delivery and more compact code.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2020","title":"Upgrade Time: Choose Java 11+ or the \u201cOther\u201d One\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=BcVOvdrFaPY</p> <ol> <li>Migrating from Java to Kotlin:</li> <li>Improve interoperability with the Java ecosystem.</li> <li>Benefit from multi-platform support, readability, and safe programming.</li> <li> <p>Leverage a growing Kotlin ecosystem.</p> </li> <li> <p>Challenges in interoperability between Kotlin and Java:</p> </li> <li> <p>Address compatibility issues when mixing languages.</p> </li> <li> <p>Demo application:</p> </li> <li> <p>Board game rating service using Spring Boot 2.0, memory database, unit tests, and integration tests.</p> </li> <li> <p>Usage of Maven for the demo to showcase Kotlin with a standard build tool.</p> </li> <li> <p>Migrating Java application to Kotlin:</p> </li> <li>Set up dependencies for Kotlin and test libraries.</li> <li>Refactor plain Java objects into Kotlin classes, using data classes for immutability.</li> <li>Rewrite unit tests in Kotlin for better understanding of the language.</li> <li> <p>Attack core logic and refactor Spring configuration.</p> </li> <li> <p>Benefits of migrating to Kotlin:</p> </li> <li>Improved interoperability with Java ecosystem.</li> <li>Promotes new features like immutability, non-nullable types, and final classes.</li> <li> <p>Better code organization and readability.</p> </li> <li> <p>Migrate Java code to Kotlin for better interoperability and improved features:</p> </li> <li>Use data classes, Lombok, and coupling entities for safer and more efficient coding.</li> <li>Test Kotlin code with mocking frameworks like Mockito.</li> <li> <p>Add dependencies for kotlin reflect, coupling login framework, and Spring Data JPA.</p> </li> <li> <p>Migrated Java application to Kotlin:</p> </li> <li>Added dependencies for proper interoperability.</li> <li>Modified Spring configuration and classes.</li> <li>Tested the integration, ensuring everything worked as expected.</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-java-will-you-have-to-pay-for-it-trisha-gee-daniel-bryant-goto-2019","title":"The Future of Java: Will You Have to Pay For It? \u2022 Trisha Gee &amp; Daniel Bryant \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=W-_5AV2qZXs</p> <ul> <li>Java is a popular general-purpose programming language, used by 16% of developers.</li> <li>It offers good readability and library support for various technologies.</li> <li>The JVM platform enables multiple languages to work together.</li> <li>Java balances stability with innovation, but may not be the most cutting-edge language.</li> <li>Oracle's new licensing model for Java 11 requires understanding alternative JDK options.</li> <li>Java is versatile and preferred by some developers over other languages.</li> <li>Containers and cloud technologies evolve, with better tutorials and documentation available.</li> <li>Developers should focus on their strengths while learning new skills.</li> <li>Full stack development is becoming common, requiring knowledge of frontend, backend, and devops.</li> <li>Find companies that value your unique skill set.</li> </ul>"},{"location":"goto_programming_lang/#programming-kotlin-why-how-its-future-venkat-subramaniam-hadi-hariri-goto-2021","title":"Programming Kotlin: Why, How &amp; Its Future \u2022 Venkat Subramaniam &amp; Hadi Hariri \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=7J2ATE4NGZ8</p> <ol> <li>Cat, a busy individual who writes books while traveling, has authored 11 books, including one on DSL in Kotlin.</li> <li>The author chose to write the book because of the story behind it, not for marketing purposes.</li> <li>Cat found Kotlin intriguing due to its unique features and syntax compared to other languages he had used.</li> <li>Initially reluctant to write a book about Kotlin, the author later found excitement in understanding its unique features.</li> <li>Writing a book is challenging but rewarding, as it makes one smarter and helps them learn new things.</li> <li>Feedback from experts improves the final product, and one doesn't need to be an expert to write or speak about a topic.</li> <li>Kotlin was created by JetBrains for Android development, offering features like inline lambdas, multi-paradigm, and non-opinionated approach.</li> <li>Challenges in writing books include balancing depth and breadth of the rich language.</li> <li>Kotlin's appeal lies in treating developers as adults, allowing various coding styles.</li> <li>The author found writing the book a rewarding experience, learning more about the language in the process.</li> <li>The Kotlin team was open to feedback and constantly improving their work.</li> <li>The book aims to help readers understand the depth of Kotlin's features and appreciate its evolution.</li> <li>Kotlin offers advantages such as static typing, conciseness, expressiveness, and reduced errors.</li> <li>Kotlin is versatile for various environments like Android development, DSL creation, and multi-platform applications.</li> <li>Kotlin Native can compile to native platforms on Linux, Windows, Mac OS, attracting developers with C++ and Delphi backgrounds.</li> <li>Jetpack Compose could benefit from being compiled natively in the future for UIs on Android and desktop.</li> <li>The speaker looks forward to attending conferences like GoToConference in person.</li> </ol>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2020","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Si3z82PEB5o</p> <ol> <li>Evan and Garth discuss their love for TypeScript and Kotlin, exploring both languages through a Bash Out clone project.</li> <li>Kotlin JS is fully integrated into IntelliJ, offering built-in support for React and Redux.</li> <li>Both TypeScript and Kotlin are popular languages; while Kotlin focuses on the JVM, TypeScript is built on top of JavaScript.</li> <li>Kotlin adoption has a learning curve due to differences from JavaScript/TypeScript, but interoperability can be achieved using tools like Ducat.</li> <li>TypeScript offers advanced features such as structural typing and mapped types not yet available in Kotlin JS.</li> <li>React UI building with Kotlin JS is possible, though there's a learning curve due to differences from JavaScript/TypeScript.</li> <li>Kotlin JS has impressive core language features but lacks the type safety and flexibility found in TypeScript.</li> <li>TypeScript offers more flexibility with algebraic data types and programmatic creation of types. Ducat struggles with complexities, resulting in mixed results for union and intersection handling.</li> <li>Both languages have strong concurrency support: Typescript with async/await keywords and Kotlin with coroutines and the suspend keyword.</li> <li>Kotlin has a more elegant syntax, making code simpler and more symmetrical.</li> <li>Both languages offer destructuring capabilities, but it's more flexible in TypeScript.</li> <li>Conclusion: Both are excellent languages with different advantages; cautiousness may lead to choosing TypeScript due to community size and existing solutions. Future developments will be interesting for both languages.</li> </ol>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kQEu1VsrG44</p> <ol> <li>Memory efficiency is crucial for application performance, as memory churn rate affects garbage collector performance and runtime.</li> <li>Algorithmic issues can lead to excessive logging and hot allocating threads, causing slowdowns in other processes on the same chip.</li> <li>Optimizing memory usage and tuning applications improve overall performance; reducing allocation rates is significant for performance improvement.</li> <li>Inferring allocation frequency helps identify hotspots in code, which should be algorithmically optimized to reduce churn.</li> <li>Thread local allocation blocks minimize contention on the heap by allocating more memory per thread.</li> <li>High memory churn rates increase garbage collection activity, affecting application performance.</li> <li>The power curve shows that above 1 gigabyte per second, there's little gain; inferring allocation frequency is an approximation.</li> <li>Tuning the garbage collector can be costly and may not solve the problem; focus on finding hot allocators instead.</li> <li>Flight recorder helps identify issues but lacks information on where the hotspot is in code; it's still useful for certain aspects.</li> <li>Applications may have multiple allocation hotspots depending on their execution mode; analyzing code to find solutions can improve performance.</li> </ol>"},{"location":"goto_programming_lang/#97-things-every-java-programmer-should-know-trisha-gee-kevlin-henney-goto-2020","title":"97 Things Every [Java] Programmer Should Know \u2022 Trisha Gee &amp; Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=T47k2tHXmOA</p> <ul> <li>97 Things Every Java Programmer Should Know is a series of books with various contributors.</li> <li>The initial idea came from Richard Monson-Haefel's book about software architecture, and the number 97 was chosen for its properties and to fit within a standard book size.</li> <li>A broader reach was achieved by including more diverse voices in the Java edition.</li> <li>The book aims to represent different points of view, showing that there is no single right answer in software development.</li> <li>It discusses the complexity of software and various approaches for aspects like certifications and testing methods.</li> <li>The author highlights the need to focus on broader skills like community involvement and career growth.</li> <li>The book is applicable across programming languages due to its diverse content.</li> <li>Some parts of the book will age, but most technical pieces remain relevant.</li> <li>The book is valuable for software developers in general, not just Java programmers.</li> <li>Diversity should be considered when discussing the book's audience.</li> <li>Encourage diversity and inclusivity in tech communities. Lower barriers for participation, especially for women. Value individual voices and experiences. Aim for openness and collaboration in projects. Resist the urge to rewrite others' work to fit your style. Focus on statistical sampling with varied perspectives.</li> <li>The book is ordered alphabetically, making it easy to find specific topics or themes. It can be used for various purposes like learning, team discussions, or book clubs. Favorite pieces depend on recent conversations and personal interests. Editing process involved removing factually wrong or potentially damaging advice. Importance of being open-minded when reading the book. Short pieces allow for exploration and potential future application.</li> </ul>"},{"location":"goto_programming_lang/#secrets-of-the-shenandoah-garbage-collector-stephanie-crater-goto-2020","title":"Secrets of the Shenandoah Garbage Collector \u2022 Stephanie Crater \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=WcSqLvxwzbA</p> <ul> <li>Shenandoah, a newer Java garbage collector.</li> <li>Three main steps: find garbage, collect it, and update references.</li> <li>Shenandoah works mostly concurrently with the application running.</li> <li>Work stealing balances load between task queues.</li> <li>Task Q stats framework tracks task assignments, pops, slow pops, total steals, and attempts.</li> <li>Added more statistics for better diagnosis of work stealing issues.</li> <li>Included slow pop attempts, breakdown of steals and steel attempts by target queue.</li> <li>Used graphs for visual representation.</li> <li>Identified issues with unbalanced task allocation and work stealing performance.</li> <li>Discovered that cues were not trying to steal due to stop the world pauses during GC phases.</li> <li>Understood that adjusting worker usage depends on the phase of GC.</li> <li>Shenandoah's garbage collection uses queues, but doesn't consider which ones are active or inactive.</li> <li>Work stealing code randomly chooses a queue to steal from, leading to low success rate.</li> <li>A solution introduced that biases selection towards recently successful queues.</li> <li>This improves the success rate significantly and makes work stealing more efficient.</li> <li>Tiff in JDK 11 improves queue selection for stealing work.</li> <li>Bias towards last successful active queue pick.</li> <li>Code available on GitHub.</li> <li>Improved success rate from 75% to around 90%.</li> <li>Discussion about optimizing queues and context.</li> </ul>"},{"location":"goto_programming_lang/#gradually-adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Gradually Adopt GraphQL Without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=DWBL7GLMVsY</p> <ol> <li>GraphQL is a query language that enables clients to fetch specific data from various sources efficiently.</li> <li>It offers performance benefits such as reduced network traffic and server load, thanks to its ability to execute queries in parallel.</li> <li>Resolvers handle the logic behind fetching data, eliminating the need for writing code for individual fields.</li> <li>GraphQL can be implemented on both client and server sides, allowing gradual integration into existing systems.</li> <li>Placing GraphQL clients next to UI components simplifies managing changes in data structures and scaling UI teams.</li> <li>Benefits of using GraphQL on the client include less time spent on data handling, more time for UI development, and easier introduction into existing systems.</li> <li>Apollo Client with link architecture enables calling multiple REST or GraphQL servers, providing flexibility in integrating different data sources.</li> <li>Use existing schemas and servers to generate GraphQL schemas and endpoints without writing custom logic.</li> <li>GraphQL Server handles regular queries while REST API calls are made when annotations are present.</li> <li>Tools like GraphQL Mesh enable service-to-service communication, supporting various protocols such as Swagger, OpenAPI, gRPC, SOAP, and Microsoft's All Data.</li> </ol>"},{"location":"goto_programming_lang/#facts-you-may-not-know-about-kotlin-eugene-petrenko-goto-2020","title":"Facts You May Not Know About Kotlin \u2022 Eugene Petrenko \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=XwzStZaDpH0</p> <ol> <li>Kotlin's history: Originating as an internal language experiment for JetBrains, it was later named after the island of Kotlin near Saint Petersburg.</li> <li>Interoperability with Java and other languages is a key feature of Kotlin.</li> <li>Kotlin 1.4 introduced optional trailing commas in function calls.</li> <li>The language focuses on concise code, safety, and friendliness.</li> <li>Kotlin's website features an image from the island of Kotlin.</li> <li>Plus operator example: Combines two strings (one with a question mark for potential absence) and prints their combined string if one is 'now'.</li> <li>Kotlin has a special 'nothing' type, representing no value, which can stop execution in certain situations.</li> <li>Using nullable types and safe calls simplifies code.</li> <li>Generics are an advanced concept in Kotlin.</li> <li>Loading code with grey highlighting in IDEs is another feature.</li> <li>Using nullable types to shorten code using Kotlin's light bulb feature.</li> <li>Safe calls and functional programming in Kotlin.</li> <li>Understanding generics in Java and Kotlin, including refined inline functions.</li> <li>Type erasure and workarounds for casting issues.</li> <li>Non-blocking programming with Kotlin coroutines and concurrent features.</li> <li>Kotlin's versatility: used for concurrent programming, game development, mobile app development (KMM), and more.</li> <li>Kotlin's ecosystem: supports multiple platforms like JVM, iOS, Android, and JS.</li> <li>The fun aspect of Kotlin: makes coding enjoyable and leads to interesting ideas.</li> </ol>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020_1","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sE_dv7piOZg</p> <ol> <li>Memory churn is a significant performance issue in many applications, often invisible.</li> <li>Third-party products like Apache Spark can suffer from high memory churn.</li> <li>Reducing allocation rates leads to improved performance; a one gigabyte per second threshold indicates well-tuned applications.</li> <li>Profilers help identify allocation sites and optimize code for better efficiency.</li> <li>GC log shows excessive memory churn in an application, leading to performance issues.</li> <li>Reducing allocation rates can improve performance significantly.</li> <li>Visual VM and Java Flight Recorder are tools for analyzing allocations; however, Visual VM may sometimes lie due to its external profiling method.</li> <li>Java Flight Recorder records inside the JVM, providing more accurate results.</li> <li>Demonstration of Java Flight Recorder in Java Mission Control: Attach to JVM, start recording, and analyze memory allocation.</li> <li>Observing unexpected appearance of 'score' in the profile (potential regression) - potential issue.</li> <li>Performance improvement after optimizing application: runtime drops from 1 minute to 12 seconds.</li> </ol>"},{"location":"goto_programming_lang/#elixir-in-action-sasa-juric-erik-schoen-goto-2020","title":"Elixir in Action \u2022 Sasa Juric &amp; Erik Schoen \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=-bCkha6U70o</p> <ol> <li>Elixir is a programming language designed for software systems, focusing on high availability.</li> <li>The key ingredient of Elixir's support for high availability is the Erlang Virtual Machine (BEAM).</li> <li>BEAM allows running many small lightweight independent programs called processes within a single instance, providing fault tolerance.</li> <li>Elixir offers basic microservices features directly at the runtime level, simplifying building highly available systems.</li> <li>Go is great for tool development but less suitable for software systems due to shared memory and cooperative scheduling.</li> <li>BEAM languages are stable and proven in large systems like WhatsApp.</li> <li>Dark aims to reduce technical complexity by providing a single tool, similar to what beam languages offer.</li> <li>Static typing is seen as a deficiency in beam languages, but initiatives like Alpaca and Clean aim to bring proper static typing.</li> <li>Elixir offers better approachability and developer productivity compared to Erlang.</li> <li>The entire BEAM ecosystem benefits from each other's progress.</li> <li>Elixir has better tooling support than Erlang initially.</li> <li>\"Elixir in Action\" focuses on concurrency and is unique for its approach of teaching not only how but also why something should be done.</li> <li>The author's book approach: Teaching both how and why to do something, with a zigzag learning process.</li> <li>Feedback on the book: Surprised by its success, positive reviews, and organic growth.</li> <li>Importance of feedback: Rewarding when unsolicited, showing the book's impact on readers.</li> </ol>"},{"location":"goto_programming_lang/#next-generation-programming-rust-elm-richard-feldman-goto-2020","title":"Next-Generation Programming: Rust &amp; Elm \u2022 Richard Feldman \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=ukVqQGbxM9A</p> <ol> <li>Next generation programming languages: Rust and Elm</li> <li>Both languages are efficient, reliable, and have large communities with open development processes.</li> <li>Rust is broad in scope, has C interop, and shares similarities with Go. Elm focuses on web apps with a fast compiler.</li> <li>They both have static type checking, sound type systems, and no \"billion dollar mistake\" (null reference).</li> <li>Rust is mutable by opting-in while Elm has strict immutability.</li> <li>Rust has a large community with frequent compiler releases; Elm is smaller but less churn with infrequent updates.</li> <li>Both languages are memory safe and reliable, with negligible runtime exceptions for frontend development.</li> <li>Elm focuses on browser-based UIs, while Rust is more general purpose.</li> <li>Elm has a narrower focus, allowing higher guarantees in terms of performance and safety.</li> <li>Both languages offer free books and online resources to learn them.</li> </ol>"},{"location":"goto_programming_lang/#maximizing-java-application-performance-with-graalvm-oleg-selajev-goto-2020","title":"Maximizing Java Application Performance with GraalVM \u2022 Oleg \u0160elajev \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=PeMvksAZbdw</p> <ul> <li>Granville is a high-performance virtual machine supporting multiple languages.</li> <li>It offers two execution modes: normal JVM and ahead-of-time compilation.</li> <li>Benchmarking shows an average 30% performance boost for Granville compared to OpenJDK.</li> <li>Ahead of time compilation (AOT) improves performance by reducing startup speed, memory footprint, and packaging size.</li> <li>Native Image utility compiles Java code into platform-dependent binary for faster startup and lower memory consumption.</li> <li>Gravimoron's native image supports various frameworks like Spring Boot, providing similar performance to raw versions.</li> <li>AOT execution mode has lower CPU usage during startup and warm-up compared to JIT mode.</li> <li>283 utility reduces memory usage from 400MB to 60MB with its native image version.</li> <li>Native images improve startup times and reduce CPU consumption during warm-up.</li> <li>Graviton ecosystem supports languages like Java, JavaScript, Node.js, Python, etc.</li> <li>Companies like Twitter, Oracle, and Nvidia use native image technology in their projects.</li> <li>Participate in the Graviton ecosystem by engaging with its community.</li> </ul>"},{"location":"goto_programming_lang/#bootiful-graphql-with-kotlin-dariusz-kuc-goto-2020","title":"Bootiful GraphQL with Kotlin \u2022 Dariusz Kuc \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1siPT1pTXFU</p> <ul> <li>Demonstration of building a reactive GraphQL web server with Kotlin, Spring Boot, and other libraries.</li> <li>Uses reflection to generate schema from source code using the GraphQL Kotlin Spring Starter library.</li> <li>Includes a playground for testing queries and viewing documentation.</li> <li>Deprecation annotation for removing fields without breaking clients.</li> <li>Demonstrates polymorphism in GraphQL with interfaces and unions through a people example.</li> <li>Introduced Markdown syntax for formatting transcripts.</li> <li>Explained the difference between interfaces and unions in GraphQL.</li> <li>Shows how to add arguments to queries and improve performance by using functions instead of properties.</li> <li>Discussed benefits of asynchronous code with core teams in GraphQL.</li> </ul>"},{"location":"goto_programming_lang/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>Use HTML properly for better performance, accessibility, and responsiveness.</li> <li>Learn semantic HTML to improve accessibility and maintainability.</li> <li>Utilize new HTML5 tags like header, nav, main, article, and footer for better user experience.</li> <li>Semantic HTML elements enhance accessibility and search engine optimization.</li> <li>Accessibility benefits everyone, not just people with disabilities.</li> <li>Test websites for common issues like low contrast, missing alternate text, empty links, etc.</li> <li>Choose accessible component libraries like Reach UI, Tourment UI, and Lion.</li> <li>Reduce JavaScript usage to improve website performance and user experience.</li> <li>WebAIM found 98% of websites have accessibility errors.</li> <li>Test sites without JavaScript and enhance with JS.</li> <li>Choose libraries carefully; some are tested with assistive technologies while others aren't.</li> <li>Beware of bloated JavaScript files that slow down users on mobile devices.</li> <li>Internet accessibility is a global priority, as it can improve education and healthcare in developing countries.</li> <li>The web impacts people worldwide, not just those in developed nations.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-flows-and-channels-for-android-ryan-pierce-goto-2020","title":"Kotlin Flows and Channels for Android \u2022 Ryan Pierce \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=xch4aw7hNcY</p> <ol> <li>Kotlin's coroutines library uses flows and channels to tackle asynchrony issues in Android development.</li> <li>Flows are versatile abstractions for various streaming tools, offering a safer and easier way to handle different types of streams.</li> <li>Channels are non-blocking queues that enable safe communication between core routines.</li> <li>Kotlin's github issue 254 inspired the creation of flows as an efficient alternative to hot channels.</li> <li>Flows are a versatile and efficient streaming tool in Kotlin coroutines, being lazy, safe, and easy to use compared to channels.</li> <li>Modern Android apps follow recommended architecture with view, view model, repository, and use case layers. Data sources produce flows that are processed by repositories and use cases to generate live data objects in the view model layer.</li> <li>Use S Flow Operator for data flow management. Demonstrate creating a photo repository with names from a data source using operators like map, on each, and zip. Convert live data into a view model using LiveData or custom co-routine builders.</li> <li>Flows are reactive, allowing efficient handling of user input. Multiple ways to use flow in an application.</li> </ol>"},{"location":"goto_programming_lang/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ol> <li>Ray is a system for scaling applications from laptops to clusters, enabling parallelization of tasks.</li> <li>Demonstration using Monte Carlo Pi calculation shows how Ray speeds up work by leveraging distributed computing.</li> <li>Distributed state example uses parameter servers and actors for efficient cluster resource utilization in distributed computing.</li> <li>Actors are remote objects that handle requests, perform work, and save results within a cluster.</li> <li>Ray is a framework for scaling Python applications, optimizing hyperparameter tuning with Tune library for machine learning models.</li> <li>Solutions for microservices include managing instances across clusters and providing resilience.</li> <li>Drop-in replacements for multi-threading libraries are available in Ray, making it easy to scale applications.</li> </ol>"},{"location":"goto_programming_lang/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ol> <li>GraphQL is a powerful query language that simplifies data fetching and orchestration.</li> <li>Gradual adoption of GraphQL can be done through client-side usage, API integration with tools like Apollo Federation, or creating a GraphQL gateway for multiple data sources.</li> <li>Benefits include simplified UI development, reduced time spent on data fetching, and improved developer productivity.</li> <li>GraphQL reduces code for fetching and filtering data, allowing for better performance when introduced on the client side.</li> <li>Apollo clients have local query engines, enabling queries without affecting backend servers.</li> <li>GraphQL Mesh converts existing APIs into graphical schemas, making them queryable without changing the original source.</li> <li>It allows querying multiple sources as if they were one connected graph, even if not originally GraphQL.</li> <li>The library runs on both client and server sides, offering versatility for different use cases.</li> <li>Gradually integrating GraphQL Mesh into your stack can automate manual coding and improve efficiency.</li> </ol>"},{"location":"goto_programming_lang/#the-magic-of-music-matching-roy-van-rijn-goto-2020","title":"The Magic of Music Matching \u2022 Roy van Rijn \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=8Dj0rekeM7g</p> <ol> <li>Rosa shares her experience with music matching using Java audio system and data lines.</li> <li>Microphones record sound pressure through their smoke membrane, which is represented by data.</li> <li>Sample rate and sample size affect recording quality.</li> <li>Understanding the basics of sound helps create better music matching applications.</li> <li>A microphone works similarly to our ear in detecting sound pressure changes.</li> <li>Sample rate and sample size influence recording quality.</li> <li>Fourier transformation converts time domain signals into frequency domain.</li> <li>Windowing technique combines time and frequency information.</li> <li>Spectrum analyzer visualizes frequencies in a signal.</li> <li>Advanced spectrum analyzers can be used for music analysis with spectral images.</li> <li>A Java-based spectrum analyzer was created to analyze sound.</li> <li>Fingerprinting was done by processing mp3 files and storing their fingerprints as lists of Longs.</li> <li>The algorithm matches songs based on fingerprints, considering offsets for accuracy.</li> <li>A demo showed the system recognizing a song from Spotify's shuffled playlist.</li> <li>Proposed other applications: detect duplicate songs, align subtitles with audio, and copyright infringement detection.</li> <li>Recognized room for improvement and potential challenges with large libraries.</li> </ol>"},{"location":"goto_programming_lang/#making-mutants-work-for-you-henry-coles-goto-2019","title":"Making Mutants Work for You \u2022 Henry Coles \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=LoFJajoJQ2g</p> <ol> <li>Assessing test suite quality involves various methods like TDD, peer review, and code coverage.</li> <li>Code coverage is not always effective as it doesn't guarantee useful testing.</li> <li>Richard Lipton introduced fault diagnosis in 1971 for finding bugs in tested code.</li> <li>Mutation testing, developed in the '80s, gained popularity with Jesse in 2000 and is used for safety-critical projects and normal codes.</li> <li>The process involves creating mutants, compiling code, running tests, and identifying which mutants are killed by the test suite.</li> <li>Mutation testing offers a degree of confidence in the effectiveness of a test suite but isn't perfect.</li> <li>Open source community introduced mutation testing; traditional methods were slow and impractical. PIT (Parallel Instruction Testing) tool improved efficiency.</li> <li>Reduce test execution time by running tests in parallel, skipping compilation cycles, and optimizing test cases.</li> <li>Tessellation helps focus on relevant lines of code for mutant testing.</li> <li>Mutation testing is a powerful tool for providing feedback during development and improving code quality.</li> <li>Equivalent mutants can help improve code readability and intent; performance-related mutants may not be important in unit tests.</li> <li>Main purpose: find equivalent mutants, which are changes that don't affect functionality.</li> <li>Useful tools include Mutant (Java), Ferb (PHP), PITest (Java), Bytecode mutations for Scala and Kotlin, Cosmic Ray (Python), Copperhead (LLVM, Swift, C++), No-strike (JavaScript).</li> <li>New tools to consider: Professional (.NET), Shion (Rust).</li> </ol>"},{"location":"goto_programming_lang/#an-introduction-to-jvm-performance-rafael-winterhalter-goto-2020","title":"An Introduction to JVM Performance \u2022 Rafael Winterhalter \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=wgJWs14YcEs</p> <ol> <li>JVM performance talks focus on Java program execution and code optimization.</li> <li>The JVM is an adaptive platform with three levels of compilation: interpretation, C1 (static compilation), and C2 (just-in-time compilation).</li> <li>Call sites are crucial for method-level optimization in the JVM.</li> <li>Virtual calls allow overriding methods in languages like Java while maintaining performance despite numerous method calls.</li> <li>Java's method-based JIT (Just-In-Time) compilation focuses on improving methods.</li> <li>Virtual calls in Java are efficient due to vtables, which store method signatures and locations.</li> <li>Smalltalk used caches for performance improvement.</li> <li>The JVM uses linked call sites for faster execution by checking assertions and jumping directly to the code.</li> <li>Call sites can be monomorphic (direct link), biomorphic (conditional jump), or polymorphic (multiple direct links).</li> <li>Optimizations like inlining code are possible based on these types of call sites.</li> <li>JVM call sites can be monomorphic, biomorphic, or mega morphic.</li> <li>Monomorphic call sites are direct links to code positions.</li> <li>Biomorphic and mega morphic call sites use table lookups for dispatching.</li> <li>Ahead of time compilation optimizes static code but is less useful for long-running processes.</li> <li>Inlining code helps JIT compilers optimize further, making methods bigger targets.</li> <li>Maintaining small and simple classes helps with optimization.</li> <li>Double brace initialization can create new types, affecting call site morphism.</li> <li>Inlining code is important for optimization.</li> <li>Mega morphism can make inlining difficult, leading to slower programs.</li> <li>Monomorphic methods are easier to optimize and faster.</li> <li>JIT compilers use techniques like unrolling loops to improve performance.</li> <li>Type systems help processors understand data better for efficient prefetching.</li> <li>Branch prediction helps CPUs work more efficiently by speculating on code execution paths.</li> <li>Escape analysis can optimize memory usage by avoiding unnecessary object allocations.</li> <li>The JVM has improved escape analysis, but it still needs improvement.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-4-vs-scala-3-garth-gilmour-eamonn-boyle-goto-2020","title":"Kotlin 4 vs. Scala 3 \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sIL4mduqHe0</p> <ul> <li>Comparison of Kotlin and Scala 3</li> <li>Decline in Scala's popularity: novelty, radical changes, functional programming dominance</li> <li>Improvements in Scala 3: new compiler, simplified language, better features</li> <li>New features in Scala 3: top-level declarations, no need for 'new', extension methods</li> <li>Kotlin and Scala 4 comparison (not covered): additional features in both languages</li> <li>New Scala 3 features: top-level declarations, no need for new keyword, extension methods, improved enums, try (success/failure), richer data types with unions and intersections</li> <li>Union types combine different types in a single parameter; intersection types ensure an object must be of multiple types to be valid</li> <li>Literal types treat values as their own type, e.g., 2.3 is a type with only one instance (2.3)</li> <li>Nominal typing enforces type restrictions without overhead</li> <li>Scala 3 supports significant whitespace; indentation is important</li> <li>Export classes to reuse functionality without inheritance</li> <li>New Scala features: simplified conditional and iterative statements, exporting classes for avoiding inheritance issues, improved implicit handling, meta programming using TST syntax trees</li> <li>Kotlin's approach: pragmatic language focused on delivering solutions without adding unnecessary complexity</li> <li>Kotlin's popularity growth with use in various projects; 12 Days of Kotlin blog posts and conferences</li> <li>Comparison of Scala 3 and Kotlin: High quality in Scala, pragmatic language in Kotlin</li> <li>Kotlin features: Safety, succinctness, functional interfaces, multi-platform library</li> <li>Kotlin's future: Universal solution for all platforms, Android development focus</li> <li>Google's support for Kotlin: Kotlin first approach in new Jetpack API and features</li> <li>Kotlin's popularity for Android development due to simplicity and productivity</li> <li>JetBrains' focus on making Kotlin the universal solution for all platforms</li> <li>Different approaches lead to varying definitions of quality; Scala might be preferred for learning/experimentation, while Kotlin is better for enterprise environments with junior developers</li> </ul>"},{"location":"goto_programming_lang/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>Importance of web performance: Alex Russell emphasizes the need for better performance.</li> <li>First meaningful paint: A key metric to measure how quickly content appears on a page.</li> <li>Server-side rendering vs client-side: Serving less data doesn't necessarily improve performance; network issues and other factors can affect user experience.</li> <li>User experience is crucial: Focus on making websites load properly for all users regardless of their circumstances or device capabilities.</li> <li>The modern web is complex, difficult to use, build, and maintain.</li> <li>Frameworks and libraries provide benefits like component reuse, consistency, and engineering principles.</li> <li>However, they can lead to fatigue and frustration for developers.</li> <li>The goal should be a consistent great user experience with control over the entire process.</li> <li>Evolution of client-side frameworks: Introducing portals as a simple technology that allows navigating to another page within an iframe.</li> <li>Portals offer control over loading experiences without reimplementing them.</li> <li>A use case for portals is in web documentation pages where separate content can be loaded without losing scroll position.</li> <li>Demonstration of using portal for a web framework with two panes.</li> <li>Portal allows access to both pages simultaneously, unlike other methods.</li> <li>Progressive enhancement: Adding minimal JavaScript on top of plain HTML pages.</li> <li>Portal is currently non-standard and only available in Chrome.</li> <li>Not all websites need single page apps; use portals for interactive elements.</li> <li>Portal is non-standard and only available in recent Chrome versions.</li> <li>Gradual adoption of technologies like React is encouraged.</li> <li>HTML has become smarter, reducing the need for custom JavaScript implementations.</li> <li>Use frameworks to prototype ideas before standardization.</li> <li>Polyfilling with JavaScript can speed up innovation without waiting for browser support.</li> <li>Be aware of performance and accessibility concerns when using new technologies.</li> <li>Stay updated with the industry, not just libraries or GitHub.</li> <li>Not knowing new tech is normal; focus on important issues.</li> <li>Use frameworks for prototyping and polyfilling to speed up innovation.</li> <li>Standardization takes time, so be patient while staying ahead of trends.</li> <li>The web has the power to connect people and share knowledge globally.</li> </ol>"},{"location":"goto_programming_lang/#scaling-up-an-ios-codebase-tjeerd-int-veen-goto-2019","title":"Scaling up an iOS Codebase \u2022 Tjeerd In't Veen \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n09omYo_QPk</p> <ol> <li>Split monolithic iOS application into modules for better organization and management.</li> <li>Consider versioning, stability, and dependency management when working with modules.</li> <li>Organizational challenges include local projects, frameworks, and package managers.</li> <li>Core module is the most important; minimize public API to maintain stability.</li> <li>Test your code, especially public APIs, for quality assurance.</li> <li>Add documentation for clarity and understanding, focusing on public APIs.</li> <li>Maintain a stable public API for better code management.</li> <li>Documentation is crucial, especially for public APIs.</li> <li>Consider offering sample apps and accessibility identifiers for easier integration.</li> <li>Local modules provide hard boundaries between codes and make testing easier.</li> <li>Downsides include fragmented code and difficulty in updating multiple projects simultaneously.</li> <li>Workspace remains monolithic despite using local modules, but it's more manageable with smaller projects for testing and access control.</li> <li>Code is more fragmented with multiple projects, but can be beneficial.</li> <li>Use semantic versioning to handle changes in packages.</li> <li>Major versions are tricky; plan carefully and update dependencies based on application requirements.</li> <li>Avoid major releases by considering dependencies and versioning.</li> <li>Be cautious with enums, open classes, and subclassing to prevent breaking changes.</li> <li>Start with beta versions and gradually move towards stable releases.</li> <li>Use deprecations for code removal while maintaining backward compatibility.</li> <li>Implement escape hatches for flexibility in case of missing features.</li> <li>Beware of secret majors that can be hidden within minor or patch updates.</li> <li>Take extra care in projects to handle pain for others.</li> <li>Use protocols, but consider alternatives like marking classes.</li> <li>Be conscious of options that may break other people's code.</li> <li>Use access levels to narrow scope and reduce chances of clashes.</li> <li>Avoid Singletons with global mutable state.</li> <li>Plan major changes and work together with co-workers.</li> <li>Release minor updates before major ones.</li> <li>Test your framework or module in different environments for compatibility.</li> <li>Use modules or frameworks for versioning to support multiple workspaces and control updates.</li> <li>Dependency management is crucial for software development.</li> <li>Semantic versioning can impact organizations when code breaks or major releases take time to resolve.</li> <li>Package managers like CocoaPods, Sweet Package Manager, and Swift Package Manager help with dependency management.</li> <li>Carthage and its fork, Carthage+, offer framework stability for enterprise-level projects.</li> <li>The speaker recommends checking out their book on the topic.</li> </ol>"},{"location":"goto_programming_lang/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ul> <li>Microservices are an organizational solution, not a technical one.</li> <li>Monolithic architectures can be problematic when scaling.</li> <li>Sacred breaker is a concept to handle failures in distributed systems.</li> <li>Circuit breaker pattern in complex web service architecture: stops calling backend service when failure occurs; self-healing mechanism tries to make calls again after some time; important configuration option: fallback strategy for failures.</li> <li>Recommendation engine example: no fallback is acceptable, but it doesn't disrupt business; pricing web service example: requires fallback and business logic integration.</li> <li>Service meshes vs libraries for fallback strategies.</li> <li>Couple of payment solutions: gray out provider, send invoice; Swiss method: merchant sends goods, customer pays later.</li> <li>Kubernetes: popular service mesh, Istio; Resilience4J: Java library for circuit breakers, rate limiting, etc.</li> <li>Demo: Spring WebFlux app with network simulation and Resilience4J integration.</li> <li>Functional programming challenges for those not familiar with it.</li> <li>Two applications: reactive pricing service and non-reactive shop service; uses function composition to assemble features like time limiter, circuit breaker, and caching in the shop service.</li> <li>Levin's Eleven test demonstrates system behavior under different conditions.</li> <li>Encourages audience to explore further through blog, Twitter, and source code.</li> </ul>"},{"location":"goto_programming_lang/#building-secure-react-applications-philippe-de-ryck-goto-2019","title":"Building Secure React Applications \u2022 Philippe De Ryck \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=O91hJJ5KMLs</p> <ul> <li>Discussing security and React applications</li> <li>Important topics in 5 minutes: projects, managing people, securing web and mobile apps</li> <li>Cross-site scripting (XSS) vulnerabilities</li> <li>Tips for building secure project applications</li> <li>Blog posts on security issues</li> <li>Security awareness and education</li> <li>Importance of documentation and testing</li> <li>Examples of real-world cases with security issues</li> <li>Discusses various security issues and solutions in web applications, cross-site scripting, credit card information theft, underground markets, etc.</li> <li>Introduces Purify as a sanitizer for secure websites</li> <li>Highlights the importance of maintaining safe browsing experiences</li> <li>Focus on ensuring secure applications and best practices</li> <li>Mentions tools like Purify, Snap, React, and other frameworks for improving security</li> <li>Discusses proper coding guidelines and best practices</li> <li>Shares experiences with different projects and their approaches to security</li> <li>Conference talks about cipher pitfalls, web development, security, application design, etc.</li> <li>Mentions modern applications, code quality, and ethical considerations in the industry</li> <li>NPM landscape analysis and efforts to improve developer experience</li> <li>Focus on maintaining and improving software performance and security</li> <li>Discusses various topics related to software, patches, updates, advertising, Cuba, feeds, shoes, tickets, CPUs, patches, software, budgets, websites, frameworks, events, exploits, graphics, DVDs, patches, festivals, people, updates, security, marketing, projects, references, budgets, roles, applications, developments</li> <li>No context provided for the overall discussion</li> </ul>"},{"location":"goto_programming_lang/#nullable-reference-types-in-c-8-jon-skeet-goto-2019","title":"Nullable Reference Types in C# 8 \u2022 Jon Skeet \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=1tpyAQZFlZY</p> <ol> <li>Nullable reference types in C# 8 enhance the type system by providing more information about potential nullability.</li> <li>They aim to improve code readability, reduce bugs, and not eliminate null reference exceptions.</li> <li>Disabling nullable reference types doesn't change a project's meaning; enabling them results in warnings for potential issues.</li> <li>The compiler helps identify problems but won't fix your code automatically.</li> <li>Migrating to nullable reference types is crucial for ensuring code quality and avoiding unexpected behavior.</li> <li>C# 8 introduces these features, focusing on improving code safety without changing runtime behavior.</li> <li>Compilers handle nullability differently; CLR doesn't check nullable reference types like C# does.</li> <li>Arrays can have null values without warnings, making it challenging to reason about them.</li> <li>The compiler trusts developers in some cases but provides warnings for local variables with potential nullability issues.</li> <li>Techniques such as the null conditional operator (?.), is null, and others help handle these issues.</li> <li>C# 6.0 introduced new syntax for nullable reference types, including adding a question mark to a type name.</li> <li>Testing code should be done before changing existing code to ensure desired behavior.</li> <li>Nullability affects properties, method parameters, and return types; specific attributes specify relationships between inputs and outputs.</li> <li>Generics and nullable reference types can clash in certain aspects of language design.</li> <li>The CLR could have been changed for more type safety but would make adopting C# 8 more challenging.</li> <li>Nullable reference types improve code expressiveness without changing behavior.</li> <li>Migration involves fixing warnings and enabling errors after reaching zero warnings.</li> </ol>"},{"location":"goto_programming_lang/#how-java-scala-are-imitating-functional-languages-maurice-naftalin-jose-paumard-goto-2019","title":"How Java &amp; Scala are Imitating Functional Languages \u2022 Maurice Naftalin &amp; Jos\u00e9 Paumard \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=e6n-Ci8V2CM</p> <ol> <li>Announcements: New job as a developer and technology evangelist, Edinburgh &amp; Jalba unconference.</li> <li>Talk about functional programming influences on object-oriented programming.</li> <li>The Pizza Paper (1997) introduced generics, higher-order functions, and pattern matching into Java.</li> <li>Generic Java (2004): Implemented generics in Java with compromises.</li> <li>Higher-order functions: Introduced in Java 8 (2014).</li> <li>Pattern matching: Under development for future Java releases through the Amber Project.</li> <li>Scala avoids compatibility issues by starting from scratch and incorporating functional programming features.</li> <li>Java's slow adoption of generics due to lack of runtime type information.</li> <li>Covariance in arrays allowed generic methods but caused problems with array subtyping.</li> <li>Type erasure was used for compatibility between non-generic and generic code.</li> <li>Scala avoided these issues by not having backward compatibility constraints.</li> <li>Pattern matching is coming to Java, starting with preview features in Java 14.</li> <li>Type erasure in Java removes type information at runtime for compatibility.</li> <li>Inheritance brings challenges, requiring synthetic methods and hacks.</li> <li>JVM and compiler sometimes differ in method signature interpretation.</li> <li>Arrays of generics are not allowed in Java due to difficulties in differentiating them.</li> <li>Java has issues with generics, such as no runtime type information and incompatible array types.</li> <li>Scala addresses these problems by using immutable data structures and defining covariant data structures for better client code.</li> <li>In Scala, the library writer defines the covariance while in Java, it's at the call site with wildcards.</li> <li>The Scala approach makes library methods simpler to use compared to Java's complex signatures.</li> <li>Declaration site variance in Scala simplifies library methods.</li> <li>Java's lack of function types led to the creation of abstract classes with apply methods.</li> <li>Lambdas in Java were introduced after a debate on capturing non-final local variables.</li> <li>In Scala, functions are first-class citizens and can capture local variables.</li> <li>Lambdas in JavaScript don't have concurrency issues as they lack multi-threaded programming.</li> <li>Discussed Java concurrency rules and how they apply to local variables.</li> <li>Compared Scala's approach to handling local variables with concurrent access.</li> <li>Explained partial application in both Scala and Java, using examples.</li> <li>Introduced pattern matching in Scala through the \"pizza papers\" example.</li> <li>Discussed how pattern matching will be introduced in future versions of Java.</li> <li>Introduced sealed types in Scala, allowing only specific extensions for a class.</li> <li>Pattern matching used to determine vehicle type and color.</li> <li>Java is adopting similar features with sealed types for classes, abstract classes, or interfaces.</li> <li>Language design complexity leads to different approaches between languages like Java and Scala.</li> <li>Backward compatibility affects language evolution and adoption of new features.</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ol> <li>The future of machine learning and JavaScript was discussed, with a focus on AI-powered applications.</li> <li>A meetup group called AI JavaScript led to the creation of ijsrocks.com, showcasing innovative projects.</li> <li>Emoji Fire is an app that detects faces, emotions, and replaces them with appropriate emojis using facial analysis techniques.</li> <li>Calculating emotion in facial features involves detecting facial points and utilizing neural networks.</li> <li>Neural networks are inspired by brain neurons; they can be combined to create complex systems for various tasks.</li> <li>Emotion detection in faces requires identifying facial features and applying neural networks.</li> <li>TensorFlow.js enables machine learning in the browser using JavaScript, making it easier to use and more accessible.</li> <li>Microsoft's Face API uses similar technology to detect faces, emotions, and other attributes in images.</li> <li>TensorFlow and MobileNet are used for image analysis, improving web accessibility with human-readable descriptions of images.</li> <li>Generative adversarial networks (GAN) can generate images based on outlines or data sets, with applications beyond just cats.</li> <li>GANs consist of a generator and discriminator, both competing to improve their performance.</li> <li>Exportable models can run in browsers using JavaScript for further optimization and use.</li> <li>Generative neural networks create new images based on input, with potential applications in art and music.</li> <li>TensorFlow JS book and tutorials are available for learning machine learning with JavaScript.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-swift-daniel-h-steinberg-goto-2019","title":"What\u2019s New in Swift \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6P-nh3uNnsQ</p> <ol> <li>Swift 5.1 introduces improvements such as single expression return removal, raw strings with pound escape, string interpolation enhancements, key paths in functions, and combine map/filter implementation (not yet in main branch).</li> <li>Result type is a powerful feature used for functional programming, providing optional-like behavior with success or failure cases.</li> <li>Doubled function example demonstrates handling out of bounds errors using result types.</li> <li>Maps are utilized to transform values within result types.</li> <li>Swift focuses on dynamic languages for better interoperability with other languages.</li> <li>Dynamic member lookup allows accessing properties without knowing the exact key at compile time.</li> <li>The Dynamic callable protocol enables treating any type as a function that takes arguments and returns a value.</li> <li>Opaque result types are used in Swift UI, allowing the compiler to determine what's being returned at compile time.</li> <li>Function builders facilitate creating complex structures like V stacks from multiple elements, useful for DSLs (domain-specific languages).</li> <li>Trailing closures improve code readability by moving last closure outside parentheses into curly braces.</li> <li>Swift UI leverages function builders for higher order functions.</li> <li>Swift UI's impressive performance is attributed to value types and optimizations.</li> <li>State in Swift UI enables efficient updates through reference storage instead of values.</li> <li>Property wrappers enable customization, such as rounding values to a specific number of places.</li> <li>New features in Swift are inspired by Swift UI's underlying principles.</li> </ol>"},{"location":"goto_programming_lang/#kotlinnative-the-good-the-bad-and-the-ugly-ellen-shapiro-goto-2019","title":"Kotlin/Native: The Good, The Bad, and the Ugly \u2022 Ellen Shapiro \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JHUY1Ckmo64</p> <p>Error</p>"},{"location":"goto_programming_lang/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ol> <li>Erlang is a functional, concurrency-oriented language with fault tolerance and dynamic typing.</li> <li>It features pattern matching for assertions and can implement parallel map functions using list comprehension and process spawning.</li> <li>Monitor function ensures supervision of processes and order preservation in results.</li> <li>Eternity blockchain uses Erlang for its core, offering features such as proof of work, key blocks, microblocks, Sofia smart contract language, state channels, oracles, generalized accounts, context-sensitive authentication, and a carrier class product mentality for stability and efficiency.</li> <li>Quick Check is a powerful testing tool that generates random code to find bugs in Erlang programs.</li> <li>The Fast Eternity transaction engine uses a virtual machine for the Sofya contract language.</li> <li>State channels allow off-chain transactions, improving speed and efficiency.</li> <li>Finite state machines are complex but essential for state channel programming.</li> <li>Blockchain technology requires dynamic languages like Erlang for adaptability.</li> <li>Eternity blockchain has an open-source foundation with grants for development.</li> </ol>"},{"location":"goto_programming_lang/#a-veterans-guide-to-transitioning-android-teams-into-kotlin-g-gilmour-e-boyle-goto-2019","title":"A Veterans Guide To Transitioning Android Teams Into Kotlin \u2022 G. Gilmour &amp; E. Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=ocCE3s9j-9A</p> <ol> <li>Eamonn and Garth are trainers at Instill, a software development company focusing on modern JVM languages like Scala and Kotlin for enterprise apps with Spring Boot.</li> <li>Kotlin is an alternative language for the JVM with many useful features, recommended by Google for Android development due to its benefits.</li> <li>Instill has been using Kotlin in their projects and training courses as it offers advantages over Java, such as reduced codebase (40%), simplified coding, and better memory management.</li> <li>Adopting Kotlin didn't require new frameworks; existing ones can be used with the language.</li> <li>Co-routines are a recent addition to Kotlin, making concurrent code easier to write.</li> <li>Kotlin is easy to learn for developers familiar with other languages like Java, C#, and Swift due to its expressive nature, good interoperability story, and features such as data classes, DSLs, and lambdas with receivers.</li> <li>Kotlin's expressiveness makes it easier to write elegant code while reducing complexity.</li> <li>Kotlin offers features like lazy delegation, weak references, and extension methods for better code readability.</li> <li>Null safety ensures non-nullable types by default, requiring defensive coding only when dealing with nullable types.</li> <li>Top-level functions and expressions simplify code without needing classes or complex structures.</li> <li>Kotlin's evolution makes it a natural choice for developers, offering incremental improvements over other languages.</li> <li>Co-routines are a significant feature in Kotlin, allowing efficient handling of asynchronous tasks while maintaining readable code.</li> <li>Co-routines can be used with other libraries like RxJava for specific use cases.</li> <li>JUnit is mentioned for unit testing instead of newer frameworks due to preferences and ease of use.</li> <li>Co-routines are useful for sequential algorithms.</li> <li>Clover teams are game changers, while JUnit works well for Cortland projects.</li> <li>Documentation issues in early days of Kotlin have been addressed.</li> <li>Dependency injection frameworks can be experimented with.</li> <li>Kotlin native and multi-platform libraries simplify development.</li> <li>Existing skills remain relevant, learning curve is gentle.</li> <li>Cortland gives advantages to businesses in terms of agility and customer satisfaction.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2019","title":"Upgrade Time: Choose Java 11 or the \u201cother\u201d one\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VX3UBvwJtyA</p> <ol> <li>Free event with energy left to listen</li> <li>Various topics discussed: playtime, software engineering company, work, conferences, workshops, tips, happiness, Medion, free time, learning languages, reviews, features in Word, Excel, Wit, Shovel Knight, programming, functional programming, Java, Swift, Huawei, Android, iOS, website, readability, Katleen's languages, badolie, Luca's framework, Spring, Ajax, magic, Albert Heijn, migration, compiling coat, comfort zone, smoothing codebase, programming koppeling, Palmerie, pet project</li> <li>No context provided for summarization- Migrating to Spring Boot</li> <li>Testing and optimizing applications</li> <li>Integration challenges and solutions</li> <li>Board game development and testing</li> <li>Java frameworks and their features</li> <li>Organic functional programming</li> <li>Enhancing technical organizations</li> <li>Adding new features to projects</li> <li>Using different tools for efficiency- Trucje toe showed live koning</li> <li>Site lift, office-apps, and testing</li> <li>Penis is in two hours, choice of the penis</li> <li>Standard library of a second key</li> <li>School of test help</li> <li>Conficker, Link\u00f6ping coat, and weekend targeted JVM</li> <li>Minutes to finger, site hij woont u beeld</li> <li>Hi-bit solution, bringing it for you</li> <li>Compiler tells, comparison link\u00f6ping coat</li> <li>Weekend, targeted JVM one place, minutes to finger</li> <li>Aankoop wie sites, hij woont u beeld</li> <li>De hi-bit solution die kan zijn want je brengt mij</li> <li>Online steps in the ben het beter</li> <li>Productie ze live shows en het juiste punt om mijn koppeling coating toen mijn job folder lid sinds may be a bit slappe</li> <li>But at least mijn keuzes living site b, site en dit is organisch' functionele</li> <li>Which might be fair over de technical organisatie</li> <li>RT en migration ik vind je swing neem mijn tja van voldoet te koop in vodden</li> <li>En mol van de rest tussen met of t's wat je kunt u was wel eens je stukken ketens lijnen en wie place despite koppeling en dan dit nota dit huis toe source code</li> <li>De retorische gebouw zo dit ze bouwde hij just added add to my job project zal eenens checken of dit of dit is running</li> <li>Yes appeltjes doe klink test</li> <li>School van mijn test hulpverlenen</li> <li>Hoewel het stil stil</li> <li>Lammy</li> <li>Work now chart work</li> <li>Dan hou je zoals om spring good looking</li> <li>And will search and that mijn voor tests pas met mij</li> <li>Application stil starred up en het mij en points and still working in venlo het mij en appendices</li> <li>Zo dit was a first step to take naar de second step</li> <li>Dat hij moet een lesje om het stuur maar ik weet je opeens java op chicks te koppeling wat wil doe het yes maar ik weet mag jij</li> <li>Hij kindjes start to make</li> <li>Probleem van en wilt starten maar ik weet mijn meenam jack wat je ze bord chemicus test wordt eeuw verkiezingen zal buik</li> <li>Je c ok\u00e9 hier aan mee lezen developer weidser</li> <li>En wieltjes copy micoach dit zo beheer en just face it</li> <li>Dus amnesie en dan will see this poppen</li> <li>Van jane's</li> <li>Yes-r bond itself which doe mijn werk met de vinger is dat jane's will produce het java equivalent coating clans zuivel</li> <li>Kamp our time beslissen shabai coach dit is waar dat we zal gaan buiten mediums hij can use this take it for granted by two trio cupping pad en voor net en wieltjes</li> <li>Kussen vol start je ruben hoe vol de nullen bot ives which indicate het bij de questionmark</li> <li>En de installation toneel hij doen wat hij nu nobel thaise nooit like deel en nu is zou</li> </ol>"},{"location":"goto_programming_lang/#kotlin-dissecting-the-stdlib-huyen-tue-dao-goto-2019","title":"Kotlin: Dissecting the stdlib \u2022 Huyen Tue Dao \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uCMuGVh7W_0</p> <ol> <li>Kotlin's idiomatic approach can be learned through its standard library, focusing on functional programming concepts.</li> <li>The Collections API in Kotlin is functional and expressive, emphasizing \"what\" rather than \"how\".</li> <li>Higher-order functions are crucial in functional languages; they allow storing functions in variables, passing them as parameters, and returning them from other functions.</li> <li>Lambdas are an important part of Kotlin's functional API, enabling anonymous function definitions.</li> <li>Kotlin allows functional programming with higher-order functions, treating functions as first-class citizens.</li> <li>Lambda functions are compiled into internal classes that extend functional interfaces.</li> <li>Higher-order functions enable passing functions around as parameters or return values.</li> <li>Function references can be used to pass declared functions like lambdas.</li> <li>Kotlin's standard library provides higher-order functions for manipulating code scope and behavior through extensions, apply, run, and let.</li> <li>Lambdas with receivers offer a cleaner syntax by elevating parameters and removing qualifications when calling methods inside the lambda block.</li> <li>Extensions allow adding functionality to classes without subclassing or altering them.</li> <li>Lambdas and receiver functions improve code organization, readability, and reduce visual noise.</li> <li>The Executor method pattern abstracts away ceremony, focusing on critical logic.</li> <li>Closures and captures involve a function accessing scoped values from its environment.</li> <li>Inlining functions can help counteract performance issues by copying the function body into the call site.</li> <li>Non-local returns are possible with inlined functions due to execution context clarity.</li> <li>There is a trade-off between using inline functions and code bloat, so it depends on the situation.</li> <li>The 'noInline' keyword allows treating a parameter as an expression instead of inlining it.</li> <li>Reification helps retain type information for better type checking with inline functions.</li> <li>Kotlin conventions provide flexibility and readability through features like infix notation, operator overloading, and destructuring declarations.</li> <li>Contracts (1.3 feature) help define how a function behaves, ensuring correct usage.</li> </ol>"},{"location":"goto_programming_lang/#life-after-java-8-trisha-gee-goto-2019","title":"Life After Java 8 \u2022 Trisha Gee \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eBuFzQeiGe0</p> <ol> <li>Java release cadence has changed from every three years to six months, with two licenses for Oracle JDK: open source and commercial.</li> <li>OpenJDK is free but updated every six months; the commercial version offers long-term support for three years. AdoptOpenJDK provides community-run builds with long-term support.</li> <li>Java 8 remains popular among developers, while Oracle's focus on licensing and support changes may impact future versions.</li> <li>Oracle's commercial JDK and open JDK are the same but have different licenses; Adopt OpenJDK offers long-term support for various Java versions.</li> <li>New features in Java 9 include JShell, a tool for interactive code execution without class files or main methods, and Far (local variable type inference) for improved readability.</li> <li>Convenience factory methods for collections were introduced in Java 9, making it easier to create lists and sets from arrays or iterables.</li> <li>Java 10 allows collecting two unmodifiable collections; Java 11 added predicates not, providing more options for method references. Optional in later versions improved functional handling and readability.</li> <li>Java 11 introduced a built-in HTTP client with non-blocking reactive streams support. Multi-release JAR files allow libraries to use newer features without requiring specific Java versions.</li> <li>Java 9's jigsaw (modularity) allows for smaller deployables and easier integration of third-party libraries; Java 12 has preview features like switch expressions, which may change before becoming solid.</li> <li>Future releases will include text blocks, lambda leftovers, data classes, and performance enhancements. Moving to a recent version of Java improves performance, memory usage, and attracts better developers.</li> <li>Staying up-to-date with six-monthly release cycles allows for faster updates and testing; Java is evolving with frequent updates, focusing on performance and cost reduction.</li> <li>Multiple garbage collectors cater to different application types; migrating to newer versions of Java can improve code readability, performance, and reduce maintenance costs.</li> <li>Tips for migration: run on updated JDK, fix compiler warnings, update dependencies, build tools, and gradually adopt new features.</li> </ol>"},{"location":"goto_programming_lang/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <ol> <li>Spring Boot simplifies project creation, making it easier to manage dependencies and versions.</li> <li>Kotlin allows for top-level functions and multiple classes in a single file.</li> <li>Inferring types in Java 11 can reduce the need for explicit type declarations.</li> <li>Spring Data provides magic through annotations, but some developers prefer explicit code.</li> <li>Magic is found in annotations, making it difficult to understand implicitly defined code.</li> <li>The speaker discusses using Spring Data to simplify Java code and suggests removing annotations by utilizing Kotlin, Spring Boot 2.3, and Spring Framework 5.2 for better readability.</li> <li>Use the Route DSL for better organization and explicitness in configuration files.</li> <li>The importance of making code more explicit while still being concise and easy to understand is emphasized.</li> <li>Reified generics in line can help with dependency injection, and Shrink creates beans automatically based on dependencies.</li> <li>Spring Foo is an experimental project that aims to be explicit and without annotations.</li> <li>Kofu focuses on functional programming, making code more concise and easier for compilers like Gravy VM.</li> <li>Migrating to Kofu requires being reactive, which may cause issues with existing libraries like Spring Data GP.</li> <li>DSLs are used for different aspects of the application, making it more explicit and easier to check in IDEs.</li> <li>Removing magic from a Spring Boot app involves removing controllers, beans, and using bean DSL.</li> <li>The main takeaway is that Spring Boot is great, and people can experiment with Kofu or other frameworks.</li> </ol>"},{"location":"goto_programming_lang/#it-really-is-easier-to-ask-for-forgiveness-than-permission-naomi-ceder-goto-2019","title":"It Really is Easier to Ask for Forgiveness (than Permission) \u2022 Naomi Ceder \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=SYrVZR_g718</p> <ol> <li>Naomi Cedar discusses exceptions in various programming languages, highlighting their unique approaches to error handling.</li> <li>Pearl uses segfaults and return value checks for error handling.</li> <li>C++ adds exception handling but lacks deep integration within the language.</li> <li>Java combines exceptions with checking before performing actions.</li> <li>JavaScript allows flexible error handling by allowing any object as an exception.</li> <li>Go has a unique approach, using error codes returned from functions.</li> <li>Python's exception system is straightforward and customizable through its rich hierarchy.</li> <li>Exceptions can be used for control flow in addition to error handling (Harry Potter theory).</li> <li>Generator exit exceptions occur when generators are not properly cleaned up, preventing memory leaks.</li> <li>Python uses exceptions as a form of flow control and simplifies code readability.</li> </ol>"},{"location":"goto_programming_lang/#rust-2018-access-all-areas-florian-gilcher-goto-2019","title":"Rust 2018: Access All Areas \u2022 Florian Gilcher \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=sCSfyQYDImM</p> <ol> <li>Rust is a new language designed for building reliable and efficient software.</li> <li>It focuses on performance, reliability, and productivity.</li> <li>Rust offers memory safety with strict resource handling for concurrency and parallelism.</li> <li>Ownership and resource management are key features of the language.</li> <li>No runtime or garbage collector is needed as it's a native programming language.</li> <li>Rust's memory layout allows custom construction and allocation on the heap.</li> <li>Ownership ensures resources are managed effectively, with values having trackable regions of active use.</li> <li>Results in Rust allow for error handling without exceptions using enums with success or failure variants.</li> <li>Rust's ownership and borrowing system ensure data safety in parallel programming.</li> <li>Parallel and concurrent programming libraries like crossbeam and rayon are available for easy implementation.</li> <li>Async/await syntax allows choosing the right concurrency pattern for different devices.</li> <li>Rust's send and sync properties enable passing values between concurrent units, independent of power or parallelism library used.</li> <li>Rust's ownership concept enables multiple ownership of data through smart pointers.</li> <li>Atomic reference counters (ARC) ensure safe thread access and prevent data loss.</li> <li>Mutexes help synchronize data access in multi-threaded programs.</li> <li>Rust is used for fast CLI programs with structured code generation, serialization, and deserialization capabilities.</li> <li>Embedded Linux is a popular platform for deploying small devices like routers, IoT gateways, and industrial control systems.</li> <li>Rust supports bare metal embedded devices and has a complete tooling system.</li> <li>Rust can interact with C and C++ using static and dynamic libraries.</li> <li>Sealed Rust project aims to bring certification of rust for safety critical use cases.</li> <li>Rust is a memory safe C replacement with performance similar to C and C++.</li> <li>It can be used as a library for existing C code, making it suitable for mobile use cases.</li> <li>Rust has tools for generating libraries that look like C libraries.</li> <li>Sealed Rust project aims to bring certification of the language for safety critical use cases.</li> <li>Rust offers productivity features such as documentation, books, and tooling support.</li> <li>It can be used in various ways without requiring a complete switch from other languages.</li> <li>Rust is useful in IoT sector due to its ability to cover all use cases from small devices to service systems.</li> </ol>"},{"location":"goto_programming_lang/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>Draftbit, a platform for building mobile apps visually using Expo and React Native, has transitioned from JavaScript to Reason due to its ease of use and reduced technical debt.</li> <li>The company's stack includes React Native, Expo, GraphQL, Apollo, Postgres, and WebAssembly. They aim to provide a fast and efficient development experience for early-stage companies.</li> <li>Reason is a JavaScript-like functional language with a friendly compiler built on top of OCaml and uses NPM for package management. Benefits include faster compilation, fewer errors, easy integration with existing projects, and helpful error messages.</li> <li>React components in reason are familiar to JSX users with some differences like destructuring. A real-world project demonstrates the use of ReasonML and React.</li> <li>Pipe first feature in ReasonML allows composable functions, while its standard library, Belt, offers useful tools. Converting immutable lists to arrays for browser compatibility is also discussed.</li> <li>Hooks in React are used in ReasonML, offering safety and ease of use. Pattern matching with switch statements in reason is powerful, as well as variants for complex data structures. Jen type generates bindings between JavaScript and reason, simplifying integration.</li> <li>Reason allows using existing JavaScript components, working together with Ohmecamel to provide three output options: byte code, native code, and JavaScript. BuckleScript focuses on readable, safe, and optimized JavaScript compilation, offering tree shaking for smaller compiled files.</li> <li>Deep integration with JavaScript libraries enables efficient optimization and performance improvements. The community can create custom bindings between Reason and JavaScript using specific syntax.</li> <li>Many large companies use BuckleScript in production, including Bloomberg Messenger, Accenture, McKinsey &amp; Company, Jane Street, and Facebook. Learn more through meetups, Google Discord groups, and upcoming conferences. Give BuckleScript a chance as it may become popular like React did.</li> </ol>"},{"location":"goto_programming_lang/#achieving-functional-programming-in-java-john-napier-goto-2019","title":"Achieving Functional Programming in Java \u2022 John Napier \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VUH_HhAaNpc</p> <ul> <li>Speaker is a software developer at an algorithmic trading firm.</li> <li>Lambda is an open source library for functional programming in Java.</li> <li>Guiding principles for effective programming:</li> <li>Constraints should be precisely stated via type.</li> <li>JDK generic operations should have generic interfaces.</li> <li>Lazy evaluation is a useful default.</li> <li>Partial operations should be encoded as total operations.</li> <li>Pure and impure operations should be separate in design and type checking.</li> <li>Encode partial operations as total operations</li> <li>Separate pure and impure operations</li> <li>Precisely state constraints</li> <li>Use lambda types for better representation</li> <li>Utilize co-products for type safety</li> <li>Generic interfaces for generic operations</li> <li>Discussed issues with tuples and optional values in languages like Java, Ruby, and Go.</li> <li>Introduced the Either type to represent success or failure semantics.</li> <li>Highlighted the importance of generic operations for functional programming.</li> <li>Explained how functors can be used as a first class concept in Lambda.</li> <li>Demonstrated flat map operation on different types like Optional, Stream, and Completable Future.</li> <li>Discussed lazy evaluation and its usefulness in dealing with dates.</li> <li>Lambdas offer a rich library of functional iteration patterns.</li> <li>Covers functors, applicative functors, monads, and more.</li> <li>Generic operations provide reusability and lawful behavior.</li> <li>Data types like Either and Maybe for composable expressions.</li> <li>Lambdas' Either type has caching, ensuring, and try with resources semantics.</li> <li>Generic operations lead to reusability and efficient code.</li> <li>Data types like Maybe, Either, Unit, and Curried functions are useful in functional programming.</li> <li>Partial application allows for flexible function usage.</li> <li>Semigroups and Monoids provide useful properties and functions.</li> <li>Functional iteration patterns (map, filter) can be applied to various data structures.</li> <li>Heterogeneous data structures like HList allow different types of elements.</li> <li>Lenses for focusing on specific elements in a list or map.</li> <li>IO monad for handling asynchronous tasks and concurrency.</li> <li>Lambda project available on GitHub under MIT license.</li> </ul> <p>No context: - Lambdas are functional programming concepts in Java. - Guiding principles for effective programming. - Either type represents success or failure semantics. - Generic operations provide reusability and lawful behavior. - Data types like Maybe, Either, Unit, Curried functions. - Partial application allows flexible function usage. - Semigroups and Monoids offer useful properties and functions. - Functional iteration patterns (map, filter) can be applied to various data structures. - Heterogeneous data structures like HList allow different types of elements. - Lenses for focusing on specific elements in a list or map. - IO monad handles asynchronous tasks and concurrency. - Lambdas' library available under MIT license.</p>"},{"location":"goto_programming_lang/#embracing-the-future-in-a-multi-platform-world-a-kotlin-story-sean-mcquillan-goto-2019","title":"Embracing the Future in a Multi-Platform World: A Kotlin Story \u2022 Sean McQuillan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xilI3dIOJfI</p> <ol> <li>Kotlin Multi-platform allows sharing app logic between iOS and Android, with UI layers remaining native to each platform.</li> <li>The technology supports JVM (Android), LLVM (iOS), and JavaScript targets for persistence layer generalization across platforms.</li> <li>Team structure should include frontend teams (iOS/Android) and a mobile backend team responsible for data layer and shared libraries.</li> <li>Kotlin Multi-platform is in beta stage, with new ideas like safe threading, expect classes, and shared data storage between platforms being explored.</li> <li>Adoption curve suggests early adopters should start now while pragmatic users may wait until Q1 2021.</li> <li>Key concepts include atomic references, co-routines, frozen objects, and worker threads for safe threading in Kotlin Multi-platform.</li> <li>Sudoku application demonstrates cross-platform iOS and Android project using Kotlin Multi-platform.</li> </ol>"},{"location":"goto_programming_lang/#server-side-kotlin-with-coroutines-roman-elizarov-goto-2019","title":"Server-side Kotlin with Coroutines \u2022 Roman Elizarov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=hQrFfwT1IMo</p> <ol> <li>Cotton, a general purpose language, addresses modern programming challenges through its suspend functions for natural asynchronous coding.</li> <li>Service-oriented architecture leads to complex business logic and cascading failures due to slow services; synchronous programming is one solution using threads and waiting for responses.</li> <li>Various approaches like callbacks, futures/promises, and reactive programming are used for asynchronous programming. Cotton's suspend functions simplify this process without complex combinators.</li> <li>Reactive programming can be hard to read due to code combinations; some languages propose a sink await paradigm based on futures (e.g., C# tasks or JavaScript promises).</li> <li>Carbon Curtains use suspend functions for more natural programming without future combinators, and Spring 5.2 natively supports them. Adapters can help integrate with frameworks that don't directly support suspending functions.</li> <li>Performance is crucial for server-side applications; callbacks are efficient low-level primitives. Suspending functions in Spring 5.2 make it easier to write asynchronous code.</li> <li>If your framework doesn't support synchronous or asynchronous operations, use reactive or future builders with adapters. Curtain builder helps transform code with curtains into a synchronous type for other frameworks.</li> <li>Suspending functions are more efficient than traditional approaches in terms of memory allocation and performance. Configuring service threads depends on the I/O framework used but is easier to scale with suspending functions.</li> <li>If blocking occurs due to legacy code or third-party libraries, use a dispatcher thread pool to execute tasks asynchronously. Configure system efficiency by using context to avoid blocking main threads and create separate thread pools for different types of operations (CPU, I/O, etc.).</li> <li>Curtains provide natural support for consolation, allowing cancellation of long-running tasks. They ensure safe execution, preventing leaks and resources from being left behind after failures. Enforcing curtain usage through types helps with documentation and better organization of code.</li> </ol>"},{"location":"goto_programming_lang/#the-language-of-programming-anjana-vakil-goto-2019","title":"The Language of Programming \u2022 Anjana Vakil \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6EdFiISk22k</p> <ol> <li>Programming languages and human language share a relationship, as they both serve as means of communication.</li> <li>Linguistics studies various languages to understand how they work, while linguistic typology analyzes features across different languages.</li> <li>Every language has unique aspects that contribute to the overall picture of human language.</li> <li>Programming involves analyzing software at different levels of abstraction and follows programming paradigms, which are like linguistic theories.</li> <li>Linguistics teaches descriptive analysis instead of prescriptivism, similar to how programming should be understood in context.</li> <li>Code is a human activity that evolves with changing needs and should be considered within broader social contexts.</li> <li>Creating beginner-friendly teaching languages in different languages helps share collaborative power worldwide.</li> <li>Learning programming should be gradual, similar to how children acquire natural language.</li> <li>Communities play a crucial role in learning and advancing skills; investing in these communities is essential for progress.</li> </ol>"},{"location":"goto_programming_lang/#java-current-and-future-georges-saab-mikael-vidstedt-goto-2019","title":"Java Current and Future \u2022 Georges Saab &amp; Mikael Vidstedt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vJrHHe3IbQs</p> <ol> <li>Java is a thriving technology, with ongoing development and improvements.</li> <li>Open JDK offers early access binaries for testing new features.</li> <li>Focus on cloud-friendly, small footprint, fast startup time, low latency, and AI/ML applications.</li> <li>Oracle leads most of the investment in Java's future.</li> <li>New release cadence: frequent releases every six months with smaller increments.</li> <li>Long-term support (LTS) releases for stable performance, security fixes, and no new features.</li> <li>Oracle pricing model: $25 per month on servers, $2.50 on desktops; scales with usage.</li> <li>Projects like Amber, Valhalla, Panama, GraalVM, and Quarkus are being developed in open JDK.</li> <li>Valhalla focuses on adding inline classes to Java for better performance.</li> <li>Amber project aims to improve the performance of Java applications through optimized garbage collection.</li> <li>Panama adds support for foreign function interfaces (FFI) for native library access.</li> <li>GraalVM is a high-performance runtime that compiles various languages into native machine code.</li> <li>Quarkus is a Kubernetes-native Java stack for building cloud-native applications.</li> <li>Valhalla project aims to improve Java performance by optimizing memory usage and reducing overhead.</li> <li>Inline classes (value types) are being developed for better performance, but compatibility concerns exist.</li> <li>Matrix multiplication example shows significant improvement in speed, memory allocation, and CPU efficiency with inline classes.</li> <li>Projects aim to make Java more expressive, easier to read while maintaining type safety.</li> <li>Local variable type inference simplifies code by letting the compiler infer types.</li> <li>Switch expressions are a preview feature that allows switch statements to return values.</li> <li>Pattern matching simplifies type checking and casting.</li> <li>Records provide a simpler way of creating objects with default constructors, hash codes, equals methods, etc.</li> <li>Loom enhances concurrency by using fibers (lightweight threads) and delimited continuations for asynchronous programming.</li> <li>Panama connects Java to C/C++ libraries and native data through a new API.</li> <li>Metropolis aims to move Java Runtime components into Java, starting with JIT compilers.</li> <li>Scarlet focuses on modernizing developer experience for JDK development.</li> <li>Portola explores making sure the JDK works well in containers like Alpine Linux.</li> <li>CGC is a project working on a garbage collector with low pause times and support for large heaps.</li> <li>Early access binaries available for JDK 13, including Valhalla, Panama, and J package projects.</li> <li>Focus on improving Java development and user experience.</li> </ol>"},{"location":"goto_programming_lang/#the-soul-of-erlang-and-elixir-sasa-juric-goto-2019","title":"The Soul of Erlang and Elixir \u2022 Sasa Juric \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JvBT4XBdoUE</p> <ol> <li>Erlang and its runtime, the BEAM virtual machine, are part of Joe Armstrong's legacy.</li> <li>BEAM uses processes for concurrency, with separate execution contexts, memory space, and message passing.</li> <li>Concurrent programming in BEAM allows systems to be split into independent parts for better scalability and flexibility.</li> <li>Demonstration shows the benefits of using multiple processes in a system.</li> <li>BEAM offers an alternative software building style that is simpler yet more powerful and flexible than traditional approaches.</li> <li>Lix implementation uses Erlang with a single OS process, showcasing its potential for millions of lightweight programs.</li> <li>BEAM's schedulers handle process execution efficiently, even managing 10K processes at 20% capacity.</li> <li>User-facing pages and WebSockets enable input and asynchronous results.</li> <li>Calculation processes improve fault tolerance and high availability by handling individual requests.</li> <li>BEAM's scheduler ensures fair distribution of CPU time through frequent context switching.</li> <li>Negative inputs can cause issues, but the system still functions with reduced efficiency.</li> <li>Fixing issues is crucial for maintaining high availability.</li> <li>Using BEAM's debugging capabilities, operators can identify and resolve problems in processes.</li> <li>Elixir's technical uniformity simplifies development and maintenance across distributed systems.</li> <li>Swarm dependency manages cluster state and process associations.</li> <li>Three lines of code make a service distributed without extra processes or containers.</li> <li>Technical uniformity benefits include easier setup, teamwork improvement, and reduced need for specialists.</li> <li>Elixir can handle complex challenges without rewriting everything from scratch.</li> <li>Author promotes their book \"Elixir in Action\" with a discount code.</li> </ol>"},{"location":"goto_programming_lang/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <ol> <li>Speaker loves programming and believes it's a creative discipline with no limits but one's mind.</li> <li>Philosophy and computer science share similarities, as Ludwig Wittgenstein discussed boundaries/limits in language.</li> <li>Programming languages limit problem-solving due to different paradigms.</li> <li>Majority of audience loves programming, knows multiple languages, and has a favorite one.</li> <li>Closure is a functional programming language with unique features like shared code across platforms and immutable data structures.</li> <li>A lecture capture tool project was developed using closure for audio recording and sharing.</li> <li>Lisp was used in the project to demonstrate how data structures can be utilized.</li> <li>Introduced a lecture capture application idea using Closure, with shared code between platforms and shared libraries.</li> <li>Discussed immutable data structures and atomic references in Closure.</li> <li>Demonstrated hot reloading and state management in development systems.</li> <li>Showcased an example of a fun game with changing states.</li> <li>Encouraged learning various programming languages and paradigms, including Closure.</li> <li>Saved orangutans through the nonprofit organization.</li> </ol>"},{"location":"goto_programming_lang/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <ol> <li>Typescript was released in 2012 as a tool for compiling code into JavaScript, aiming to improve the language rather than replace it.</li> <li>CoffeeScript and Dart were other compile-to-JavaScript tools that didn't achieve the same level of success as Typescript due to various reasons.</li> <li>Typescript has been more successful because it feels familiar to existing JavaScript developers while focusing on improving the language.</li> <li>Both CoffeeScript and Dart faced challenges in gaining mass adoption among the JavaScript community, primarily due to unfamiliar code for developers.</li> <li>NativeScript initially considered not using TypeScript but later embraced it as it made developers more productive.</li> <li>Typescript's success can be attributed to its commitment to the JavaScript standard, familiarity for developers, and opt-in typing system.</li> <li>The typescript compiler can infer types without explicit declarations, making it easier to learn and use.</li> <li>Tooling support in editors like Visual Studio Code provides intelligent suggestions, autocomplete, and seamless integration with libraries and frameworks.</li> <li>Types are available for popular libraries and frameworks through NPM packages, enhancing the development experience.</li> <li>Flow is similar to Typescript but operates directly on JavaScript files, making it slightly slower.</li> <li>Benefits of using Typescript include improved productivity for large teams, better code understanding, and easier collaboration with non-JavaScript developers.</li> <li>Downsides of Typescript include configuration complexity and advanced features that may confuse some developers.</li> <li>Organizations with diverse app developers may benefit from using TypeScript, as it can be useful for debugging and non-JavaScript developers can find comfort in using it for front-end work.</li> </ol>"},{"location":"goto_programming_lang/#rust-async-programming-in-2018-katharina-fey-goto-2018","title":"Rust Async Programming in 2018 \u2022 Katharina Fey \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=j0SIcN-Y-LA</p> <ol> <li>Rust is a systems programming language focusing on safety in memory and thread ownership.</li> <li>Borrowing data in Rust ensures proper ownership and prevents concurrency issues.</li> <li>Async programming allows non-blocking I/O without creating new threads, making it efficient and easy to use.</li> <li>In 2013, Lib Green was introduced for asynchronous programming but required a runtime; it was removed in late 2014 leading to the development of mio.</li> <li>Rust has zero-cost abstractions like futures RS for efficient asynchronous programming.</li> <li>Tokio combines mio and futures RS with an event reactor, providing a stable technology stack since 2016.</li> <li>Rust 2018 introduced async/await feature for writing asynchronous code using an event loop in the background.</li> <li>Futures library provides building blocks for creating async applications.</li> <li>Ownership model ensures data is accessed by only one function at a time.</li> <li>Async/await syntax uses weight macro to interact with runtime without needing an event loop.</li> <li>Standard library includes futures abstraction for compatibility across devices.</li> <li>The async/await syntax is stable in nightly compiler, but the library ecosystem needs improvement.</li> <li>Stability expected by early 2019, but delays due to other issues.</li> </ol>"},{"location":"goto_programming_lang/#fresh-async-with-kotlin-roman-elizarov-goto-2018","title":"Fresh Async With Kotlin \u2022 Roman Elizarov \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=hb0hfHVWCS0</p> <ol> <li>History of coroutines and synchronous programming</li> <li>Traditional approach: callbacks (callback hell)</li> <li>Solution: Futures/Promises (different names in various languages)</li> <li>Issues with futures: Complexity, learning new primitives, readability</li> <li>Kotlin Coroutines: Designed to solve callback hell and improve code readability</li> <li>Suspend functions: Marked with a special modifier, allowing for suspension of execution</li> <li>Cotton curtains aim to solve callback hell by using the suspend modifier for functions that can suspend execution</li> <li>Suspended functions are compiled into GBM declarations, which use continuation (callback) parameters</li> <li>In Java, there's a variety of future types across different libraries; Kotlin Coroutines integrate with these libraries through 'lift' extension function</li> <li>Async/await is not available in Kotlin; instead, it offers a better solution for asynchronous programming using suspend functions</li> <li>Kotlin coroutines offer simple and powerful features for concurrency</li> <li>Kotlin's approach to concurrency differs from C# and other languages</li> <li>Cotton language focuses on structured concurrency with suspended functions, sync functions, and deferred types</li> <li>Cotton supports parallelism without forcing it upon developers</li> <li>Suspended functions in Cotton allow for synchronous programming without shared mutable state</li> <li>CSP (Communicating Sequential Processes) is a solution to the problem of shared mutable state</li> <li>Cotton 1.30 stabilized curtains, making them a stable feature</li> </ol>"},{"location":"goto_programming_lang/#keeping-up-with-java-sander-mak-goto-2018","title":"Keeping Up with Java \u2022 Sander Mak \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cF-rUNCOm2c</p> <ol> <li>Java 9 introduced a module system for better code organization and dependency management.</li> <li>Modules allow strong encapsulation, ensuring only necessary dependencies are exposed.</li> <li>Module paths help in running applications with explicit dependencies.</li> <li>The module system improves maintainability and flexibility of large code bases.</li> <li>Java 11 has removed some enterprise IPs like JAXB, RI, and XML Web Services; applications must bundle their own dependencies.</li> <li>JShell is an interactive coding environment with code completion and documentation.</li> <li>Collection factory methods in Java 9 improve collection initialization.</li> <li>Local variable type inference was added in Java 10 with 'var'.</li> <li>Java 11 has a new HTTP client API, now part of the standard library.</li> <li>Adopt a strategy based on your company or team needs regarding LTS and non-LTS versions.</li> <li>Oracle JDK's licensing changed to commercial for Java 11, making openJDK more relevant. Long-term support will be provided every three years starting from Java 17.</li> <li>OpenJDK and Oracle JDK feature parity since Java 11, with some proprietary features removed. When moving from Java 8 to 11, consider using openJDK again.</li> <li>Long-term support for Oracle JDK 11 is available through subscription; long-term support for OpenJDK 11 may be offered by other parties like Azul and IBM's AdoptOpenJDK.</li> <li>If following release train (Java 11 to 12 to 13), plain openJDK bills are sufficient. When jumping from LCS to LCS, consider adopting a vendor's JDK (Oracle, Azul, Red Hat, AdoptOpenJDK).</li> </ol>"},{"location":"goto_programming_lang/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ul> <li>Mozilla contractor and Rust developer, Ashley Williams, shared her experience of convincing NPM to use Rust.</li> <li>NPM is the largest package registry with over 1 million packages.</li> <li>Rust is a systems programming language designed for Firefox's codebase.</li> <li>To convince companies to adopt Rust, focus on its benefits and potential drawbacks.</li> <li>Don't completely rewrite software in Rust; use microservices architecture.</li> <li>Showcase Rust through code demonstrations and avoid bashing other languages.</li> <li>Be a systems developer and advocate for Rust within your company.</li> <li>Emphasize safety, speed, and ergonomics when explaining Rust benefits.</li> <li>Ensure Rust is accessible to all developers by using real-world examples.</li> <li>Encourage collaboration with other languages; Rust can complement them.</li> <li>Be patient and persistent while promoting Rust within your company.</li> <li>Introduce new technology without controlling someone's first experience.</li> <li>Focus on inclusivity, documentation, tooling, and support tools like cargo and crates.io.</li> <li>Rust has a strong focus on documentation and tooling, providing resources for developers.</li> <li>Rust cares about inclusivity with programs like increasing breast reach and Russ bridge.</li> <li>Selling tech should consider technical merits but also other factors.</li> <li>Be prepared for technology changes in the industry.</li> <li>Rust's memory management can make writing fast code more complicated, requiring attention to details.</li> <li>Rust has a strong compiler that helps catch errors and ensures correctness.</li> <li>Boring code can be reliable due to Rust's safety features.</li> <li>Compilers provide helpful error messages and guidance.</li> <li>Focus on solving problems rather than using the latest technology.</li> <li>Rust is good at processing files, particularly markdown.</li> <li>Prioritize reliability over speed when possible.</li> <li>Server performance affects team dynamics.</li> <li>Focus on solving real problems, not just cool ones.</li> <li>Rust is useful for specific tasks like file processing and memory management.</li> <li>Learning new technologies can be energizing and beneficial for employee motivation.</li> <li>Gumption (initiative, resourcefulness, enthusiasm) is essential when introducing new tech.</li> <li>WebAssembly allows compiling Rust to run in browsers or Node.js.</li> <li>Try new things, but consider context and other people's experiences.</li> </ul>"},{"location":"goto_programming_lang/#functional-programming-in-40-minutes-russ-olsen-goto-2018","title":"Functional Programming in 40 Minutes \u2022 Russ Olsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=0if71HOyVjY</p> <ol> <li>Functional programming is a refactoring of existing programming knowledge, focusing on organizing and reusing working pieces with a new paradigm.</li> <li>Traditional object-oriented programming may have become messy, requiring refactoring, which functional programming aims to address.</li> <li>It starts with a clean sheet of paper, emphasizing simplicity and core ideas while seeking a new paradigm for programming.</li> <li>Functional programming borrows ideas from mathematical functions, introducing pure functions that only consider input and output without side effects.</li> <li>Immutable data structures are used to maintain program understanding, along with persistent data structures that efficiently handle copying during modification.</li> <li>Combining pure functions and immutable data structures creates a functional programming world with no side effects.</li> <li>Closure provides atoms for representing mutable state and bridges between functional and real-world code. Agents are used to handle side effects like database updates or file deletions.</li> <li>Functional programming offers a better way to write programs but still has issues like off-by-one errors.</li> <li>Pedestal, a library written in a functional style, demonstrates that functional programming works in practice.</li> <li>Functional programming mainly consists of writing functions and dealing with interfaces.</li> </ol>"},{"location":"goto_programming_lang/#the-dos-and-donts-of-error-handling-joe-armstrong-goto-2018","title":"The Do's and Don'ts of Error Handling \u2022 Joe Armstrong \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=TTM_b7EJg5E</p> <ul> <li>Fault-tolerant systems are designed to work despite failures.</li> <li>Hardware redundancy helps minimize hardware issues, but software errors are more common and harder to eliminate.</li> <li>Distributed programming is crucial for fault tolerance as it allows concurrent execution of programs on multiple computers.</li> <li>Message passing is the foundation of object-oriented programming and should be consistent across scales.</li> <li>Airline language unifies ideas from concurrent programming, object-oriented programming, and functional programming to create an easy-to-understand framework for fault-tolerant systems.</li> <li>Involvement in fault-tolerant systems since 1980: Created Erlang programming language for Ericsson, focusing on detecting and fixing errors; unified object-oriented programming with functional programming; Ellen (Erlang) became open source due to being banned within Ericsson; founded Blue Tail company, later acquired by Altium Web Systems; Nortel Networks bought Altium Web Systems.</li> <li>Discussed the importance of messaging in programming and the need for self-consistency in software systems.</li> <li>1985: Moved to Ericsson, worked on Flex (object-oriented hardware).</li> <li>In 1998, Erlang became open source due to Nortel Networks acquisition of Ericsson.</li> <li>Airline model of computation and shared memory systems were adopted in programming languages.</li> <li>Reliability of service should be applied to consumer products.</li> <li>Six rules for building reliable systems: support concurrency, encapsulate errors, detect faults, stable storage, make simple choices when errors occur, and have an error kernel.</li> <li>Erlang's error kernel is small (200 lines of code) and used by companies like WhatsApp, CERN, and National Health Services in the UK.</li> <li>Importance of fault tolerance and scalability in concurrent programming.</li> <li>Error handling through hierarchical architecture, where each level handles errors differently.</li> <li>Concurrency allows for better fault tolerance and security by isolating components.</li> <li>Erlang's approach to error handling: crash immediately, log the issue, and move on.</li> <li>Concurrency makes programming easier as it can be applied to both local and distributed systems.</li> <li>Importance of reliable systems through isolation.</li> <li>Concurrency and programming languages.</li> <li>Arithmetic errors and their impact on precision.</li> <li>Observational equivalence in system behavior.</li> <li>Need for describing protocols and contracts.</li> <li>Architecture with client, server, and contract checker.</li> <li>Contract checkers assign blame when issues occur.</li> <li>Programming languages are not important; focus on behavior at interfaces.</li> <li>Observational equivalence is about same patterns in black boxes.</li> <li>Focus on interactions between components and message passing.</li> <li>Contracts describe protocols, assign blame, and help with architecture.</li> <li>Immune system idea for detecting internal errors and self-healing.</li> <li>Error kernel logs errors, restarts failed parts.</li> <li>Distinction between error and failure.</li> <li>Asynchronous messaging needs order in message passing.</li> <li>Protobufs are moving in the right direction but not adequate.</li> <li>Session types exist for sequencing messages.</li> <li>No context provided on existing systems for telecommunications.</li> </ul>"},{"location":"goto_programming_lang/#software-automation-in-a-polyglot-stack-jessica-kerr-goto-2018","title":"Software Automation in a Polyglot Stack \u2022 Jessica Kerr \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cEyjEEK0xuo</p> <ol> <li>Polyglot programming is common due to various reasons, such as fitting the language to a problem and considering community and people involved.</li> <li>Introducing new languages can be beneficial for growth and innovation, but also think about existing enterprise stacks and individual preferences.</li> <li>Gradually build new tools with modern technologies while ensuring automation makes bringing in new languages less painful for teams.</li> <li>Readme-driven development starts with human needs, then automates the process.</li> <li>Automate project setups to help people explore easily using docker containers or other tools.</li> <li>Make automation accessible to everyone on the team and ensure documentation is clear and consistent.</li> <li>Encourage team collaboration with a centralized API for better efficiency and safety.</li> <li>Focus on generativity, which involves overall growth rather than individual productivity.</li> <li>Risk management involves considering worst-case scenarios and making software easier to change.</li> <li>Update organizational tools regularly for an agile development process.</li> <li>Add reversibility through tools and processes.</li> <li>Avoid automating everything in production, learn by hand first.</li> <li>Use mental models and pair/mob programming for shared understanding.</li> <li>Understand the objective behind changes and new tools.</li> <li>Convince people about new tools or languages, focusing on high-level objectives and new capabilities.</li> <li>Empathy plays a role in understanding others' concerns.</li> <li>Start small and show useful results before moving to bigger changes.</li> </ol>"},{"location":"goto_programming_lang/#the-robustness-of-go-francesc-campoy-goto-2018","title":"The Robustness of Go \u2022 Francesc Campoy \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=40d26ZGfhR8</p> <ol> <li>Robustness in computer science focuses on how programs function when things go wrong.</li> <li>Go language addresses memory safety through pointers without pointer arithmetic, garbage collection, automatic bounds checks, and escape analysis.</li> <li>Rust has a more complex type system for memory safety.</li> <li>Type safety in Go is achieved via static typing and efficient compiler checks.</li> <li>Erlang's robustness comes from its fault tolerance and graceful handling of errors.</li> <li>Go's memory management uses stack allocation for local variables, offering performance benefits.</li> <li>Type safety is maintained through static typing, no implicit type conversion, and explicit conversions for compatibility.</li> <li>Interfaces are checked at compile time in Go, leading to easy-to-understand errors.</li> <li>No exceptions prevent blocking issues in concurrent programs.</li> <li>Concurrency features include goroutines, channels, and select for multiple operations.</li> <li>Mutable state can lead to incorrect results in Go; data races are detected using the race detector.</li> <li>Nil pointers are useful but require careful handling.</li> <li>Go lacks generics, making some implementations challenging.</li> <li>Panic is similar to exceptions but allows recovery through deferred functions.</li> <li>Robustness in Go depends on underlying systems; it cannot prevent catastrophic failures.</li> <li>Erlang offers better concurrency with actors and fault detection.</li> <li>Live code upgrade enables continuous running without downtime.</li> <li>Stable storage ensures transactions are either fully completed or not at all, preventing data corruption.</li> <li>Kubernetes provides robustness through containers, nodes, clusters, automatic failure detection, and recovery.</li> <li>Rolling updates allow live code upgrades in Kubernetes.</li> <li>Go's robustness comes from its architecture rather than the language itself.</li> <li>Go has not yet decided on a version management system due to its origins at Google with one repository.</li> <li>DEP and Vigo are tools for dependency management and versioning in Go.</li> <li>A dynamic hot code swapping feature is currently impossible in Go, but it's an interesting idea.</li> <li>A potential future direction could be a distributed runtime that allows go routines to run on different machines without needing Kubernetes.</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-with-kotlin-hadi-hariri-goto-2018","title":"Functional Programming with Kotlin \u2022 Hadi Hariri \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=eNe5Nokrjdg</p> <ol> <li>Introducing functional programming in Kotlin</li> <li>Benefits of functional programming: abstraction, expressive and concise code</li> <li>Kotlin as an object-oriented language with functional constructs</li> <li>Basic syntax for functions in Kotlin</li> <li>Understanding unit, nothing, and top-level objects in Kotlin</li> <li>Higher order functions and lambdas support in Kotlin</li> <li>Lambdas can be used with single parameter names</li> <li>Extension functions allow adding new functionality to existing classes</li> <li>Infix notation for more readable function calls</li> <li>Concepts of anonymous functions and lambdas in Kotlin</li> <li>Lambda behaviors, such as non-local returns in forEach</li> <li>Data classes can be made immutable with val properties</li> <li>Immutability helps avoid invalid objects and simplifies validation logic</li> <li>Custom getters on immutable properties may not work as expected</li> <li>Kotlin's Const keyword guarantees constant expressions for properties</li> <li>Partial functions (e.g., process entry) can be handled using checked exceptions or result classes with success/failure subclasses</li> <li>Algebraic data types provide safety by restricting inheritance to specific files</li> <li>Arrow library offers built-in functionality, including Either type for handling either a successful result or an error message</li> <li>Partial functions handle all cases, unlike total functions</li> <li>Arrow library provides built-in solutions to simplify option type handling</li> <li>Introducing the concept of option in Kotlin</li> <li>Map and flatMap functions for working with options</li> <li>Bind function for monadic comprehensions</li> <li>Creating a custom configuration DSL using objects, invocation, and extension functions</li> <li>Implementing DSLs may not be suitable for every class or project; it depends on the requirements and complexity of the codebase</li> </ol>"},{"location":"goto_programming_lang/#c-the-newest-old-language-matt-godbolt-goto-2018","title":"C++ - the Newest Old Language \u2022 Matt Godbolt \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=HAFrggEDr5U</p> <ol> <li>C++ is a powerful and evolving language with numerous benefits, including recent updates like auto, range for, lambdas, move semantics, smart pointers, and more.</li> <li>Auto allows the compiler to infer variable types, simplifying code.</li> <li>Range for makes iterating over containers easier.</li> <li>Lambdas enable inlining small functions and capturing variables.</li> <li>Move semantics help manage memory efficiently by transferring object ownership.</li> <li>Smart pointers actively manage memory, reducing memory leaks.</li> <li>C++ has seen significant improvements with new features like range-based for loops, lambdas, move semantics, smart pointers, context/constexpr, atomics, user-defined literals, return type deductions, and lambda enhancements.</li> <li>C++17 introduced constexpr if statements (if constexpr) for template meta programming.</li> <li>New features in the pipeline include concepts, ranges, co-routines, and improved network programming support.</li> <li>Value types are passed by value, making them easier to handle and reason about in code.</li> <li>Strong typing helps catch errors early on, such as passing the wrong parameters to a function.</li> <li>Custom types can be modeled with specific behavior and operations.</li> <li>Constructors allow for default initialization, ensuring objects are initialized properly.</li> <li>Const keyword ensures an object remains unchanged during method calls.</li> <li>Object lifetime management is crucial; destructors run when objects go out of scope.</li> <li>Custom types can have their own lifecycle management, such as releasing resources upon destruction.</li> <li>Mutation in objects can indicate they're not allowed to change, signaling callers that methods won't affect the object.</li> <li>C++ unique pointers ensure ownership transfer and prevent copying temporary values.</li> <li>Compilers can optimize code based on memory layout, leading to faster execution.</li> <li>Clang compiler is recommended for its error messages and tooling support.</li> <li>Sanitizers help detect errors in programs, ensuring better security.</li> <li>The C++ community has grown with guidelines, best practices, and resources available online.</li> <li>Rust offers similar performance to C++ but is stricter on borrowing and ownership.</li> <li>Clang tooling is a C++ language server.</li> <li>Sea Lion Community Edition helps with C++ development.</li> <li>The C++ community has improved recently, with clear guidelines and best practices.</li> <li>Rust is similar to C++ but stricter about ownership and borrowing.</li> <li>Sanitizers are used in some core Google components for security reasons.</li> <li>Package management systems like Conan help manage dependencies.</li> <li>TDD can be done using catch library with BDD and TDD modes.</li> <li>Core guidelines support is available, though the standard library is mostly fine.</li> <li>Boost is a high-quality general-purpose library for algorithms.</li> <li>C++ adoption barriers are being addressed to improve user experience.</li> </ol>"},{"location":"goto_programming_lang/#why-is-rust-successful-florian-gilcher-goto-2017","title":"Why is Rust Successful? \u2022 Florian Gilcher \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=-Tj8Q12DaEQ</p> <ul> <li>Rust is a new systems programming language developed by Mozilla and the community, focusing on safety, concurrency, and speed.</li> <li>It has explicit notions of mutability, data ownership (borrowing), and treats errors as values.</li> <li>Data ownership ensures static deallocation through reference counting.</li> <li>Borrowing can be done in immutable or mutable ways, ensuring no conflicting access to shared state.</li> <li>Rust offers a safe environment with an optional unsafe sublanguage for specific cases.</li> <li>The language combines safety techniques from research settings into production-ready packages.</li> <li>It's used in sizable production environments like Firefox, Dropbox, and canonical infrastructure.</li> <li>More than 2000 contributors have worked on the project, with over 80% of contributions coming from outside Mozilla.</li> <li>Rust has grown significantly since its inception, now having more libraries than Haskell.</li> <li>It's considered a loved language by developers and is used for production software.</li> <li>Stylo, the styling engine powering Firefox Quantum, uses Rust's concurrency tracking for efficient parallelization.</li> <li>The language has a strict commitment to stability, releasing every six weeks with minimal breaking changes.</li> <li>It's backwards compatible and piggybacks on other mature technologies like LLVM.</li> <li>Mozilla follows an open governance structure for changes and improvements.</li> <li>Visual Studio Code and JetBrains' Rust IDE are recommended for development.</li> <li>Compile performance is improving over time with around 20-30% gains in half a year.</li> <li>Rust's static nature makes it unsuitable for heavy dynamic programming or object-oriented environments.</li> <li>Maturity of libraries varies depending on the field.</li> <li>Rust has a framework and library called Tokyo for non-blocking I/O.</li> <li>Fuzzing is possible with tools like American Fuzzy Lop, LipFuzz, and LLVM fuzzers.</li> </ul>"},{"location":"goto_programming_lang/#flutter-the-best-way-to-build-for-mobile-kasper-lund-goto-2017","title":"Flutter: The Best Way to Build for Mobile? \u2022 Kasper Lund \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=1BXg4wfB9pA</p> <ul> <li>Flutter is a new framework for building mobile apps, designed to be productive and efficient with custom UIs and fast applications.</li> <li>Based on Dart language runtime and Skia graphics library, it offers Material design components for easy app development.</li> <li>The framework is reactive and compiles to native code, running on Android, iOS devices, and web browsers.</li> <li>Flutter provides a layered framework with predefined high-quality widgets for rapid app development, supporting custom UI across platforms.</li> <li>It allows building apps with a single codebase for both Android and iOS platforms, offering customization based on platform requirements.</li> <li>Dart has been upgraded to have a sound type system for better scalability, and the compiler converts Dart code into native code or JavaScript for different platforms.</li> <li>Flutter's Just-In-Time (JIT) compilation during development and Ahead-Of-Time (AOT) compilation for deployment improve productivity.</li> <li>The framework has an open source alpha release focusing on localization, accessibility, and screen reader support.</li> <li>Accessing platform-specific APIs involves writing native code in Java, C++, or Swift, then exposing it through a messaging API to the Dart layer.</li> <li>Flutter is stable with few breaking changes, learning from customer feedback to improve its API.</li> <li>The framework compiles to native machine code for better performance and efficiency.</li> </ul>"},{"location":"goto_programming_lang/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ul> <li>Uber's growth and scale: 73 countries, 470 cities, 1.5 million active driver partners</li> <li>JavaScript usage in Uber's engineering: Node.js for web applications, Go, Java, Python</li> <li>Reasons for using JavaScript: Flexibility, asynchronous nature, mature module ecosystem</li> <li>Four ways Uber uses JavaScript: Backend microservices, front-end web properties, data visualization, external API for developer platform</li> <li>Migration to other languages: Focus on Go and Java due to their scalability and performance (Uber started with PHP, moved to Node.js)</li> <li>Node.js has core strengths: asynchronous I/O, non-blocking single threaded event loop, great module ecosystem</li> <li>Uber's marketplace platform consists of 3400+ microservices, with 100 services for the core trip flow</li> <li>They use JavaScript for front-end development with React and Express</li> <li>The developer experience team focuses on productivity tools and infrastructure</li> <li>Microservices allow clear ownership boundaries, product specific velocity, independent team velocity</li> <li>Node.js helps Uber scale by providing language and platform independence (started with monolithic architecture, transitioned to microservices)</li> <li>Benefits: clear ownership boundaries, product velocity, scalability, language and platform independence</li> <li>Challenges: increased complexity, discovery, eventual consistency, operational overhead</li> <li>Scaling node applications: geo-sharding, Ring Pop for application level sharding, T Channel RPC protocol, Jaeger for distributed tracing</li> <li>Use standard Linux performance tools for profiling and visibility (T Channel: RPC protocol for efficient communication between microservices)</li> <li>Node.js provides performance tools and observability for distributed services</li> <li>Performance issues with dynamic typing languages like JavaScript</li> <li>Microservices require tight interfaces, statically typed languages help enforce this</li> <li>Node.js ecosystem has small libraries but some issues with maturity and dependency chains</li> <li>C++ can be used to improve performance in certain cases</li> <li>Architecture decisions are important for scaling teams and services</li> <li>Consistent platform foundation helps maintain web applications efficiently</li> <li>Web platform built on node.js, npm, Express, React, and Redux</li> <li>Investing in technology platforms solves problems like security vulnerabilities and duplicated effort (Uber's web platform is built on Node.js, Express, React, and Redux)</li> <li>They use customized tools for internal NPM registry, build automation, authentication, security, metrics logging, internationalization, error handling, and analytics</li> <li>Separating front-end services from back-end services allows better scaling and reusability across platforms</li> <li>React components are used to standardize UI design and make it easy for developers to create good-looking websites without dedicated designers on each team (React, Express, Redux)</li> <li>Style Tron is used for managing CSS, making it easier to handle styles in one place</li> <li>JavaScript is used for data visualization with libraries like React Vis, React MapGL, and Deck GL</li> <li>Luma GL simplifies WebGL interaction</li> <li>Node SDK exposes microservices for third parties to build custom experiences</li> <li>Uber shares open source tools on GitHub and engineering blog (Uber uses open source libraries and tools for their developer platform)</li> <li>They expose 3400 microservices as business domain objects via Node SDK (most of these tools are available on GitHub, explained in detail through engineering blogs)</li> <li>Uber aims to build an open platform for third parties to create moving experiences using their tools and data</li> <li>The company has offices worldwide, and they encourage people to join the team</li> </ul>"},{"location":"goto_programming_lang/#elixir-the-only-sane-choice-in-an-insane-world-brian-cardarella-goto-2017","title":"Elixir: The only Sane Choice in an Insane World \u2022 Brian Cardarella \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=gom6nEvtl3U</p> <ol> <li>Infinity refers to the increasing demand on engineering teams for solving complex problems.</li> <li>Elixir is a language built upon Erlang, which was created for telecommunication systems with requirements like zero downtime and hot code loading.</li> <li>Jose Valim developed Elixir as a lightweight language built upon the Erlang virtual machine.</li> <li>Elixir inherits battle-tested 30-year old technology from Erlang, offering solutions to complex problems with modern syntax.</li> <li>Elixir is used by multibillion-dollar corporations for its proven technology and features like battle-tested concurrency and distributed systems.</li> <li>Elixir has a strong tooling system with built-in debugging, linting, documentation, and dependency management tools.</li> <li>Pattern matching is a key feature in Elixir, allowing for more concise code and easier refactoring.</li> <li>Phoenix is a popular web framework used with Elixir.</li> <li>Erlang VM manages processes within the language, ensuring efficient resource usage and distribution across available CPU cores.</li> <li>Deployment targets like Roku are not ideal for Elixir due to cost and performance issues; alternatives include Rackspace or AWS Lambda.</li> <li>Bleacher Report reduced infrastructure costs by moving to Elixir/Phoenix, requiring fewer servers and engineers.</li> <li>WhatsApp's scalability is another example of Erlang's benefits.</li> <li>Gen server allows for blocking requests and fire-and-forget queries.</li> <li>Supervisors manage processes, ensuring a clean restart when errors occur.</li> <li>Let it die philosophy in Erlang focuses on maintaining a good initial state.</li> <li>Supervisors in Elixir monitor workers, with strategies for handling errors or worker death.</li> <li>Agents can be used to maintain state outside the process for better resilience.</li> <li>Functional programming focuses on data and data out, making state more visible.</li> <li>Ruby's focus is on making programming enjoyable.</li> <li>Object-oriented programming (OOP) can be complex and challenging.</li> <li>Functional programming is simpler to learn, with Elixir as an example.</li> <li>Elixir uses modules instead of classes for code reuse.</li> <li>Memory allocation in functional programming is more efficient than OOP.</li> <li>Phoenix framework and Elixir are used by Dr. Calm Consulting.</li> </ol>"},{"location":"goto_programming_lang/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Elm is a functional programming language that compiles to JavaScript, offering more reliability and predictability than JavaScript.</li> <li>Integrate Elm with existing JavaScript applications using interop techniques.</li> <li>Ellie allows side-by-side development of Elm and JavaScript apps while maintaining Elm's guarantees.</li> <li>Embed Elm in JavaScript apps for interactivity, preserving data transfer between the two languages.</li> <li>Elm Architecture: View function returns virtual DOM, model represents state, user interaction triggers messages, and effects are handled using commands.</li> <li>Interoperability with JavaScript: Use commands to send data from Elm to JavaScript, and subscriptions for data transfer in reverse.</li> <li>Multiple embeds can coexist on a page, communicating through subscriptions.</li> <li>Incrementally integrate Elm into existing applications while considering runtime overhead.</li> <li>Use Elm for business logic and embed it in the DOM or as a drop-in component with libraries like React Elm Components.</li> <li>Refer to official resources for more information on interoperability between Elm and JavaScript, maintaining guarantees, and client-server communication.</li> </ol>"},{"location":"goto_programming_lang/#demystifying-scala-kelley-robinson-goto-2017","title":"Demystifying Scala \u2022 Kelley Robinson \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IayQ7lxPUP4</p> <ul> <li>Scala is a statically typed, functional programming language.</li> <li>It combines object-oriented and functional programming styles.</li> <li>Inherently object-oriented and functional, Scala offers interoperability with Java.</li> <li>Popular in industries like finance, telecommunications, and media.</li> <li>Large community with resources for learning and development.</li> <li>Compiles to Java bytecode, runs on the JVM, and leverages existing tools/libraries.</li> <li>Features include type inference, immutable data by default, multiple inheritance of traits, pattern matching, higher-order functions, and flexibility in coding styles.</li> <li>Reasons for using Scala: productivity, familiarity with Java, strong community, interoperability, and performance.</li> <li>Challenges: lack of standard syntax guide, managing teams, difficulty understanding some code due to complexity.</li> <li>Resources for learning: Repl.it, Coursera's Functional Programming Principles in Scala course, LearnScala.org, official Scala website.</li> <li>Testing frameworks: ScalaTest, multiple options available.</li> <li>Good tooling support for development: SBT (Scala Build Tool).</li> </ul>"},{"location":"goto_programming_lang/#programming-across-paradigms-anjana-vakil-goto-2017","title":"Programming Across Paradigms \u2022 Anjana Vakil \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Pg3UeB-5FdA</p> <ol> <li>Paradigms are fundamental patterns that influence our understanding of programming and the universe.</li> <li>Thomas Kuhn's \"Structure of Scientific Revolutions\" explains how paradigm shifts occur in science, where communities move from one dominant model to another as anomalies arise.</li> <li>Programming paradigms include functional, object-oriented, logic, and others, each with its own theory, methods, and standards.</li> <li>Paradigms can be applied across various domains like data analysis, machine learning, and natural language processing.</li> <li>Shifting from one paradigm to another requires a community consensus on the new model's usefulness and ability to address anomalies.</li> <li>Scientific paradigms and programming languages have evolved over time.</li> <li>Imperative programming focuses on commands, state, and precise timing.</li> <li>Object-oriented programming (OOP) introduced objects with their own state and interactions via messages.</li> <li>Functional programming focuses on pure functions that return values without changing state or side effects.</li> <li>Declarative programming is about describing the desired result instead of how to achieve it.</li> <li>Domain-specific languages (DSLs) are specialized for specific tasks, making code more readable and maintainable.</li> <li>Different paradigms can have similar concepts, making them less distinct than initially thought.</li> <li>Declarative programming includes logic programming and object-oriented (OOP) &amp; functional programming.</li> <li>Both OOP and functional programming reject shared mutable state, focusing on messaging and immutability respectively.</li> <li>Object-oriented code can be rewritten in a functional way using closures.</li> <li>Paradigms are worldviews or mindsets that define how we conceive the universe of our program.</li> <li>No single paradigm is best; it depends on the problem being solved and personal preference.</li> <li>Paradigms are useful in different ways, depending on the problem.</li> <li>Each paradigm has unique contributions to the dialogue of programming.</li> <li>Different paradigms can be combined for better solutions.</li> <li>The key is to understand the problem and choose the best approach.</li> <li>Understand the importance of different programming paradigms.</li> <li>Declarative, imperative, object-oriented, and functional programming each have their strengths for specific problems.</li> <li>Multiparadigm languages allow exploring various approaches without learning new syntax.</li> <li>Expanding your repertory of paradigms helps improve as an individual programmer.</li> <li>Importance of understanding and embracing different programming paradigms.</li> <li>Multi-paradigm languages allow exploring various mindsets and problem-solving approaches.</li> <li>Paradigms define the nature of programs, problems they solve, and solutions they provide.</li> <li>Mixing paradigms in a system is possible if supported by the language; mixing different languages can be more complicated.</li> <li>Assembly code represents the imperative paradigm.</li> <li>Microservices are decentralized systems that fit Alan Kay's vision of object-oriented programming, and can also be seen as pure functions.</li> </ol>"},{"location":"goto_programming_lang/#why-you-should-take-another-look-at-c-mads-torgersen-goto-2016","title":"Why You Should Take Another Look at C# \u2022 Mads Torgersen \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=zQXNq-isqFI</p> <ol> <li>C# is a widely used and loved programming language, constantly evolving to remain modern and relevant.</li> <li>Microsoft actively works on improving the language, drawing inspiration from sister languages like F#.</li> <li>C# can be utilized across various platforms beyond Windows, thanks to Project Roslyn and .NET Core.</li> <li>Xamarin enables developers to create native apps for Android, iOS, Mac, and Windows using C#.</li> <li>Unity leverages C# for 2D and 3D game development.</li> <li>The .NET Core framework offers a lightweight solution for server-side use, cross-platform compatibility, and open source accessibility.</li> <li>Project Roslyn modernizes the C# language engine, making it accessible across tools and platforms.</li> <li>OmniSharp uses Roslyn to provide semantically aware C# modes in multiple editors.</li> <li>The Analyzer framework helps build code analysis tools with fixes for enforcing coding styles or refactoring.</li> <li>Roslyn provides complete information for code analysis, enabling developers to create custom analyzers and fixers.</li> <li>C#'s evolution includes aggressive innovation, mainstreaming concepts from other languages, and embracing new core libraries.</li> <li>Roslyn improves the development experience and language evolution by providing better tools and frameworks.</li> <li>Generics are deeply implemented in runtime for improved performance.</li> <li>Async heavily relies on Generics for efficiency.</li> <li>C# 7 focuses on functional programming and data, not necessarily object-oriented concepts.</li> <li>New features include tuples, binary literals with digit separators, refactoring to generate methods, and pattern matching.</li> <li>Tuples are value types, allowing mutability and deconstruction.</li> <li>Pattern matching is being introduced in C# for more flexibility in the 'is' expression.</li> <li>Future plans include smarter patterns for better integration into the language, nullable types for reference types, a 'bang operator', improved framework annotations, and nullability propagation.</li> </ol>"},{"location":"goto_programming_lang/#exploring-swift-memory-layout-mike-ash-goto-2016","title":"Exploring Swift Memory Layout \u2022 Mike Ash \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=ERYNyrfXjlg</p> <ol> <li>Memory is fundamental to computing, organized as a sequence of bytes with addresses.</li> <li>Pointers are used to reference memory locations.</li> <li>Modern systems store data in little-endian order.</li> <li>Memory is divided into three parts: hardware level, stack for local variables, and heap for dynamically allocated objects.</li> <li>Unsafe buffer pointers allow creating arrays from containers.</li> <li>Mach call (mach vm read overwrite) can safely read from pointers without crashing.</li> <li>Recursive scanning systems use safe pointer reading and guess how many bytes to read at any given time.</li> <li>Malloc size function is for heap allocation data, dladder function for symbol information, demangling tools for Swift and C++ symbols.</li> <li>Detect textual data using ASCII characters heuristic.</li> <li>Analyzing memory layouts in different programming languages:<ul> <li>C structs are simple with fields laid out sequentially.</li> <li>C++ classes have a vtable pointer for virtual method dispatch and inheritance.</li> <li>Swift structs are similar to C, with no extra metadata or overhead.</li> <li>Swift classes have additional runtime information but object data is stored sequentially.</li> </ul> </li> <li>Classes in Objective-C have extra metadata, while method calls translate into array lookups for efficiency at runtime.</li> <li>Subclassing multiple levels still results in the same memory layout.</li> <li>Arrays in Swift are reference types but appear as value types at runtime.</li> <li>Protocols in Swift can store structs inline if they fit size limit; otherwise, stored dynamically.</li> <li>Enums in Swift are compact and efficient, representing each case with a single byte.</li> <li>Any Objective-C objects in Swift 3 are now represented as 'any'.</li> <li>Xcode 8's new memory debugging features offer live graphs and limited tracing capabilities.</li> </ol>"},{"location":"goto_programming_lang/#exploring-rxjava-2-for-android-jake-wharton-goto-2016","title":"Exploring RxJava 2 for Android \u2022 Jake Wharton \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=htIXKI5gOQU</p> <ol> <li>Reactive programming is crucial due to the increasing complexity of asynchronous code.</li> <li>Traditional imperative programming struggles with handling multiple asynchronous sources and managing state.</li> <li>Android apps require reactive thinking for a smooth user experience, as they are inherently asynchronous.</li> <li>RxJava helps model these asynchronous sources in a way that makes it easier to handle complex scenarios.</li> <li>RxJava has two main types: Observable and Flowable, both representing zero to N items with termination possibilities.</li> <li>Backpressure is a concept in RxJava 2 that allows you to slow down data sources when your system cannot process them fast enough.</li> <li>RxJava 2 offers specialized observables for reactive data handling, such as Single, Completable, and Maybe.</li> <li>FromCallable models synchronous behavior, while the create method is useful for wrapping existing sources.</li> <li>The create method allows modeling asynchronous data and cancellation actions when subscribers unsubscribe.</li> <li>RxJava 2 provides various types of observables for modeling data sources and offers operators to manipulate or combine data.</li> <li>Reactive programming helps developers write code that reacts to changes instead of managing state manually.</li> <li>RxJava 2 is an improved version focusing on asynchronous programming in Android, with a developer preview release and a final release planned soon.</li> </ol>"},{"location":"goto_programming_lang/#microservices-in-go-matt-heath-goto-2016","title":"Microservices in Go \u2022 Matt Heath \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=WiCru2zIWWs</p> <ol> <li>Speaker is a back-end engineer focusing on Go for three years.</li> <li>Mons oh is a new startup building a bank with modern technology using Go.</li> <li>The app has features like spending analysis and card control.</li> <li>Reasons for choosing Go: simplicity, static typing, comprehensive standard library, lightweight concurrency.</li> <li>Go's communication approach: favors process communication over shared memory.</li> <li>Statically linked or linked Go code allows easy deployment on various machines without runtime dependencies.</li> <li>Frameworks like go kit, micro, and timeit can be used to build services quickly.</li> <li>Speaker introduces their own framework called Month Called Time (MCT) for communication between services using message buses like RabbitMQ.</li> <li>Infrastructure includes an HTTP routing layer, API services, individual services for specific tasks.</li> <li>Benefits of microservice architecture: easy deployment of new functionality without impacting other services.</li> <li>Microservice architecture with Go language for banking infrastructure.</li> <li>Routing layer to handle HTTP requests and drop into proxy.</li> <li>API services with defined endpoints, public APIs, and external providers.</li> <li>Kubernetes for high availability, cost savings, and efficient resource usage.</li> <li>Exponentially weighted moving average load balancer for detecting failures.</li> <li>Asynchronous processing using Kafka to publish events and handle business logic.</li> <li>Well-defined interfaces and tracing systems like Zipkin for understanding infrastructure behavior.</li> <li>Utilize Go's context package for thread-local variables.</li> <li>Microservices can be beneficial if you understand your business, but may cause issues with interface changes.</li> <li>Kafka handles transactions by writing events into a partition and uses two-phase commit in the credit card network.</li> <li>Cassandra supports SQL databases through standard library drivers.</li> <li>Sample web poker API uses protocol buffers for request/response communication across services.</li> <li>Moving from PHP and Java to Go as a microservice architecture choice.</li> <li>Go stores code in packages with encapsulation and exported interfaces.</li> <li>Kafka is used for distributed transactions, with retry mechanisms.</li> <li>Cassandra supports SQL databases through standard library drivers.</li> <li>Sample web poker API uses protocol buffers for request/response communication across services.</li> <li>Moving from monolithic systems to microservices is a continuous process.</li> <li>Encapsulated Java MQ and Go service using Scala driver service.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-ready-for-production-hadi-hariri-goto-2016","title":"Kotlin - Ready for Production \u2022 Hadi Hariri \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=R0J_Jl7bKY8</p> <ol> <li>Kotlin is a language developed by JetBrains in 2010, designed for interoperability and tooling with Java compatibility.</li> <li>It has been adopted by various companies like Google, Pinterest, and Square. Gradle supports Kotlin, recommending plugins be written in it.</li> <li>Kotlin is open source and available on multiple platforms such as IntelliJ IDEA, Android Studio, Eclipse, NetBeans, Maven, Gradle, Kobalt, Ant, and command-line.</li> <li>Kotlin offers easy interoperability between Java and Kotlin, with a small runtime (900KB) and standard library features like filterMap, flatMap, etc.</li> <li>It is statically typed, compiling down to Java, JVM, and JavaScript. Kotlin follows conventions for accessing objects, functions, and properties from both Java and Kotlin.</li> <li>Kotlin allows top-level functions without the need for classes, reducing boilerplate code. It has immutable (val) and mutable (var) variables with a name: type convention.</li> <li>Kotlin reduces boilerplate code compared to Java. Properties are declared in the class, with val for immutable and var for mutable variables. Constructors can be added to initialize objects. Objects can be used for singletons or other purposes. Functions can be created without specifying return types (default is Unit).</li> <li>Kotlin has features similar to JavaScript, TypeScript, and Scala. It focuses on conciseness, readability, and expressiveness.</li> <li>Kotlin's restricted language design aims to improve readability and maintainability compared to other languages.</li> <li>Kotlin offers various features such as lambda with receiver, extension functions, delegation support, lazy evaluation, and algebraic data types.</li> <li>Lambda with receiver allows accessing an object within a lambda expression without explicitly creating it. Extension functions add new functionality to existing classes without inheritance. Delegation provides first-class support for delegating methods from one class to another. Kotlin has lazy evaluation through asSequence, similar to Java's Stream concept. Algebraic data types use the sealed modifier in Kotlin to restrict a class's inheritance and enable exhaustive checks on its subclasses.</li> <li>Kotlin is a pragmatic language with an easy learning curve, interoperating with Java, allowing for low-risk adoption and mixing of classes. It offers various features like sealed classes, co-routines, data class hierarchies, type aliases, deconstructing lambdas, bound method references, delegated properties, local, and Java 8/9 support. Kotlin is committed to providing Java 6 support but improves code optimization for Java 8/9.</li> <li>Resources include kotlinglang.org, try.kotlinglang.org (in-browser IDE), books, community on Slack, Twitter, and forums. Kotlin aims to be enjoyable and provides a starting point for converting Java classes into Kotlin code using IntelliJ.</li> <li>Kotlin provides Java 6 support, but improves for Java 8/9 with code optimization and functionality. Includes JavaScript and Native support (Kotlin to Native). Try.kotlinglang.org offers an in-browser IDE without installation. Kotlin books are available, including \"Kotlin for Android Developers\". Active community on Slack, forums, and Twitter.</li> <li>JetBrains' commitment to Kotlin is due to its use in their products.</li> </ol>"},{"location":"goto_programming_lang/#micropython-the-internet-of-things-damien-george-goto-2016","title":"MicroPython &amp; the Internet of Things \u2022 Damien George \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=EvGhPmPPzko</p> <ul> <li>Damien George, a former theoretical physicist, developed Micro Python to run on microcontrollers.</li> <li>Reasons for choosing Python: Large community, easy learning curve, shallow but long learning curve, native bitwise operations, and distinction between integer and floating point numbers.</li> <li>Challenges with existing Python implementations: High memory usage, inefficient method calls, heap memory allocation, and garbage collection.</li> <li>Micro Python features: Optimized memory usage, no heap memory, no garbage collection, and a small runtime environment.</li> <li>Kickstarter project: Launched in 2013 to fund the development of Micro Python for microcontrollers.</li> <li>Goals: Reduce memory consumption and improve efficiency.</li> <li>MicroPython uses interned strings, fixed numbers, optimized method calls, ahead-of-time compilation with a virtual machine, static allocation, and garbage collection reduction.</li> <li>Open source project hosted on GitHub allows community contributions and feedback from different platforms.</li> <li>Runs on the Pi board (192k RAM, 1MB ROM) at 168 MHz and can be used as a lightweight Python implementation for desktop testing.</li> <li>Used in various projects like European Space Agency, BBC micro:bit, and Internet of Things chips.</li> <li>Kickstarter campaigns raised funds for developing Micro Python for specific hardware.</li> <li>Micro Python is not a full version of Python but aims to enable Python to run where it couldn't before.</li> <li>Features include JSON support, hardware access through the machine module, web server capabilities, and Wi-Fi connectivity.</li> <li>Access to hardware features like GPIO pins and PWM function for controlling LEDs with adjustable frequency.</li> <li>Ongoing work includes async I/O support, multi-threading, and integration with other languages.</li> <li>Micro Python is suitable for low-power, small devices like Arduino C or embedded C.</li> <li>It can be used in various applications such as internet-connected coffee machines and teaching courses.</li> <li>The future of micro Python lies in its growth as an open source project with a sustainable community.</li> </ul>"},{"location":"goto_programming_lang/#using-modern-c-in-anger-todd-montgomery-goto-2016","title":"Using Modern C++ In Anger \u2022 Todd Montgomery \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=9KljYagEPnE</p> <ol> <li>Aaron is a modern messaging transport designed for low latency and predictable performance, focusing on simplicity, integration, and composability.</li> <li>The architecture consists of client, conductor, driver, and media components.</li> <li>A C++ version of the driver is in development, allowing C++ applications to communicate with other languages.</li> <li>Modern C++ (C++11 and beyond) emphasizes resource ownership and lifetime management through mechanisms like RAII, smart pointers, lambdas, and function objects.</li> <li>Smart pointers include shared_ptr for reference counting, weak_ptr for soft references, and unique_ptr for single ownership.</li> <li>Lambdas and function objects simplify code and make it more powerful but can be tricky to use effectively.</li> <li>C++11 introduced new features like lambdas, function objects, atomic operations, thread support, move construction, and assignment.</li> <li>Modern tool chains improve development efficiency (e.g., make, Google Tasks, JetBrains' SeaLion).</li> <li>Lambdas, atomic operations, thread support, and tool chains are essential for modern C++ development.</li> <li>Lessons learned: lambdas, atomic operations, thread support, and tool chains are crucial for modern C++ development.</li> <li>Stack allocation is vital for performance, especially in high-performance systems.</li> <li>Value types can reduce memory usage and improve performance.</li> <li>Move construction and assignment can be tricky; sometimes copying may be better than moving.</li> <li>The rule of three/five/zero helps understand the interaction between different constructors and assignment operators.</li> <li>Iterating over collections like images or block buffers can benefit from maintaining arrays instead of using move constructors.</li> <li>Move constructors and assignment operators have deeper implications than just providing mechanisms.</li> <li>Rule of three, rule of five, and rule of zero are guidelines for using these features effectively.</li> <li>Sometimes language features aren't built for specific tasks; alternative solutions may be better.</li> <li>C++11 introduced atomic operations and memory models to address interoperability issues with other languages like Java.</li> <li>A project focused on improving IPC performance in C++ achieved 32 million messages per second, outperforming Java (15 million) and job (started at 15 million).</li> <li>Optimizations in C++ lead to better performance.</li> <li>Working on persistence, replication, and error correction for log buffer structure.</li> <li>Collaboration with other developers leads to innovative ideas.</li> </ol>"},{"location":"goto_sw_arch_list/","title":"Goto sw arch list","text":""},{"location":"goto_sw_arch_list/#building-distributed-applications-with-event-driven-architecture-eric-johnson-goto-2023","title":"Building Distributed Applications with Event Driven Architecture \u2022 Eric Johnson \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=9StQpMLC-5Q</p> <ul> <li>Serverless architecture is a way of building applications where you build and run your code without having to manage any servers.</li> <li>Benefits of serverless architecture include:<ul> <li>Reduced operational costs</li> <li>Simplified scaling</li> <li>Faster time-to-market for new features</li> <li>Improved developer productivity</li> </ul> </li> <li>Challenges of serverless architecture include:<ul> <li>Cold starts</li> <li>Limited control over infrastructure</li> <li>Vendor lock-in</li> </ul> </li> <li>Tips for building event driven architectures:<ul> <li>Use asynchronous over synchronous communication</li> <li>Use routers and buses to maintain item potency</li> <li>Maintain a good understanding of your data flow</li> <li>Monitor and test your system thoroughly</li> </ul> </li> <li>Serverless Land is a website that provides resources for learning about serverless architecture, including getting started tips, patterns, and more.</li> </ul>"},{"location":"goto_sw_arch_list/#generic-or-specific-making-sensible-software-design-decisions-bert-jan-schrijver-goto-2023","title":"Generic or Specific? Making Sensible Software Design Decisions \u2022 Bert Jan Schrijver \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=lh5qWwIj06s</p> <ul> <li>The speaker discussed the trade-offs between going generic or specific when it comes to network architecture, libraries, and code.</li> <li>Going generic can save time and effort in the short term but may lead to inflexibility and difficulty in making changes later on.</li> <li>Going specific can be more time-consuming upfront but can provide greater flexibility and adaptability in the long run.</li> <li>The speaker suggested considering the \"YAGNI\" principle (You Ain't Gonna Need It) and avoiding over-engineering or building for hypothetical future needs.</li> <li>The speaker recommended keeping code simple, as this can make it easier to change and maintain over time.</li> <li>Overall, the talk emphasized the importance of striking a balance between short-term efficiency and long-term adaptability in network architecture and code design.</li> </ul>"},{"location":"goto_sw_arch_list/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm for managing data in a decentralized manner</li> <li>It has similarities with service mesh and microservices, allowing for the production and consumption of data to be decentralized while still being supported by a centralized platform</li> <li>The centralized platform needs to be oriented differently than before, focusing on independent operation, Federated governance, and decentralized decision making</li> <li>This is in contrast to traditional data management approaches which often result in data silos and bureaucratic decision making</li> <li>Data mesh aims to break down these barriers and enable organizations to make better use of their data</li> <li>The speaker has had a year one experience report from their journey into this world and hopes to come back in future years to discuss what worked and what didn't.</li> </ul>"},{"location":"goto_sw_arch_list/#repls-all-the-way-up-a-rubric-for-better-feedback-loops-avdi-grimm-goto-2023","title":"REPLs All The Way Up: A Rubric For Better Feedback Loops \u2022 Avdi Grimm \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=k9lwn-RqEsE</p> <ul> <li>The talk is about how to be a rebel in software development.</li> <li>To be a rebel, you need to cultivate safe ways to play and automate the repetitive tasks.</li> <li>Leave room for open-ended exploration and hope for surprises.</li> <li>Keep seeking new questions instead of just looking for answers.</li> <li>The talk covers how to do this at different levels: as an individual contributor, a team lead, and at higher levels in the organization.</li> <li>At the individual level, you can automate repetitive tasks, leave room for exploration, and seek out new questions.</li> <li>At the team level, you can create safe spaces to play and experiment with new technologies.</li> <li>At the organizational level, you can cultivate a culture of curiosity and open-endedness, and encourage people to ask new questions instead of just looking for answers.</li> <li>The talk emphasizes the importance of automation, exploration, and seeking new questions in order to be a rebel in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#democratising-software-architecture-eoin-woods-goto-2023","title":"Democratising Software Architecture \u2022 Eoin Woods \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=nchRmYvUf2Y</p> <ul> <li>The speaker introduced themselves and gave a brief overview of their background in software architecture.</li> <li>They discussed the importance of making architecture more continuous in a digital age.</li> <li>They talked about how architecture practices can be improved by incorporating continuous practices, such as continuous integration and delivery.</li> <li>They also mentioned the book \"Continuous Architecture and DevOps\" and the website continuousarchitecture.com as resources for learning more about these concepts.</li> <li>The speaker discussed the importance of involving stakeholders in the architecture process and making sure that they understand the value of architecture.</li> <li>They talked about how to make architecture more visible in an organization, including using visualization tools and creating a culture of transparency and communication.</li> <li>They also mentioned the book \"The Continuous Architecture Practice: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker discussed the importance of continuously evolving architecture to keep up with changing business needs, and how this can be done through continuous learning, experimentation, and feedback.</li> <li>They also mentioned the book \"Continuous Architecture: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker concluded by summarizing the key points of their talk and providing resources for further learning.</li> </ul>"},{"location":"goto_sw_arch_list/#crafting-robust-architectures-for-a-resilient-future-eleanor-saitta-jez-humble-goto-2023","title":"Crafting Robust Architectures for a Resilient Future \u2022 Eleanor Saitta &amp; Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iD3HQ0LXM_M</p> <ul> <li>Eleanor Saitta is a security consultant and designer.</li> <li>Security is an emergent property of the system, not just a feature you can tack on.</li> <li>The fundamental problem with security is that it's really hard to know what's going on in your systems.</li> <li>If you don't understand how things are connected, you won't be able to secure them properly.</li> <li>It's important to write down the things that you say you are doing to make auditing easier.</li> <li>Security certifications primarily serve as a marketing expense and a tool for making sure you're asking the right questions about your systems.</li> <li>If you want to know more, visit structures.systems or contact ela@structures.systems.</li> </ul>"},{"location":"goto_sw_arch_list/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>In this demo, the speaker is showing how to use Skim, a GraphQL schema stitching library.</li> <li>The speaker first starts with a simple Git API and then adds a new endpoint for a Post API.</li> <li>They then use Skim to combine the two schemas into one.</li> <li>They show how the schema has been updated by looking at the profiler.</li> <li>The demo ends with the speaker answering questions from the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#the-art-of-software-development-sander-mak-goto-2023","title":"The Art of Software Development \u2022 Sander Mak \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=fUVfkLUmII4</p> <ul> <li>The speaker discussed the importance of craftsmanship in software engineering and how to become a better developer.</li> <li>He emphasized that becoming a great developer is not just about learning new technologies, but also about finding your purpose and style with your team.</li> <li>Mentoring is an excellent way to leave a legacy and bring 10 people around you who are smarter than they are.</li> <li>The speaker encouraged the audience to write beautiful code and to go forth and become better developers.</li> <li>He recommended checking out the engineering blog of his company, Picnic, for more information on how they do software engineering.</li> </ul>"},{"location":"goto_sw_arch_list/#build-software-like-a-bag-of-marbles-not-a-castle-of-lego-hannes-lowette-yow-2022","title":"Build Software Like a Bag of Marbles, Not a Castle of LEGO \u2022 Hannes Lowette \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wkFx2R4uk2A</p> <ul> <li>Plugins in .NET6 make it easy to structure and modularize code.</li> <li>Before distributing your code, learn about proper SOLID principles.</li> <li>Plugins offer a lot of tools out-of-the-box in .NET6, making it easier to add, remove, or replace functionality.</li> <li>Don't introduce deployment problems while solving code issues; take this advice from personal experience.</li> <li>It's okay not to be at step four, five, eight, or any other step \u2013 everyone grows and learns at their own pace.</li> <li>The speaker encourages attendees to connect with them on Twitter, LinkedIn, or ICQ to chat about code, guitars, or learning.</li> </ul>"},{"location":"goto_sw_arch_list/#energy-efficient-software-architecture-for-developers-henrik-brbak-christensen-goto-2023","title":"Energy-Efficient Software Architecture for Developers \u2022 Henrik B\u00e6rbak Christensen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=xVKJvUHCanQ</p> <ul> <li>Start by measuring the utilization of your on-premise service centers and finding ways to increase it.</li> <li>Look for low hanging fruits, such as using more power-efficient processors or optimizing your code.</li> <li>Learn a programming language that is commonly used in cloud computing, such as Go, C++, Java, or C#.</li> <li>Consider using arm processors, which use less energy than x86 processors.</li> <li>Keep in mind the saying \"Perfection is a cheat, not when there's nothing more to add but when there's nothing left to take away.\" Try to simplify your systems and remove unnecessary features.</li> <li>It may be difficult to sell the idea of reducing features or salary, but it could lead to cost savings and improved performance.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=4aiAkUm7rzQ</p> <ul> <li>Structurizr is a set of tools for creating software architecture diagrams and documentation.</li> <li>It uses a Domain Specific Language (DSL) to describe the system and its components, and then generates diagrams and textual descriptions based on this information.</li> <li>The DSL is written in Clojure, but can be used from any JVM language.</li> <li>Structurizr has several components:<ul> <li>A web-based modeling tool for creating and editing the DSL scripts.</li> <li>A Java library for parsing the DSL scripts and generating diagrams and documentation.</li> <li>A set of plugins for integrating with other tools, such as Jira and Confluence.</li> </ul> </li> <li>The tooling is free and open source, and can be found at structuralize.com/DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#large-scale-architecture-the-unreasonable-effectiveness-of-simplicity-randy-shoup-yow-2022","title":"Large-Scale Architecture: The Unreasonable Effectiveness of Simplicity \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=oejXFgvAwTA</p> <ul> <li>Event-driven architecture can help to decouple systems and make them more scalable</li> <li>Asynchronous messaging is a common way to implement event-driven architectures, but it can also be done with synchronous HTTP requests</li> <li>Testing asynchronous event-driven systems can be more difficult than testing synchronous systems, but it's possible to test individual components or services in isolation</li> <li>When testing asynchronous systems, it's important to consider the order and timing of events, as well as how they affect the state of the system</li> <li>Testing strategies for event-driven systems may include using mocks or stubs for dependencies, using message brokers that support test features, and using tools that can simulate message traffic.</li> </ul> <p>Please note that this summary is based on my understanding of the conversation, and it might not be 100% accurate.</p>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-principles-practices-rebecca-parsons-yow-2022","title":"Building Evolutionary Architectures: Principles &amp; Practices \u2022 Rebecca Parsons \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=jTX45V5JuN4</p> <ul> <li>Rebecca Parsons discussed the role of architects in communicating with stakeholders and decision-makers</li> <li>Architects need to be able to explain technical concepts in terms that connect with business value</li> <li>Architecture decisions should be made based on their impact on business requirements, not just technical considerations</li> <li>It's important to communicate the consequences of making certain decisions, such as increased development time or reduced scalability</li> <li>Architects should focus on building relationships and trust with stakeholders over time</li> <li>Architects can use objective measures, such as risk assessments or cost-benefit analyses, to make their case for certain decisions</li> <li>Communication is a critical skill for architects, and they need to learn how to convey technical concepts in plain language</li> <li>It's important to be able to explain the \"why\" behind architecture decisions, not just the \"how\" or \"what\"</li> <li>Architects should be proactive in identifying potential issues and bringing them up with stakeholders early on</li> <li>Ultimately, architects need to be able to communicate effectively with decision-makers to ensure that their technical decisions align with business goals.</li> </ul>"},{"location":"goto_sw_arch_list/#minimum-viable-architecture-randy-shoup-yow-2022","title":"Minimum Viable Architecture \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=9Q7GANXn02k</p> <ul> <li>The talk focuses on how to build a scalable system for an online game.</li> <li>The speaker emphasizes the importance of decoupling components, such as database and web server, using message queues or event sourcing techniques.</li> <li>He suggests starting with a simple monolithic architecture first and then gradually evolving it into microservices when necessary.</li> <li>The speaker highlights the trade-offs between using a relational database vs NoSQL solutions depending on the use case.</li> <li>He also discusses different caching strategies, such as distributed caching and client-side caching.</li> <li>The talk covers various aspects of building an online game system, including matchmaking, session management, and game logic processing.</li> <li>The speaker encourages developers to consider security implications, such as authentication and authorization, from the beginning when designing their systems.</li> <li>He suggests using containerization techniques like Docker for easier deployment and scaling of microservices.</li> <li>The talk concludes with a Q&amp;A session where the speaker answers questions about specific technologies and provides additional insights based on his experience.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022_1","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=f7i2wxQVffk</p> <ul> <li>Simon presented his open-source tool, \"ArchiMate Modeler\", which allows users to model and visualize their architecture using the ArchiMate language.</li> <li>The tool is built on top of Electron, React, and Redux, making it cross-platform and easy to use.</li> <li>It supports importing and exporting models in various formats, including JSON and XML.</li> <li>Simon also discussed some of the features he plans to add to the tool, such as improved error handling and support for custom plugins.</li> <li>He emphasized the importance of using a standardized language like ArchiMate to model architecture, as it helps ensure consistency and clarity across different teams and stakeholders.</li> <li>Simon answered questions from the audience, discussing topics such as integration with other tools, support for specific ArchiMate elements, and potential use cases for the tool.</li> </ul>"},{"location":"goto_sw_arch_list/#the-next-big-thing-in-software-architecture-dave-farley-goto-2023","title":"The Next Big Thing In Software Architecture \u2022 Dave Farley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=DCWo9DuywYo</p> <ul> <li>Actor model is a programming paradigm that allows for the creation of complex, concurrent systems.</li> <li>Each actor can have its own state and behavior, and they communicate with each other by sending messages.</li> <li>Actor systems are highly fault-tolerant and can recover from failures automatically.</li> <li>Akka is a popular framework for building actor systems in Java and Scala.</li> <li>Actors can be used to build a wide range of applications, including web servers, games, and distributed systems.</li> <li>Actors provide a simple but powerful abstraction for building complex systems, allowing developers to focus on the problem at hand rather than worrying about low-level details.</li> <li>Akka provides features such as clustering and persistence, making it easy to build distributed and fault-tolerant systems.</li> <li>Actor systems are a good choice for building concurrent and distributed applications that need to be highly available and scalable.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-rebecca-parsons-neal-ford-james-lewis-goto-2023","title":"Building Evolutionary Architectures \u2022 Rebecca Parsons, Neal Ford &amp; James Lewis \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=m2ZlX1je3as</p> <ul> <li>Introduction of Dr. Rebecca Parsons and Neal Ford, discussing the evolution of software development and technology.</li> <li>The importance of understanding the past to shape the future of software development.</li> <li>Evolving programming languages and their impact on developers' productivity and creativity.</li> <li>The role of constraints in shaping programming languages and design patterns.</li> <li>Exploring different paradigms: object-oriented, functional, and logical programming.</li> <li>Balancing the tension between innovation and maintainability in software development.</li> <li>Embracing change and evolving best practices in a rapidly changing industry.</li> <li>The impact of cloud computing, serverless architecture, and quantum computing on software development.</li> <li>Exploring artificial intelligence, machine learning, and their implications for software developers.</li> <li>Addressing the ethical considerations in technology development and its societal impacts.</li> <li>Concluding thoughts on the importance of staying informed and adapting to changes in the industry.</li> </ul>"},{"location":"goto_sw_arch_list/#patterns-of-legacy-displacement-rob-horn-ian-cartwright-goto-2022","title":"Patterns of Legacy Displacement \u2022 Rob Horn &amp; Ian Cartwright \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=noOoLULfInc</p> <ul> <li>Replacing a legacy system is not just about replacing the technology, but also about re-engineering business processes.</li> <li>It's important to understand why the current system was built that way and what problems it was designed to solve.</li> <li>The new system should be designed to solve the same problems and meet the same needs as the old one, but in a more efficient and effective way.</li> <li>Involving stakeholders in the design process can help ensure that the new system meets their needs and is easy for them to use.</li> <li>It's important to plan for data migration and to test the new system thoroughly before deploying it.</li> <li>Replacing a legacy system can be a complex and time-consuming process, but it can also bring significant benefits in terms of efficiency, effectiveness, and agility.</li> </ul>"},{"location":"goto_sw_arch_list/#i-made-everything-loosely-coupled-does-my-app-fall-apart-gregor-hohpe-goto-2022","title":"I Made Everything Loosely Coupled. Does My App Fall Apart? \u2022 Gregor Hohpe \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=w9a7eI6BlVc</p> <ul> <li>The speaker discussed how modern technology has shifted the way we can create loosely coupled systems.</li> <li>They emphasized that automation code is what holds a loosely coupled application together, and it is through this code that you define your system's composition.</li> <li>Key takeaways:<ul> <li>Event-driven architecture is still important to understand as an architect.</li> <li>Modern technology allows us to code our system's composition and coupling.</li> <li>Automation code defines how a loosely coupled application holds together.</li> </ul> </li> <li>Resources provided by the speaker include their website, serverless land, and books on the topic.</li> </ul>"},{"location":"goto_sw_arch_list/#coevolution-of-architecture-code-closing-the-gap-dave-thomas-yow-2022","title":"Coevolution of Architecture &amp; Code - Closing The Gap \u2022 Dave Thomas \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=slGZMTFPElo</p> <p>Summary:</p> <ul> <li>Continuous Integration (CI) is the practice of integrating code into a shared repository frequently, which helps in identifying integration issues early on.</li> <li>Continuous Delivery (CD) is the ability to get changes of all types\u2014including new features, configuration changes, bug fixes and experiments\u2014into production or into the hands of users safely and quickly in a sustainable way.</li> <li>The main difference between CI and CD is that CI focuses on integrating code while CD focuses on delivering it to the end-users.</li> <li>Continuous Deployment (CD) is an automated process that pushes changes to production without human intervention.</li> <li>Testing is crucial in both CI and CD as it helps in identifying issues early on and ensuring the quality of the software being delivered.</li> <li>DevOps culture emphasizes collaboration between development and operations teams, breaking down silos, and sharing responsibilities for software delivery.</li> <li>Shipping code frequently does not necessarily mean delivering value to users, and it's essential to focus on delivering value rather than just shipping code.</li> <li>The main goal of CI/CD is to deliver high-quality software quickly and safely while maintaining a sustainable development process.</li> </ul> <p>Source: Transcript from the talk \"Continuous Integration vs Continuous Delivery\" by Jez Humble.</p>"},{"location":"goto_sw_arch_list/#microservices-from-the-trenches-sander-hoogendoorn-goto-2022","title":"Microservices from the Trenches \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=UFFmT4Z5frw</p> <ul> <li>The talk is about software architecture and how to make it scalable, maintainable, and testable.</li> <li>The speaker emphasizes the importance of small teams and small components (microservices) for productivity.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker encourages the audience to keep learning, experimenting, and iterating in software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-the-hard-parts-neal-ford-mark-richards-goto-2023","title":"Software Architecture: The Hard Parts \u2022 Neal Ford &amp; Mark Richards \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=rIgTE9aDVj4</p> <ul> <li>Neal Ford and Mark Richards are discussing their book, \"The Building Microservices Development Handbook\".</li> <li>They discuss the importance of understanding the trade-offs and decisions made when building microservices.</li> <li>The second law of the Hard Parts book is that why is more important than how.</li> <li>They emphasize the importance of understanding the reasoning behind implementation choices in order to make informed decisions.</li> <li>They aim to exemplify this concept in the Hard Parts book.</li> </ul>"},{"location":"goto_sw_arch_list/#the-lost-art-of-software-design-simon-brown-yow-2019","title":"The Lost Art of Software Design \u2022 Simon Brown \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=gNj8I4uSTgc</p> <ul> <li>The session was about architecture characters and their importance in software development.</li> <li>Architecture characters are archetypes that represent common approaches to designing and building software systems.</li> <li>They provide a shared vocabulary for discussing architectural decisions and help teams make informed trade-offs.</li> <li>Neil Ford's book \"The IT Architect: Leading IT Decisions, Motivating IT Teams\" discusses 15 architecture characters in detail.</li> <li>The session covered four architecture characters - the architect as a craftsperson, the architect as a chef, the architect as a gardener, and the architect as a toolsmith.</li> <li>Each character has their own strengths, weaknesses, and approaches to solving problems.</li> <li>Understanding these characters can help teams make better architectural decisions and improve their development practices.</li> <li>The session also discussed the importance of feedback loops in software development and how architecture characters can help teams create effective feedback mechanisms.</li> <li>Finally, Neil Ford offered a free download of his books until the end of the year as a thank you for attending the session.</li> </ul>"},{"location":"goto_sw_arch_list/#team-topologies-software-architecture-complexity-james-lewis-goto-2022","title":"Team Topologies, Software Architecture &amp; Complexity \u2022 James Lewis \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=izLg4NkJQO4</p> <ul> <li>The talk discusses the characteristics of high-performing teams</li> <li>High-performing teams are cross-functional and self-organizing</li> <li>They have a shared understanding of their mission, goals, and ways of working</li> <li>Team members trust each other to do their best work</li> <li>Teams need to be small (less than 10 people) and co-located</li> <li>Amazon's leadership principles align with the characteristics of high-performing teams</li> <li>The book \"Team Topologies\" by Matthew Skelton and Manuel Pais is recommended for further reading on this topic.</li> </ul> <p>Bibliography:</p> <ul> <li>Team Topologies by Matthew Skelton and Manuel Pais</li> <li>Accelerate by Nicole Forsgren, Jez Humble, and Gene Kim</li> <li>The Phoenix Project by Gene Kim, Kevin Behr, and George Spafford</li> <li>The DevOps Handbook by Gene Kim, Patrick Debois, John Willis, and Jez Humble</li> <li>An Elegant Puzzle by Will Larson</li> <li>High Output Management by Andrew S. Grove</li> <li>Drive by Daniel H. Pink</li> <li>The Five Dysfunctions of a Team by Patrick Lencioni</li> <li>The Lean Startup by Eric Ries</li> <li>Continuous Delivery by Jez Humble and David Farley</li> </ul>"},{"location":"goto_sw_arch_list/#beyond-rest-contract-testing-in-the-age-of-grpc-kafka-graphql-matt-fellows-yow-2022","title":"Beyond REST - Contract Testing in the Age of gRPC, Kafka &amp; GraphQL \u2022 Matt Fellows \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=ESM84C7QKl8</p> <ul> <li>Integration testing is important in a distributed system context where there are many teams and services involved</li> <li>The idea of having a budget for your CI pipeline can help ensure that lead time for recovery, batching changes, etc. don't become issues</li> <li>Contra testing is one form of integration test but there are others as well</li> <li>Thinking about time can be a useful way to help find a balance between different types of tests and their execution times</li> </ul>"},{"location":"goto_sw_arch_list/#loosely-coupled-lotteries-cloudy-casinos-nederlandse-loterij-case-st-joris-kuipers-goto-2022","title":"Loosely Coupled Lotteries &amp; Cloudy Casinos: Nederlandse Loterij Case St. \u2022 Joris Kuipers \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=PUqalWaZaXY</p> <ul> <li>Microservices are a way of structuring an application as a collection of small autonomous services.</li> <li>Each microservice:<ul> <li>Is developed around a specific business capability.</li> <li>Runs in its own process and communicates with other services using a lightweight mechanism, often an HTTP resource API.</li> <li>Can be deployed independently.</li> <li>Can be managed by different teams.</li> </ul> </li> <li>Advantages of microservices:<ul> <li>Easier to understand and maintain.</li> <li>Faster development cycles.</li> <li>Better fault isolation.</li> <li>Scalability.</li> </ul> </li> <li>Disadvantages of microservices:<ul> <li>Increased operational complexity.</li> <li>Network latency.</li> <li>Distributed transaction management.</li> <li>Service coordination.</li> </ul> </li> <li>To decide whether to use monolithic or microservices architecture, consider the size and complexity of the application, the team's experience, and the organization's culture.</li> <li>When adopting microservices, start small, with a single service, and gradually add more as needed.</li> <li>Use practices such as automated testing, continuous integration, and deployment to manage the increased complexity of microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#simplicity-complexity-the-beauty-the-beast-sander-hoogendoorn-kevlin-henney-goto-2022","title":"Simplicity &amp; Complexity: The Beauty &amp; the Beast? \u2022 Sander Hoogendoorn &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=JAl3QFae_dE</p> <ul> <li>Sander is a consultant for companies that want to use data-driven decision making.</li> <li>He enjoys helping people find insights in their own data and seeing the impact it has on their business.</li> <li>Sander's favorite tool for data visualization is Tableau.</li> <li>In his free time, he enjoys traveling and experiencing different cultures.</li> <li>One of his most memorable travel experiences was seeing Monty Python in a church in Belfast with his family.</li> </ul>"},{"location":"goto_sw_arch_list/#architects-live-in-the-first-derivative-gregor-hohpe-yow-2019","title":"Architects Live in the First Derivative \u2022 Gregor Hohpe \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5B9xPo8U9JU</p> <ul> <li>The talk was about how architecture and agile can work together, and the role of an architect in an agile organization.</li> <li>Agile is about bringing change, and architecture is there to bring options.</li> <li>Architecture and agile go together because both are about bringing change.</li> <li>There are different roles for an architect in an agile organization, such as a \"change agent\" or a \"catalyst\".</li> <li>The traditional role of an architect may not be necessary in an agile organization, where change is constant.</li> <li>Architects should focus on bringing options and facilitating change, rather than dictating solutions.</li> <li>Architects should work closely with development teams to understand their needs and help them make decisions.</li> <li>An architect's role may change over time as the organization evolves and adapts to new challenges.</li> <li>It is important for an architect to have a deep understanding of the technology and business, and to be able to communicate effectively with different stakeholders.</li> <li>The talk emphasized the importance of bringing different perspectives and dimensions to architecture and decision making.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-for-developers-simon-brown-yow-2017","title":"Software Architecture for Developers \u2022 Simon Brown \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=dtVI7PvgVsQ</p> <ul> <li>Software architecture is the high-level design of a software system and it's important to consider it early in the development process</li> <li>There are different architectural styles, such as monolithic and microservices. Each has its own trade-offs and should be chosen based on the specific needs of the project.</li> <li>Modularity is key to good design, regardless of the architectural style. It allows for easier maintenance, testing, and scaling.</li> <li>Understanding the dependencies between different parts of the system is crucial for making informed decisions about its architecture.</li> <li>If you can't build monoliths properly, don't do microservices. Make sure to have a solid understanding of how to structure your code before moving on to more complex architectures.</li> </ul>"},{"location":"goto_sw_arch_list/#shortening-the-architectural-feedback-loop-eltjo-r-poort-goto-2022","title":"Shortening the Architectural Feedback Loop \u2022 Eltjo R. Poort \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lshfKKeB1Io</p> <ul> <li>Architects need to understand the business needs and requirements of their stakeholders</li> <li>The architecture feedback loop is the process by which architectural decisions are shared, discussed, and improved upon among stakeholders</li> <li>Shortening the feedback loop helps ensure that architectural decisions align with business needs and reduces risks</li> <li>Politics, not technology or requirements, often drive decision-making in organizations</li> <li>Architects should focus on the outcomes of their decisions rather than technical solutions to avoid strong opinions that are unhelpful</li> <li>Five tips for shortening the architecture feedback loop:<ol> <li>Share concerns and decisions continuously</li> <li>Invite feedback and be open to being wrong</li> <li>Simplify your documentation template</li> <li>Get involved in delivery</li> <li>Be vulnerable and open to feedback</li> </ol> </li> </ul>"},{"location":"goto_sw_arch_list/#enterprise-architecture-architecting-the-enterprise-gregor-hohpe-yow-2017","title":"Enterprise Architecture = Architecting the Enterprise? \u2022 Gregor Hohpe \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=hhlxFtV_tZo</p> <ul> <li>The role of an IT Architect is to bridge the gap between technical and business perspectives.</li> <li>An IT Architect should have a broad range of skills, including communication, problem solving, and leadership.</li> <li>Having diverse experiences in different areas of IT can help provide unique viewpoints when approaching architecture.</li> <li>There is high demand for Enterprise Architects who can provide significant business value.</li> <li>The book \"37 Things One Architect Knows About IT Transformation\" contains stories, anecdotes, and opinions about the role of an IT Architect in a large Enterprise.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-scaling-down-complexity-in-software-james-lewis-kevlin-henney-goto-2022","title":"Expert Talk: Scaling Down Complexity in Software \u2022 James Lewis &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=miYyinA-Nxc</p> <ul> <li>James Lewis is a principal consultant at Thoughtworks.</li> <li>He has been working with Thoughtworks for 18 years and has experience in software development, architecture, and design.</li> <li>In this transcript, James Lewis talks about the technology radar and its importance in staying up-to-date with emerging technologies.</li> <li>The technology radar is a tool used by Thoughtworks to assess and categorize new technologies based on their relevance and maturity.</li> <li>It consists of four quadrants: Techniques, Tools, Platforms, and Languages &amp; Frameworks.</li> <li>Each quadrant has four categories: Ring 1 (Adopt), Ring 2 (Trial), Ring 3 (Assess), and Ring 4 (Hold).</li> <li>James Lewis talks about the importance of having a balanced portfolio of technologies in an organization.</li> <li>He also discusses the challenges of adopting new technologies, such as the risk of vendor lock-in and the need for proper training and support.</li> <li>He emphasizes the importance of having a clear strategy and vision when it comes to technology adoption.</li> <li>James Lewis also talks about some of the emerging technologies that are currently on Thoughtworks' radar, such as serverless computing, blockchain, and quantum computing.</li> <li>He discusses the potential benefits and challenges of these technologies and provides insights into how organizations can start experimenting with them.</li> <li>Finally, James Lewis shares his thoughts on the future of technology and the importance of staying up-to-date with emerging trends and developments.</li> </ul>"},{"location":"goto_sw_arch_list/#the-zen-of-programming-sander-hoogendoorn-goto-2022","title":"The Zen of Programming \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=syGnlE_oosM</p> <ul> <li>The talk is about the speaker's experience and lessons learned during their career as a software developer.</li> <li>They emphasize the importance of taking small steps, asking questions, and never stopping to learn.</li> <li>Here are some key takeaways from the talk:<ul> <li>Take small steps in everything you do, including writing code, learning new technologies, and making career decisions.</li> <li>Don't be afraid to ask questions and admit what you don't know.</li> <li>Learn from your mistakes and use them to improve.</li> <li>Never stop learning and stay up-to-date with the latest technologies.</li> <li>Have fun and enjoy what you do.</li> <li>Take care of yourself and your mental health.</li> <li>Remember to take your mom out for dinner more often.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#from-monolith-to-state-of-the-art-banking-flavio-deroo-goto-2022","title":"From Monolith to State-of-the-Art Banking \u2022 Flavio Deroo \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=gVucnhnyYTw</p> <ul> <li>Solaris Bank is a German bank that provides banking services through APIs.</li> <li>They decided to migrate their monolithic system to an event-driven architecture using AWS Lambda and other managed services like DynamoDB, SNS, and SQS.</li> <li>The migration was done in two phases: the first phase involved decoupling the monolith into microservices and integrating them with the new architecture, while the second phase involved migrating data from the old system to the new one.</li> <li>They used a tool called AWS Serverless Application Repository (SAR) to package their Lambda functions and dependencies, making it easier to deploy and manage them.</li> <li>They also used AWS App Mesh to manage service-to-service communication and AWS Glue for data integration.</li> <li>The new architecture provided several benefits like better scalability, availability, and cost-efficiency compared to the old monolithic system.</li> <li>They faced some challenges during the migration process, such as dealing with cold starts in Lambda functions, managing stateful services, and ensuring data consistency between microservices.</li> <li>However, they managed to overcome these issues by using techniques like function warmup, implementing eventual consistency, and using distributed tracing tools like AWS X-Ray.</li> <li>Overall, the migration was a success, and Solaris Bank is now able to provide better banking services through their APIs using the new architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#restful-web-api-patterns-practices-cookbook-mike-amundsen-alianna-inzana-goto-2022","title":"Restful Web API Patterns &amp; Practices Cookbook \u2022 Mike Amundsen &amp; Alianna Inzana \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=OewdV0gQ67o</p> <ul> <li>Mike Amundsen's new book, \"Design and Build Great APIs,\" focuses on the importance of designing great APIs and how to achieve that goal.</li> <li>The book is divided into four sections: Foundations, Design, Implementation, and Operations &amp; Management.</li> <li>The Foundations section covers API basics, including what they are, why they're important, and their history.</li> <li>In the Design section, Amundsen discusses designing APIs with the user in mind, using scenarios to help guide decisions.</li> <li>The Implementation section dives into the technical aspects of building an API, such as choosing the right protocols and formats.</li> <li>The Operations &amp; Management section covers maintaining and scaling an API after it's been built, including monitoring and testing.</li> <li>Amundsen emphasizes the importance of collaboration between teams when designing APIs, using tools like design documents to ensure everyone is on the same page.</li> <li>He also stresses the need for iteration and refinement in API design, encouraging developers to continually improve their APIs based on user feedback.</li> <li>Throughout the book, Amundsen provides practical advice and real-world examples to help guide readers through the process of designing great APIs.</li> <li>He encourages developers to make informed choices based on their specific use cases and environments.</li> <li>Writing the book has been a valuable learning experience for Amundsen, as he's gained new insights into API design and best practices.</li> </ul>"},{"location":"goto_sw_arch_list/#diagrams-as-code-20-simon-brown-goto-2021","title":"Diagrams as Code 2.0 \u2022 Simon Brown \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Za1-v4Zkq5E</p> <ul> <li>The talk was about the Structurizr DSL, a domain-specific language for creating software architecture diagrams.</li> <li>Software architecture is important because it helps us understand how our systems work and make better decisions when developing them.</li> <li>A diagram can help us communicate complex ideas in a simple way, but creating good diagrams can be difficult.</li> <li>Structurizr DSL aims to simplify the process of creating software architecture diagrams by using plain text instead of drawing tools.</li> <li>The language is based on C4 model, which consists of four levels of abstraction: system context, container, component, and class.</li> <li>By using a text-based approach, we can version control our diagrams, use continuous integration, and generate documentation automatically.</li> <li>Structurizr DSL supports various export formats, such as PNG, SVG, and PlantUML.</li> <li>The talk included a live coding demonstration of creating a software architecture diagram using Structurizr DSL.</li> <li>The presenter emphasized the importance of consistency in naming conventions when creating diagrams.</li> <li>The presenter also showed how to use the dsl cookbook, which contains examples and best practices for using Structurizr DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-managing-complexity-in-software-hadi-hariri","title":"Expert Talk: Managing Complexity in Software \u2022 Hadi Hariri","text":"<p>URL: https://www.youtube.com/watch?v=P7CfWtR-ECk</p>"},{"location":"goto_sw_arch_list/#summary","title":"Summary:","text":"<ul> <li>Hadi Hariri talks about the current state of software development and how it has become more complex over time.</li> <li>He mentions that the industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Hariri emphasizes the importance of simplicity in software design, saying that it requires discipline and effort to achieve.</li> <li>He also discusses the trade-offs between complexity and simplicity and how developers should strive for a balance between the two.</li> <li>Hariri suggests that the industry has become too focused on delivering features quickly, often at the expense of code quality and maintainability.</li> <li>He encourages developers to prioritize simplicity in their work and to be mindful of the long-term consequences of complexity.</li> </ul>"},{"location":"goto_sw_arch_list/#key-points","title":"Key Points:","text":"<ul> <li>Software development has become more complex over time.</li> <li>Simplicity requires discipline and effort to achieve.</li> <li>The industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Developers should strive for a balance between complexity and simplicity.</li> <li>Prioritizing simplicity can lead to better code quality and maintainability in the long run.</li> </ul>"},{"location":"goto_sw_arch_list/#data-mesh-data-driven-value-at-scale-zhamak-dehghani-samia-rahman-goto-2022","title":"Data Mesh: Data-Driven Value at Scale \u2022 Zhamak Dehghani &amp; Samia Rahman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=CDWp_xyCdzw</p> <ul> <li>Zhamak is the author of \"Designing Data-Intensive Applications\" and a partner at Neo4j.</li> <li>Samia is a data scientist who used the value-based design process from Zhamak's book to improve her company's product development.</li> <li>Zhamak's book emphasizes the importance of understanding the value that a system provides before designing it, and using that understanding to guide decisions about technology and architecture.</li> <li>Samia found that this approach helped her team focus on delivering value to their customers more quickly and effectively.</li> <li>The conversation also touches on the role of data in product development, the challenges of building distributed systems, and the importance of continuous learning and improvement.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-continuous-architecture-pierre-pureur-kurt-bittner-goto-2022","title":"Expert Talk: Continuous Architecture \u2022 Pierre Pureur &amp; Kurt Bittner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=_cgnL96VeME</p> <ul> <li>Continuous Architecture is a way to ensure that architecture decisions are aligned with business goals and can evolve over time.</li> <li>The four essential activities of Continuous Architecture are focusing on quality attributes, driving and revisiting architecture decisions, knowing your technical debt, and implementing feedback loops.</li> <li>Quality attributes are the four fundamental aspects of a system: performance, security, scalability, and maintainability.</li> <li>Architecture decisions should be based on these quality attributes, and should be revisited regularly to ensure they still meet the needs of the business.</li> <li>Technical debt is the cost of making suboptimal architecture decisions, and it's important to be aware of it and address it as soon as possible.</li> <li>Feedback loops are essential for learning from mistakes and improving decision-making in the future. They can be implemented through various mechanisms such as code reviews, automated testing, and monitoring.</li> <li>The Continuous Architecture approach emphasizes collaboration between stakeholders, including business leaders, developers, and operations teams, to ensure that architecture decisions align with business goals and are executed effectively.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-software-engineering-dave-farley-steve-smith-goto-2022","title":"Modern Software Engineering \u2022 Dave Farley &amp; Steve Smith \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=80LbSyTCKas</p> <ul> <li>Dave Farley is a software developer, consultant, and coach.</li> <li>He co-authored the book \"Continuous Delivery\" with Jez Humble.</li> <li>The goal of Continuous Delivery is to make delivering software changes as easy, reliable, and fast as possible.</li> <li>The three main pillars of Continuous Delivery are: automation, version control, and testing.</li> <li>Testing should be automated, repeatable, and consistent.</li> <li>Small, frequent changes are easier to manage than large, infrequent ones.</li> <li>Automated tests should run quickly and provide fast feedback.</li> <li>The deployment process should be automated, reliable, and repeatable.</li> <li>Continuous Delivery requires a cultural shift towards collaboration, trust, and accountability.</li> <li>DevOps is a culture and a set of practices that encourages collaboration between development and operations teams.</li> <li>DevOps emphasizes automation, continuous improvement, and feedback loops.</li> <li>The goal of DevOps is to create a fast, reliable, and secure software delivery pipeline.</li> <li>Continuous Integration (CI) is the practice of integrating code changes into a shared repository frequently.</li> <li>Continuous Deployment (CD) is the practice of deploying code changes to production automatically after they pass all tests.</li> <li>Version control is essential for managing code changes and collaborating with others.</li> <li>Feature flags are a way to decouple feature releases from code deployments.</li> <li>The \"Build, Test, Release\" mindset focuses on delivering value quickly and safely.</li> <li>Continuous Delivery requires a holistic approach that considers the entire software delivery pipeline.</li> <li>DevOps is not just about tools and technology but also about people and culture.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-devops-software-architecture-simon-brown-dave-farley-hannes-lowette-goto-2021","title":"Expert Talk: DevOps &amp; Software Architecture \u2022 Simon Brown, Dave Farley &amp; Hannes Lowette \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Qv92qaIGbDg</p> <p>Summary:</p> <ul> <li>The speaker, John Allspaw, is discussing his experiences and insights on incident management and resilience engineering.</li> <li>Resilience engineering focuses on understanding how systems fail and how to make them more robust.</li> <li>It's important to recognize that failure is a natural part of any system, and it's impossible to prevent all failures.</li> <li>The goal should be to minimize the impact of failures when they do occur.</li> <li>To do this, it's essential to have a deep understanding of how the system works, including its weak points and vulnerabilities.</li> <li>It's also important to have a culture of learning and improvement, where incidents are seen as opportunities to learn and improve, rather than as failures to be punished.</li> <li>The speaker emphasizes the importance of communication and collaboration in incident management, both within teams and between different organizations.</li> <li>He also discusses the challenges of managing complex systems, where there are many interdependencies and feedback loops, and where small changes can have large unintended consequences.</li> <li>The speaker stresses the need for humility and caution when making changes to complex systems, as even seemingly minor adjustments can have significant impacts.</li> <li>He also highlights the value of automation and monitoring in incident management, but cautions against relying too heavily on technology and neglecting the human element.</li> <li>Finally, the speaker emphasizes the importance of continual learning and improvement in resilience engineering, and encourages organizations to adopt a proactive approach to managing incidents and failures.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7NAyn1DC420</p> <ul> <li>Vaughn Vernon is the author of \"Strategic Monoliths and Microservices: Driving Innovation Using Purposeful Architecture.\"</li> <li>The book discusses how to make informed decisions about monoliths and microservices.</li> <li>The first part of the book focuses on understanding the domain, including modeling, language, and communication.</li> <li>The second part of the book dives into implementing strategic monoliths and microservices using various programming languages and architectural patterns.</li> <li>The goal is to provide a complementary resource to Vaughn's previous book, \"Reactive DDD.\"</li> <li>James Higginbotham interviewed Vaughn Vernon about his new book for GOTO Conferences.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-teaser-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices (Teaser) \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vhAtH9NW-WA</p> <ul> <li>The importance of viewing software projects as learning experiences through experimentation and discovery is highlighted.</li> <li>Today's C-level executives in technology are different from those 30 or 40 years ago; having a solid architecture requires understanding the software being developed.</li> <li>Events are all about human communication, and thinking synchronously can lead to trouble because \"life is not a podcast.\"</li> <li>The speaker expresses difficulty in defining what software architecture is and suggests making architecture decisions at the last responsible moment.</li> <li>Developing with monoliths initially allows for faster development.</li> <li>A promotion for Go To Conferences and their YouTube channel is made, using the promo code \"book club\" for registration.</li> </ul>"},{"location":"goto_sw_arch_list/#architecting-for-scale-lee-atchison-ken-gavranovic-goto-2021","title":"Architecting For Scale \u2022 Lee Atchison &amp; Ken Gavranovic \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=n_yZB0ZrsxU</p> <ul> <li>Lee Atchison is an experienced technology executive, author, and international speaker.</li> <li>He works as a Senior Director at New Relic, where he focuses on helping the company scale their architecture.</li> <li>Lee has extensive experience in building and managing large-scale, cloud-based web applications and services.</li> <li>In this interview, Ken and Lee talk about his new book \"Architecting for Scale\", which covers best practices for designing scalable systems.</li> <li>The second edition of the book includes updates on the latest trends and technologies in cloud computing, containers, microservices, DevOps, and more.</li> <li>Lee shares insights from his experience working at companies like Amazon and Akamai Technologies.</li> <li>He emphasizes the importance of considering scale as a fundamental aspect of software design.</li> <li>The interview also covers topics like reliability, fault-tolerance, observability, monitoring, and managing system complexity.</li> <li>Lee provides practical advice for teams building cloud-native applications, including tips on capacity planning, performance optimization, and team organization.</li> <li>He encourages developers to adopt a \"shift left\" mindset, focusing on quality and reliability from the beginning of the development process.</li> <li>Lee also highlights the importance of continuous learning and staying up-to-date with new technologies and best practices in the field.</li> </ul> <p>Additional Resources:</p> <ul> <li>Lee Atchison's website</li> <li>Architecting for Scale (Second Edition)</li> </ul>"},{"location":"goto_sw_arch_list/#the-hidden-costs-of-poor-database-access-denis-rosa-goto-2019","title":"The Hidden Costs of Poor Database Access \u2022 Denis Rosa \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=t9b2TZiZUpM</p> <p>Summary of Transcript:</p> <ul> <li>Relational databases have been the standard for many years, but they are not always the best choice for storing hierarchical data structures.</li> <li>Hierarchical data models can be more efficient and performant than relational models in certain scenarios.</li> <li>There are various ways to store hierarchical data, such as nested sets, materialized paths, closure tables, and recursive trees.</li> <li>Nested sets are a popular way to represent hierarchical data, but they have some limitations and can be slow for certain operations.</li> <li>Materialized paths are another method that is more efficient for reading, but not writing.</li> <li>Closure tables store the relationships between nodes in a separate table, which makes it easy to query, but can be slow when there are many relationships.</li> <li>Recursive trees use a recursive function to traverse the tree and can be slower than other methods, but they allow for more flexibility in how the tree is stored.</li> <li>There are some libraries available that help with storing hierarchical data, such as <code>acts_as_tree</code> and <code>ancestry</code>.</li> <li>When choosing a method to store hierarchical data, consider the size of the dataset, the frequency of reads and writes, and the complexity of the queries.</li> <li>It's important to keep performance in mind when working with large datasets, especially for write-heavy applications.</li> <li>The speaker encourages developers to experiment with different methods and choose the one that fits their specific use case best.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-22-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 2/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=PmRLX57ChTE</p> <ul> <li>The conversation covers the importance of managing software architecture and dependencies to improve collaboration, maintainability, and scalability.</li> <li>Adam Tornhill explains his experience working with large codebases and how understanding coupling can help identify potential issues early on.</li> <li>He emphasizes the need for a data-driven approach in making informed decisions about software design and refactoring.</li> <li>The conversation touches upon the importance of granularity and modeling concepts when building an architecture, highlighting that focusing too much on technical building blocks could lead to heavy team coupling.</li> <li>Adam introduces his book 'Your Code as a Crime Scene' and the tool, CodeScene, which help developers analyze codebases and understand dependencies, enabling them to prioritize refactoring efforts effectively.</li> <li>The conversation closes with Adam sharing his experience working with various companies and how understanding dependencies can lead to cost savings in software development projects.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-12-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 1/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-z5EWVyRhOo</p> <ul> <li>Hotspots are areas of the codebase that require attention and improvement.</li> <li>There are different types of hotspots, including:<ul> <li>Lines of Code (LOC) - visualization to gain situational awareness.</li> <li>Cyclomatic Complexity - number of linearly independent paths through a program's source code.</li> <li>Clone Detection - identifying duplicate or similar code fragments that violate the DRY (Don't Repeat Yourself) principle.</li> </ul> </li> <li>The discussion focused on findings and prioritization work done on the code level to address these hotspots.</li> <li>Further talks are planned to discuss organizational problems that can be detected and addressed.</li> </ul>"},{"location":"goto_sw_arch_list/#service-meshes-istio-linkerd-or-no-mesh-at-all-hanna-prinz-eberhard-wolff-goto-2021","title":"Service Meshes: Istio, Linkerd - or No Mesh at All? \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=kwUgrSG_ZKI</p> <ul> <li>Service meshes are a way to manage and control communication between microservices in a distributed system.</li> <li>They provide features such as service discovery, load balancing, circuit breaking, rate limiting, and security.</li> <li>Some popular service mesh implementations include Istio, Linkerd, Consul, and AWS App Mesh.</li> <li>Service meshes can be implemented using sidecar proxies or a data plane proxy that is integrated into the application code.</li> <li>Sidecar proxies are easier to set up but have a higher performance overhead, while data plane proxies have lower overhead but require more integration work.</li> <li>Some benefits of using service meshes include:<ul> <li>Improved observability and monitoring of distributed systems.</li> <li>Simplified management of communication between microservices.</li> <li>Enhanced security with features such as mutual TLS authentication and authorization.</li> </ul> </li> <li>Some potential drawbacks of using service meshes include:<ul> <li>Increased complexity and overhead.</li> <li>Difficulty in choosing the right implementation for your needs.</li> <li>The need to learn new tools and concepts.</li> </ul> </li> <li>To decide whether a service mesh is right for your organization, consider factors such as the size and complexity of your microservices architecture, the level of control you want to have over communication between services, and your team's familiarity with service mesh concepts and implementations.</li> </ul> <pre><code>\n\n## Is Domain-Driven Design Overrated? \u2022 Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=ZZp9RQEGeqQ](https://www.youtube.com/watch?v=ZZp9RQEGeqQ)\n\n - Recipes are a good starting point, especially for beginners\n- Following a recipe closely can be helpful at the start of a project\n- However, it's important not to be dogmatic and continue to follow a recipe exactly in the long run\n- Contexts are the most valuable contribution of recipes, they provide a boundary within which you can make different decisions from others\n- Use contexts to help guide your decision making process.\n\n\n## Kafka in the Wild \u2022 Laura Schornack &amp; Maureen Penzenik \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=iMx8otu3rFg](https://www.youtube.com/watch?v=iMx8otu3rFg)\n\n * Advancing domain driven design (DDD) from one application to enterprise DDD\n* Sharing data sets across many applications, avoiding rework and Kafka spider webs\n* Having a cleaner API strategy and real-time strategy throughout the enterprise\n* Merging with the data side of the house for a unified operational and analytical approach\n* Using DDD principles from operational systems to solve similar challenges in analytics environments (breaking up monoliths)\n* Applying Jamaat Dagani's Data Mesh principles, extending domain driven design to break up data monoliths\n* Ensuring access control and secure data products according to the business owner's approved use for the data.\n\n\n## Organization: A Tool for Software Architects \u2022 Eberhard Wolff \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=wwzn4l_gmco](https://www.youtube.com/watch?v=wwzn4l_gmco)\n\n * Transcript is about a talk on software architecture and design.\n* The speaker discusses the importance of aesthetics in software development.\n* Aesthetics can lead to better problem solving and more efficient code.\n* The speaker suggests that architects should have a \"categorical imperative\" for software engineering, ensuring that their designs are both functional and beautiful.\n* The talk includes references to various tools and concepts used in software development, such as Mckinsey workshops, media solutions architecture, and the use of design patterns.\n* The speaker also mentions the importance of collaboration and communication in software development, suggesting that architects should be skilled in these areas in order to create effective designs.\n* Overall, the talk emphasizes the value of aesthetics in software development and encourages architects to consider both form and function in their work.\n\n\n## What Are Reactive Systems? \u2022 Dave Farley \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=Ysn6eInApYM](https://www.youtube.com/watch?v=Ysn6eInApYM)\n\n * Messaging allows for location transparency and clustering\n* The code doesn't need to change in any way to make clustering work\n* The infrastructure can handle the load balancing and allocation\n* Messaging separates accidental complexity (running stuff on a computer) from essential complexity (domain logic or function)\n* This approach allows for focus on the problem being solved rather than the technical details\n* Relational databases work in a similar way internally\n* The core of the exchange built this way could process 6.5 million trades per second on a single thread\n\n\n## Idiomatic RabbitMQ \u2022 Gavin M. Roy \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=fNbdgWe5Tbs](https://www.youtube.com/watch?v=fNbdgWe5Tbs)\n\n * RabbitMQ is a message broker that can handle high volumes of messages and provide reliability, scalability, and flexibility.\n* It has features such as message durability, delivery acknowledgements, publisher confirms, and message priority.\n* When using RabbitMQ, it's important to think about the design of your messaging system and how messages are routed and consumed.\n* Consider using a fanout exchange for simplicity, direct exchanges for fine-grained control, or topic exchanges for more complex routing scenarios.\n* It's also crucial to consider message serialization and deserialization formats, as well as error handling and retry mechanisms.\n* When designing your messaging system, keep in mind the principles of loose coupling, high cohesion, and failure isolation.\n* Using RabbitMQ can provide benefits such as improved system resilience, scalability, and maintainability, but it also requires careful planning and design.\n\n\n## Continuous Architecture in Practice Part 2/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=IIy4Adg4WR0](https://www.youtube.com/watch?v=IIy4Adg4WR0)\n\n * Continuous Architecture: Evolving Technical Leadership at Scale is a new book by Eoin Woods, Murat Erder and Pierre Pureur\n* The authors discussed their motivation for writing the book and what they hope to achieve with it in this interview\n* The book is aimed at software architects who are looking to improve their skills and adapt to changing circumstances\n* It covers topics such as how to manage technical debt, how to work effectively with other teams and how to stay up-to-date with new technologies\n* The authors also discuss the importance of communication and collaboration in architecture roles\n* The book is based on the authors' own experiences and draws on real-world examples to illustrate its points\n* It is available for pre-order now and will be published in June 2021.\n\n\n## Continuous Architecture in Practice Part 1/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=963Ls1X17zs](https://www.youtube.com/watch?v=963Ls1X17zs)\n\n * Documentation is essential for software development, but many teams have not yet reached this point.\n* Younger or less mature engineering teams may avoid documentation, but they often realize its importance in two to three years.\n* Architecture Decision Records (ADRs) are becoming more popular, as they allow capturing and documenting key decisions made during the development process.\n* Recording the rationale behind these decisions can prove valuable in the future.\n* While the concept of capturing and checking decisions into code is not new, only a few teams practice it. The growing popularity of ADRs shows that this trend is changing.\n\n\n## Learnings from Running 1000s of Production RabbitMQ Clusters \u2022 Lovisa Johansson \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=nxQrpLfX3rs](https://www.youtube.com/watch?v=nxQrpLfX3rs)\n\n * CloudAMQP is a managed RabbitMQ service that provides various configurations for different use cases.\n* Some applications require high throughput, while others prioritize high availability and consistency.\n* Customers can easily set up a cluster specified for their selected use case based on best practice recommendations.\n* CloudAMQP has a list of recommendations for new users to quickly start using RabbitMQ.\n* The speaker invites the community to contribute to the list or share different opinions.\n\n\n## Stop Punching Yourself in the Face \u2022 Hannes Lowette \u2022 GOTO 2020\n\nURL: [https://www.youtube.com/watch?v=_-ne2kwF8tc](https://www.youtube.com/watch?v=_-ne2kwF8tc)\n\n * Hannes' talk focuses on the importance of being a responsible developer\n* He shares a story about \"Chad\", a fictional developer who is well-meaning but often makes mistakes due to carelessness or lack of knowledge.\n* To address this issue, Hannes created the \"red certification program\" to help developers become more responsible and aware of best practices.\n* The website redcert.com contains a quiz and resources for developers to learn about responsible development.\n* Hannes encourages developers to follow @redcert on Twitter and spread the word about being a responsible developer.\n* He also shares his personal background, including his role at Access in Belgium, having three kids, and his hobbies of building guitars and playing with Legos.\n* His contact information is shared as well, including his Twitter handle (@hannesvdv) and icq number (358491287).\n\n\n## Software Architecture for Developers Part 2/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=gDlE4q3mozY](https://www.youtube.com/watch?v=gDlE4q3mozY)\n\n * Simon is a software architect and author of the book \"Software Architecture for Developers\"\n* The book focuses on how to design good software architecture, focusing on practical techniques for developers\n* He emphasizes that software architecture should not be overcomplicated or made too complex\n* Good architecture should provide flexibility and make it easier for future changes\n* A good architect should be able to understand the needs of their customers and stakeholders, as well as being technically competent\n* The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n* Simon recommends several books for further learning: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n* He also mentions that the book will be available as an e-book, audiobook, and paperback in May 2021.\n\nNote: I am not sure if you meant to write this summary as a markdown style or just plain text, but here it is in markdown format.\n```vbnet\n- Simon is a software architect and author of the book \"Software Architecture for Developers\"\n- The book focuses on how to design good software architecture with practical techniques for developers\n- He emphasizes that software architecture should not be overcomplicated or made too complex\n- Good architecture should provide flexibility and make it easier for future changes\n- A good architect should understand the needs of their customers and stakeholders, as well as being technically competent\n- The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n- Simon recommends several books: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n- The book will be available as an e-book, audiobook, and paperback in May 2021.\n</code></pre>"},{"location":"goto_sw_arch_list/#why-architectural-work-comes-before-coding-part-12-simon-brown-stefan-tilkov-goto-2021","title":"Why Architectural Work Comes Before Coding Part 1/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=TE4rKZ7M1aM</p> <ul> <li>Discussing modeling in software development</li> <li>Models are abstractions of the system that we're trying to build</li> <li>Modeling is a way for us to think about what our system should do before we start writing code</li> <li>Two main reasons to model: communication and documentation</li> <li>Three types of models: data, behavioral, and structural</li> <li>Tools like Lucidchart, Visio, or Draw.io can be used for modeling</li> <li>UML (Unified Modeling Language) is a widely used notation for modeling in software development</li> <li>UML provides various ways to customize the model but it can also be complex and powerful than needed</li> <li>Go To Conference offers a promo code BOOKCLUB for viewers of this episode.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-2-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 2 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=nbqh1EK_FU8</p> <ul> <li>The role of an architect is to provide value and get out of the way</li> <li>Architectural decisions should be made with flexibility in mind, allowing for changes to be made easily in the future</li> <li>Manager systems architectural evolution: have a plan for how you want to move the system forward, as no system can tolerate staying the same forever</li> <li>Avoid creating roadblocks or becoming a bottleneck in any way, whether through system decisions, development environment decisions, or process decisions</li> <li>Provide value to the people who have to suffer through your decisions and try not to inhibit their work too much.</li> </ul>"},{"location":"goto_sw_arch_list/#balancing-choreography-and-orchestration-bernd-rucker-goto-2020","title":"Balancing Choreography and Orchestration \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=zt9DFMkjkEA</p> <p>Summary:</p> <ul> <li>Orchestration and choreography are two different communication styles used in microservices architecture.</li> <li>Orchestration is command-driven, centralized, and has a unidirectional flow of control. Choreography is event-driven, decoupled, and has a bidirectional flow of control.</li> <li>Both orchestration and choreography have their own advantages and disadvantages. Orchestration provides better observability and control, while choreography promotes loose coupling and autonomy.</li> <li>It's important to balance both styles in a microservices architecture based on the use case and requirements.</li> <li>The direction of dependency and responsibility should be considered when deciding between orchestration and choreography for a specific service.</li> <li>Orchestration is not necessarily centralized, and choreography is not always decoupled. It depends on the implementation and design.</li> </ul> <p>Q&amp;A:</p> <ul> <li>What is the difference between synchronous and asynchronous communication?<ul> <li>Synchronous communication waits for a response before continuing, while asynchronous communication does not.</li> </ul> </li> <li>Can you have orchestration in an event-driven architecture?<ul> <li>Yes, it's possible to use command-driven orchestration in an event-driven architecture by having a centralized component that sends commands to other services.</li> </ul> </li> <li>How do you ensure consistency between microservices?<ul> <li>Consistency can be ensured using various techniques such as eventual consistency, transactions, and event sourcing. It depends on the use case and requirements.</li> </ul> </li> <li>What are some tools for implementing orchestration and choreography?<ul> <li>Tools for orchestration include Kubernetes, AWS Step Functions, and Azure Logic Apps. Tools for choreography include Apache Kafka, RabbitMQ, and AWS EventBridge.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#five-things-every-developer-should-know-about-software-architecture-simon-brown-goto-2020","title":"Five Things Every Developer Should Know about Software Architecture \u2022 Simon Brown \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=9Az0q2XHtH8</p> <p>Here are the five things every developer should know about software architecture, as presented by Kevlin Henney:</p> <ul> <li>Architecture is a significant decision that is hard to change. It's not just code or infrastructure, but encompasses both and how they interact.</li> <li>Good architecture enables change, rather than dictating it. It provides choices, rather than limiting them.</li> <li>The design of software and the organization of teams are intimately related. Architecture should support communication and collaboration between teams.</li> <li>Microservices are not a silver bullet or a default choice. They should be used only when they provide a clear advantage over other architectural styles.</li> <li>When considering microservices, think about the problem you're trying to solve, rather than starting from scratch with a view to rewrite your monolith as a collection of microservices. You may end up with a distributed monolith if you're not careful.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-1-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 1 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=RtRpL3Ndi0c</p> <ul> <li>The talk discussed the importance of architecture in software development</li> <li>Architecture is defined as the stuff that's hard to change, and it's important to be explicit about it</li> <li>The speaker advised against creating bottlenecks or roadblocks and being someone who everyone else has to wait on</li> <li>Motivation comes from cross-functional teams that can deliver something end-to-end</li> <li>Decisions should be made at the level closest to the actual problem, where the work happens</li> <li>The speaker encouraged having few rules, making it easier for people to adhere to them.</li> </ul>"},{"location":"goto_sw_arch_list/#software-is-details-kevlin-henney-goto-2020","title":"Software Is Details \u2022 Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kX0prJklhUE</p> <ul> <li>The speaker discussed the importance of understanding and testing software configurations.</li> <li>Many systems have latent configuration errors due to lack of checking and testing.</li> <li>Configuration is often seen as a detail, but it can be critical to the functioning of the software.</li> <li>The speaker quoted Robert Persig's observation that even seemingly unimportant parts, like a screw on a motorcycle, can be vital to the overall function of the system.</li> <li>The speaker encouraged the audience to expand their knowledge of software configurations and to test them thoroughly.</li> </ul>"},{"location":"goto_sw_arch_list/#automating-processes-in-modern-architectures-bernd-rucker-goto-2020","title":"Automating Processes in Modern Architectures \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IBfuKA9Nc3M</p> <ul> <li>Workflows are a way to manage the state of long-running processes</li> <li>Visual processes, such as BPMN, make it easier to discuss and change workflows</li> <li>Event driven choreography is useful but not a magic cure-all, and orchestration is still necessary at certain points in an architecture</li> <li>Decentralized and asynchronous event driven choreography can be used</li> <li>Q&amp;A:<ul> <li>How do you handle errors in workflows?<ul> <li>There are several ways to handle errors in workflows, such as using catch events or error boundaries. It depends on the specific use case.</li> </ul> </li> <li>Can you use microservices with a monolithic workflow engine?<ul> <li>Yes, it is possible to use microservices with a monolithic workflow engine, but it may not be the best approach. It is better to have a decentralized architecture where each service has its own state management and workflow capabilities.</li> </ul> </li> <li>How do you handle retries in workflows?<ul> <li>Retries can be handled using compensation mechanisms or by configuring the workflow engine to automatically retry failed tasks. It depends on the specific use case.</li> </ul> </li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#getting-started-with-service-mesh-hanna-prinz-eberhard-wolff-goto-2020","title":"Getting started with Service Mesh \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=w14ge2838Vs</p> <ul> <li>Service meshes are a way to add functionality like traffic management, security, and observability to distributed applications.</li> <li>The most popular service mesh implementations include Istio, Linkerd, and Consul Connect.</li> <li>Service meshes can be installed as sidecars alongside application containers in a Kubernetes cluster or using a data plane proxy such as Envoy.</li> <li>Service meshes provide features like traffic management (route requests to specific versions of services), security (mutual TLS authentication, authorization policies), and observability (tracing, logging, metrics).</li> <li>It is important to consider the trade-offs when deciding whether to use a service mesh, such as added complexity and potential performance overhead.</li> <li>The hosts recommended some resources for learning more about service meshes, including the \"Service Mesh Patterns\" book and the \"Getting Started with Service Mesh on Kubernetes\" guide. They also suggested trying out examples of applications using service meshes, such as Istio and Linkerd.</li> </ul>"},{"location":"goto_sw_arch_list/#why-are-distributed-systems-so-hard-denise-yu-goto-2020","title":"Why Are Distributed Systems so Hard? \u2022 Denise Yu \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IzbYUjPAm5A</p> <ul> <li>Humans are the last line of defense against failures in complex systems</li> <li>Designing for humans means:<ul> <li>Empathizing with every human who interfaces with the system</li> <li>Challenging ourselves to design for the humans who operate and build the systems</li> <li>Choosing tools and processes that promote learning and sustainable pace</li> <li>Understanding and designing for the whole system, including the human parts</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#when-to-use-microservices-and-when-not-to-sam-newman-martin-fowler-goto-2020","title":"When To Use Microservices (And When Not To!) \u2022 Sam Newman &amp; Martin Fowler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=GBTdnfD6s5Q</p> <ul> <li>Microservices are a way of structuring an application as a collection of small services, which can be developed and maintained independently</li> <li>Benefits of using microservices include easier scalability, faster deployment, and increased flexibility</li> <li>Challenges of using microservices include increased complexity and the need for more sophisticated deployment and monitoring tools</li> <li>When considering whether to use microservices, it's important to consider the needs and constraints of your organization, as well as the specific requirements of your application</li> <li>It's not necessary to use a specific technology or platform in order to adopt a microservices architecture</li> <li>To get the most out of using microservices, it's important to have a clear understanding of the problem you're trying to solve and to be willing to adapt your organization and processes as needed.</li> </ul>"},{"location":"goto_sw_arch_list/#saas-deep-dive-designing-and-building-multi-tenant-solutions-tod-golding-goto-2020","title":"SaaS Deep Dive: Designing and Building Multi-Tenant Solutions \u2022 Tod Golding \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=joz0DoSQDNw</p> <ul> <li>Multi-tenancy is important for SaaS applications</li> <li>There are different ways to implement multi-tenancy, such as:<ul> <li>Shared database with separate schemas or tables</li> <li>Separate databases for each tenant</li> <li>Virtual private cloud (VPC) for each tenant</li> </ul> </li> <li>It's best to limit the developer awareness of multi-tenancy through good design and architecture constructs</li> <li>Data partitioning and finding the right fit for your data on a micro service by micro service basis is important</li> <li>Tenant isolation is another layer of protection on top of authentication and authorization</li> <li>Metrics, monitoring, and alerting are also important considerations for multi-tenancy in SaaS applications.</li> </ul> <p>Contact:</p> <ul> <li>Email address provided in the presentation for further questions or information.</li> </ul>"},{"location":"goto_sw_arch_list/#practical-end-to-end-container-security-at-scale-yashvier-kosaraju-goto-2020","title":"Practical End-to-End Container Security at Scale \u2022 Yashvier Kosaraju \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=rcrmTHOIz24</p> <ul> <li>Container security is becoming increasingly important as containers are being used more widely in production environments.</li> <li>Containers can introduce new attack surfaces, such as image vulnerabilities, container breakouts, and privilege escalation.</li> <li>To secure containers, it's essential to have a comprehensive security strategy that includes image scanning, runtime protection, network segmentation, access control, and monitoring.</li> <li>Image scanning can help identify known vulnerabilities, configuration errors, and malware in container images before they are deployed in production.</li> <li>Runtime protection can help detect and prevent suspicious activities in running containers, such as unauthorized access, process injection, and network communication.</li> <li>Network segmentation can limit the attack surface by isolating containers in different networks or subnets.</li> <li>Access control can restrict who can access and manage containers, images, and other container resources.</li> <li>Monitoring can help detect and respond to security incidents by providing real-time visibility into container activities, such as CPU usage, memory consumption, network traffic, and process behavior.</li> <li>Some popular container security tools include Clair, Trivy, Aqua Security, Twistlock, Anchore Engine, and Falco.</li> <li>Best practices for container security include keeping containers up-to-date, minimizing image sizes, using multi-stage builds, configuring resource limits, disabling unnecessary services, and monitoring container activities.</li> <li>Resources for learning more about container security include the CNCF Container Security Special Interest Group, the Open Container Initiative (OCI), and the Red Hat Enterprise Linux Container Host Security Guide.</li> </ul>"},{"location":"goto_sw_arch_list/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ul> <li>Introduced Ray, an open-source distributed computing framework developed by RISELab at UC Berkeley.</li> <li>Ray provides a single API for building and running applications at scale, and can be used to parallelize CPU/GPU workloads and build distributed services.</li> <li>Ray is designed to handle complex workloads and provide fault tolerance, allowing users to build highly available systems with minimal overhead.</li> <li>Some common use cases for Ray include machine learning, AI, data analytics, and gaming.</li> <li>Ray has a growing community of users and contributors, and is used by several large companies including Amazon Web Services, Microsoft, and Google.</li> <li>Ray can be used in conjunction with other frameworks such as TensorFlow and PyTorch to provide distributed training capabilities for machine learning models.</li> <li>Ray's architecture includes a global control plane that manages cluster resources and a set of worker nodes that execute tasks and store data.</li> <li>Ray provides a set of high-level APIs for building applications, including:<ul> <li>Actors: Object-like entities that can be used to parallelize workloads and share state.</li> <li>Tasks: Functions that can be executed in parallel on the cluster.</li> <li>Datasets: Distributed data structures that allow users to perform efficient data processing tasks at scale.</li> </ul> </li> <li>Ray also provides several lower-level APIs for advanced use cases, including direct access to the underlying object store and network communication layer.</li> <li>Ray's performance is competitive with other distributed computing frameworks, and it can be used to build highly scalable systems with minimal overhead.</li> <li>Ray has a flexible deployment model, allowing users to run it on their own hardware or in the cloud using managed services such as Amazon ECS and Kubernetes.</li> <li>Ray has several resources available for learning and development, including documentation, tutorials, and community support.</li> <li>Ray is an open-source project, licensed under the Apache 2.0 license.</li> </ul>"},{"location":"goto_sw_arch_list/#dont-get-blamed-for-your-choices-hannes-lowette-goto-2020","title":"Don\u2019t Get Blamed for Your Choices \u2022 Hannes Lowette \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Mo9hm51NXxw</p> <ul> <li>Hannes' talk is about the \"Chad developer\" who makes decisions based on emotions and personal preferences rather than data and facts.</li> <li>The Chad developer often fails to deliver software in a better way because they don't make informed decisions.</li> <li>Hannes emphasizes the importance of making data-driven decisions as a team, using tools such as A/B testing to gather information and make informed choices.</li> <li>He encourages developers to avoid falling into the trap of being a Chad developer by making informed decisions based on data and facts.</li> <li>Hannes also talks about his company, Access, which offers consulting services and confidence coaching for teams looking to improve their decision-making processes.</li> <li>He ends his talk by encouraging the audience to spread the message of making better decisions as a team and becoming better developers in the process.</li> </ul>"},{"location":"goto_sw_arch_list/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ul> <li>The speaker presented an approach for building REST APIs using ASP.NET Core and OpenAPI.</li> <li>Controllers in this approach should not contain business logic, only HTTP request/response handling.</li> <li>Application logic is contained in the application layer.</li> <li>Well-defined view models should be created and consumed by controllers.</li> <li>Open API bridges the gap between front-end and back-end and automates the generation of OpenAPI specifications and clients using a simple msbuild task.</li> <li>The speaker recommended trying out this approach by grabbing the code or installing the template.</li> <li>Key points:<ul> <li>Controllers should not contain any business logic.</li> <li>Application logic lives in the application layer.</li> <li>Use well-defined view models and consume them in controllers.</li> <li>OpenAPI automates generation of specifications and clients.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#explore-your-microservices-architecture-with-graph-theory-network-science-nicki-watt-goto-2019","title":"Explore your Microservices Architecture with Graph Theory &amp; Network Science \u2022 Nicki Watt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=0G5O1ffYIPI</p> <ul> <li>The speaker presented a case study on using graph databases and graph algorithms to analyze microservice architecture.</li> <li>They used the Neo4j database and Cypher query language for data modeling and analysis.</li> <li>They collected data from various sources such as JIRA, GitHub, and logs.</li> <li>They modeled the data in a graph format where nodes represent entities such as services, repositories, and users, and edges represent relationships between them.</li> <li>They used graph algorithms such as community detection, centrality measures, and pathfinding to analyze the data.</li> <li>They identified clusters of related services, key services that act as hubs, and service dependencies.</li> <li>They also analyzed issues, pull requests, and commits to identify patterns and trends in development workflows.</li> <li>The analysis helped them understand the complexity of their microservice architecture, identify bottlenecks, and optimize their development processes.</li> <li>The speaker recommended the book \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" by Mark Needham and Aimee Hodler for further reading on this topic.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=wjF4X9t3FMk</p>"},{"location":"goto_sw_arch_list/#summary-of-transcript","title":"Summary of Transcript:","text":"<ul> <li>The speaker talks about the importance of keeping up with technology and how things move fast in the tech industry.</li> <li>They mention that while it can be hard to keep up, it's necessary to stay updated on new technologies and tools.</li> <li>They highlight the benefits of using Kubernetes for container orchestration, but caution against ignoring other options like Docker Swarm.</li> <li>The speaker emphasizes the importance of testing new technology in production environments to fully understand its impact.</li> <li>They also stress the need to prioritize security and make it everyone's job.</li> <li>The speaker mentions some organizations that are doing great work in the tech industry, including Red Hat, SUSE, IBM, and others.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-stefan-tilkov-goto-2019","title":"\"Good Enough\" Architecture \u2022 Stefan Tilkov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=PzEox3szeRc</p> <ul> <li>Architectural decisions should be made consciously, weighing the risks and benefits of simplicity versus adaptability.</li> <li>The YAGNI (You Ain't Gonna Need It) principle means choosing the simplest thing that will work, creating evolvable structures.</li> <li>Manage your system's evolution by making deliberate decisions about what to change and how to change it within the possibilities of its original design.</li> <li>An architect's role is not to force personal tastes on everyone else in the company, but to do meaningful and valuable work and get out of the way as fast as possible.</li> </ul>"},{"location":"goto_sw_arch_list/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ul> <li>The speaker discussed using circuit breakers and caching to manage errors and improve performance in web applications.</li> <li>A circuit breaker is a design pattern used to prevent a system from repeatedly attempting to perform an operation that is likely to fail, thus avoiding overloading the system.</li> <li>Caching is a technique for storing frequently accessed data in memory to reduce the time it takes to retrieve it.</li> <li>The speaker demonstrated using the Hystrix library, which provides circuit breaker and caching functionality, in a Java-based web application.</li> <li>The speaker discussed how to configure the circuit breaker's behavior, such as setting a threshold for the number of failures before tripping the circuit, and how to use caching to improve performance by storing frequently accessed data in memory.</li> <li>The speaker also discussed the trade-offs between using a circuit breaker and caching, such as the risk of serving stale data from the cache, and the importance of monitoring and testing the system to ensure it is behaving as expected.</li> </ul>"},{"location":"goto_sw_arch_list/#visualizing-cloud-systems-lynn-langit-goto-2019","title":"Visualizing Cloud Systems \u2022 Lynn Langit \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=HHitdmje1ok</p> <ul> <li>The speaker is Lin Lang, an architect at Capital One.</li> <li>She talked about how her team uses a combination of data science and software engineering to build systems that can be used by researchers around the world.</li> <li>She discussed their use of visualization tools, such as 3D printing, to help communicate complex scientific concepts and data to non-scientists.</li> <li>She also touched on the importance of reproducibility in scientific research and how it can be improved through better communication and collaboration between researchers and engineers.</li> <li>The speaker highlighted a picture of a ribosome, which was visualized by Venki Ramakrishnan and his collaborators, who were awarded the Nobel Prize for their work on this.</li> <li>She encouraged the audience to learn more about bioinformatics and to work on visualization of systems to improve their quality and reproducibility.</li> </ul>"},{"location":"goto_sw_arch_list/#re-architecting-2-tier-to-3-tier-thomas-hejlsberg-niels-hallenberg-goto-2019","title":"Re-architecting 2-tier to 3-tier \u2022 Thomas Hejlsberg &amp; Niels Hallenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=AQJYLGg1JCk</p> <ul> <li>The presentation is about a case study on how a large organization implemented event sourcing and CQRS in their system.</li> <li>The main challenges were:<ul> <li>Handling the complexity of multiple teams working on different parts of the system</li> <li>Ensuring good enough quality for each team to work with</li> <li>Deciding when the implementation is done</li> </ul> </li> <li>The solution was to create a cookbook that engaged a number of application programmers to go through and decode.</li> <li>The importance of forming teams with dedicated tasks was emphasized.</li> </ul>"},{"location":"goto_sw_arch_list/#monolith-decomposition-patterns-sam-newman-goto-2019","title":"Monolith Decomposition Patterns \u2022 Sam Newman \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=9I9GdSQ1bbM</p> <ul> <li>The talk is about designing distributed systems, specifically focusing on building a system for selling CDs in a record store.</li> <li>The speaker emphasizes the importance of understanding the problem domain and defining clear requirements before diving into the design.</li> <li>They introduce the CAP theorem and discuss the trade-offs between consistency, availability, and partition tolerance in distributed systems.</li> <li>The speaker presents several patterns for building distributed systems:<ol> <li>Sharding - breaking data into smaller chunks and distributing them across multiple nodes.</li> <li>Replication - storing multiple copies of data to increase availability and handle failures.</li> <li>Quorums - a mechanism for achieving consistency in replicated data stores.</li> <li>Command Query Responsibility Segregation (CQRS) - separating reads and writes to simplify the system design.</li> <li>Event Sourcing - storing the history of changes as events, which can be used to reconstruct the state of the system.</li> <li>Sagas - coordinating multiple services in a distributed transaction using a saga pattern.</li> </ol> </li> <li>The speaker also highlights the importance of monitoring and logging in distributed systems for debugging and maintaining the system.</li> </ul>"},{"location":"goto_sw_arch_list/#how-to-become-a-great-software-architect-eberhard-wolff-goto-2019","title":"How to Become a Great Software Architect \u2022 Eberhard Wolff \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=v_nhv6aY1Kg</p> <ul> <li>Transcript is a garbled text that appears to be a result of broken OCR or similar technology.</li> <li>It's difficult to make out any coherent meaning from the transcript, but here are some potential phrases and words that can be discerned:<ul> <li>software communications agencies</li> <li>soccer cage soccer</li> <li>cappuccinos haut place of hope</li> <li>minister otto schily dem selbstmord</li> <li>actully in response to be on the go 22</li> <li>bruno bevor es oft dass die etikette</li> <li>sind wird f\u00fcr komplexe zwei mutige den architekt und meint nur im may not cold den mietern des tempels</li> <li>manchmal important to be der communicator kombat der das management</li> <li>software steckt ratte mimi nie ins bett ihres of technical problems er wurde an der station slater disney think about cars konnte bessere minsk</li> <li>der ist am problem to mac edition bordet bei dem crash is enough to say</li> <li>transcript appears to be a result of broken OCR or similar technology.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#uncoupling-michael-nygard-goto-2018","title":"Uncoupling \u2022 Michael Nygard \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=esm-1QXtA2Q</p> <ul> <li>Functional/operational coupling is the same for GraphQL and REST</li> <li>Semantic coupling in GraphQL is stronger because of its web-like object querying, but can be mitigated by using interface layer objects instead of domain layer objects</li> <li>In pure REST (Level 5 Richardson style), semantic coupling is strong as consumers are allowed to change any aspect of the representation and put it back, encouraging knowledge about everything in that resource.</li> </ul>"},{"location":"goto_sw_arch_list/#prioritizing-technical-debt-as-if-time-and-money-matters-adam-tornhill-goto-2019","title":"Prioritizing Technical Debt as if Time and Money Matters \u2022 Adam Tornhill \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fl4aZ2KXBsQ</p> <ul> <li>The talk was about using behavioral code analysis to prioritize technical depth when working on software design.</li> <li>Behavioral code analysis is a way of analyzing the structure and behavior of code to understand how it changes over time.</li> <li>Prioritizing technical depth means focusing on making the most important parts of the system easier to change, rather than trying to make every part of the system perfect.</li> <li>Locality of change is an enabler for scaling up systems because it allows teams to work on different parts of the system independently without affecting each other.</li> <li>Behavioral code analysis and these techniques for prioritizing technical depth have a place in software development because they give insights that cannot be obtained from the code alone.</li> <li>The main use case for this analysis is that they help focus expertise and attention to the parts of the system that are likely to change the most.</li> <li>The talk concluded with a thank you to the audience for attending and listening.</li> </ul>"},{"location":"goto_sw_arch_list/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ul> <li>The talk is about software architecture in front-end development.</li> <li>Front-end developers should care about software architecture because it helps to build scalable and maintainable applications.</li> <li>Software architecture can be defined as the high-level structure of a system, including its components and their relationships.</li> <li>There are different architectural patterns that can be applied in front-end development, such as monolithic, modular, or micro-frontends.</li> <li>The talk covers some principles of good software architecture, such as separation of concerns, single responsibility, and loose coupling.</li> <li>It also discusses common pitfalls in front-end architecture, such as mixing business logic with presentation logic or using global state.</li> <li>Finally, the talk encourages front-end developers to learn from other communities of programming languages or paradigms and to keep an open mind about software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ul> <li>Erlang is a dynamic symbolic language</li> <li>State machines are used in Eternity blockchain to manage state transitions and handle messages</li> <li>Cubic quickcheck is used for property-based testing, which helps ensure the correctness of state transitions</li> <li>Proper is an open-source equivalent to cubic quickcheck for other languages</li> <li>Eternity foundation provides incubators and grants for developers interested in working on the Eternity blockchain</li> </ul>"},{"location":"goto_sw_arch_list/#all-the-worlds-a-staging-server-heidi-waterhouse-goto-2019","title":"All The World\u2019s A Staging Server \u2022 Heidi Waterhouse \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eyvrtU4dYgM</p> <ul> <li>Software development is complex</li> <li>Testing is important to ensure software works as expected</li> <li>\"Test in production\" is a strategy to test software on live systems with real users and data</li> <li>Reasons to test in production:<ul> <li>Tests are more realistic, closer to user behavior</li> <li>Faster feedback loop, issues can be fixed immediately</li> <li>Easier to scale tests, no need for separate testing environments</li> <li>Reduces the risk of missing critical bugs</li> </ul> </li> <li>Steps to test in production safely:<ul> <li>Start with a small set of users and increase over time</li> <li>Use feature flags to enable/disable features for testing</li> <li>Monitor systems closely during testing</li> <li>Have a rollback plan if issues arise</li> </ul> </li> <li>Common misconceptions about testing in production:<ul> <li>Testing can't be done in production because it will affect users</li> <li>It is not possible to test in production because of regulatory reasons</li> <li>Testing in production is risky</li> </ul> </li> <li>Using flags allows for gradual rollouts and rollbacks, reducing risk</li> <li>Monitoring is crucial when testing in production</li> <li>Benefits of testing in production include:<ul> <li>Faster feedback loop</li> <li>More realistic test environment</li> <li>Easier to scale tests</li> <li>Reduced risk of missing critical bugs</li> </ul> </li> <li>Test in production because you are testing anyway</li> <li>Use feature flags to reduce risk</li> <li>Monitor closely and have a rollback plan ready</li> </ul>"},{"location":"goto_sw_arch_list/#a-case-for-outside-in-design-sandro-mancuso-goto-2019","title":"A Case For Outside-In Design \u2022 Sandro Mancuso \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fKHYBnuPApY</p> <ul> <li>The speaker is discussing their experiences with technical debt and how to manage it effectively.</li> <li>They define technical debt as the difference between what was planned and what was actually built.</li> <li>Technical debt can be beneficial in some cases, such as when it allows for faster delivery of a product. However, it can also become a hindrance if not managed properly.</li> <li>The speaker suggests using the \"London style\" TDG (Test-Driven Gardening) approach to manage technical debt. This involves test-driving the code and continuously refactoring it to keep it clean and maintainable.</li> <li>They also recommend using tools like SonarQube to monitor the health of the codebase and identify areas that need improvement.</li> <li>The speaker shares their experiences pairing with another developer and experimenting with different TDD styles, such as the \"elastic\" style and the \"classic\" style.</li> <li>They emphasize the importance of continuous learning and improving one's skills to stay up-to-date with the latest tools and techniques in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-fast-microvm-for-serverless-computing-radu-weiss-arun-gupta-goto-2019","title":"Secure &amp; Fast microVM for Serverless Computing \u2022 Radu Weiss &amp; Arun Gupta \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=oKKOBsqQndY</p> <ul> <li>Firecracker is a virtual machine monitor (VMM) that uses the Linux KVM to create and manage microVMs.</li> <li>It is designed to provide secure and fast isolation for multi-tenant container environments.</li> <li>Firecracker has a small attack surface, with only about 200K lines of code, which makes it easier to audit and maintain.</li> <li>The VMM has a minimalist design, with only the necessary components included to provide efficient and secure virtualization.</li> <li>It supports lightweight networking and block storage devices, allowing for fast creation and destruction of microVMs.</li> <li>Firecracker is well-suited for use in serverless and container orchestration platforms, where it can provide secure and fast isolation for functions and containers.</li> <li>The project is open source and available on GitHub.</li> </ul>"},{"location":"goto_sw_arch_list/#cqrs-event-sourcing-apps-with-axon-pivotal-cloud-foundry-s-v-beelen-b-wilcock-goto-2019","title":"CQRS &amp; Event Sourcing Apps with Axon &amp; Pivotal Cloud Foundry \u2022 S. v. Beelen &amp; B. Wilcock \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=moRDmcl5_WY</p> <ul> <li>Introduction to Axon Framework and Axon Server</li> <li>Demonstration of a simple event sourcing and CQRS pattern using Axon Framework</li> <li>Explanation of the reference architecture for Axon Trader, a trading platform built with Axon Framework and Axon Server</li> <li>Overview of the Wallet demo, an example of how to use Axon Framework with Spring Boot and PCF</li> <li>Q&amp;A session on using Axon Framework and Axon Server in cloud-native applications.</li> </ul>"},{"location":"goto_sw_arch_list/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <p>Summary:</p> <ul> <li>Spring Boot is a popular framework for building web applications in Java.</li> <li>The presenter discussed some of the problems with using magic strings and annotations in Spring Boot, such as difficulty in understanding code and refactoring.</li> <li>He suggested using Kotlin instead of Java to take advantage of its type safety and null safety features, which can help eliminate some common errors.</li> <li>The presenter then discussed how to remove magic from Spring Boot by gradually migrating from annotations to the functional programming style. This involves:<ul> <li>Migrating routes from controller classes to route DSL files.</li> <li>Replacing beans with a bean DSL.</li> <li>Using the web MVC DSL instead of reactive programming.</li> </ul> </li> <li>The presenter also mentioned that Spring Boot is working on improving its functional programming support in future releases.</li> </ul> <p>The repository for this talk can be found at https://github.com/bodden/spring-boot-magic.</p>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019_1","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=w008iz_UwDk</p> <ul> <li>Transcript summary:<ul> <li>The talk covers the challenges and strategies for decomposing monolithic applications into microservices.</li> <li>Key takeaways include the need to understand the business domain, design services with clear boundaries, and use appropriate technology and architecture patterns.</li> <li>The importance of automation, monitoring, and security are also emphasized.</li> </ul> </li> <li>Key points:<ol> <li>Understand the business domain and context before decomposing a monolith.</li> <li>Design services with clear boundaries that align with business capabilities.</li> <li>Use appropriate technology and architecture patterns for each service.</li> <li>Implement automation for building, testing, and deploying services.</li> <li>Monitor services to ensure they are performing as expected.</li> <li>Implement security measures to protect services and data.</li> </ol> </li> <li>Quotes:<ul> <li>\"The first thing you need to do is understand the business domain.\"</li> <li>\"Design services with clear boundaries that align with business capabilities.\"</li> <li>\"Use appropriate technology and architecture patterns for each service.\"</li> <li>\"Implement automation for building, testing, and deploying services.\"</li> <li>\"Monitor services to ensure they are performing as expected.\"</li> <li>\"Implement security measures to protect services and data.\"</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#temporal-modelling-mathias-verraes-goto-2019","title":"Temporal Modelling \u2022 Mathias Verraes \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=KNqOWT0lOYY</p> <ul> <li>Blockchain technology allows for decentralized and distributed databases that can record transactions between two parties efficiently and in a verifiable and permanent way.</li> <li>Bitcoin is an example of a popular blockchain technology that enables the transfer of value without needing a trusted third party, like a bank or government.</li> <li>Transactions are grouped into blocks and added to the blockchain through a process called mining, which involves solving complex mathematical problems.</li> <li>The decentralized nature of blockchain technology means that it is not controlled by any single entity, making it more secure and resistant to tampering.</li> <li>Blockchain technology has potential applications beyond cryptocurrency, such as supply chain management, voting systems, and digital identities.</li> <li>In the context of online payments, blockchain technology can provide faster and cheaper transactions compared to traditional methods like credit cards or PayPal.</li> <li>The time it takes for a transaction to be confirmed on the Bitcoin network is around 10 minutes, but this can vary depending on the network's congestion.</li> <li>In the case of online payments with blockchain technology, the confirmation of the transaction is crucial to ensure that the payment has been processed correctly and cannot be reversed.</li> <li>It is possible to use other blockchain networks that offer faster confirmation times, such as Ethereum or Ripple. However, they may have different trade-offs in terms of cost, security, and adoption.</li> <li>In summary, while there are some technical considerations when it comes to using blockchain technology for online payments, the main advantage is that it allows for decentralized and secure transactions without needing a trusted third party.</li> </ul>"},{"location":"goto_sw_arch_list/#getting-to-grips-with-kubernetes-rbac-liz-rice-goto-2019","title":"Getting to Grips with Kubernetes RBAC \u2022 Liz Rice \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=4HMRFcg6nEY</p> <ul> <li>Kubernetes is a container orchestration tool</li> <li>Security in Kubernetes involves configuring permissions upfront and following the principle of least privilege</li> <li>Users and groups are first-class things in a Linux system, but including eTI's they're expected to be defined somewhere else in Kubernetes</li> <li>There are different ways that users can authenticate with Kubernetes, such as using a username and password or using a token</li> <li>Once a user is authenticated, they need to have the correct permissions to perform certain actions on resources</li> <li>These permissions are granted through RBAC rules, which specify who can do what on which resources</li> <li>It's important to configure these permissions correctly, as giving too many permissions to a user or group can lead to security vulnerabilities</li> <li>There are three different types of resources in Kubernetes: namespaces, clusters, and eTI's</li> <li>Namespaces are virtual clusters that allow users to organize their resources</li> <li>Clusters are the physical infrastructure that runs Kubernetes</li> <li>eTI's are external resources that can be accessed through Kubernetes</li> <li>There are also different types of permissions in Kubernetes: verbs, resources, and namespaces</li> <li>Verbs are the actions that a user can perform on a resource, such as 'get' or 'delete'</li> <li>Resources are the objects that a user can interact with, such as pods or services</li> <li>Namespaces are the virtual clusters where resources are organized</li> <li>eTI's can have their own set of permissions and resources</li> <li>To specify RBAC rules, you can use YAML files or the kubectl command line tool</li> <li>It's also possible to use third-party tools like Open Policy Agent to enforce RBAC rules</li> <li>When configuring RBAC rules, it's important to consider the different types of users and their roles in Kubernetes</li> <li>For example, a developer might need different permissions than an administrator</li> <li>You can also specify RBAC rules based on the user or group that is requesting access</li> <li>It's important to test RBAC rules thoroughly before deploying them in a production environment</li> <li>Make sure that users and groups only have the necessary permissions, and that eTI's are properly secured</li> <li>Finally, it's recommended to use a network policy tool like Calico or Kubernetes Network Policy to restrict traffic between pods and services. This can help prevent security vulnerabilities caused by lateral movement in your cluster.</li> </ul>"},{"location":"goto_sw_arch_list/#the-world-after-microservice-migration-w-service-mesh-contract-testing-d-mitrovic-goto-2018","title":"The World after Microservice Migration w/ Service Mesh &amp; Contract Testing \u2022 D. Mitrovic \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=MxhcFPRkzlw</p> <p>Summary:</p> <ul> <li>The speaker talks about the microservices architecture they adopted at Atlassian.</li> <li>They discuss how they use OpenAPI (formerly known as Swagger) to document their APIs and how they use a tool called Swagger Packet Validator to ensure that the documentation is up-to-date.</li> <li>They also talk about how they handle legacy systems and ensure that new microservices can communicate with them without issues.</li> <li>They used OpenAPI to define incoming and outgoing contracts for their services, which allowed them to split a monolithic application into smaller microservices while ensuring compatibility between them.</li> <li>They recorded all possible requests to and from the legacy system, converted them into packed files using OpenAPI tools, and then used these contracts to check if the new providers were behaving as expected. This approach allowed them to ensure that the legacy system would continue to work as intended after they separated it into smaller components.</li> <li>They emphasized the importance of testing their microservices thoroughly before deploying them, using a tool called Postman to test all possible request scenarios and ensuring compatibility with different clients.</li> </ul>"},{"location":"goto_sw_arch_list/#the-7-quests-of-resilient-software-design-uwe-friedrichsen-goto-2018","title":"The 7 Quests of Resilient Software Design \u2022 Uwe Friedrichsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=v8hh0mB35wQ</p> <ul> <li>The speaker discussed seven quests that a company might face when trying to implement resilient software design.</li> <li>The first quest is understanding the problem domain and modeling it correctly. This includes identifying the boundaries of the system, the entities within it, and their relationships.</li> <li>The second quest is mastering functional design. The speaker noted that as a domain, software engineering is still quite bad at this, and distributed systems add an extra twist to the challenge.</li> <li>The third quest is picking up distributed systems. This includes understanding concepts such as eventual consistency, sharding, and CAP theorem.</li> <li>The fourth quest is learning how to deal with partial failure. The speaker noted that in a distributed system, it's not a question of if something will fail, but when and where.</li> <li>The fifth quest is mastering observability. This includes logging, monitoring, and tracing, which are crucial for understanding what is happening within a complex system.</li> <li>The sixth quest is learning how to deal with concurrency. The speaker noted that this is a hard problem, and it's made even harder in a distributed system where there are multiple processes running concurrently.</li> <li>The seventh quest is learning how to deal with legacy systems. The speaker noted that many companies have legacy systems that they need to integrate with, and doing so can be challenging.</li> <li>The speaker emphasized that resilient software design is not just about the technology, but also about the people and the processes. It requires a cultural shift towards a more empirical approach, where experiments are used to test assumptions and hypotheses.</li> </ul>"},{"location":"goto_sw_arch_list/#event-driven-microservices-not-just-about-events-allard-buijze-goto-2018","title":"Event-Driven Microservices - not (just) about Events! \u2022 Allard Buijze \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=DzGuDNHsOQ0</p> <ul> <li>Events are a way of modeling messages in a microservices architecture</li> <li>They can stimulate location transparency, but beware of creating tight couplings between services</li> <li>It's important to consider bounded contexts when designing events</li> <li>Other reasons for communication between services should also be considered, such as RPC or REST</li> <li>Modeling messages explicitly can retain value over time</li> <li>Evolve your way into microservices, don't just go there straight away.</li> </ul>"},{"location":"goto_sw_arch_list/#event-based-architecture-and-implementations-with-kafka-and-atom-eberhard-wolff-goto-2018","title":"Event-based Architecture and Implementations with Kafka and Atom \u2022 Eberhard Wolff \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Ecg7lvvm8aU</p> <ul> <li>Introduction to microservices</li> <li>Definition of microservices: small, independent services that communicate with each other using APIs</li> <li>Benefits of using microservices: scalability, resilience, and development speed</li> <li>Challenges of using microservices: data consistency, service discovery, and monitoring</li> <li>Different ways to implement communication between microservices: REST, gRPC, and message queues</li> <li>Comparison between REST and gRPC: performance and complexity</li> <li>Introduction to Kafka: a distributed streaming platform for building real-time data pipelines</li> <li>Benefits of using Kafka for microservices communication: scalability, fault tolerance, and message durability</li> <li>Example of using Kafka for implementing event sourcing pattern</li> <li>Comparison between Kafka and traditional message queues: throughput and latency</li> <li>Best practices for designing and implementing microservices: data modeling, service boundaries, and testing strategies</li> <li>Conclusion: microservices are not a silver bullet, but can be a powerful tool in certain scenarios. It's important to understand the trade-offs and choose the right technology for the job.</li> </ul>"},{"location":"goto_sw_arch_list/#modular-monoliths-simon-brown-goto-2018","title":"Modular Monoliths \u2022 Simon Brown \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=5OjqD-ow8GE</p> <ul> <li>Monolithic architecture is a single, self-contained application where the UI, business logic, and data access are combined into a single program.</li> <li>Microservices architecture breaks down an application into smaller, independently deployable services that can communicate with each other using APIs.</li> <li>Pros of monolithic architecture: simpler to develop and deploy, less operational overhead, better performance due to fewer network calls.</li> <li>Cons of monolithic architecture: scalability issues, difficulty in maintaining large codebases, slow development cycles due to the need for frequent redeployments.</li> <li>Pros of microservices architecture: easier to scale and maintain, independent deployment of services, faster development cycles due to modularity.</li> <li>Cons of microservices architecture: operational complexity, network latency, service discovery, data consistency, and testing challenges.</li> <li>Choosing between monolithic or microservices depends on the specific needs of the project and the team's expertise. It is not a one-size-fits-all decision.</li> <li>When choosing microservices, it is essential to ensure that the services communicate with each other using APIs and that diagrams match the code.</li> <li>Microservices architecture requires more operational overhead, such as service discovery and communication between services.</li> <li>Monolithic architecture can be a good choice for small teams or projects with simple requirements.</li> <li>It is possible to start with a monolithic architecture and transition to microservices later if needed.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-in-the-age-of-things-frank-buschmann-goto-2018","title":"Software Architecture in the Age of Things \u2022 Frank Buschmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=_qggqkROlE4</p> <ul> <li>Introduced himself as a software architect and developer working on IoT.</li> <li>Mentioned that the world is changing rapidly due to technology and IoT is one of the major drivers of this change.</li> <li>Discussed some challenges faced by IoT developers such as security, scalability, networking and connectivity, etc.</li> <li>Talked about designing for failure in IoT systems.</li> <li>Mentioned that software architects need to understand the business domain they are working on.</li> <li>Discussed the importance of feedback loops in IoT development.</li> <li>Emphasized on making IoT a place worth living in as software developers have a lot of control over it.</li> </ul>"},{"location":"goto_sw_arch_list/#unconditional-code-michael-feathers-goto-2018","title":"Unconditional Code \u2022 Michael Feathers \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AnZ0uTOerUI</p> <ul> <li>Error handling is an important aspect of software development.</li> <li>The term \"error\" can be misleading and may not accurately represent what is happening in the code.</li> <li>Instead of thinking about errors, it may be more productive to think about the conditions under which the code can run unconditionally.</li> <li>Using structures like option monads and exception handling can help make the code less prone to error.</li> <li>It's important to consider the design of the code and how it can be structured to be less prone to error.</li> <li>By using design and generalization, it may be possible to expand the conditions under which the code can run unconditionally.</li> <li>The goal is to make it as easy as possible for users to do the right thing, and to make it more difficult for them to do the wrong thing.</li> </ul>"},{"location":"goto_sw_arch_list/#ddd-today-modeling-uncertainty-vaughn-vernon-goto-2017","title":"DDD Today - Modeling Uncertainty \u2022 Vaughn Vernon \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8Y-XPlXOWoA</p> <p>Summary of Transcript:</p> <ul> <li>Vaughn Vernon's talk focuses on Domain-Driven Design (DDD) and how to make it work in practice.</li> <li>Key takeaways include the importance of context, language, and modeling, as well as the use of events and bounded contexts.</li> <li>The speaker emphasizes the need to avoid using technical terms in the business model and to name events with verbs and past tense.</li> <li>Other tips include avoiding anemic models, modeling aggregates as entities, and using a consistent naming convention for events.</li> <li>The talk also touches on the use of CQRS and Event Sourcing as part of a DDD implementation.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-patrick-kua-goto-2017","title":"Building Evolutionary Architectures \u2022 Patrick Kua \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8bEsNT7jdC4</p> <ul> <li>The main focus of N26 is to provide a mobile-first banking experience.</li> <li>They are regulated by the German financial regulatory authority and have a full European banking license.</li> <li>N26 offers a free account with no monthly fees, but they also offer premium accounts with additional features for a monthly fee.</li> <li>The company has implemented various security measures to protect its customers' data and funds, including two-factor authentication and encryption.</li> <li>They use automation and DevSecOps practices to ensure that security scales as the company grows.</li> <li>N26 is named after the 26 moves required to solve a Rubik's Cube, representing their goal of simplifying complex financial transactions.</li> </ul>"},{"location":"goto_sw_arch_list/#a-crystal-ball-to-prioritize-technical-debt-adam-tornhill-goto-2017","title":"A Crystal Ball to Prioritize Technical Debt \u2022 Adam Tornhill \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=SdUewLCHWvU</p> <ul> <li>The talk was about the concept of \"technical debt\" in software development and how to address it using a prioritization technique.</li> <li>Technical debt is the difference between the current state of the codebase and the ideal state, taking into account factors like complexity, maintainability, and test coverage.</li> <li>The technique presented consists of 3 steps: measure technical debt, prioritize it, and then address it through refactoring or rewriting.</li> <li>To measure technical debt, the speaker suggested using a combination of metrics such as cyclomatic complexity, code duplication, and test coverage.</li> <li>To prioritize technical debt, the speaker proposed using a scoring system based on factors like business value, risk, and effort required to address it.</li> <li>The speaker also emphasized the importance of continuous improvement and regular code reviews to prevent technical debt from accumulating.</li> <li>The talk ended with a Q&amp;A session where the speaker answered questions about specific tools, techniques, and experiences related to addressing technical debt.</li> </ul>"},{"location":"goto_sw_arch_list/#shopifys-architecture-to-handle-80k-rps-celebrity-sales-simon-eskildsen-goto-2017","title":"Shopify's Architecture to Handle 80K RPS Celebrity Sales \u2022 Simon Eskildsen \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=N8NWDHgWA28</p> <ul> <li>The company uses a custom built distributed data store called FlockDB.</li> <li>It is written in Scala and runs on top of Apache Mesos.</li> <li>The system has thousands of nodes, each node with 48 cores and 256GB RAM.</li> <li>There are around 10 billion writes per day.</li> <li>Each write op takes about 3ms to complete.</li> <li>Data is sharded by user ID.</li> <li>FlockDB is used for storing social graph data and metadata.</li> <li>The company uses Apache Kafka for stream processing, log aggregation and real-time data ingestion.</li> <li>They are considering using Kubernetes in the future.</li> <li>They do not currently use MySQL binlog with Kafka but it might be considered if there were other use cases for it.</li> </ul>"},{"location":"goto_sw_arch_list/#serverless-the-future-of-software-architecture-peter-sbarski-goto-2017","title":"Serverless: the Future of Software Architecture \u2022 Peter Sbarski \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=LAWjdZYrUgI</p> <ul> <li>Service-oriented architecture is an approach to software design that emphasizes the use of small, loosely coupled services to build complex systems.</li> <li>Services are independent components that communicate with each other using well-defined interfaces and protocols.</li> <li>The main benefits of service-oriented architecture include flexibility, scalability, and maintainability.</li> <li>To successfully implement a service-oriented architecture, it is important to carefully design the services and their interfaces, as well as to choose an appropriate communication protocol.</li> <li>Microservices are a type of service-oriented architecture that emphasizes even greater independence and simplicity of the individual services.</li> <li>Service meshes are a way to manage the communication between microservices in a distributed system.</li> <li>When designing a service-oriented architecture, it is important to consider aspects such as data consistency, security, and monitoring.</li> <li>It is also important to keep in mind that service-oriented architecture is not always the best choice for every project, and that other approaches such as monolithic architectures may be more appropriate in certain cases.</li> <li>The speaker is the founder of a consulting company that specializes in service-oriented architecture and microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#the-many-meanings-of-event-driven-architecture-martin-fowler-goto-2017","title":"The Many Meanings of Event-Driven Architecture \u2022 Martin Fowler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=STKCRSUsyP0</p> <ul> <li>Event-driven systems are those where events cause other things to happen</li> <li>Events should be modeled as facts that have happened in the past, e.g., \"UserRegistered\"</li> <li>Event-driven systems can be more resilient and scalable than traditional request/response architectures</li> <li>Events can be used for communication between services, data integration, and system auditing</li> <li>There are common patterns for event-driven systems: Event Notification, Event Port, Event Sourcing, Command Query Responsibility Segregation (CQRS), and Event-Carried State Transfer (ECST)</li> <li>Event-driven systems can be more complex to understand and debug than traditional architectures, so it's important to be precise in the use of terminology.</li> </ul>"},{"location":"goto_sw_arch_list/#whoops-where-did-my-architecture-go-oliver-gierke-goto-2016","title":"Whoops! Where Did My Architecture Go? \u2022 Oliver Gierke \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=v1XIcgFUIEw</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#building-theories-is-building-value-george-fairbanks-goto-2016","title":"Building Theories is Building Value \u2022 George Fairbanks \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Led34f3Pcq4</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#visualise-document-explore-your-software-architecture-simon-brown-goto-2016","title":"Visualise, Document &amp; Explore Your Software Architecture \u2022 Simon Brown \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=GM_J_jRp62g</p> <ul> <li>The speaker discusses their experience using Gliffy and the potential security concerns of storing data on the cloud.</li> <li>They mention that they are creating an on-premises API to store data locally for added security.</li> <li>The speaker expresses their preference for using cloud-based tools, but notes that the current tooling in this area is immature.</li> <li>They ponder whether there needs to be a mind shift change for people to start using the cloud more or if on-premise solutions need to be built.</li> <li>They mention that they don't want to lose functionality by packaging up an on-premise version of their current cloud-based solution.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-as-systems-dissolve-eoin-woods-goto-2016","title":"Software Architecture as Systems Dissolve \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=XanSoFchPbw</p> <ul> <li>Security engineering is important for software developers, but there is often a disconnect between the security community and software development teams.</li> <li>There is a lack of intersection between the two communities, with few software developers attending security conferences and vice versa.</li> <li>The security community needs to do a better job of speaking the language of software developers and helping them prioritize security measures.</li> <li>Hacking can happen to anyone, as demonstrated by the hacking of hacking team, a company that produces hacking technology.</li> <li>It is important for software developers to take security measures seriously and apply best practices to their work.</li> </ul>"},{"location":"goto_sw_arch_list/#continuous-architecture-murat-erder-goto-2016","title":"Continuous Architecture \u2022 Murat Erder \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3xw3a35yLOQ</p> <ul> <li>Continuous architecture is a set of principles and tools that can help architects make their work more relevant and practical.</li> <li>It involves breaking down silos, collaborating with developers and other teams, and continuously delivering value to the organization.</li> <li>The principles of continuous architecture include:<ol> <li>Embrace Change</li> <li>Deliver Value Continuously</li> <li>Make Architecture Everyone's Job</li> <li>Practice Continuous Discovery</li> <li>Use Appropriate Tools and Techniques</li> <li>Organize Around Capabilities</li> </ol> </li> <li>The continuous architecture mindset involves making architecture real and relevant, rather than something that sits on the side and is in constant conflict with other teams or the organization.</li> </ul>"},{"location":"goto_sw_arch_list/#from-homogeneous-monolith-to-heterogeneous-microservices-architecture-chad-fowler-goto-2015","title":"From Homogeneous Monolith to Heterogeneous Microservices Architecture \u2022 Chad Fowler \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=sAsRtZEGMMQ</p> <ul> <li>Introduction to the speaker and their background in software development.</li> <li>Explanation of the company's use of Elixir and its benefits for building scalable, fault-tolerant systems.</li> <li>Discussion on how the company transitioned from a monolithic architecture to a microservice architecture using Elixir.</li> <li>Explanation of the challenges faced during the transition and how they were overcome.</li> <li>Comparison of the differences between monolithic and microservice architectures.</li> <li>Explanation of the importance of service discovery, load balancing, and message routing in a microservice architecture.</li> <li>Discussion on the company's future plans for further optimizing their architecture, including potentially refactoring to a monolith.</li> <li>Q&amp;A with the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#reactive-systems-21st-architecture-for-21st-century-systems-dave-farley-goto-2015","title":"Reactive Systems: 21st Architecture for 21st Century Systems \u2022 Dave Farley \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=RuHkNGrwD5o</p> <ul> <li>Synchronous and asynchronous communication have different trade-offs.</li> <li>Synchronous communication is simpler and easier to reason about, but can lead to performance issues if not managed carefully.</li> <li>Asynchronous communication can be more complex and harder to reason about, but can provide better performance and scalability.</li> <li>When designing a system, it's important to consider the needs of the application and choose the appropriate communication style accordingly.</li> <li>It's possible to mix synchronous and asynchronous communication in a single system, but care must be taken to ensure that they are properly isolated and managed.</li> <li>A gateway service can be used to manage synchronous communication between services in an otherwise asynchronous system.</li> <li>When using a database commit as a synchronous action, it's important to limit the amount of data being committed to avoid performance issues.</li> <li>Agent Lee is a fundamental communication protocol that can be built upon to create other communication styles.</li> </ul>"},{"location":"goto_sw_arch_list/#mobile-first-architectures-alexander-stigsen-goto-2015","title":"Mobile-First Architectures \u2022 Alexander Stigsen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Xh43D4E2e2M</p> <ul> <li>Mobile devices, drones, and IoT devices have limited network connectivity, which can lead to high latency when trying to access data from a centralized server.</li> <li>To address this issue, it's important to bring the data and computation together on the device itself, a concept known as endpoint computing or client cloud computing.</li> <li>This approach can help reduce latency and improve the user experience by allowing devices to process and display information more quickly.</li> <li>One example of endpoint computing is using mobile devices to perform tasks that would normally be done on a desktop computer, such as video editing or data analysis.</li> <li>Another example is using drones to process sensor data in real-time, rather than sending it back to a central server for processing.</li> <li>Endpoint computing can also help reduce the amount of data that needs to be transmitted over a network, which can save bandwidth and improve overall performance.</li> <li>As mobile devices and IoT devices become more powerful, it's likely that we will see more applications of endpoint computing in the future.</li> </ul>"},{"location":"goto_sw_arch_list/#evolutionary-architecture-microservices-rebecca-parsons-goto-2015","title":"Evolutionary Architecture &amp; Microservices \u2022 Rebecca Parsons \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=WhHtVUlJNA0</p> <ul> <li>Microservices is an architectural style that emphasizes small, loosely coupled services.</li> <li>Continuous delivery is important for microservices because it enables quick and easy deployment and updating of individual services.</li> <li>The book \"Building Microservices\" started out as a book about continuous delivery.</li> <li>Microservices are the first major architectural paradigm to come along since continuous delivery became popular.</li> <li>Operations departments will not like it if you implement microservices without involving them, because their processes for monitoring and error recovery will be different.</li> </ul>"},{"location":"goto_sw_arch_list/#deliberate-architecture-robert-smallshire-goto-2016","title":"Deliberate Architecture \u2022 Robert Smallshire \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3cjSpH4SYpU</p> <ul> <li>Software quality attributes are non-functional requirements that affect how a system operates.</li> <li>Examples of software quality attributes include performance, security, usability, and maintainability.</li> <li>Different stakeholders have different priorities when it comes to software quality attributes. For example, developers may be more concerned with maintainability, while users may be more interested in usability.</li> <li>Software architects play a key role in ensuring that software quality attributes are considered and addressed in the design and development of a system.</li> <li>A good starting point for improving software quality in an organization is to have software architects act as champions for software quality attributes. By focusing on these attributes, other aspects of the system such as features will take care of themselves.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-by-design-the-architects-guide-to-security-design-principles-eoin-woods-goto-2016","title":"Secure by Design \u2013 the Architect's Guide to Security Design Principles \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=4qN3JBGd1g8</p> <ul> <li>Security is about trade-offs and making informed decisions</li> <li>10 principles of security:<ul> <li>Good security requires good design.</li> <li>It's impossible to make anything foolproof because fools are so ingenious.</li> <li>Treat people as a resource to be developed not a problem to be solved.</li> <li>The difficulty of doing something is inversely proportional to how often it is done.</li> <li>If you don't actively manage security, it will managedly get worse.</li> <li>Security is not a product, but a process.</li> <li>Complexity is the enemy of security.</li> <li>Security is a non-competitive advantage.</li> <li>There's no point in having security unless people use it.</li> <li>The most secure system is one that is turned off and disconnected.</li> </ul> </li> <li>References:<ul> <li>NCSC (National Cyber Security Centre)</li> <li>NIPC (National Infrastructure Protection Center)</li> <li>\"Security Engineering\" by Ross Anderson, Cambridge University</li> </ul> </li> </ul> <p>[^1]: Transcript from Video of talk</p>"},{"location":"goto_sw_arch_list/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ul> <li>Rest is a set of ideas for simplifying web development</li> <li>The main components of rest are:</li> <li>Immutable data structures (using functional programming)</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration</li> <li>These ideas can help reduce complexity in web development by:</li> <li>Making it easier to reason about code</li> <li>Encouraging reusable components</li> <li>Minimizing the amount of boilerplate code</li> <li>It's important to continually evaluate assumptions and biases, and consider unfamiliar but time-tested ideas for complexity reduction.</li> <li>Some examples of these ideas include:</li> <li>Functional programming concepts like closures and Lisp</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-vs-code-simon-brown-goto-2014","title":"Software Architecture vs. Code \u2022 Simon Brown \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=GAFZcYlO5S0</p> <ul> <li>Starts by drawing diagrams to decompose problems</li> <li>Uses UML notation for clarity and consistency, but not necessary</li> <li>Diagramming helps clarify responsibilities and interactions between components</li> <li>Helps identify high-level components in a system</li> <li>Can use TDD or other testing strategies once components are identified</li> <li>Diagrams serve as starting point for further development and evolution of the system</li> <li>Encourages thinking about the system in terms of components and their relationships, which is useful for microservices architecture</li> </ul>"},{"location":"blog/architecture/eda/","title":"Building Distributed Applications with Event-Driven Architecture - Eric Johnson's presentation at GOTO 2023","text":"<p>In a world where technology evolves at a breakneck pace, keeping up with the latest trends and practices in software development can be daunting. One such emerging trend is the concept of Event-Driven Architecture (EDA) in building distributed applications. Eric Johnson, in his talk at GOTO 2023, brilliantly demystified this concept, providing valuable insights and practical advice. His presentation, \"Building Distributed Applications with Event-Driven Architecture,\" now available on YouTube, serves as an excellent resource for developers and architects looking to deepen their understanding of EDA and its applications.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#the-essence-of-event-driven-architecture","title":"The Essence of Event-Driven Architecture","text":"<p>The core idea behind EDA, as Eric puts it, is simple yet profound - \"something happens, and we react.\" This approach is a significant shift from the traditional request-response model prevalent in many systems. In EDA, the focus is on events - occurrences or changes in state that trigger specific workflows or processes. This model is inherently more dynamic and can lead to more responsive, scalable, and flexible systems.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#transitioning-from-synchronous-to-asynchronous-models","title":"Transitioning from Synchronous to Asynchronous Models","text":"<p>A pivotal point in Eric's talk is the emphasis on moving from synchronous to asynchronous models. Synchronous systems, while straightforward, have their drawbacks, particularly in terms of scalability and fault tolerance. Asynchronous systems, on the other hand, offer better resilience and flexibility. They allow components to operate independently, reducing the ripple effect of failures and improving system availability.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#asynchronous-point-to-point-queue","title":"Asynchronous Point-to-Point (Queue)","text":"<p>One method Eric discusses is the asynchronous point-to-point model, typically implemented using a queue. This setup decreases the direct coupling between sender and receiver, allowing for more resilient systems. If a receiver fails, the messages are safely queued, ready to be processed once the receiver is back online.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#asynchronous-message-router-bus","title":"Asynchronous Message-Router (Bus)","text":"<p>Another model highlighted is the asynchronous message-router, utilizing an event bus. This model centralizes the routing logic, decoupling it from individual senders and receivers. An event bus can efficiently distribute events to the appropriate services based on predefined rules, facilitating a more modular and maintainable system architecture.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#the-role-of-choreography-and-orchestration","title":"The Role of Choreography and Orchestration","text":"<p>In EDA, choreography and orchestration play crucial roles. Choreography is used for communication between different domains or services, allowing them to publish and subscribe to events autonomously. Orchestration, meanwhile, is employed within a domain to manage workflows and ensure tasks are executed in the correct sequence. AWS Step Functions, as Eric notes, is a prime example of a tool that facilitates orchestration in serverless architectures.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#ensuring-idempotency-in-distributed-systems","title":"Ensuring Idempotency in Distributed Systems","text":"<p>A key challenge in distributed systems is ensuring idempotency - the property that ensures operations can be performed multiple times without changing the result. Eric delves into practical strategies to maintain idempotency, such as using tokens and persistent layers. By embedding these practices into your systems, you can avoid issues like duplicate processing, which is particularly crucial in scenarios involving transactions or sensitive data.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#harnessing-aws-services-for-eda","title":"Harnessing AWS Services for EDA","text":"<p>Throughout his talk, Eric leverages AWS services to illustrate EDA concepts. Services like Amazon SQS (Simple Queue Service), Lambda, and EventBridge are shown to effectively implement the principles of EDA. For instance, SQS helps manage asynchronous communication through queues, while EventBridge acts as a robust event bus, routing events based on specified criteria.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#key-takeaways","title":"Key Takeaways","text":"<ol> <li> <p>Embrace Asynchrony: Moving from synchronous to asynchronous models in distributed systems enhances resilience and flexibility.</p> </li> <li> <p>Leverage Queues and Event Buses: Utilizing asynchronous queues and event buses can significantly reduce coupling and improve system maintainability.</p> </li> <li> <p>Choreography and Orchestration: Effectively manage communication and workflows in distributed systems through choreography for inter-domain communication and orchestration within domains.</p> </li> <li> <p>Maintain Idempotency: Implementing idempotency safeguards your systems against duplication and inconsistencies, especially in distributed environments.</p> </li> <li> <p>Use the Right Tools: Explore AWS services like SQS, Lambda, and EventBridge to build robust, event-driven architectures.</p> </li> </ol> <p>Eric Johnson's presentation at GOTO 2023 is a treasure trove of insights for anyone looking to navigate the complexities of building distributed applications using event-driven architecture. By breaking down these concepts into understandable and actionable points, he provides a roadmap for developing more resilient, scalable, and efficient systems. Whether you're a seasoned architect or a budding developer, this talk is a must-watch, offering guidance and inspiration for your next big project. Don't forget to check out the full presentation on YouTube for a deeper dive into the world of event-driven architecture.</p>","tags":["event-driven architecture"]},{"location":"blog/design/design_for_the_utopia/","title":"Designing for Utopia in a Dystopian Era: Insights from Chris Atherton's GOTO 2022 Talk","text":"<p>In the compelling GOTO 2022 presentation, Design for the Utopia You Want, Not the Dystopia You're In, Chris Atherton provides a profound exploration of the intersection between design, psychology, and the socio-political landscape of our times. The talk, available on YouTube, delves into how designers and individuals can navigate the complex web of modern challenges to foster a more utopian society.</p>"},{"location":"blog/design/design_for_the_utopia/#the-designers-dilemma","title":"The Designer's Dilemma","text":"<p>Atherton opens by identifying as a designer deeply interested in human needs and motivations. The talk pivots on the critical role designers play in shaping human interaction with technology and, by extension, each other. By understanding user interactions, designers can create or adapt tools that enhance or impede human agency. The speaker emphasizes the need to be vigilant about how designs are used, often in ways never intended, highlighting the adaptability required in both creation and utilization.</p>"},{"location":"blog/design/design_for_the_utopia/#navigating-dystopian-themes","title":"Navigating Dystopian Themes","text":"<p>The discussion dives into the prevalence of dystopian themes in popular culture, from Blade Runner to Terminator, contrasting them with the more insidious and real dystopias we face today \u2014 like climate change and pandemics. Atherton examines \"techwear,\" a fashion response to dystopian themes, and how it has evolved from a testosterone-heavy aesthetic to a more inclusive one. Despite the grim realities we face, the presentation encourages finding humor and humanity even in dark times.</p>"},{"location":"blog/design/design_for_the_utopia/#technology-and-agency","title":"Technology and Agency","text":"<p>A significant part of the talk revolves around technology's impact on personal agency. From the privacy erosions on platforms like Facebook to the societal implications of Bitcoin mining, Atherton urges us to consider the pervasive and often unseen influence of technology on our lives. Furthermore, the speaker delves into the concept of learned helplessness, a psychological state when someone believes they have no control over their circumstances and stops trying to change them, often exacerbated by technology's relentless demands and complexities.</p>"},{"location":"blog/design/design_for_the_utopia/#psychological-insights-for-a-utopian-future","title":"Psychological Insights for a Utopian Future","text":"<p>Atherton brings in psychological theories to bolster her argument for mindful design and living. She references William James's attention theory, Martin Seligman's learned helplessness, and the mere exposure effect, among others, to explain how repeated, unexamined interactions with technology can shape our behaviors and beliefs in undesirable ways.</p>"},{"location":"blog/design/design_for_the_utopia/#acting-for-the-utopia-you-want","title":"Acting for the Utopia You Want","text":"<p>The crux of Atherton's message is a call to action. She cites Keanu Reeves's practice of not engaging in futile arguments and Greta Thunberg's advocacy for direct action towards the Utopia we desire. The talk underscores the importance of recognizing when we might be falling into patterns of learned helplessness and intentionally rehearsing things that we believe to be good, thereby actively participating in the creation of a better future.</p>"},{"location":"blog/design/design_for_the_utopia/#concluding-thoughts","title":"Concluding Thoughts","text":"<p>Chris Atherton's talk at the GOTO 2022 conference is more than a presentation; it's a rallying cry for designers, technologists, and citizens to introspect and act with intentionality. By understanding the psychological underpinnings of our interactions with technology and society, we can move towards a future that is less about adapting to dystopia and more about creating Utopia. The advice is clear: act for the Utopia you want, dress however you like, but importantly, take action against the forces that seek to diminish our agency and potential.</p> <p>As we navigate these challenging times, let us draw inspiration from Atherton's insights and the examples set by figures like Reeves and Thunberg. Let's strive to recognize and overcome the learned helplessness that can ensnare us, choosing instead to engage in meaningful actions that lead us towards a more hopeful, utopian future.</p> <p>To watch the full presentation and delve deeper into these compelling themes, visit the talk, Design for the Utopia You Want, Not the Dystopia You're In on YouTube.</p> <p>Act for the Utopia you want, dress how you like, but take action.</p>"}]}