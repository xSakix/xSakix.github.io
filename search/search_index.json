{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stemmer","stopWordFilter","trimmer"]},"docs":[{"location":"","title":"Architect's Insight Hub: Elevate Your Learning Experience","text":"<p>This website is my personal endeavor, focusing on software architecture resources that help you keep up with the latest trends. I selectively gather content that I find useful, presenting summaries and insights to give you a snapshot of current trends and innovations. It's an experimental project, leveraging open-source models and GPT-4 capabilities. Please note, while I aim for accuracy, the nature of summarization means that details may not be exhaustive, and there could be minor inaccuracies. If a topic catches your interest, I encourage you to delve into the original articles or videos linked as sources, ensuring you get the full scope of the information. </p>"},{"location":"#summaries","title":"Summaries","text":"<ul> <li>GOTO Conferences - Software architecture playlist</li> <li>GOTO Conferences - Design thinking and UI/UX playlist</li> <li>GOTO Conferences - Programming languages playlist</li> </ul> <ul> <li>GOTO Conferences - Frontend playlist</li> <li>Davos 2024</li> <li>Usenix ATC 2023</li> </ul>"},{"location":"#blogs","title":"Blogs","text":""},{"location":"#architecture","title":"Architecture","text":"<ul> <li>Building Distributed Applications with Event-Driven Architecture - Eric Johnson's presentation at GOTO 2023</li> </ul>"},{"location":"#design","title":"Design:","text":"<ul> <li>Design for the Utopia You Want, Not the Dystopia You're In: Insights from Chris Atherton at GOTO Conference 2022</li> </ul>"},{"location":"#programming","title":"Programming","text":""},{"location":"#other","title":"Other","text":""},{"location":"davos_2024/","title":"Davos 2024","text":""},{"location":"davos_2024/#davos-2024-highlights-world-economic-forum","title":"Davos 2024 Highlights | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=BCcNRaGaJfU</p> <ol> <li>World Economic Forum in Davos emphasizes rebuilding trust and tackling global challenges.</li> <li>Poverty, climate change, food insecurity, and fragility are interconnected issues that require simultaneous solutions.</li> <li>Developed countries should increase efforts towards green energy and reskilling millions of people.</li> <li>AI has the potential to create abundance but requires responsible management and collaboration.</li> <li>A new model for growth is needed, focusing on proactive measures and pre-distribution.</li> <li>Inclusivity and intergenerational responsibility are crucial for a better future.</li> </ol>"},{"location":"davos_2024/#closing-remarks-the-road-ahead-davos-2024-world-economic-forum","title":"Closing Remarks: The Road Ahead | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=rDfmWxBnEoE</p> <ul> <li>54th World Economic Forum Annual Meeting in Davos centered on rebuilding trust and tackling global challenges.</li> <li>Over 3,000 leaders from diverse sectors participated in the meeting.</li> <li>Discussed initiatives: climate action, nature protection, energy transition, AI governance, risk skilling revolution, gender parity sprint, human capital investments.</li> <li>World Economic Forum aims to accelerate progress on these initiatives in the coming year.</li> </ul>"},{"location":"davos_2024/#the-global-economic-outlook-davos-2024-world-economic-forum","title":"The Global Economic Outlook | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=1Q-fqkewVAI</p> <ul> <li>Global economy faces challenges in 2023, including inflation, aggressive monetary tightening, and geopolitical conflicts.</li> <li>Post-pandemic global recovery continues with some economies taking up slack.</li> <li>Experts discuss normalization trends like consumption and trade picking up, and inflation coming down.</li> <li>Uncertainties remain due to geopolitical conflicts and elections, making forecasting difficult.</li> <li>Resilience needed in the face of new challenges, including financing transition and fighting poverty.</li> <li>Growth is below trend but geopolitical conflicts make forecasting difficult.</li> <li>Germany shows resilience despite energy crisis.</li> <li>New normal with challenges like debt levels, inflation, and low growth potential for world economy.</li> <li>Low-income countries need debt restructuring to invest and grow.</li> <li>US economy expected to grow around 2.5% in 2023, with rate cuts likely before presidential election.</li> <li>Biggest risk for US economy is dysfunction of government due to political issues.</li> <li>Unpredictable political changes make it difficult to \"Trump proof\" economies.</li> <li>US government struggles with political issues affecting the economy.</li> <li>Presidential election may impact country's future, as candidates might not fulfill their promises.</li> <li>Europe should prepare for a possible second Trump term by focusing on European competitiveness and strengthening partnerships.</li> <li>Improving the single market and capital markets union is crucial for investment in green economies.</li> <li>US-China relationship needs to shift from adversarial to cooperative, with both countries facing similar challenges.</li> <li>Focus on reforming organizations like WTO to ensure they deliver for people regardless of political changes.</li> <li>Partners face similar challenges like climate change and global trade issues.</li> <li>Trade has been resilient, with opportunities in digital, green, and supply chain development.</li> <li>Structural reforms, local revenue mobilization, and multilateral support for private sector investments are crucial.</li> <li>Fiscal reform is neglected but essential to address future challenges like climate transition, aging societies, and AI era needs.</li> <li>Seven years of resilience helped in dealing with multiple shocks.</li> <li>Structural reforms and local revenue mobilization are crucial for low-income countries.</li> <li>The World Bank is working on catalyzing private investments in developing nations.</li> <li>Fiscal spending is a neglected area, leading to future crises.</li> <li>A global carbon tax system is necessary for climate transition.</li> <li>Redirecting fuel subsidies can help vulnerable households and promote green energy.</li> <li>Preparing for an aging society requires reforms in social security systems and healthcare financing.</li> <li>The US needs to address its $34 trillion debt issue to maintain dollar's reserve currency status.</li> <li>A common methodology or framework for global carbon pricing is needed to finance the green transition.</li> <li>Businesses face regulatory fragmentation, requiring a common global carbon pricing framework.</li> <li>Developing nations struggle with fossil fuel subsidies and lack of funding for climate change initiatives.</li> <li>Challenges in implementing carbon taxes and finding alternative solutions like a global carbon market.</li> <li>Focus on productivity and structural reforms to finance various needs.</li> <li>Discussions on finance, productivity, and globalization.</li> <li>Need for tax reforms, minimum corporate taxation, and allocation of profits.</li> <li>Positive impact of globalization on reducing poverty.</li> <li>Importance of carbon markets and investment in green energy.</li> <li>Challenges in political decision making and the need for fair and just solutions.</li> <li>Discussed subsidies, fairness, and investment in green energy.</li> <li>Need for enhanced role of International Financial Institutions.</li> <li>Shortened political vision causing future problems.</li> <li>Importance of rebuilding trust among leaders from public and private sectors.</li> </ul>"},{"location":"davos_2024/#anticipating-the-middle-east-in-2024-davos-2024-world-economic-forum","title":"Anticipating the Middle East in 2024 | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=YsrDcy2waLg</p> <ul> <li>Israeli Prime Minister Netanyahu's political dependence on radical right groups influences his mindset.</li> <li>The potential for conflict escalation in 2024 and the need for a two-state solution to ensure Israel's security are discussed.</li> <li>Iran's foreign policy is seen as problematic, but if the region moves towards peace, it may become more contained.</li> <li>The US should be more aggressive in embracing the pathway to two states.</li> <li>A better regional environment requires a less inflamed Arab street.</li> <li>Conflict management in the Middle East is challenging due to differing interests.</li> <li>Escalation in 2024 may be unlikely, but a pause could happen.</li> <li>Iran's foreign policy focuses on military dominance, which isn't accepted by other regional countries.</li> <li>Saudi Arabia and Iran have shared interests, such as ending the Yemen conflict and promoting trade.</li> <li>Hezbollah has shown restraint in Lebanon due to potential devastation from Israeli and American involvement.</li> <li>The future of Iranian-Saudi relations is uncertain, but they may continue with transactional agreements.</li> <li>Yemen faces political instability and water shortage issues, fueled by Iran's involvement.</li> <li>Civil War in Yemen involves Hezbollah as another group involved.</li> <li>Lebanon's economy is vulnerable; Iran prefers security over economic development.</li> <li>Kisala (Hezbollah) has been cautious in its military actions against Israel.</li> <li>The Middle East is a tinderbox, and managing the region will be difficult.</li> <li>US diplomatic efforts should be more robust to contain the situation between Israel and Hezbollah.</li> <li>Other regional players' economies may struggle due to ongoing conflicts.</li> <li>Concerns over potential escalation of conflict in the Middle East, including Gaza and Lebanon.</li> <li>Saudi Arabia's possible future relations with Israel, potentially dependent on regional developments and Palestinian issues.</li> <li>Economic impact on Egypt and Jordan due to ongoing conflicts and refugee crises.</li> <li>Importance of diplomacy and pressure from the US on both sides in the region.</li> <li>Saudi Arabia and Israel's deal may be linked to Palestinian statehood.</li> <li>Trump's plan for Israeli-Palestinian conflict is on the table, but Biden needs to push for a pathway towards Palestinian State.</li> <li>One-state solution might happen without political change in both regions.</li> <li>Inflammatory language like \"racist\" and \"genocide\" are not helpful to the discussion.</li> <li>Embrace two-state solution with strong leadership in Palestine, end long presidencies, and find a new negotiating partner.</li> <li>Discussion on the Israeli-Palestinian conflict: Importance of avoiding inflammatory language and focusing on solutions; Mention of a one-state democracy but preference for two states living peacefully; Need for strong Palestinian leadership through elections; Short-term stalemate in the region; Possible influence of US election on conflict resolution; Suggestion to focus on releasing hostages as a step towards ending war; Israeli economy's impact on resolving the issue.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-kyriakos-mitsotakis-prime-minister-of-greece-davos-2024-wef","title":"A Conversation with Kyriakos Mitsotakis, Prime Minister of Greece | Davos 2024 | WEF","text":"<p>URL: https://www.youtube.com/watch?v=ceESHIoIIcg</p> <ul> <li>Discussions on global issues, including the Middle East crisis and Greek shipping industry's involvement.</li> <li>Greece's measured stance on the Middle Eastern conflict, focusing on humanitarian aid to Gaza.</li> <li>Shift in Greece's position towards Israel, recognizing it as a strategic partner.</li> <li>Europe's role in resolving conflicts, with Greece supporting Ukraine and NATO's involvement.</li> <li>Greek support for Ukraine, offering both diplomatic and military assistance.</li> <li>Addressing Russia's concerns while maintaining unity with Europe.</li> <li>Sanctions on Russia causing economic pain but not preventing future growth.</li> <li>Importance of communication with countries of the global South to understand their perspectives.</li> <li>Turkey as a potential spoiler in discussions about Ukraine joining NATO, efforts to build bridges and address disputes ongoing.</li> <li>Greece's relationship with Turkey, working on resolving maritime dispute and building a positive agenda together.</li> <li>Ukraine's uncertain peace plan, Greek support through military and financial aid.</li> <li>Successful Greek elections due to delivering commitments and focusing on the economy.</li> <li>Centrist parties as an alternative for countries facing far right or left challenges by triangulating policies.</li> <li>Addressing grievances of people left behind by globalization is crucial.</li> <li>Greece's improved economy despite challenges in 2023, with a focus on growth, responsible patriotism, and progressive social policies.</li> <li>Discussions about AI and election interference highlight the need for an alliance between governments and tech companies.</li> <li>Use AI to improve participatory democracy and increase voter participation.</li> <li>Avoid expressing opinions on democratic processes in other countries.</li> <li>Enable Greeks abroad to vote in European elections and use absentee voting.</li> <li>Extend the same possibility for Greeks within the country, especially young people unable to participate due to work commitments.</li> <li>Understand factors that prevent participation in the electoral process.</li> <li>Maintain neutrality on political matters like former President Trump's potential reelection and its impact on international relations.</li> <li>Europe must work with whoever the American people choose as their next president.</li> </ul>"},{"location":"davos_2024/#how-to-prevent-an-anxious-generation-davos-2024-world-economic-forum","title":"How to Prevent an Anxious Generation | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=LQPnLHwOrJU</p> <ul> <li>Children's increasing online time affects mental health and sleep.</li> <li>Social media platforms are designed for engagement and addiction, impacting younger generations.</li> <li>Gen Z is aware of social media's effects; they advise limiting screen time and avoiding inappropriate content.</li> <li>Spatial computing and generative AI present challenges for cognitive development; balance with offline activities is crucial.</li> <li>Internet addiction affects children, students, and adults; mindful engagement with social media is recommended.</li> <li>Spatial Computing can change education but should be designed for the whole child.</li> <li>Technology redesign should focus on cognitive liberty, privacy, and empowerment.</li> <li>Gen Z entrepreneurs create digital wellness tools.</li> <li>Industry standards, policies, and mental health resources are needed to protect children's online experiences.</li> <li>Digital immersion may negatively impact mental health; technology companies should design around kids' vulnerabilities and empowerment.</li> <li>Policies like limiting targeted advertising and increasing mental health resources are necessary.</li> <li>Informative tools for better online choices can help users.</li> <li>Parents face challenges navigating children's digital lives, requiring more nuanced advice on active vs passive screen time use.</li> <li>Taking breaks from social media improves mental health; designing digital experiences promoting critical thinking, empathy, and self-regulation is essential.</li> <li>Policy intervention is needed to protect children's privacy and data usage.</li> </ul>"},{"location":"davos_2024/#defending-truth-davos-2024-world-economic-forum","title":"Defending Truth | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=H920fGaTmLA</p> <ol> <li>Defending truth is crucial in today's world, facing challenges like wars, elections, and AI.</li> <li>The European Commission focuses on improving the system to equip people with facts for autonomous choices.</li> <li>Importance of media literacy and trustworthy journalism: Meredith emphasizes high-quality independent journalism, Emma Tucker maintains trust in legacy brands through consistent efforts.</li> <li>Need for sustainable business models in the media industry.</li> <li>Transparency, openness, correcting mistakes are crucial to maintain trust. Civil Society's role in supporting news organizations worldwide.</li> <li>Addressing disinformation by focusing ad dollars on trusted content and platform responsibility in protecting users from digital harms.</li> <li>Importance of local language expertise to protect global interests.</li> <li>Civil Society interventions like Facebook Oversight Board and Australian e-safety commissioner are helpful but not enough.</li> <li>Business model changes in news industry: focus on committed relationships, better signals for quality content, and addressing mistrust in credible news organizations.</li> <li>Expense of high-quality journalism: need more journalists, AI assistance, and sustainable models to support local newsrooms.</li> <li>European Commission's role: Regulate illegal content (child pornography, extremism, violence, hate speech) while protecting freedom of speech. Focus on evidence-based truth in disinformation.</li> <li>AI Act protects copyright and freedom of speech, ensuring human rights are respected.</li> <li>Journalists face increasing threats in various countries, making it difficult to cover news safely.</li> <li>Generative AI has the potential to improve journalism by reaching more people with content in different languages and at greater speed and scale; fair value exchange for using content is crucial.</li> <li>Discussions on public broadcasting, AI's role in news, and youth consumption of news. Public broadcasting is a challenging model to establish but can be successful in some countries.</li> <li>AI distinguishing truth from bunk is difficult; Deepfake poses challenges as it may qualify as fraud. Youth get their news from platforms like TikTok, requiring news organizations to adapt content and formats.</li> <li>Educating youth about the value of trusted news sources is essential. Importance of adapting news delivery to cater to young audiences. Use the News initiative in Germany educates youth about trusted independent journalism. Explain the process behind journalism and its independence from bias. Utilize humor and satire to combat misinformation.</li> <li>Independent news organizations are crucial for maintaining a healthy information ecosystem. Address gendered misinformation affecting women experts. Public Service Media should have sufficient financing for reliable news coverage. Acknowledge the challenges of disruption in public discourse but remain determined to find solutions. Discussed the need for platforms to provide space for health authorities to inform people. Not all health authorities were ready, so each sector should take care of its evidence-based truth. Public Service Media needs sufficient and predictable financing. Misinformation has no silver bullet solution, but we know the challenges and need to confront them. The discussion aims to keep trying despite the difficulty in defending truth.</li> </ol>"},{"location":"davos_2024/#all-change-what-next-for-monetary-policy-davos-2024-world-economic-forum","title":"All Change: What Next for Monetary Policy? | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=vh7TInvaNqo</p> <ol> <li>Panelists discuss lessons from recent inflationary shock.</li> <li>Thomas Jordan believes policy frameworks are good but analysis could be improved.</li> <li>Julio Velarde acknowledges overconfidence in low inflation and the need for credibility in controlling it.</li> <li>Martin Wolf highlights the importance of risk management approach and humility about forecasting.</li> <li>Inflation in Ukraine increased from initially low levels to 2% annually, with central banks trying to control it by increasing interest rates.</li> <li>Latin American countries acted early due to their history of high inflation and poverty.</li> <li>Private sector wants a resilient financial system and long-term investments; stress testing and scenario analysis are important for organizations' success.</li> <li>The pandemic has shown the importance of collaboration, generative AI, and tackling big issues can be done faster.</li> <li>Investors should focus on robust scenario analysis and stress testing for long-term success.</li> <li>Central banks must consider risks and deploy effective risk management across businesses.</li> <li>Inflation targeting requires trade-offs during supply shocks; central banks need to balance demand and supply.</li> <li>The financial system's strength is crucial for dealing with future shocks, as the world rewires its trade routes and addresses climate change.</li> <li>Central banks may face challenges due to these changes and their impact on inflation.</li> <li>Forward-looking policies are crucial for central banks, but they must also be flexible in adjusting to unexpected events.</li> <li>Inflation targeting remains important, with a focus on maintaining stability between 0% and 2%.</li> <li>The flexibility of monetary policy should be used to adapt to different situations, such as disinflation or productivity dividends from technological advancements.</li> <li>Aim for a 2% inflation target, but be flexible.</li> <li>Focus on financial system health and mortgage market regulations.</li> <li>Incorporate climate change considerations in risk management.</li> <li>Central banks are not the sole solution to tackle climate change; governments, private sector, and consumers also play crucial roles.</li> <li>Discussions about changing central bank mandates should include considering the needs of those with limited resources.</li> <li>Maintaining a narrow mandate for central banks is crucial for independence and effectiveness.</li> <li>Flexible inflation targeting has been successful, but challenges remain.</li> <li>Central banks should focus on financial risks associated with climate change.</li> </ol>"},{"location":"davos_2024/#brics-in-expansion-davos-2024-world-economic-forum","title":"BRICS in Expansion | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=CpbwOLo7yJw</p> <ul> <li>Bricks, an economic group, was first introduced by Goldman Sachs in 2001.</li> <li>South Africa joined the group in 2010 and six countries were invited to join last year.</li> <li>The expansion of Bricks aims at mobilizing savings from developing nations for better development.</li> <li>Criteria for selecting new members are still under debate.</li> <li>India views Bricks as a platform for consensus, considering financial prowess and social justice.</li> <li>Discussing BRICS' expansion, speakers emphasize its potential for global cooperation and growth.</li> <li>China sees BRICS as contributing to green development, reducing poverty, and stimulating industries.</li> <li>UAE joining BRICS is seen as an economic move focused on South-South agenda and trade engagement.</li> <li>The importance of BRICS for the global economy and tackling inflation is highlighted.</li> <li>Progress has been made in reforming international institutions, but more work is needed.</li> <li>BRICS' future may involve becoming a coherent group with common messaging.</li> <li>Global companies like GA navigate challenges by focusing on innovation and cooperation.</li> <li>Emphasize on multipolarity and welcoming new institutions like BRICS for choices.</li> <li>Address concerns about political ideology and clarify that BRICS is an economic agenda.</li> <li>Consider the African Continental Free Trade Agreement (AfCFTA) and its relationship with BRICS.</li> <li>Russia's role within BRICS was not discussed as a dominant force.</li> <li>The importance of creating a global South-South trade agenda was highlighted.</li> <li>India's ability to contribute to the global supply chain during the pandemic was noted.</li> <li>The BRICS system is seen as paving the way for better economic cooperation and South-South trade, benefiting the whole world.</li> </ul>"},{"location":"davos_2024/#european-green-deal-anyone-davos-2024-world-economic-forum","title":"European Green Deal, Anyone? | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=g3OTQvDXllg</p> <ul> <li>European Green Deal aims to make Europe climate neutral by 2050.</li> <li>Challenges include developing stronger business cases for investors, listening to CEOs, and adjusting policies to compete with countries like China offering massive subsidies.</li> <li>Focus on green electricity, solar, wind, hydrogen power, bio solutions, and the Green Deal.</li> <li>Need for faster implementation and agility in regulation.</li> <li>Greece's role in energy security: short-term provider of energy to Balkans through interconnections; medium-long term exporter of green energy through offshore wind development.</li> <li>Invest in grid infrastructure for future climate neutrality.</li> <li>Address technological roadblocks, particularly permitting processes.</li> <li>Create a one-stop shop for fast permitting and guidance on funding for strategic projects.</li> <li>Fine-tune the single market to accommodate green technologies.</li> <li>Permitting issues are a major concern, and joint efforts from European level and member states can help solve them.</li> <li>Single Market has been successful in Europe's growth, but needs fine-tuning for the new economy of the 21st century.</li> <li>Ukraine's potential contribution to supporting the continent's decarbonization efforts is significant.</li> <li>Private sector plays a vital role in advancing green initiatives and reducing emissions.</li> <li>Companies can reduce scope three emissions by engaging suppliers in CO2 emission reduction.</li> <li>Investing in sustainable solutions attracts top talent, delivers shareholder value, and contributes to the future of the planet.</li> <li>Reduce emissions to match Japan's magnitude and work with suppliers for greater impact.</li> <li>Focus on sustainable agriculture, plant-based solutions, and novel ways of reducing methane emissions.</li> <li>Use competitive sustainability principle in public procurement.</li> <li>Utilize the European Union's economic weight for better deals on critical raw materials.</li> <li>Strict regulations and conditionalities for European funds distribution.</li> <li>Balance state aid rules to avoid distorting the single market.</li> <li>Importance of addressing market distortions and supporting businesses.</li> <li>Social climate fund to help those most affected by the transition.</li> <li>Balancing coal mining and renewable energy production in Ukraine while maintaining national security.</li> <li>Gradual move away from fossil fuels towards green energy investments for growth and job creation.</li> <li>Importance of talent mobility within the European Union for a successful transition.</li> <li>Train ex-coal workers for green industries.</li> <li>Invest in renewable energy and sustainable agriculture.</li> <li>Gradual transition from fossil fuels to green energy.</li> <li>Leverage talent within a country through single markets.</li> <li>Address regional issues with significant resources.</li> <li>Start with easy wins like retrofitting houses.</li> <li>Be sensitive when dealing with complex topics like agriculture.</li> </ul>"},{"location":"davos_2024/#landing-an-ambitious-global-plastics-treaty-davos-2024-world-economic-forum","title":"Landing an Ambitious Global Plastics Treaty | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=GMcH4Wk-_d4</p> <ul> <li>11 months to negotiate a global plastics treaty aiming to end plastic pollution</li> <li>60 countries have committed to zeroing out plastic pollution by 2040</li> <li>UN Environment Assembly (UNEA) focuses on bold commitments and addressing full life cycle of plastics</li> <li>Plastic production: 46% ends up in landfills, only 9% recycled; microplastics found in human blood and organs</li> <li>Circularity and responsible plastic management are crucial for a solution</li> <li>Need to focus on standards for plastic recycling and product design (Chain protects environment and human health)</li> <li>UN conference focuses on consensus for global plastic pollution solutions</li> <li>Aim to create a legally binding agreement by 2024</li> <li>Plastic pollution impacts birds, fish, and humans through microplastics inhaled</li> <li>Circularity, product design, and recycling are key strategies to tackle the issue</li> <li>Peru is committed to reducing plastic pollution and its impact on human health</li> <li>Unilever supports a binding international treaty with focus on reduction, circular economy, and prevention</li> <li>Importance of a binding international treaty for reducing pollution and promoting circular economy</li> <li>Voluntary pledges have made progress, but more needs to be done</li> <li>Treaty should cover full life cycle, including prevention and design improvements</li> <li>Businesses can play a significant role in supporting the treaty</li> <li>Governments must listen to broader communities, including businesses, science, and policy</li> <li>Recycling and elimination of unnecessary plastics are crucial for success</li> <li>Treaty should consider smaller companies' challenges and ensure justice during transition</li> <li>Industry can enable this process by focusing on popular demand for a circular economy</li> <li>Discussions on plastic pollution and its impact on the environment</li> <li>Importance of understanding the entire life cycle of plastics, including recycling and elimination</li> <li>Industry's role as an enabler in tackling the issue through circularity, reuse of materials, and increased recycled content</li> <li>Need for enhanced producer responsibility schemes to fund a circular economy</li> <li>Science plays a crucial role in assessing life cycle impacts of plastics</li> <li>Challenges in providing waste management access to three billion people without it</li> <li>Cooperation is vital for effective treaties, with periodic reviews and support from organizations</li> <li>Countries need to report on their progress in adhering to binding treaties</li> <li>A periodic review with detailed surveys is proposed for better support and monitoring</li> <li>Parallels can be drawn between plastic treaty process and climate change negotiations, especially regarding investment in developing countries</li> <li>There's a need to increase synergies among multilateral environmental agreements and focus on recycling to reduce plastic waste</li> <li>Collection, sorting, and creating high value waste streams are crucial for a successful circular economy</li> <li>Simplifying product design can make them easier to recycle</li> <li>Developed countries face different challenges than developing ones in managing waste</li> <li>Flexibility is needed for countries to implement solutions that fit their individual situations</li> <li>Sharing best practices and scaling up technology are important for improving recycling processes</li> <li>Treaties with legally binding elements and addressing entire life cycles are being developed</li> <li>Compliance, effectiveness reviews, and clear targets are essential for these treaties</li> <li>Stakeholder engagement is crucial, especially in sectors like waste management</li> <li>Businesses can be flexible and agile to adapt to new regulations, focusing on innovation and sustainability</li> <li>A stable regulatory framework with binding elements brings clarity and stability for businesses</li> <li>Moving towards sustainable packaging solutions, including concentrates and capsules</li> <li>Introducing biodegradable paper packaging to address plastic issues</li> <li>Businesses will respond through innovation to tackle the plastic problem</li> <li>Targets for greenhouse gas emissions can help drive change in the industry</li> <li>Consumer behavior change is crucial for success, with hard targets and timelines</li> <li>Keeping science at the forefront of decision making is essential</li> <li>A global fund for cleaning up pollution could be considered</li> <li>The Montreal Protocol serves as an example of a successful treaty addressing another environmental issue</li> </ul>"},{"location":"davos_2024/#no-recovery-without-trade-and-investment-davos-2024-world-economic-forum","title":"No Recovery without Trade and Investment | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=mnzfFpG6jGk</p> <p>Error</p>"},{"location":"davos_2024/#technology-in-a-turbulent-world-davos-2024-world-economic-forum","title":"Technology in a Turbulent World | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=JHPzQRTsb4A</p> <ul> <li>AI is currently limited but still useful, with people understanding its limitations.</li> <li>Trust in AI will be crucial for acceptance, and explaining reasoning may help.</li> <li>AI can't replace human creativity or empathy, as it lacks emotional intelligence.</li> <li>Humans will continue to focus on each other and use better tools to connect.</li> <li>Roles will shift towards higher levels of abstraction and decision-making.</li> <li>Chess has become more popular with the advancement of AI.</li> <li>Humans will continue to focus on each other and work together using better tools.</li> <li>Trust is a crucial factor in the development and implementation of AI.</li> <li>AI can augment human capabilities, but it's not yet at a point where it replaces them.</li> <li>Implementing AI requires understanding its benefits and risks while ensuring appropriate safeguards.</li> <li>AI's impact on productivity: Companies are implementing AI in various areas, focusing on improving efficiency and reducing the number of people needed for certain tasks.</li> <li>Responsible AI: Companies should assess risks and implement mitigations to ensure safe usage of AI.</li> <li>Biotech and AI revolution: The combination of advancements in biology and technology is creating a scientific Renaissance, allowing faster and better breakthroughs in life sciences.</li> <li>Trust and regulation: Governments should have a light touch approach towards regulating AI as it's still an emerging field. Public services can benefit from AI-driven efficiency and lower tax levels.</li> <li>Importance of trust in AI and its regulation: Need for a light touch approach to allow technology to grow, UK's role in global security and AI safety Summit, balancing protection against bad actors with enabling innovation, concerns about AI ruling over humans but potential benefits outweigh risks, importance of societal input on values, safety thresholds, and global coordination, co-evolution of technology and society to build safe systems.</li> <li>Discussions on AI's impact on society and businesses: Importance of ensuring safety, transparency, and trust in AI development, data usage concerns (OpenAI negotiations with New York Times), focus on providing value to customers through AI while maintaining data privacy, need for new economic models that work for everyone including content owners, importance of global collaboration and common standards for AI development.</li> <li>China's progress in life sciences and potential impact on AI regulation: Lessons learned from past scandals (focus on trust, transparency, and accountability), humility and collaboration in leadership, China's progress in life sciences with potential for new molecular entities.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-mohammed-shyaa-al-sudani-prime-minister-of-iraq-davos-2024-wef","title":"A Conversation With Mohammed Shyaa Al Sudani, Prime Minister of Iraq | Davos 2024 | WEF","text":"<p>URL: https://www.youtube.com/watch?v=6e0zeBVaDKw</p> <ul> <li>Iraq has transitioned from dictatorship to democracy, with peaceful political changes.</li> <li>The country is working on diversifying its economy and reducing reliance on oil revenues.</li> <li>Iraq appreciates the support of international allies in defeating ISIS but wants them to leave as ISIS is no longer a threat.</li> <li>The government plans to negotiate with the coalition for their withdrawal from Iraq, followed by bilateral partnerships with regional countries.</li> <li>Concerns over the escalation of violence in the Middle East, particularly regarding Israel and Gaza.</li> <li>The need for the international community to take action against the Israeli government's disregard for International resolutions.</li> <li>Optimism about a two-state solution is unlikely without implementing existing resolutions and ensuring accountability.</li> <li>Importance of respecting sovereignty and non-interference in internal affairs.</li> <li>Iraq as a potential mediator between Iran and the US.</li> <li>Iraq's focus on strengthening relationships with various countries based on shared values.</li> <li>Efforts to mitigate environmental impacts of climate change, including renewable energy projects.</li> <li>Looking back at the past 20 years in Iraq, the country is moving forward with solid steps towards a better future.</li> <li>Participated in COP28 representing Iraq's delegation.</li> <li>Aimed to reduce carbon emissions and promote sustainability.</li> <li>Looking back at the past 20 years, wished for better strategic decisions.</li> <li>Vision for next 20 years: Better, united, stable Iraq with improved quality of life.</li> <li>Focus on partnership, understanding, and utilizing natural resources.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-isaac-herzog-president-of-israel-davos-2024-world-economic-forum","title":"A Conversation with Isaac Herzog, President of Israel | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=JqM_9OAUHEU</p> <ul> <li>President Herzog addresses the critical situation in Israel and across the Middle East.</li> <li>He emphasizes efforts to drive positive change, create peace with Palestinians, and advance relations with other countries.</li> <li>The 7th of October terror attack caused immense suffering for Israelis.</li> <li>There are 136 hostages held by Hamas, including Muslims, women, foreign nationals, Holocaust survivors, and their families.</li> <li>Herzog believes the war in Gaza is part of a larger conflict against the entire Free World.</li> <li>He calls for peace with neighbors, especially Palestinians, and emphasizes that terror must be stopped.</li> <li>Israel's actions were taken to defend themselves from Hamas' war machine and Terror infrastructure.</li> <li>Discussions on the war in Gaza, Israel's response to Hamas, and the need for a peaceful future.</li> <li>Importance of international support against terrorism and rebuilding Gaza safely.</li> <li>Urgent humanitarian needs in Gaza, with Israel committed to upgrading aid supply.</li> <li>Focus on reforming Palestinian Authority and supporting peace efforts between Israelis and Palestinians.</li> <li>Discussions on responsibility for Gaza, Israeli forces' withdrawal, and the need for a coalition of nations to rebuild it.</li> <li>Focus on ensuring safety and well-being of Israelis and Palestinians.</li> <li>Importance of strong Western and regional forces in the region.</li> <li>Humanitarian aid efforts through Rafa Crossings, with 400 trucks a day entering Gaza.</li> <li>Concerns for hostages' medical situation and their release as key elements to ending the crisis.</li> <li>The impact of not having a political process for a two-state solution on Israel's vulnerability.</li> <li>Need for dialogue with neighbors, Palestinians, and a focus on safety and well-being for both sides.</li> <li>Hamas has always opposed political processes with Palestinians.</li> <li>Questions about Israel's security and safety are legitimate.</li> <li>Arab Peace Plan aims for normalization, regional cooperation, and peace.</li> <li>Israeli public wants peace and security.</li> <li>South Africa's behavior towards Israel is outrageous.</li> <li>Hope for progress in a year: Israel to continue benefiting the world with inventions and help people.</li> <li>South Africa brings Israel to the International Court of Justice.</li> <li>Reaction: Attacks on Israel are outrageous, supporting atrocities and violence.</li> <li>Call for action against South Africa's hypocrisy.</li> <li>Israel presents a strong case in the court.</li> <li>Hope for international support for Israel.</li> <li>Focus on Israel's contributions to the world through innovation and helping people.</li> <li>Vision of coexistence between Palestinians and Israelis, but not allowing evil forces to ruin it.</li> </ul>"},{"location":"davos_2024/#womens-rights-in-iran-davos-2024-world-economic-forum","title":"Women\u2019s Rights in Iran | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=j-RQZiQpAy0</p> <ul> <li>Iranian women have a strong social and economic presence but face discrimination under Islamic law.</li> <li>Global civil society can support by providing unrestricted access to information and freedom of the internet for all Iranians.</li> <li>Human rights, including women's rights, should be central in negotiations with Iran.</li> <li>Recent release of journalists Niloufar Hamedi and Elah Alinejad highlights ongoing challenges for activists and journalists in Iran.</li> <li>Both journalists were temporarily released after 17 months in prison but are banned from leaving Iran; they refuse to wear compulsory hijabs, leading to new charges and demands for their return to prison.</li> <li>Narges Mohammadi, an Iranian human rights activist and Nobel Peace Prize winner, is imprisoned and faces increasing pressure on herself and other political prisoners. Her husband discusses the impact of her imprisonment on their family, including children who haven't seen or heard from her for years.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-pat-gelsinger-and-klaus-schwab-davos-2024-world-economic-forum","title":"A Conversation with Pat Gelsinger and Klaus Schwab | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=pHBPKkB-_3Q</p> <ol> <li>Semiconductors are crucial for the digital world, with Europe and US dominating production in 1990.</li> <li>The EU Chips Act and US Chips Act aim to rebuild semiconductor industries in the US and Europe.</li> <li>Major categories of semiconductors include memory chips, flash memories, specialty chips, mature chips, and leading edge chips (AI).</li> <li>Taiwan, Korea, and China have invested heavily in attracting semiconductor manufacturing over the past 30 years.</li> <li>Producing cutting-edge chips requires significant long-term investments in R&amp;D and capital.</li> <li>The US and Europe have key technologies for advanced chip production but need to invest more to compete with Asia.</li> <li>Intel is restructuring into two distinct companies: one for manufacturing and Foundry, the other for product development.</li> <li>AI has seen significant growth due to advancements in compute, data, and algorithms.</li> <li>The future of AI will focus on deploying models efficiently across devices.</li> <li>Research is shifting from universities to industries with governments playing a crucial role in long-term investment.</li> <li>Semiconductors are essential for national defense and security but face challenges due to outsourcing and supply chain issues.</li> <li>Intel aims for 100% renewable energy by 2030, net zero emissions by 2040, and distributed R&amp;D model with centers in Oregon, Arizona, etc.</li> <li>Energy consumption for IT infrastructure is around 3-5%, which could triple or quadruple due to AI.</li> <li>China's export policies have created a 10-year gap in chip technology advancement but will continue innovating.</li> <li>Overcapacity concerns are addressed by the growing demand for compute and AI capabilities.</li> <li>Human skill is essential in advanced manufacturing, as demonstrated by Intel's distributed R&amp;D model.</li> <li>Silicon Heartland aims to bring manufacturing back to the US heartland.</li> <li>Rebuilding the semiconductor industry is possible through industrial policy improvements.</li> </ol>"},{"location":"davos_2024/#a-conversation-with-hossein-amir-abdollahian-minister-of-foreign-affairs-islamic-republic-of-iran","title":"A Conversation With Hossein Amir-Abdollahian, Minister of Foreign Affairs, Islamic Republic of Iran","text":"<p>URL: https://www.youtube.com/watch?v=RDbWyC60oGM</p> <ul> <li>Iran claims Israel used missiles to attack two countries and Pakistan, causing outrage.</li> <li>Tensions in West Asia are increasing due to various conflicts and attacks.</li> <li>Iran condemns Israel for attacking Palestinians and ignoring UN resolutions on Palestinian rights.</li> <li>Yemenis and Iranians discuss the importance of maritime security, linking it to crises like Gaza.</li> <li>Iran doesn't support Israel's response to attacks on them; a democratic approach is needed for reinstating Palestinian rights with UN supervision.</li> <li>Iranian officials defend their actions as within security agreements with Iraq and Pakistan.</li> <li>No evidence of Iranian weapons used in Ukraine, condemning killing civilians in conflicts like Ukraine.</li> <li>Iran's oil exports are within international law; normalization of relations with Israel doesn't benefit some countries.</li> <li>The current administration aims to interact, cooperate, and collaborate with neighboring countries and all nations for regional security.</li> <li>To improve relations with the US, mutual respect is needed; Iran's commitment to the nuclear deal depends on reciprocation from the US.</li> </ul>"},{"location":"davos_2024/#resilience-what-it-means-and-what-to-do-about-it-davos-2024-world-economic-forum","title":"Resilience: What It Means and What to Do About It | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=L-HN9skCJYc</p> <ul> <li>Resilience can significantly impact the global economy, adding up to 15% to GDP while lack of it could cost 8%.</li> <li>Building resilience requires three pillars: leadership mindset and agenda, measurement, and collaboration.</li> <li>Pioneers in resilience play offense and defense simultaneously, think at multiple levels (entity, collaboration, individual), and maintain resilience through continuous practice.</li> <li>The EBRD supports countries in volatile situations while investing in future resilience. Resilience is crucial at individual, capability, and organizational levels.</li> <li>Private sector plays a key role in enhancing country resilience through structural reforms and supply chain diversification.</li> <li>Climate resilience is vital for accelerating green transition and financing adaptation.</li> <li>Governments should focus on significant structural reforms, engaging with private sectors, and providing safety nets to vulnerable populations.</li> <li>Lower-income countries need support to grow, with investments and job creation.</li> <li>African youth population growth presents both challenges and opportunities.</li> <li>African governments must focus on tax collection, institutional capacity building, and liberalizing FX markets.</li> <li>Addressing corruption is crucial for effective use of funds in developing economies.</li> <li>Increased debt transparency can help with restructuring efforts.</li> <li>Investing in productive sectors with infrastructure development is essential.</li> <li>Corruption remains a significant issue in Africa, hindering economic growth.</li> <li>Increased debt transparency can help with restructuring efforts.</li> <li>Certification of country-level sustainable plans could boost confidence for investors.</li> <li>Balancing offensive and defensive strategies is crucial for businesses.</li> <li>Scenario planning and individual resilience are essential for organizations.</li> <li>Avoiding overdiversifying supply chains to prevent inflation.</li> <li>Individual resilience can be a potential bedrock for the global economy.</li> <li>Concerns about the global debt situation and its impact on investment.</li> <li>Importance of public-private partnerships in addressing challenges like cybersecurity.</li> <li>Governments need to focus on structural reform, invest in human resources, and be proactive in dealing with shocks.</li> <li>Multilateral development institutions support low-income countries but expect them to help themselves.</li> <li>Borrowing at fixed rates and dealing with inflation through structural reforms, investment in human resources, and creating buffers can increase resilience.</li> <li>Governments should focus on being proactive to deal with shocks and ensure fiscal discipline.</li> <li>Multilateral development institutions support low-income countries but expect them to take responsibility for their own reforms.</li> <li>Insisting on fiscal discipline is crucial to avoid creating moral hazard in debt situations.</li> </ul>"},{"location":"davos_2024/#middle-east-conflict-what-is-the-endgame-davos-2024-world-economic-forum","title":"Middle East Conflict: What Is the Endgame? | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=EMvglf-8E5Q</p> <ul> <li>Middle East conflict and endgame discussed by panelists.</li> <li>Topics include conflicts in Yemen, Southern Lebanon, Syria, Iran's role, Israel's actions, regional strategy, Israeli actions in Gaza, and escalations.</li> <li>Concerns about Israeli actions in Gaza, humanitarian assistance, and developing a broader regional strategy.</li> <li>Groups attacking Israeli positions in the occupied Golan Heights lead to increased attacks on Syrian government positions and airports.</li> <li>Iran's role in the region, US involvement, and maintaining stability.</li> <li>Iran's position amidst changing alliances with Saudi Arabia and China.</li> <li>The Middle East's old order has fallen apart, leading to escalation and spread of conflict.</li> <li>Iran, Hezbollah, and Houthis aim to deny Israel and the US control over the region's future.</li> <li>Yemen's uncertain future with potential intensification of civil war.</li> <li>A two-state solution for Israel and Palestine remains the only viable option.</li> <li>US election impact on Middle East conflicts: Trump's relationship with Israel and Gulf leaders may not be a significant factor in the current situation.</li> <li>Iran's nuclear program escalation: Iran might be trying to spread conflict by focusing on other issues, but their goal is to have more leverage for future negotiations.</li> <li>Young person's perspective: Hope for peace and harmony among all people.</li> <li>Shift of power from global North to South: A former Iraqi ambassador believes President Biden should force Israeli withdrawal.</li> <li>Humanitarian issue for Palestinians: The end game for Palestinians is unclear as the focus remains on Israel's actions, with no clear solution in sight.</li> <li>Panelists suggest compromise and cooperation among nations.</li> <li>Global public opinion seen as an influential actor.</li> <li>Importance of considering regional security beyond specific conflicts.</li> </ul>"},{"location":"davos_2024/#360-on-ai-regulations-davos-2024-world-economic-forum","title":"360\u00b0 on AI Regulations | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=gu4tzrozmyY</p> <ul> <li>Discussing AI regulation from various perspectives</li> <li>Europe focuses on creativity and optimism in AI, aiming for global standards</li> <li>US prioritizes AI regulation, working towards harmonization with EU and China</li> <li>Singapore emphasizes infrastructure, capabilities, and international cooperation</li> <li>Diversity of approaches during the initial phase, leading to convergence over time (Singapore has been successful in working with various countries and is geopolitically savvy)</li> <li>AI governance involves infrastructure, enterprise capabilities, and international cooperation alongside regulations</li> <li>Divergence in AI regulation is expected during the initial phase as different governments focus on their own priorities</li> <li>Existing laws apply to AI, and new specific rules are being developed (European Union prioritizes individual rights and cybersecurity; US focuses on National Security and innovation)</li> <li>AI governance ensures that powerful technology is managed responsibly for the benefit of all (priorities for public sphere, fundamental rights, and safety)</li> <li>Regulation requires cooperation between public, tech, and research sectors</li> <li>AI's power necessitates effective governance to achieve aspirations like climate crisis solutions</li> <li>The Biden administration works closely with industry leaders while engaging various stakeholders</li> <li>A spectrum of regulatory approaches is needed for different areas and use cases (diverse approaches from top-down government control to voluntary frameworks)</li> <li>Power dynamics play a role in setting meaningful standards; the EU is investing heavily in technology development</li> <li>Governance models will be shaped by countries and business models of leading tech companies</li> <li>Adopters and those bringing AI to market will likely be the biggest winners in the future (collaboration between nations is essential for the development of AI)</li> <li>China has published guidelines on AI governance, focusing on consumer protection</li> <li>The US and China are engaging in discussions about AI, but there may be competition and decoupling in some areas</li> <li>Maintaining national security interests while remaining important trading partners is crucial for global engagement on AI (threading the needle in an environment where everything can be dual use)</li> <li>National security interests and global cooperation are essential in the complex world of AI</li> <li>Focus on people building AI systems and their decisions is key for effective governance (protect democracy from potential threats of AI manipulation through disinformation)</li> <li>Consider AI as augmented intelligence to serve human societies better</li> </ul>"},{"location":"davos_2024/#climate-and-nature-seed-capital-needed-davos-2024-world-economic-forum","title":"Climate and Nature: Seed Capital Needed | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=WmsNALUSe0E</p> <ol> <li>Climate change is a significant threat, with 2023 being the hottest year in modern history.</li> <li>To combat this urgent issue, radical system shifts are needed across various industries.</li> <li>The challenge lies in mobilizing more money for critical projects, aiming for $1 billion new pledges and ultimately reaching three trillion dollars annually by 2050.</li> <li>Global cooperation is crucial, treating climate change as a war-like effort.</li> <li>Discussions focus on funding clean energy solutions and persuading governments to invest in renewable technologies.</li> <li>The Inflation Reduction Act provides $369 billion for clean energy initiatives, potentially reaching a trillion with increased investment.</li> <li>Public-private partnerships and philanthropy play vital roles in accelerating climate action.</li> <li>Targets include a 43% reduction in emissions by 2030 and net zero by 2050.</li> <li>Climate philanthropy needs to increase beyond the current 2% of all philanthropic giving.</li> <li>Dubai's initiative aims to transition away from fossil fuels, accelerating efforts in this decade.</li> <li>Combined efforts are needed to address climate change, with philanthropy playing a crucial role.</li> <li>The Gaia program aims to mobilize smart capital for climate and nature interventions by 2030.</li> <li>Philanthropic funding is limited at around 1.5% of total giving but has potential for more investment.</li> <li>Practicality can sometimes hinder the allocation of funds, as institutions need to consider their constituents and returns on investments.</li> <li>The UN Green Climate Fund focuses on mobilizing capital from nation states and deploying it effectively.</li> <li>There is a need for hope and belief in the possibility of addressing climate change through innovative partnerships and investments.</li> <li>Great investment funds are crucial for returns and inventiveness.</li> <li>Mobilizing capital from nation states is challenging, but progress has been made in renewable energy investments.</li> <li>The need for scale requires more public and private collaboration.</li> <li>Private sector labs focus on guarantees, regulation, project pipelines, and working with large countries.</li> <li>GAA is important to bring significant investment and show returns.</li> <li>Examples of new opportunities include green hydrogen, green fertilizer, carbon capture, and addressing the hard-to-abate sector.</li> <li>Discussions at a conference focused on the need for more bankable projects and access to capital for developing countries.</li> <li>Institutions are hesitant to deploy large amounts of capital due to different reasons, such as philanthropies being too conservative or businesses having shareholders to answer to.</li> <li>Tamasic Trust committed $1 billion from partners worldwide to address climate challenges in Asia through capacity building, infrastructure development, and mentorship programs for entrepreneurs.</li> <li>COP28 highlighted the importance of inclusivity and multilateralism in tackling global issues.</li> <li>Businesses, investors, and philanthropists need to work together for profitability while addressing the climate crisis.</li> <li>Focus on practical ways of mobilizing more capital from various sources.</li> <li>Explore new financing structures and vehicles to unlock investment potential.</li> </ol>"},{"location":"davos_2024/#special-address-by-emmanuel-macron-president-of-france-davos-2024-world-economic-forum","title":"Special Address by Emmanuel Macron, President of France | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=3XEePuWki9s</p> <ul> <li>Discuss France's reforms and achievements over the past six years, including tax environment improvements, simplified processes in various sectors, investments in healthcare and education.</li> <li>European strategy led by France focuses on defense, energy, and economic governance, resulting in a more united and effective Europe.</li> <li>2 million jobs created, reindustrialization efforts, progress towards decarbonization goals.</li> <li>Upcoming events: D-Day Landings anniversary, Paris Olympics, Francophonie Summit, Notre Dame Cathedral reopening.</li> <li>Challenges include accelerating innovation, addressing inflation, and Europe's energy crisis.</li> <li>2024 is crucial for France with major events like the D-Day anniversary and Olympics.</li> <li>Prioritize a European agenda with more investment in key areas like defense, climate change, AI, and semiconductors.</li> <li>Renew social Europe by creating sustainable jobs and improving wages.</li> <li>Aim for greater sovereignty through self-sufficiency in critical areas such as intelligence, technology, energy, and defense.</li> <li>Promote a risk-sharing strategy with China to avoid overdependence on the US while maintaining cooperation.</li> <li>Invest heavily in climate change initiatives and AI regulation without compromising innovation.</li> <li>Discussions on European dependency, AI regulation, and Ukraine's NATO membership.</li> <li>Importance of education and talent for France's AI development.</li> <li>Need for a global approach to AI regulation with stress tests and design regulations.</li> <li>Proposal of bilateral security agreements between NATO members and Ukraine for protection without full NATO membership.</li> <li>Focus on carbon neutrality and sustainable power supply while considering the increasing energy demand of AI.</li> <li>France's strategy to reduce CO2 emissions includes reducing household consumption, changing cars, decarbonizing industries, and increasing nuclear capacity.</li> <li>Strategy for energy: focus on efficiency, nuclear power, and renewables; closing coal plants by 2027, increasing nuclear reactors, and investing in offshore wind.</li> </ul>"},{"location":"davos_2024/#the-economics-of-gender-parity-davos-2024-world-economic-forum","title":"The Economics of Gender Parity | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=PLSdUhk-JIE</p> <ul> <li>Discussing the importance of gender parity in the workplace and its impact on global economy.</li> <li>Panelists include Gabriela Sommerfield, Mike Henry, Anette Moskau Lassen, and Dr S Mulani Indravati.</li> <li>Need for quotas or reservations to improve female participation in workplaces and boardrooms.</li> <li>Ecuador's purple law empowers women with access to important decision-making positions.</li> <li>BHP Group set a gender balance target by 2025, leading to increased female representation from 16% to 35%.</li> <li>APG Asset Management supports diversity and believes in setting clear targets for improvement.</li> <li>Indonesia is working on improving women's participation in the workforce through education, financial access, and technology.</li> <li>Addressing supply and demand issues in woman participation is crucial.</li> <li>Investment firms should consider gender diversity in their portfolio managers and investments.</li> <li>Discussions on gender parity, maternity leave, and women's participation in the workforce.</li> <li>Need for more women in leadership positions to increase diversity.</li> <li>Investing in women entrepreneurs through funds like the one with ABPF (30 million Euros).</li> <li>Importance of communication and cooperation between government and private sector.</li> <li>Energy transition requiring a larger, skilled workforce with new skills.</li> <li>Focus on gender balance in new investments and training to create a more Equitable workforce.</li> <li>BHP focuses on gender balance in new mining investments by addressing equipment design, work practices, and culture.</li> <li>Indonesia's Minister Indra discusses the importance of digital technology for women during the pandemic.</li> <li>Role models and allies across industries are crucial for better representation.</li> <li>Digitalization can create opportunities for women in the formal sector.</li> <li>Financial inclusion, financial literacy, and effective role modeling are key to improving gender balance in the workforce.</li> <li>Tracking gender equality across supply chains can encourage companies to improve their practices.</li> <li>European legislation like CSDR focuses on double materiality and responsibility for the complete chain.</li> <li>Building a safe environment with zero tolerance for harassment is crucial for retaining female talent.</li> <li>Discussing strategies to increase female participation and representation in various industries.</li> <li>European perspective on gender parity, focusing on double materiality and responsibility for the complete chain.</li> <li>Role of male allies in building gender parity through creating inclusive environments and addressing unacceptable behaviors.</li> <li>Challenges faced in promoting diversity amidst polarization and political changes.</li> <li>Importance of a more inclusive culture for better business performance and higher economic opportunity.</li> </ul>"},{"location":"davos_2024/#special-address-by-pedro-sanchez-prime-minister-of-spain-davos-2024-world-economic-forum","title":"Special Address by Pedro S\u00e1nchez, Prime Minister of Spain | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=9h1qZdXgb7Q</p> <ul> <li>Addressing global challenges, including an immediate ceasefire in Ukraine and Gaza for security and stability.</li> <li>Emphasizing the importance of governing artificial intelligence to protect fundamental rights.</li> <li>Focus on prosperity for citizens by tackling issues affecting middle and working classes.</li> <li>Combating injustice while progressing technologically requires efforts towards prosperity for all.</li> <li>Creating a new paradigm of prosperity that combines economic growth, environmental sustainability, and equality.</li> <li>Spain's success in creating wealth while improving workers' conditions demonstrates the possibility.</li> <li>Collaboration between private sector, government, and civil society is crucial for building a prosperous model.</li> <li>European leaders must focus on competitiveness and ecological transition to face challenges like climate change and digital transformation.</li> <li>Discussing the enlargement process, reforming institutions, and passing from unanimity to qualified majority decisions are essential.</li> <li>A more federal and integrated European Union is expected in the future.</li> <li>Openness to Western Balkans' integration and gratitude towards Spain and Portugal for their leadership in EU expansion.</li> <li>Commitment to supporting Ukraine and Moldova's accession process.</li> </ul>"},{"location":"davos_2024/#town-hall-how-to-trust-economics-davos-2024-world-economic-forum","title":"Town Hall: How to Trust Economics | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=xEksn1afRdk</p> <ul> <li>Trust in economics stands at 48%, with global inequalities being a major concern.</li> <li>Christine Lagarde highlights the shift from efficiency to security focus, prioritizing areas like climate change, energy supply, and supply chains.</li> <li>Michael Sandel believes the economic system is unjust and unfair but not inevitable; he advocates for a more egalitarian society through wealth redistribution.</li> <li>The role of government in addressing inequality and promoting fairness is discussed.</li> <li>Efficiency has been replaced by security concerns, affecting climate change, energy supply, and supply chains.</li> <li>Economists should consult with other experts to improve their models.</li> <li>The Washington consensus led to a frictionless global capitalism that failed to deliver on its promises; economic arrangements need debate and decision.</li> <li>Arrogance and tribalism in economics have contributed to the current situation, leading to populist backlash against elites and inequality.</li> <li>Climate change raises concerns about economic and social impacts, with longer summer seasons.</li> <li>Diversity in economics and intellectual perspectives is crucial for progress; central banks should promote diversity through hiring based on merit, setting targets, and ensuring accountability.</li> <li>AI and technological advancements may disrupt jobs but could also augment them.</li> <li>Addressing climate change requires a global effort with cooperation between nations and industries.</li> <li>Trust in economics can be improved by considering it as a branch of moral and political philosophy; new models should be based on complex, well-organized economic evidence.</li> <li>Evidence-based policy making is essential for effective policymaking, but simplified models are not useful.</li> <li>The relationship between democracy and the current economic system is discussed, along with concerns about the return of politics and citizens' involvement in decision-making.</li> <li>Discussions on the need for a new economic system, trust in economics, expanded government role, public investment, addressing global issues like inequality and environmental disasters are included.</li> <li>The impact of globalization on development and poverty reduction is considered, along with understanding data limitations when predicting future events.</li> <li>Acknowledgement that economics is inherently difficult due to uncertainty about the future.</li> </ul>"},{"location":"davos_2024/#special-address-by-javier-milei-president-of-argentina-davos-2024-world-economic-forum","title":"Special address by Javier Milei, President of Argentina | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=Pfcd0gWNIog</p> <ol> <li>Free enterprise capitalism has led to significant economic growth and reduced poverty.</li> <li>Social justice is an unfair concept as it's funded through coercion, hindering the market discovery process.</li> <li>Countries with more freedom are 12 times richer than repressed ones, with lower poverty rates.</li> <li>Libertarianism promotes unrestricted respect for others and focuses on individual rights.</li> <li>Successful entrepreneurs contribute to society by offering better goods and services at a better price.</li> <li>Free market capitalism has lifted 90% of the world out of extreme poverty.</li> <li>Libertarianism focuses on respecting life, freedom, and property rights.</li> <li>Neoclassical economic theory leads to state intervention and socialism.</li> <li>Market failures are due to coercion by the state, not market mechanisms.</li> <li>Socialist agendas lead to more state intervention and less freedom.</li> <li>The West must fight against harmful ideas to prevent poverty and loss of freedoms.</li> <li>Collectivism leads to greater regulation and downward spiral of poverty.</li> <li>Socialists changed agenda from class struggle to new conflicts, causing more state intervention.</li> <li>Neo-Marxists co-opt media, universities, and international organizations for influence.</li> <li>Western countries are moving towards socialism through different names or guises.</li> <li>Freedom, economic growth, limited government, and respect for private property are essential for prosperity.</li> <li>Argentina's experience shows that hindering free markets leads to poverty regardless of wealth or resources.</li> <li>Business people should not be intimidated by the political class; they are social benefactors and heroes.</li> <li>The state is the problem, not the solution; individuals should focus on creating prosperity through better products and services.</li> </ol>"},{"location":"davos_2024/#a-conversation-with-antony-blinken-united-states-secretary-of-state-davos-2024-wef","title":"A Conversation with Antony Blinken, United States Secretary of State | Davos 2024 | WEF","text":"<p>URL: https://www.youtube.com/watch?v=sQaK9PRaa48</p> <ul> <li>Secretary of State Anthony Blinken discusses the evolving situation in the Middle East.</li> <li>Technology has both empowered groups to cause trouble for nation states and presents opportunities for regional integration and security.</li> <li>A transformed Palestinian Authority is needed to deliver services effectively and operate in a permissive environment with Israel's support.</li> <li>The time frame for this process could be one to three years or even a 10-year plan.</li> <li>There's an urgent need for leaders to adopt new mindsets, as the previous challenge was Arab and Palestinian leaders not preparing their people for change. Now it's about Israeli society being prepared to engage in these discussions.</li> <li>A permissive environment for peace in the Middle East requires support and cooperation.</li> <li>Palestinians are working on improving governance to deliver essential services.</li> <li>The timeframe for progress is 1-3 years, but a 10-year process may be needed.</li> <li>Addressing the current human tragedy in the region is crucial.</li> <li>Engaging with all parties involved and rebuilding partnerships is vital for effective leadership.</li> <li>Responding to attacks on international shipping is necessary while avoiding escalating conflicts.</li> <li>Tearing up the Iran nuclear agreement was a mistake, leading to increased challenges.</li> <li>Discussing the complexities of global issues, including Iran's nuclear deal and the Israeli-Palestinian conflict.</li> <li>Emphasizing the importance of fighting dehumanization and finding ways to diffuse it in various situations.</li> <li>Ukraine joining the EU is crucial for its people's aspirations and a better future.</li> <li>Despite challenges, Putin has failed in his initial goals regarding Ukraine, making Russia weaker overall.</li> <li>Russia's aggression in 2014 led to a decline in ties with Ukraine.</li> <li>Despite challenges, Ukraine has regained control of over 50% of its territory.</li> <li>Putin's actions have weakened Russia militarily, economically, and diplomatically.</li> <li>Ukraine is working on becoming self-reliant militarily, economically, and democratically.</li> <li>Negotiations for a stable long-term ceasefire are possible if Russia engages in good faith.</li> <li>The US relationship with China is complex but strengthened due to increased global cooperation.</li> <li>Relationship with China is complex and crucial for many countries. Stabilizing the relationship with China is a priority, ensuring competition doesn't lead to conflict. Cooperation on issues like fentanyl production was achieved through agreements with China.</li> <li>India is seen as an example of success and pluralism, but concerns about Hindu nationalism are raised.</li> <li>Taiwan's democracy is praised, and maintaining peace and stability in the region is crucial for global commerce and semiconductor manufacturing. The US supports maintaining the status quo between China and Taiwan, with no change through force.</li> <li>Diplomacy has become more complex due to technology democratization and information accessibility. AI can help solve global issues like climate change and energy needs. Cooperation is vital for solving problems; new partnerships should be formed for specific purposes. The US aims to lead by example, engaging in variable geometry to address challenges.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-bisher-hani-al-khasawneh-prime-minister-of-the-hashemite-kingdom-of-jordan","title":"A Conversation with Bisher Hani Al Khasawneh, Prime Minister of the Hashemite Kingdom of Jordan","text":"<p>URL: https://www.youtube.com/watch?v=0vCw92CeXog</p> <ul> <li>Jordan's Prime Minister discusses the Gaza conflict, highlighting Israel's actions not meeting international law standards for self-defense.</li> <li>Jordan supports a comprehensive ceasefire and humanitarian aid to Gaza.</li> <li>King of Jordan hosts meetings with international agencies to improve humanitarian assistance.</li> <li>Jordanian Armed Forces provide medical supplies through air drops in Gaza.</li> <li>Jordan is committed to comprehensive peace and the two-state solution, working on improving humanitarian aid but acknowledging it's not enough.</li> <li>The Palestinian issue needs resolution for regional stability.</li> <li>Jordan will react if there are material violations of the 1994 Accord with Israel.</li> <li>Focus should be on a clear path and political horizon towards peace.</li> <li>Jordan's objective is to achieve comprehensive peace, resolve the Israeli-Palestinian conflict, and rely on serious partners for progress.</li> <li>Trust from both sides is crucial for progress towards a two-state solution.</li> <li>The current situation in Gaza is horrific; violence must end.</li> <li>Palestinian leadership should focus on reorganizing internal structures and governance.</li> <li>Regional escalation risks deepening flashpoints, especially in the West Bank due to unchecked settler violence.</li> <li>Iranian activity and non-state actors use the current situation for propaganda purposes.</li> <li>Continued violence could lead to deeper radicalization and endanger global peace and stability.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-pham-minh-chinh-prime-minister-of-viet-nam-davos-2024-world-economic-forum","title":"A Conversation with Pham Minh Chinh, Prime Minister of Viet Nam | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=zDGP3FX1YHA</p> <ol> <li>Vietnam's long-term vision focuses on digitalization, AI, and green transition as top priorities.</li> <li>Institutional development, infrastructure, and human resources are crucial for growth.</li> <li>Key lessons from Vietnam's journey: independence, people making history, national unity, combining national strength with the times, and right decisions for the people.</li> <li>Advice to other developing countries: adopt a multilateral approach, consider people in decision-making processes, focus on resources, reform, and people.</li> <li>Vietnam balances relations with the US and China through historical context and respecting differences.</li> <li>The country aims to reach net zero emissions by 2050 while addressing climate change challenges.</li> <li>AI development involves data, infrastructure, incentive policies, and human resource capacity building.</li> <li>Striving to become a technology powerhouse with foreign investment and R&amp;D centers.</li> <li>Building trust, hope, and determination for success stories like Samsung and Nvidia's investments in Vietnam.</li> </ol>"},{"location":"davos_2024/#securing-an-insecure-world-davos-2024-world-economic-forum","title":"Securing an Insecure World | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=py4xpGmlUYU</p> <ul> <li>Concerns over regional security and freedom of navigation in the Red Sea.</li> <li>Focus on deescalation, particularly in Gaza, to end suffering and prevent further escalations.</li> <li>Germany's foreign minister emphasizes the need for a sustainable ceasefire, addressing issues like children being held hostage by Hamas.</li> <li>International Community should work together to find solutions and support peace efforts.</li> <li>Discussions on ceasefire, humanitarian access to Gaza, and freeing hostages are ongoing.</li> <li>Two-state solution is seen as a way forward for peace and security.</li> <li>Addressing the situation requires cooperation from all involved parties.</li> <li>International players must find solutions while considering the rights of both Israelis and Palestinians.</li> <li>Majority support for Hamas is not above 50%, and the situation in Gaza is worsening.</li> <li>A two-state solution with Arab countries guaranteeing Israel's security is still possible, but conditions on the ground must improve.</li> <li>Iran provides resources to Russia, making the world more dangerous.</li> <li>The time for a sustainable ceasefire requires real changes and significant investment.</li> <li>There is general agreement on peace and security for both Israelis and Palestinians, with a path towards regional peace.</li> <li>US-China relationship will depend on the outcome of the presidential election; President Biden made progress in reducing military risks.</li> <li>Intensely linked with peace and security for Palestinians.</li> <li>Regional peace includes peace for Israel, but it can only happen through a Palestinian State.</li> <li>Ceasefire should be the starting point towards permanent sustainable peace.</li> <li>US-China relationship: Positive steps taken to reduce fentanyl production, but concerns over economic zones and freedom of navigation.</li> <li>Need for cooperation on climate change, pandemics, and research while competing in technology.</li> <li>Global South-North reconciliation: Collective practice of democratic values and democratization of UN Security Council.</li> <li>NATO's role: Transatlantic Alliance addressing global threats; China's relationship with the West should be based on cooperation and dialogue.</li> <li>Russia's war on Ukraine has led to significant losses, affecting its economy and political standing.</li> <li>Supporting Ukraine is crucial for maintaining security and peace.</li> <li>Continued military aid to Ukraine may increase the likelihood of a peaceful resolution.</li> <li>NATO Secretary General discusses the impact of Russia's war on Ukraine, including economic and military consequences.</li> <li>The importance of increasing support for Ukraine to encourage diplomacy is emphasized.</li> <li>Finland shares its history of \"Finlandization\" and the need for self-determination in conflicts like Palestine.</li> <li>Diplomacy and dialogue are highlighted as crucial for resolving global issues, such as those in Gaza, Ukraine, and other regions.</li> </ul>"},{"location":"davos_2024/#a-conversation-with-prime-minister-and-minister-of-foreign-affairs-of-qatar-davos-wef","title":"A Conversation with Prime Minister and Minister of Foreign Affairs of Qatar | Davos | WEF","text":"<p>URL: https://www.youtube.com/watch?v=7A9Nm_KxzHQ</p> <ul> <li>Qatar's Prime Minister discusses the complex geopolitical landscape and its impact on global trade.</li> <li>Concern over further escalation in the Red Sea, affecting international shipping.</li> <li>Focus on addressing central issues rather than symptoms.</li> <li>International community should not ignore attacks on international shipping but military solutions won't contain them.</li> <li>Dialogue with Iran is necessary for regional stability and economic growth.</li> <li>Political solution needed to rebuild Gaza without a new donor conference.</li> <li>Relationships between Iran, Saudi Arabia, and UAE discussed.</li> <li>Dialogue with Iran is important for GCC countries to focus on common interests.</li> <li>Challenges in rebuilding Gaza after the 2014 war due to lack of political solution.</li> <li>Need for two-state solution and addressing Palestinian division.</li> <li>Hamas' role in representing Palestinians should be considered.</li> <li>Discussing the possibility of a two-state solution for Israel and Palestine.</li> <li>Need for international recognition and support in resolving the issue.</li> <li>Hamas' role is part of Palestinian politics, and their inclusion depends on the people's choice.</li> <li>Acknowledging the challenges faced by the Palestinian Authority and the need to empower them.</li> <li>The importance of security guarantees for Israel in a two-state solution.</li> <li>Qatari development: $200 billion invested in infrastructure, national champions created.</li> <li>Government role shifting to enabler for private sector growth.</li> <li>Focus on reforming policies and regulations to boost businesses.</li> <li>Preparing workforce for future needs.</li> <li>Mediation central in foreign policy, contributing to global peace and security.</li> <li>Proven track record of successful negotiations in conflicts worldwide.</li> </ul>"},{"location":"davos_2024/#chief-economists-briefing-davos-2024-world-economic-forum","title":"Chief Economists Briefing | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=CnFF7zlUf-o</p> <ul> <li>Global economy outlook is uncertain, with 56% of chief economists expecting a weakening in 2024.</li> <li>IMF forecasts global growth decline to 2.9% in 2023 and an average of 3.1% over the next five years.</li> <li>Strongest growth expected in South Asia, East Asia, and Pacific regions (except China). Europe's outlook weakens significantly. US and Middle Eastern North African regions see moderate growth; Latin America and Sub-Saharan Africa experience slight improvements.</li> <li>Factors affecting the global economy include fiscal policy, domestic growth, trade, and political events such as the US election.</li> <li>Concerns about demographics and energy costs creating headwinds for some regions. Focus on a soft landing for the global economy with growth around 3%.</li> <li>Latin America's importance in trade with China and its potential impact on elections. Geopolitical fragmentation accelerating, leading to higher capital costs and regionalization of industries.</li> <li>AI expected to increase efficiency in high-income economies but less so for developing ones; job displacement concerns in certain sectors like data conversion. Nearshoring and reshoring may require robotics and cobots, creating new opportunities.</li> <li>The challenge lies in ensuring the benefits of AI reach everyone while protecting those left behind. Discussing the impact of AI on jobs, productivity, and inflation. Optimism about AI growth and its potential to enhance productivity in developed economies. Concerns over job displacement due to AI's ability to perform tasks like data conversion better than humans. The need for new roles in industries affected by AI advancements. Inflation becoming more moderate but prices still higher than before; policy makers should consider inflation as a tool and not an enemy. Central banks managing to contain damage to inflation expectations. Caution when easing policy during tight labor markets.</li> <li>Bright spots in global economy: India, Mexico, green growth, AI &amp; sustainability innovations.</li> </ul>"},{"location":"davos_2024/#the-high-rate-reality-davos-2024-world-economic-forum","title":"The High Rate Reality | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=Znr15tcMrBo</p> <ul> <li>High rate reality is the new normal, with central banks more cautious about running the economy hot.</li> <li>Inflation has come down faster than expected, but labor markets remain tight.</li> <li>Policy rates may be higher compared to post-GFC times due to increased supply shocks and focus on preventing inflation.</li> <li>Transmission of rate hikes is happening gradually, with stronger balance sheets and resilient economies.</li> <li>Soft landing scenarios have a higher probability as inflation comes down without significant economic activity loss.</li> <li>Slowdown is happening at a more gradual pace, increasing the likelihood of a soft landing.</li> <li>Inflation has decreased without significant economic loss, making it extraordinary.</li> <li>Monetary policy played a role in achieving a soft landing by anchoring inflation expectations and preventing spillovers from energy shocks to goods and services inflation.</li> <li>High interest rates may be necessary for the future, but they shouldn't exceed current levels.</li> <li>The European Central Bank (ECB) estimates their star rate at around zero, leading to an average real rate of around zero through the cycle.</li> <li>Transmission effects from monetary decisions to financial conditions and then to the real economy are difficult to assess.</li> <li>Markets anticipate future rate cuts, but starting too early could be a concern for central banks.</li> <li>Inflation is expected to moderate, leading to stable or lower cost of capital.</li> <li>Investors gain confidence in valuations due to improved business models.</li> <li>The IPO market could open up again with 85 companies filing for NASDAQ listing.</li> <li>Tech companies with strong earnings and revenue growth drive market performance.</li> <li>Central banks' actions may affect longer-term resilience, potentially impacting deal making.</li> <li>Cisco's recent acquisitions show the importance of considering interest costs in M&amp;A decisions.</li> <li>High interest rates are affecting M&amp;A decisions, making companies more cautious about their financial health.</li> <li>Private sector valuations may be inflated, and deals at these high valuations might not happen.</li> <li>Central banks focus on inflation and financial conditions, aiming for a soft landing.</li> <li>The cost of finance has decreased significantly, making it easier for companies to access funds.</li> <li>Central banks face challenges in ensuring a soft landing due to recent market exuberance.</li> <li>Long-term trends like supply chain diversification and sustainability efforts may contribute to inflation.</li> <li>Higher interest rates and fiscal deficits affect growth and governments' ability to react to crises.</li> <li>Consistent policy mix between monetary and fiscal policies is crucial for a soft landing.</li> <li>Fiscal responsibility during election years is challenging, but necessary for long-term stability.</li> <li>Discussions on how to pay for everything without issuing large amounts of debt.</li> <li>Fiscal policy inconsistency and the need for governments to be fiscally more conservative.</li> <li>Easy money can lead to corruption, and low interest rates may not return to previous levels.</li> <li>Central bankers will likely be wary about hitting the pedal to the floor due to inflation concerns.</li> <li>Quantitative easing should be used cautiously in deep recessions or market dysfunction situations.</li> <li>Panelists agree that easy money era is over; focus on fair money.</li> <li>Policy makers should be cautious about timing mismatches in interest rates.</li> <li>IMF's role in helping countries develop green supply chains and trade agendas.</li> <li>Private sector is already moving towards sustainability, while economists are more optimistic this year.</li> <li>Speaker is part of Global Shapers and World Bank.</li> <li>IMF launched a multi-thematic fund for Public Finance Partnership (GPF).</li> <li>Focus on domestic resource mobilization in emerging/developing economies.</li> <li>Private sector is already adapting to climate change.</li> <li>Economists are more optimistic about the future.</li> </ul>"},{"location":"davos_2024/#a-special-address-by-jake-sullivan-united-states-national-security-advisor-davos-2024","title":"A Special Address by Jake Sullivan, United States National Security Advisor | Davos 2024","text":"<p>URL: https://www.youtube.com/watch?v=ZkyVWENhjY4</p> <ul> <li>Addressing global issues such as the UN Charter, aggression in Middle East and Red Sea, Iranian backed Houthis, Israeli-Palestinian conflict.</li> <li>Focus on creating a pathway to normalization and integration with regional partners for peace and security.</li> <li>Managing competition with China through diplomacy, revitalizing alliances, and protecting critical technologies.</li> <li>Investing in the US economy to create jobs, increase wages, and strengthen recovery.</li> <li>Partners joining efforts to address global challenges.</li> <li>Regulate specific outbound investments in technology, focusing on advanced semiconductor manufacturing tools and chips.</li> <li>Tailored measures not a technology blockade; aim to ensure security and democracy.</li> <li>Investments in infrastructure, clean energy transition, and international economic partnerships.</li> <li>Focus on solving problems of today, building resilience, and promoting good governance.</li> <li>Worried about geopolitical tensions but optimistic about global cooperation.</li> <li>Concerned about the situation in the Red Sea; a global challenge requiring an all-hands-on-deck effort.</li> <li>Nearly 30 attacks have caused a global crisis, with the UN Security Council condemning them and calling for action.</li> <li>A coalition of countries took strikes to degrade Houthi capabilities, but they didn't end all attacks.</li> <li>The US is focused on managing escalation across the Middle East and working towards diplomacy and deescalation.</li> <li>The Biden Administration aims to generate normalization with a political horizon for two states in Israel and Palestine.</li> <li>Discussions about supporting Ukraine militarily are ongoing, but details remain behind closed doors.</li> <li>Conference discusses ongoing support for Ukraine, both financially and militarily. EU is working on resuming support in weeks.</li> <li>Discussions about providing more advanced weapons to Ukraine.</li> <li>Focus on delivering necessary resources to Ukraine.</li> <li>Transition from post-Cold War era to a new one with strategic competition among major powers.</li> <li>Emphasis on investing in the US and allies for effective competition and global problem solving.</li> <li>Need for political will to address challenges like climate change and Middle East crisis.</li> </ul>"},{"location":"davos_2024/#humanitarian-briefing-on-gaza-davos-2024-world-economic-forum","title":"Humanitarian Briefing on Gaza | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=iV5YH4WNbQU</p> <ul> <li>Secretary General of the International Federation of Red Cross and Red Crescent Society discusses Gaza's humanitarian crisis.</li> <li>Healthcare facilities not working or facing power supply issues, leading to food and water shortages.</li> <li>Mental health challenges for staff and volunteers due to loss of family members.</li> <li>Access and safety concerns for workers remain significant.</li> <li>Trucks carrying goods from Egypt face long distances and security clearance issues at Rafa border.</li> <li>UNICEF: 100 days into conflict, over 23,000 people killed, 59,000 injured; 70% deaths are women and children.</li> <li>Water crisis in Gaza: 1 to 2 L per person daily for all needs; critical threshold is 3 liters.</li> <li>Food situation: 70% population in IPC 3 food insecurity (crisis), 50% in Category 4, and 25% in Cat 5.</li> <li>Urgent collective action needed to address the crisis for children.</li> <li>Four R's required for humanitarian aid: reach, respect, resources, and release of abducted children.</li> <li>Palestinian private sector proposes specific requests to improve the situation.</li> <li>Losses and damage to schools, healthcare facilities, and municipal wash facilities.</li> <li>Need for peace, funding, and resources for children.</li> <li>Difficulty in reporting the crisis accurately through media; social media influences political decisions.</li> <li>The World Economic Forum addresses Palestinian crisis through dialogue and platform for leaders.</li> <li>Humanitarian ceasefires crucial for delivering aid and ensuring safety of communities and aid workers.</li> <li>Representatives from Palestine and Israel discuss their roles in conflict, hoping for a more productive role.</li> <li>Advocating for humanitarian ceasefire to alleviate suffering and ensure safety for all involved.</li> </ul>"},{"location":"davos_2024/#first-movers-for-frontier-clean-technologies-davos-2024-world-economic-forum","title":"First Movers for Frontier Clean Technologies | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=f4k-teaqLVI</p> <ol> <li>John Kerry emphasizes the importance of climate action and the role of First Movers Coalition, which has grown from 20 companies to over 100 in two years with a total commitment of $16 billion.</li> <li>Companies are making significant changes in their supply chains, such as switching to low carbon or zero carbon sources for shipping fleets.</li> <li>Market forces can drive change, and Kerry encourages more businesses to join the coalition.</li> <li>The First Movers Coalition (FMC) is driving transformation through commitments, with Singapore focusing on low carbon ammonia and aviation innovation.</li> <li>Governments can act as catalysts and enablers for low carbon technologies and markets.</li> <li>Shipping companies are working towards zero carbon transportation in the industry, requiring various solutions for different shipping segments.</li> <li>Collaboration with governments, international entities, and other industries is crucial to accelerate the transformation.</li> <li>FMC members aim to accelerate efforts towards net zero emissions.</li> <li>Ball Corporation invests in green energy and recycled content aluminum production, while Vattenfall collaborates with various industries for fossil fuel free steel and other sustainable solutions.</li> <li>Public policy support is needed for value chain collaboration, innovation, and long-term investments.</li> <li>Fossil free steel can be made affordable with minimal impact on car prices, but regulatory consistency is crucial to maintain a low premium and ensure sustainability.</li> <li>Banks should focus on risk diversification rather than pouring subsidies into technologies.</li> <li>Current policy focuses too much on supply side, neglecting demand side signals; carbon pricing needs to be widespread for all emissions.</li> <li>Businesses can influence policymakers by highlighting inconsistencies in current policies and collaborating with like-minded partners.</li> <li>Governments should work together to establish common standards and platforms for green initiatives.</li> <li>Develop a common platform with interoperable taxonomy and standards for carbon credits, green hydrogen, and rules of origin.</li> <li>Ensure these standards prevent greenwashing and untrustworthy transactions.</li> <li>Collaborate with like-minded partners to work on regional grids and visibility studies.</li> <li>Accelerate progress in building a low or zero-carbon economy through smart public policies.</li> <li>First movers can demonstrate that it's good business, avoiding higher premiums and market disruptions; the goal is for everyone to become a mover, eventually putting first movers out of business.</li> </ol>"},{"location":"davos_2024/#when-climate-impacts-your-health-davos-2024-world-economic-forum","title":"When Climate Impacts Your Health | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=N5MKCctDRM4</p> <ol> <li>Climate change significantly affects human health globally, requiring urgent action to reduce emissions and safeguard wellbeing.</li> <li>The World Economic Forum's climate and health initiative aims to address the issue by allocating more funding for protecting and improving human health.</li> <li>Research projects focus on understanding the effects of climate change on pregnant agricultural workers, fungal pathogens, and mental health.</li> <li>Governments must prioritize mitigation and adaptation strategies to protect communities and reduce the human cost of climate change.</li> <li>Brazil and the United States face severe climate impacts on public health infrastructure and mental health.</li> <li>COP28 focused on climate and health, pledging $1 billion for funding adaptation efforts.</li> <li>110 ministries of Health signed the Climate and Health Ministerial Declaration; however, more action is needed to accelerate progress.</li> <li>Mitigation and adaptation are crucial in reducing health sector carbon contributions and addressing vulnerability and inequality.</li> <li>Examples of climate-resilient innovations include short stature corn and direct seeded rice.</li> <li>Building resilient Health Systems requires collaboration between sectors, focusing on equality, and developing Science and Technology programs for sustainable solutions.</li> <li>Climate change impacts various industries beyond health, including construction, energy, and transportation; the National Academy is working to gather evidence and build consensus on these effects.</li> <li>Discussions emphasized the need for collaboration between different sectors, involving Civil Society in global health systems, improving agriculture and food security, and prioritizing research and data collection.</li> </ol>"},{"location":"davos_2024/#generative-ai-steam-engine-of-the-fourth-industrial-revolution-davos-2024-world-economic-forum","title":"Generative AI: Steam Engine of the Fourth Industrial Revolution? | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=vQUPfmxQhzI</p> <ul> <li>AI is transforming various industries and countries.</li> <li>Governments should embrace AI to maintain competitiveness, with the UAE as an example of effective proactive regulation.</li> <li>Adoption of AI is happening across all industries, focusing on coding, customer service, and digital labor.</li> <li>Embracing AI can lead to increased productivity and job security; those who don't may face challenges in their respective fields.</li> <li>By 2030, AI is expected to generate $4 trillion in annual productivity.</li> <li>Coding, customer service, and digital labor are areas impacted by AI.</li> <li>The need for accelerating AI adoption lies in accessing data and computing power.</li> <li>Consumer applications like smartphones will have AI assistants predicting user behavior.</li> <li>Legal and regulatory frameworks should be prepared for the changes brought by AI.</li> <li>The US Senate focuses on National Defense, healthcare, and economy regarding AI integration with industry leaders.</li> <li>UAE strategy: Build a responsible AI nation while addressing ignorance in government.</li> <li>Leadership understanding of AI technology is crucial for successful implementation.</li> <li>Emphasis on talent development and reskilling ensures a smooth transition with AI advancements.</li> <li>Healthcare and other industries can benefit from advanced technology.</li> <li>Cutting Edge infrastructure allows for faster data processing and deployment.</li> <li>Regulation is crucial to ensure responsible use of AI, with more regulation for riskier use cases.</li> <li>Talent development is essential for the success of AI, as it will create new jobs but require reskilling.</li> <li>Digital technology is hard to contain within a physical boundary, making it challenging to regulate.</li> <li>Intellectual property protection is vital for innovation and competition.</li> <li>Discussions on AI development, regulatory frameworks, and intellectual property protection are ongoing.</li> <li>Importance of open platforms for innovation in the industry.</li> <li>Need to adapt skills for future generations in a world with generative AI.</li> <li>UAE's initiatives to increase awareness and education about AI.</li> <li>South Dakota focuses on cyber security and AI education for rural communities.</li> <li>The importance of learning and continuous upskilling in the age of AI.</li> <li>Companies should encourage employees to learn critical thinking skills and participate in fun challenges using AI platforms.</li> <li>Collaboration between governments, companies, and educational institutions is crucial for responsible deployment of AI.</li> <li>A billion dollars is invested annually in training, emphasizing the need for upskilling.</li> <li>AI impacts white collar work and requires critical thinking skills.</li> <li>Continuous learning is crucial due to shorter skill half-lives.</li> <li>Companies can encourage hands-on experience with AI through challenges and competitions.</li> <li>AI democratizes technology by making it accessible on various devices.</li> <li>AI is considered the steam engine of the fourth Industrial Revolution, transforming industries like healthcare.</li> </ul>"},{"location":"davos_2024/#special-address-by-volodymyr-zelenskyy-president-of-ukraine-davos-2024-world-economic-forum","title":"Special Address by Volodymyr Zelenskyy, President of Ukraine | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=1_paj2xzgGE</p> <ol> <li>Ukrainian President discusses the war's impact on global peace and calls for a decisive end to the conflict.</li> <li>Emphasizes sanctions against Russia, support for Ukraine's defense, and ending Putin's aggression.</li> <li>Highlights investing in peace while ensuring sanctions work effectively.</li> <li>Proves Ukraine can hit valuable Russian military aircraft; discusses sanctions and export controls on missile production.</li> <li>Aims for peace to end the war in Ukraine, focusing on economic growth and EU accession negotiations.</li> <li>Held a Global Peace Summit with 80 countries and international institutions.</li> <li>Mentions Russian losses: over 300,000 soldiers, half of their tanks, and Black Fleet ships.</li> <li>Discusses the future of Putin's leadership in Russia and the importance of democracy.</li> <li>Ukraine fulfills reforms faster than before the war, showcasing strength and ability to reform state.</li> <li>EU and US support for Ukraine with concerns about time taken.</li> <li>Ukrainian strength in war and reforms despite challenges.</li> <li>Importance of justice and support from other countries.</li> <li>Focus on rebuilding economy through investments and employment opportunities.</li> </ol>"},{"location":"davos_2024/#special-address-by-ursula-von-der-leyen-president-of-the-european-commission-davos-2024","title":"Special Address by Ursula von der Leyen, President of the European Commission | Davos 2024","text":"<p>URL: https://www.youtube.com/watch?v=VXtVb4WWwUg</p> <ol> <li>President Urela Ferion highlights the significance of collaboration between governments and businesses in tackling global challenges.</li> <li>Ukraine's EU membership negotiations show Europe's response to Russia's invasion, marking a historic achievement.</li> <li>European energy resilience has improved due to well-functioning markets, openness, and increased investment in clean energy technologies.</li> <li>The European Green Deal focuses on reducing emissions and promoting a strong competitive presence in the clean energy economy.</li> <li>Progress in energy resilience: Europe is making strides in clean energy transitions.</li> <li>AI presents a significant opportunity if used responsibly; Europe has an edge in industrial data and AI talent.</li> <li>The European Artificial Intelligence Act aims to build trust by regulating high-risk cases.</li> <li>Strengthening democracies and protecting them from risks is crucial for businesses' freedom.</li> <li>Drisk (de-risk) concept: Europe wants to diversify supply chains, trade agreements, and manufacturing capacities with multiple partners while maintaining cooperation with China in areas like decarbonization.</li> <li>G7 and EU member states have adopted the idea of focusing on collaborative efforts in areas like green economy, supply chains, and diversifying trade agreements.</li> <li>Addressing issues with China's export controls.</li> <li>Reducing overdependence on each other.</li> <li>Emphasizing the importance of European values in context to Ukraine.</li> </ol>"},{"location":"davos_2024/#welcoming-remarks-and-special-address-davos-2024-world-economic-forum","title":"Welcoming Remarks and Special Address | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=5xS5IoyoGqg</p> <ul> <li>54th Annual World Economic Forum meeting with 3,000 participants from 125 countries</li> <li>Complex geopolitical and economic backdrop necessitates cooperation between public and private sectors</li> <li>Challenges include security, economy, climate change, cyber threats, and potential new pandemics</li> <li>Trust is vital for collaboration and long-term strategic solutions</li> <li>Rebuilding trust through stewardship, sustainability, empathy, and cross-border cooperation</li> <li>Swiss President Bola Ardin emphasizes the importance of restoring mutual trust in the global community</li> <li>Open and transparent dialogue between nations and organizations is crucial</li> <li>Strengthen UN and other international institutions to facilitate dialogue</li> <li>Genuine compromises are necessary, especially in ecological transitions</li> <li>Address fake news and promote transparency through digitalization</li> <li>Businesses should focus on social equality and cohesion</li> <li>Switzerland can contribute by providing good offices, engaging in dialogue, and working towards solutions as a UN Security Council member</li> </ul>"},{"location":"davos_2024/#the-crystal-awards-2024-davos-world-economic-forum","title":"The Crystal Awards 2024 | Davos | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=OFXowEU6DSg</p> <p>Error</p>"},{"location":"davos_2024/#press-conference-ukrainian-delegation-on-outcomes-of-national-security-advisor-meeting","title":"Press Conference: Ukrainian Delegation on Outcomes of National Security Advisor Meeting","text":"<p>URL: https://www.youtube.com/watch?v=P1U-JT-8eDM</p> <ul> <li>Fourth meeting of National Security advisers on Ukraine's peace formula took place in Davos.</li> <li>Discussions focused on implementing the peaceful formula and addressing food security issues.</li> <li>Countries involved are working towards concrete plans to improve food security, such as demining Black Sea, providing insurance for vessels, anti-missile systems, and increasing food aid.</li> <li>Ukraine's Presidential team believes they will win the war and hopes for continued Western support despite concerns about potential changes in political situations.</li> <li>Discussions on Ukraine's war efforts, personnel, and weapons. Importance of international support for peace. Efforts to involve China in the peace process. Expanding relations with various countries worldwide. Focus on future cooperation and rebuilding after the war. Mentioned disagreements but no specifics provided.</li> <li>Ukraine is developing relationships with various countries, focusing on respecting independence and territorial integrity. There are disagreements about the peace formula, but Ukraine emphasizes its goal of ending the war and rebuilding. Ukraine faces pressure from allies to offer compromises, particularly regarding Crimea's immediate restoration. The United States is frustrated with the lack of progress in Ukraine's military strategy for 2024. No one has pressured Ukraine about conceding territory through negotiations. Negotiations can end wars depending on political will and goals.</li> <li>No context: no specific details provided about a Global Peace Summit or whether Ukraine's peace formula is realistic and achievable. The goal of the peaceful formula is to unite responsible countries that respect international law and chapter of United Nations. Russia has not achieved their goals, and negotiations may happen in the future.</li> </ul>"},{"location":"davos_2024/#press-conference-federal-councillor-ignazio-cassis-on-nsa-meeting-for-a-ukrainian-peace-process","title":"Press Conference: Federal Councillor Ignazio Cassis on NSA Meeting for a Ukrainian Peace Process","text":"<p>URL: https://www.youtube.com/watch?v=7hy_9qGdqJc</p> <ul> <li>Inyu press conference discusses the 10-point peace formula for Ukraine.</li> <li>Switzerland organizes National Security advisor meetings with various countries to promote peace and humanitarian aid, aiming to create an International Alliance beyond Europe including global South and China.</li> <li>Achievements include 83 nations participating in the process and developing a common language to discuss the peace formula.</li> <li>Western financial support for Ukraine remains crucial amidst changing circumstances.</li> <li>National Security advisors are working on a common understanding of 10 points, aiming to prepare for peace negotiations with Russia.</li> <li>The purpose is not to please Russia but to create a foundation for future discussions.</li> <li>Switzerland is actively involved in various initiatives related to the conflict, including humanitarian assistance and food safety efforts.</li> <li>The ultimate objective is to end the war, despite territorial disagreements between Ukraine and Russia.</li> <li>Collective momentum from 83 countries participating in the process could potentially influence peace negotiations.</li> <li>Three working groups are supervising efforts on food safety and humanitarian assistance.</li> <li>A meeting is scheduled to discuss the situation in Ukraine, with a focus on ending the war.</li> <li>Russia isn't willing to make concessions, but both sides need to talk for progress.</li> <li>Switzerland focuses on humanitarian demining of Ukraine, allocating 400 million Swiss Francs.</li> <li>Global South countries are involved in the peace process, with China playing a crucial role.</li> <li>Neither Russia nor Ukraine is considering territorial concessions.</li> <li>Influential countries like Russia and China play crucial roles in global issues.</li> <li>Cooperation with China is essential for progress, but it's a challenging path.</li> <li>Superpowers act as mediators, while smaller countries provide good services.</li> <li>The Security Council of the United Nations may not be the best place to discuss territorial concessions.</li> <li>Discussions and proposals are ongoing to find solutions for conflicts.</li> </ul>"},{"location":"davos_2024/#europes-rush-to-innovate-davos-2024-world-economic-forum","title":"Europe's Rush to Innovate | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=RoxAUdU24CU</p> <ul> <li>Europe excels in science and research but struggles to fully capture its economic output.</li> <li>Investment in research and innovation is crucial for competitiveness, with a funding gap of 100 billion euros annually compared to other regions.</li> <li>Key areas for improvement include access to finance, scaling up, and talent retention.</li> <li>Risk-taking and reducing red tape can help foster entrepreneurship and attract more talent.</li> <li>Completing the European single market in financial and labor sectors could boost competitiveness.</li> <li>Europe has strong talent in science and research but needs better support.</li> <li>Investment in R&amp;D is crucial for innovation and attracting talent.</li> <li>Public-private partnerships are essential for success.</li> <li>European countries should focus on combining basic science with applied science.</li> <li>Regulation should allow for experimentation and failure.</li> <li>Maintaining European talent: Improve migration laws, offer a single labor market, and reward talent.</li> <li>Funding for R&amp;D: Focus on areas where Europe has leadership positions and scalability. Encourage venture capital and startups.</li> <li>Culture of failure: Embrace experimentation and learn from failures to foster innovation.</li> <li>European Talent Initiatives: Create a researcher passport, reduce bureaucracy, and make countries more attractive for talent.</li> <li>Funding for R&amp;D is crucial, especially in European corporations.</li> <li>Public and private funding should be combined to support innovation.</li> <li>Europe needs a better financial system for risk-taking.</li> <li>AI and high-performance supercomputing are important areas of research.</li> <li>The European Innovation Agenda aims to address funding gaps and regulatory frameworks.</li> <li>Efforts must continue to simplify regulations and make programs more user-friendly.</li> <li>Accelerating innovation through experimental phases and providing more opportunities for companies to test and scale.</li> <li>Increasing regulatory sandboxes initiatives, such as deep Tech Talent, but acknowledging the need for continuous efforts, especially in simplifying regulations.</li> <li>Research funding is good, but focus should be on scaling up and manufacturing. Public-private partnerships are crucial for innovation.</li> <li>International cooperation with countries like the US and Asian nations is important to tackle global challenges.</li> <li>Simplify access to public funding for research while maintaining academic freedom and institutional autonomy.</li> <li>Increasing openness and promoting associations is a priority.</li> <li>Addressing vulnerabilities in research and innovation sectors, while protecting intellectual property.</li> <li>Simplifying public funding access and reducing bureaucracy.</li> <li>Focus on evaluating final results of projects rather than administrative procedures.</li> <li>Horizon Europe to have simplification and less reporting requirements.</li> </ul>"},{"location":"davos_2024/#energy-amid-rivalry-davos-2024-world-economic-forum","title":"Energy Amid Rivalry | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=NxugA3CgOOM</p> <ul> <li>Global energy focus on rivalry and achieving goals.</li> <li>European Commission aims for 20% renewable energy by 2030, prioritizing savings and carbon removals in future targets.</li> <li>Inflation Reduction Act (IRA) in the US focuses on domestic competitiveness and climate agenda with a trillion dollars in investments planned.</li> <li>Business leaders are impressed by both European and American approaches to energy transition, focusing on hydrogen and new technologies.</li> <li>Collaboration between countries and industries is crucial for carbon neutrality goals.</li> <li>Internal debates in the US regarding climate policies, particularly around hydrogen.</li> <li>Partners and allies see protectionism rather than progress in these policies.</li> <li>Business leaders emphasize diverse approaches to carbon neutrality, including traditional technologies for developing economies.</li> <li>European Union aims to create partnerships with other countries for resources like hydrogen and critical raw materials.</li> <li>US focuses on IRA legislation benefits, hoping it will be less politicized over time.</li> <li>Climate finance is crucial for the developing world's energy transition, aiming to build competitiveness in clean energy industries.</li> <li>Disproportionate benefits expected in Red States, with climate change affecting everyone.</li> <li>Focus on helping developing countries by building competitiveness in clean energy industry.</li> <li>Encourage long-term investments and consistent innovations.</li> <li>India's fast-growing economy requires sustainability without compromising basic welfare.</li> <li>Pragmatic approach to handle new challenges, focusing on availability, affordability, and sustainability in energy consumption.</li> <li>European Union promotes fuel switch and renewable energy sources.</li> <li>Concerns about resource distribution and development in raw material producing countries.</li> <li>Need for international standards and agreements to ensure fair access to resources.</li> <li>Addressing the need for diversifying raw material suppliers and ensuring sustainable development.</li> <li>Role of international schemes to secure raw material development in emerging countries.</li> <li>Importance of providing clean energy access to millions worldwide.</li> <li>Need for advanced technology, green energies, and carbon dioxide emission reduction.</li> </ul>"},{"location":"davos_2024/#men-women-pathways-to-equity-davos-2024-world-economic-forum","title":"Men, Women, Pathways to Equity | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=xqiaQPN-qM4</p> <ul> <li>Joseph Fowler, Head of Arts and Culture at the World Economic Forum, emphasizes the importance of women's stories in history.</li> <li>He founded Women of the World (Wow) Festival to showcase these stories, with an inclusive approach for both men and women.</li> <li>The festival features workshops on fatherhood and gender equality, highlighting the crucial role of fathers in shaping their children's lives.</li> <li>Fowler believes in fighting for a better world and showcases examples such as soldiers protecting events like WOW from hostile actions.</li> <li>Men's role as fathers is vital in shaping daughters' lives; notable examples include Helena Kennedy, the Nigerian woman, Malala Yousafzai, Indira Gandhi, and Clara Schumann.</li> <li>Fathers should encourage their sons to embrace equality and respect women as equals.</li> <li>The festival aims to create a more equal society by addressing power imbalances between genders and empowering single mothers in raising daughters with equal opportunities.</li> </ul>"},{"location":"davos_2024/#on-the-frontlines-for-nature-davos-2024-world-economic-forum","title":"On the Frontlines for Nature | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=5SFTc2UJk30</p> <ol> <li>Conservation efforts in Africa and Latin America focus on protecting wildlife, ecosystems, and indigenous communities.</li> <li>Virunga National Park in DRC protects 3,000 square miles, providing clean water to 300,000 people and electricity to a city. However, it faces challenges like poaching and armed conflict.</li> <li>The Amazon Sacred Headquarters Alliance protects 35 million hectares of tropical rainforest, working with indigenous communities to preserve their knowledge.</li> <li>Challenges include environmental destruction, extreme poverty, and violence in the Congo, which affect local communities' survival and energy sources.</li> <li>Conservation efforts must address these issues by providing alternative energy sources from national parks, creating jobs, and reducing conflict.</li> <li>Indigenous communities work together with non-indigenous groups to protect their forests and promote sustainable practices.</li> <li>Yasuni National Park's referendum kept oil in the ground, stopping drilling and restoring the area. A bioregional plan aims to permanently protect headwaters and promote bioeconomy.</li> <li>The Sacred Headwaters Fund supports indigenous organizations implementing these plans.</li> <li>Transforming economic systems from extractive to regenerative flourishing bioeconomies is crucial for sustainable development.</li> <li>Education, policy, and indigenous involvement are key factors in achieving this goal. The Living Amazon School trains the next generation of indigenous leaders.</li> <li>Combining modern knowledge with traditional wisdom is essential for effective governance and development. Reforestation and natural economy should be prioritized over industries like mining and oil.</li> <li>Engaging young people and promoting sustainable practices are necessary to create a better future. Invest in reforestation, education, and focus on sustainable use of resources for economic viability.</li> </ol>"},{"location":"davos_2024/#satellites-as-storytellers-davos-2024-world-economic-forum","title":"Satellites as Storytellers | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=3I-4xh_vP8M</p> <ul> <li>1,000+ Earth observing satellites monitor our planet's vital signs.</li> <li>Carbon dioxide levels are at 400 parts per million; the Arctic heats faster than the rest of the world.</li> <li>Ocean temperatures absorb most carbon and play a major role in Earth's systems.</li> <li>Greenland and Antarctica hold 99% of the world's freshwater, with melting ice contributing to sea level rise.</li> <li>Virtual reality experiences allow users to explore Earth's vital signs and take action on climate change.</li> <li>Global warming causes issues like melting glaciers and rising sea levels.</li> <li>Earth Mission Control provides a VR platform using AI and machine learning for disaster prediction.</li> <li>Investors focus on commercializing Earth observation data to mitigate climate issues.</li> <li>Yellowstone's recovery from wildfires highlights the importance of Earth observation data.</li> <li>Commercialization requires large government buyers (G20) and addressing local needs.</li> <li>Capella Space uses synthetic aperture radar for nighttime imaging, helping monitor global issues like climate change.</li> <li>MIT Media Lab develops an immersive design tool to educate people about Earth's challenges and empower them to take action.</li> <li>Focus on highlighting polar regions and local impacts.</li> <li>Discussions on commercialization of telecoms, navigation, and Earth observation.</li> <li>Importance of trusted data, citizen science, and open source projects.</li> <li>Overview effect: sharing the perspective of Earth with everyone.</li> <li>Increasing availability of Earth observation data sets for AI use cases.</li> <li>Space debris problem: not currently a major issue but needs global cooperation to prevent it from becoming out of control.</li> <li>The Zero Debris Charter has been adopted recently to address the issue.</li> </ul>"},{"location":"davos_2024/#the-right-stuff-a-new-relationship-with-materials-davos-2024-world-economic-forum","title":"The Right Stuff \u2013 A New Relationship with Materials | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=F5SOcTOWkqM</p> <ul> <li>The built environment plays a crucial role in achieving Net Zero and improving quality of life.</li> <li>Innovation in the industry includes lighter structures, reduced cement usage, increased steel use, and collaboration between organizations.</li> <li>Decarbonizing building materials like cement and concrete is essential through low carbon formulation, decarbonized energy, and CCUS projects.</li> <li>Reinventing concrete for circularity and efficiency can reduce material consumption while maintaining strength.</li> <li>Reducing the carbon footprint in construction materials, operations, and end-of-life management is vital for Net Zero transition.</li> <li>Prefabrication can help reduce the carbon footprint by up to 16%.</li> <li>Data collection and transparency are crucial for better decision-making in the industry.</li> <li>Circularity is a game changer with recycled content reducing cement footprints.</li> <li>Confidence building in circular construction through recycled materials is necessary.</li> <li>Transparency in chemical industry and material composition is vital.</li> <li>Labor implications of new construction practices and materials must be considered.</li> <li>Affordability is crucial for sustainable construction, especially in developing countries.</li> <li>Experimentation with alternative materials like recycling urban waste can contribute to sustainability.</li> <li>Making low carbon concrete accessible at scale is essential for affordable housing.</li> <li>Policy challenges and coordination between industries are necessary for progress.</li> <li>Designing self-sufficient buildings can make them affordable and energy efficient.</li> <li>Creating policy frameworks to address affordability is crucial for sustainable housing.</li> <li>Performance-based codes allow local industries to innovate while ensuring energy efficiency and water savings.</li> <li>Incentives, such as giving more floor space for meeting performance-based codes, encourage innovation in the construction industry.</li> <li>Municipalities can improve their ability to handle rapid Innovation by using third parties to check building permits.</li> <li>Material passports are important for tracking the value of materials and end-of-life processes.</li> <li>The private sector recognizes the demand for innovation in sustainable building materials.</li> <li>Municipalities struggle with adopting new technologies due to outdated government systems.</li> <li>Solutions include licensing engineering companies, material passports, and initiatives like Davos Alliance.</li> <li>Procurement plays a crucial role in accelerating green market adoption.</li> <li>The global South faces challenges with informal settlements requiring innovative materials for resilience.</li> <li>Innovation should focus on affordability and accessibility for those who need it most.</li> <li>Finance industry's role in shifting investments towards sustainable construction is significant.</li> <li>Better awareness and education on environmental issues are necessary.</li> <li>Children as ambassadors for change can shape future generations.</li> </ul>"},{"location":"davos_2024/#transforming-energy-demand-davos-2024-world-economic-forum","title":"Transforming Energy Demand | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=otWHrSbTpc8</p> <ul> <li>Transforming energy demand is crucial for economic growth, climate alignment, and security.</li> <li>120 countries pledged to double global average annual rate of Energy Efficiency improvements at COP28.</li> <li>Standards, electrification, and increased investments in Energy Efficiency are key actions needed.</li> <li>Technology can help reduce CO2 emissions by 70% with current solutions.</li> <li>Renewing existing infrastructure can have a two to three-year payback period.</li> <li>By 2050, there will be 10 billion people on Earth, with 2 billion more than today.</li> <li>The chemical industry is working to decarbonize and improve energy efficiency.</li> <li>A Japanese company reduced its energy usage by a 3 years' payback period through renewal and solar rooftop installation.</li> <li>Policy makers should focus on affordable energy, simplified regulations, and promoting innovation.</li> <li>Mahindra Group achieved 95% energy productivity in auto production and 87% in farm equipment.</li> <li>Collaboration with Johnson Controls is sharing technology to reduce energy usage in buildings.</li> <li>Energy efficiency is crucial for reducing emissions and increasing renewables.</li> <li>Businesses can take action in three areas: energy-efficient equipment, process changes, and supply chain collaboration.</li> <li>Awareness of energy consumption and available choices should be increased to encourage incremental savings at scale.</li> <li>Partnerships between public and private sectors are essential for policy changes that accelerate efficiency improvements.</li> <li>Digitizing facilities can help create visibility and identify areas for improvement.</li> <li>Companies should have a commercial interest in implementing energy-efficient measures, with the potential for competitive edge.</li> <li>Importance of energy efficiency and competitiveness.</li> <li>Need for standards, government support, and coordination among ministries.</li> <li>High energy prices driving change in energy efficiency policies.</li> <li>Competitiveness crucial for regions with different resources.</li> <li>Emerging countries can lead the way in energy usage.</li> <li>Culture change within organizations key to successful implementation of energy efficiency measures.</li> <li>Supporting ecosystem for heavy industry with renewable energy.</li> <li>Emerging markets and developing economies can lead in energy efficiency, like India's LED lighting program.</li> <li>Governments play a crucial role in pushing industries to adopt cleaner practices.</li> <li>Balancing challenges require demand response solutions, flexible energy sources (nuclear power), and efficient grid management.</li> <li>Focus on both energy consumption reduction and renewable energy efficiency.</li> <li>Nuclear power is making a comeback, with focus on investment in the grid and energy efficiency.</li> <li>Renewable energy sources need to be efficient and accessible for countries to invest in them.</li> <li>Emerging markets require reasonable financing options for renewable investments.</li> <li>COP28 should address clean energy financing for developing countries.</li> <li>Energy savings are crucial, with $2 trillion of economic benefits from reduced energy usage.</li> <li>Collaboration and sharing best practices can help achieve energy efficiency goals.</li> </ul>"},{"location":"davos_2024/#mainstreaming-ecopreneurs-davos-2024-world-economic-forum","title":"Mainstreaming Ecopreneurs | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=AdqSyBJwZX8</p> <ol> <li>Ecopreneurship focuses on addressing climate change and sustainability issues through business models.</li> <li>LGT Venture Philanthropy invests in impact investing, including a dedicated climate fund.</li> <li>Real Hotel Group launched Hong Kong's first carbon neutral hotel and invests in Green Tech Ventures.</li> <li>Alphat Trio Capital empowers solutions that tackle environmental challenges through technology.</li> <li>Asia needs to increase its involvement in impact investing with 17% of total AUM dedicated to it.</li> <li>The School for Sustainability addresses scale issues by focusing on cross-disciplinary knowledge and accelerator approach.</li> <li>Entrepreneurs must create cheaper, better, faster solutions to transition the economy within the next 20-30 years.</li> <li>Solving food industry's greenhouse gas emissions requires focus on grid scale storage, food production, and other sectors.</li> <li>Ecopreneurs can help with the transition by creating innovative solutions using technology.</li> <li>Land Life Restoration restores nature at scale through tech and local efforts.</li> <li>Uplink connects ecopreneurs to discuss ideas and collaborate on solving global challenges.</li> <li>Carbon markets play a crucial role in addressing climate change, but more focus on quality and transparency is needed.</li> <li>AI can help reduce emissions by improving energy efficiency in various sectors through smart solutions.</li> <li>Metaverse projects explore carbon neutral hotels using AI to educate customers on sustainability during travel.</li> <li>Culture influences behavior and promotes sustainability, with indigenous cultures offering valuable lessons.</li> <li>Advanced technology like Planet Labs' hyperspectral imaging helps create precise carbon markets.</li> <li>Scaling up requires strong management teams, capital availability, and building execution capabilities.</li> <li>Entrepreneurs should maintain the same effort and dedication for small and large projects to achieve growth.</li> </ol>"},{"location":"davos_2024/#musical-chairs-europe-in-the-new-global-economy-davos-2024-world-economic-forum","title":"Musical Chairs: Europe in the New Global Economy | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=iPuCcm6SrBA</p> <ul> <li>Europe faces economic challenges, with the US recovering from the crisis faster.</li> <li>European companies lag in adopting new technologies and are often in luxury businesses.</li> <li>To improve competitiveness, Europe needs better coordination between Brussels and member states, less overregulation, and a supportive environment for innovation.</li> <li>There's an investment gap of \u20ac174 billion for EU's 2030 targets on Next Generation Network deployment.</li> <li>European countries need to recognize the changing economic landscape and work towards addressing shortcomings.</li> <li>Politicians should focus on identifying mistakes and finding solutions for a more competitive future.</li> <li>Incentivizing high-risk R&amp;D investments is crucial for fostering innovation.</li> <li>Regulation should be reconsidered, focusing on relevant markets and competition policies.</li> <li>Harmonization of regulations across Europe can help create a single market and support the growth of European Champions in key sectors.</li> <li>Financial sector integration is essential for Europe's future.</li> <li>Learn from the US's approach to promoting sustainable economies with incentives and subsidies.</li> <li>Create a unified European agenda to achieve technological leadership.</li> </ul>"},{"location":"davos_2024/#353m-refugees-at-a-critical-junction-davos-2024-world-economic-forum","title":"35.3m Refugees at a Critical Junction | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=gxJoZ13kwRU</p> <ul> <li>35.3 million refugees and 114 million displaced people worldwide</li> <li>Complex causes of flight, including conflict, persecution, discrimination, violence</li> <li>Importance to maintain distinction between refugees and other migrants for human rights reasons</li> <li>Focus on long journeys of those moving, creating opportunities along the way</li> <li>Private sector can play a key role in addressing refugee issues through partnerships and innovation</li> <li>Kakuma refugee camp context: 200,000 refugees, challenges with infrastructure and connectivity; Global Shapers Hub established to support economic lives and contributions of refugees</li> <li>Moving is crucial for addressing global challenges, particularly in the refugee context</li> <li>Refugees often face restrictions on their right to work, but countries like Uganda have more inclusive policies</li> <li>Giving refugees the right to work is associated with higher income, better well-being, and improved health outcomes</li> <li>Businesses can play a key role in supporting refugees through partnerships and knowledge sharing</li> <li>Political narratives about refugees moving to rich countries are distorted; only 0.1% of Kakuma's population moved on to rich countries irregularly in a year</li> <li>Countries that signed and ratified the 1951 Convention have more inclusive economic policies towards refugees</li> <li>Refugees who can work or engage in entrepreneurship experience higher income, better mental health, and improved physical health outcomes</li> <li>The critical juncture is different for each context and community; solutions include addressing issues at their source and supporting refugees' agency</li> <li>In many countries, crises affect individuals and communities for a long time; Turkey has received 4 million Syrian refugees, creating challenges and opportunities</li> <li>Education, employment, health care, and social protection are crucial for refugees; businesses can contribute by providing tools and services to these communities</li> <li>Reskilling and upskilling refugees is essential in the digital age; women play a significant role in addressing refugee issues; they should be empowered through education and employment opportunities</li> <li>Employment and social protection are crucial for supporting vulnerable populations; agency and power play a significant role in discussions about refugees, employment, and protection</li> <li>Businesses can contribute by reskilling and upskilling refugees, particularly women, to meet current workforce needs</li> <li>Migration issues affect both low-income and middle-income countries, requiring efforts to change the narrative around migrants' impact on local communities; misinformation is a challenge in development issues, and it's essential to highlight the potential and resilience of refugees and IDPs while emphasizing global accountability for these communities</li> </ul>"},{"location":"davos_2024/#brazils-sustainable-transformation-davos-2024-world-economic-forum","title":"Brazil's Sustainable Transformation | Davos 2024 | World Economic Forum","text":"<p>URL: https://www.youtube.com/watch?v=_kna-bfM0Mc</p> <ol> <li>Brazil is committed to environmental sustainability and sustainable development, focusing on areas like reducing logging, promoting renewable energy, and preserving conservation areas.</li> <li>Energy transition is a significant focus for the country, with plans to double solar and wind capacity.</li> <li>Healthcare plays an important role in the transition process, emphasizing mitigation and adaptation strategies.</li> <li>Brazil will host COP 30, aiming to accelerate sustainability efforts globally through climate and environmental initiatives.</li> <li>Discussions on interdependency of health and industrialization are underway, focusing on integrating industry with services.</li> <li>The Health Complex in Brazil aims to mitigate climate change effects while promoting sustainable development.</li> <li>COP 30 will focus on accelerating sustainability processes worldwide.</li> <li>Brazil's G20 presidency provides an opportunity for energy transition, emphasizing fairness and balance.</li> <li>The country is advancing in decarbonization with 88% clean and renewable energy, aiming to develop green products for export.</li> <li>Health Ministry cooperates with other ministries on sustainability issues, focusing on the environment and health connection.</li> <li>G20 presidency allows for investment in energy transition and low carbon economies.</li> <li>Brazil has 88% clean and renewable energy, with plans to invest in green energy production.</li> <li>Health is a key focus during the G20 agenda, focusing on climate change and health, preparation, equity in health, and digital health.</li> <li>Brazil's proposals are well received by financial markets, investors, and multilateral organizations.</li> <li>A $20 billion climate fund for sustainable investments is being established to support bioeconomy and agricultural production improvements.</li> <li>Brazil's financial market is well received, with a focus on investments and social commitments.</li> <li>Climate fund initiative aims to provide $20 billion for sustainable investment in areas like bioeconomy.</li> <li>G20 presidency focuses on reducing CO2 emissions, fighting inequality, and sharing technological advances.</li> <li>Brazil wants to use G20 as an opportunity to showcase a new inclusive economy that can change the planet.</li> <li>Health should be seen in a more encompassing political vision, with focus on environmental justice and overcoming inequality in innovation and technology.</li> </ol>"},{"location":"goto_FE/","title":"goto FE","text":""},{"location":"goto_FE/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ol> <li>Storybook is a popular frontend development tool for UI workflows, helping with component isolation and testing.</li> <li>Version 7.0 focuses on workflow improvements and bug fixes.</li> <li>Compatible with major frameworks like React, Angular, Vue, and Lit.</li> <li>Helps developers work faster and with confidence by rendering components in isolation.</li> <li>Storybook 7.0 introduces CSF3 (Component Story Format) for portable syntax across frameworks.</li> <li>Testing features include interaction tests, visual debugging, assertions, time travel debugging, and a test runner for CI integration.</li> <li>Documentation is done using MDX and Doc blocks with AutoDoc for generating documentation from existing stories.</li> <li>Figma integrations offer add-on designs package, plugin for live view, and better design collaboration.</li> <li>Improved support for frameworks like NextJS, Svelte, and SolidJS.</li> <li>Ecosystem CI ensures daily testing of storybook variations and automation for easier upgrades.</li> <li>Use MPX Storybook to initialize new projects or upgrade existing ones.</li> </ol>"},{"location":"goto_FE/#programming-the-web-with-hyperlang-hypercli-mike-amundsen-goto-2023","title":"Programming the Web with HyperLANG &amp; HyperCLI \u2022 Mike Amundsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vcjOzcxIBdY</p> <ul> <li>Hyper CLI is a tool inspired by 40-year-old technology, hypercard, allowing users to program one machine.</li> <li>It's a repurposed curl with memory, more advanced and capable of handling formats like HTML, JSON, and forms.</li> <li>The DSL for programming the web is called hyper Lang, which can inspect and manipulate responses from websites.</li> <li>Hyper Lang is a low code/no code tool that simplifies programming without sacrificing functionality.</li> <li>It uses a natural and understandable DSL inspired by Flomatic and Cobalt.</li> <li>The tool can run tests on APIs with configuration files for different environments.</li> <li>Using HTTP as an interface enables interaction with various services, promoting easy changes and adaptability.</li> <li>Hyper Lang supports multiple industries' APIs through HTTP interactions.</li> <li>Roy Fielding's work focuses on creating a stable internet system that adapts to change.</li> <li>Demonstrates using HTTP for CRUD operations in services, handling different formats like SOAP through extensions or plugins.</li> <li>A tool handles various authentication methods like SOAP, OAuth, and basic auth with a simple scripting language called Hyper Ling.</li> <li>Plugins are automatically loaded during startup, making them convenient but potentially dangerous due to the use of eval statement.</li> <li>Future improvements include hardening code, modularization, better error handling, and more plugin support.</li> <li>Potential for domain-specific languages (DSLs) and integration with other programming languages.</li> <li>Focus on HTTP, event-driven challenges, security enhancements, more plugins, and OS integration.</li> </ul>"},{"location":"goto_FE/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ol> <li>Stephanie Stimac's book, \"Design for Developers,\" teaches developers the basics of design to improve communication and collaboration with designers.</li> <li>The goal is to help developers identify issues in user interfaces and fix them efficiently without wasting resources or time.</li> <li>Design smartness is emphasized, where developers learn about design concepts but don't become experts, allowing for better teamwork with designers.</li> <li>The book covers topics like typography, color theory, layouts, and user experience to help developers build polished designs.</li> <li>It also highlights the importance of designers learning about development and vice versa.</li> <li>The approach is flexible depending on the context of work.</li> <li>The book covers design fundamentals, research, UX design, web layout, typography, color theory, testing, and iteration.</li> <li>Color theory is an interesting aspect of design, considering psychology, cultural connotations, and accessibility concerns.</li> <li>Browser extensions or developer tools can help identify colorblindness issues.</li> <li>Understanding individual and collective perceptions plays a role in design preferences.</li> <li>Valid reasons should be behind feedback rather than personal preferences.</li> <li>Design should cater to the target audience, not just stakeholders' opinions.</li> <li>The book discusses the importance of understanding color theory and its application in designing effective experiences.</li> <li>Collaboration between different roles in product development is crucial for better products and more effective teamwork.</li> <li>Stephanie Stimac offers design services, talks on dual-screen design, PWAs, and consults as a designer, product manager, and developer advocate.</li> <li>Her website has contact information for reaching out.</li> </ol>"},{"location":"goto_FE/#simplifying-dev-environments-with-the-right-tools-christian-heilmann-julian-wood-goto-2022","title":"Simplifying Dev Environments with the Right Tools \u2022 Christian Heilmann &amp; Julian Wood \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=o0bYu0HVjNU</p> <ol> <li>Chris Heilmann discusses his work on developer tools in Microsoft's Edge browser, focusing on improving efficiency and accessibility for all developers.</li> <li>VS Code is an example of a lightweight, interchangeable tool that can be used across different environments. Developers should use web technologies for their tools to make them more flexible and mixable.</li> <li>Breaking down the monolithic idea of IDEs and debugging tools will lead to better developer experiences. Lightweight IDEs and tools are desired, with VS Code as an example.</li> <li>Improving UX/UI for developers is crucial. Interfaces should learn from user behavior and contextual tooling is essential for efficiency. Simplifying interfaces and reducing feature creep is important.</li> <li>Exposing different services within IDEs can be beneficial. Discussions on improving developer tools and interfaces include machine learning-aided autocompletion in coding, such as GitHub Copilot and Amazon CodeWhisperer.</li> <li>The importance of contextual tooling for developers is highlighted, along with the potential for machine learning to learn from a user's development style and improve code quality.</li> <li>The role of code generation as an assistant rather than writing the code itself is mentioned. The possibility of evolving team standards through consistent usage of these systems is also discussed.</li> <li>CodeWhisperer from Amazon uses comments to generate code samples based on the user's intent, while GitHub Copilot explains code in natural language. Live analysis in IDEs provides real-time feedback on code quality.</li> <li>The focus should be on improving development tools and making them more accessible for everyone. Suggestions include integrating design tools like Figma into web development to reduce redundancy, considering various user needs (accessibility, low bandwidth situations), and learning through teaching others and sharing knowledge.</li> </ol>"},{"location":"goto_FE/#developer-tools-that-shouldnt-be-secrets-christian-heilmann-goto-2022","title":"Developer Tools That Shouldn't Be Secrets \u2022 Christian Heilmann \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lz-nUdotdx4</p> <ol> <li>Developer tools are available in all major browsers, offering various features for web development.</li> <li>Focus mode allows users to view one tool at a time, making navigation easier.</li> <li>Command menu (Ctrl+Shift+P) is powerful for accessing features without navigating through menus.</li> <li>Themes can be changed using command lines, customizing the developer tools' appearance.</li> <li>Console log is popular for debugging purposes and styling output.</li> <li>Developer tools are built with web technologies, allowing inspection of their source code.</li> <li>Use console log for debugging and styling output.</li> <li>Dollar sign ($) is a shortcut for query selector in the document.</li> <li>Put curly braces around variables to differentiate them from strings.</li> <li>Use different logging levels (info, warning, error) to filter console messages.</li> <li>Console table displays information about elements in an organized manner.</li> <li>Console count shows how many times a function was called.</li> <li>Copy command: Copy any console output without highlighting, useful for sharing snippets.</li> <li>Monitor events: Observe specific events on elements without adding event handlers.</li> <li>Live expressions (ISR): Display JavaScript expressions in the console without affecting other code.</li> <li>Device mode: Test responsive design, emulate different devices, and simulate slow connections.</li> <li>Media queries: View them in device mode to test designs on various screen sizes.</li> <li>Rulers: Measure pixel distances for pixel-perfect designs.</li> <li>Throttling: Simulate slow connections or low-end devices to check app performance.</li> <li>Developer tools offer accessibility features like locking info bars and inspecting web page elements.</li> <li>Breakpoints can be set in the debugger to monitor changes in website content.</li> <li>A note screenshot feature allows users to take a screenshot of paused video elements, potentially bypassing copyright restrictions.</li> <li>Developer tools are useful for exploring and manipulating websites in various ways.</li> <li>Elements tool lets you take screenshots of streaming media content, but it's not recommended.</li> <li>Sources tool provides access to all website documents and allows editing them locally.</li> <li>Lock points enable console logging in third-party JavaScript without accessing source code.</li> <li>Overrides let you load local files instead of server ones for testing purposes.</li> <li>Snippets are useful for saving frequently used code snippets, automating tasks, and sharing scripts among developers.</li> <li>Developer tools offer various features such as Flexbox visualization, color adjustments, and a changes tool for tracking file edits.</li> <li>Local servers can be used to edit files in Visual Studio Code.</li> <li>DevTools for Visual Studio Code helps developers make local changes that reflect in their source code.</li> <li>SAS integration follows Source maps for changes.</li> <li>Live analysis highlights errors and offers quick fixes.</li> <li>Inspecting developer tools is possible through a command.</li> <li>Contributions can be made by joining GitHub repositories.</li> <li>Dear console tool extracts image names from webpages.</li> <li>Developer tools are available in most browsers, allowing exploration of the web.</li> </ol>"},{"location":"goto_FE/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ul> <li>Dream software stack: JavaScript, serverless, global infrastructure</li> <li>Dino: JavaScript framework for professional developers with TypeScript integration, standard library, third-party modules, browser compatibility, and self-contained binaries</li> <li>Demo: Pulling in Express npm module and creating a simple app using Dino</li> <li>Dino Deploy: Builds serverless systems using Dino, hosting functions in 34 data centers worldwide</li> <li>Goal of Dino framework: Improve development experience for JavaScript developers with better security and performance</li> <li>Dino Land example: Handling dynamic responses</li> <li>Post Unix future: Serverless edge runtimes like Cloudflare Workers and Dino Deploy</li> <li>Fresh web framework: Fast, efficient, and smaller in size compared to Create React App (84KB vs 339MB)</li> <li>Comparison between Fresh and Create React App: Optimization needed in server-side JavaScript and infrastructure</li> <li>Speaker's work: Improving Dino framework and hiring</li> </ul>"},{"location":"goto_FE/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ol> <li>Understanding human behavior is crucial for interacting with others, making better decisions, and avoiding manipulation.</li> <li>Psychology helps in understanding how our choices are influenced by technology, fast thinking (System 1) and slow thinking (System 2).</li> <li>Behavioral economics focuses on people's decision-making processes and psychology to influence them.</li> <li>Optical illusions show the impact of biases on perception, while concepts like decoy effect and defaults affect choices in various contexts.</li> <li>Amazon Go store and anticipatory shipping are examples of seamless experiences that can influence behavior.</li> <li>Framing and middle option bias affect decision-making in presentations and marketing.</li> <li>The Ikea effect refers to people valuing their own creations more than professionally made ones, while status quo bias prefers the current situation.</li> <li>Digital nudge concept aims to positively influence decisions in a digital environment.</li> <li>Understanding what people want and need is crucial before designing for them, considering ethics and morals.</li> <li>Dataism relies on companies and organizations with our data to make decisions, while new technologies like continuous glucose monitors and stress monitoring watches can improve health and wellbeing.</li> <li>Humane Tech aims to enhance the digital world by designing systems that focus on improving lives rather than hijacking attention.</li> <li>The Social Dilemma highlights the issue of social media platforms keeping users engaged for longer periods, emphasizing the need for better technology that enhances experiences and allows people to focus on their real lives.</li> </ol>"},{"location":"goto_FE/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ul> <li>Interest in understanding human needs and wants.</li> <li>Dystopian future, techwear evolution, COVID-19 pandemic, climate crisis. Criticism of Bitcoin mining's carbon footprint. Ryan Broderick defines dystopia as technology robbing people of personal agency. Dan Horn discusses Facebook's shadow profiles for non-users and privacy concerns.</li> <li>Dystopia becoming meaningless due to overuse; technology can rob users of personal agency by forcing them to give up information without choice.</li> <li>Social media and mainstream media noise, attention weaponization, psychology lessons from old white guys (William James, Martin Seligman, B.F. Skinner, Abraham Maslow, Carl Rogers). Technology designers should consider human psychology when creating products.</li> <li>William James on attention span; Martin Seligman's learned helplessness; technology and loss of agency.</li> <li>Convenience in tech doesn't equate to consent for others; coping with helplessness through humor and satire.</li> <li>Placebo agency, behaviorist psychology concepts (intermittent variable reward, spaced retrieval), efficient use of time.</li> <li>GDPR challenges, Twitter as an outrage machine, advertising repetition (mere exposure effect).</li> <li>Design decisions impact users' experience; empowerment strategies: ad blockers, distracting clothing, privacy-focused tech.</li> <li>Importance of design systems for fast response to crises and policy changes.</li> <li>Voting for representatives who support privacy and user-centered design. Diverse teams lead to diverse product output. Avoid arguments and focus on direct action. Follow Greta Thunberg's philosophy: act for the Utopia you want.</li> </ul>"},{"location":"goto_FE/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ol> <li>Attention is a limited resource that needs to be managed effectively.</li> <li>Working memory (short-term memory) can hold around 4-7 items, depending on factors like familiarity and chunking.</li> <li>Cognitive load theory focuses on how we distribute working memory; complex information requires more resources.</li> <li>Reducing cognitive load is essential for users to efficiently complete tasks.</li> <li>Attention is crucial for cognitive capacity, affected by internal and external factors.</li> <li>New information can steal attention, making it hard to return to previous tasks.</li> <li>Movement attracts attention; consistent animations are more engaging than sudden changes.</li> <li>Accessibility should include options for turning off animations.</li> <li>Multitasking requires a lot of working memory management.</li> <li>Websites should consider how they handle user attention and information flow.</li> <li>Attention is crucial in web design and user experience.</li> <li>Inattentional blindness can occur when attention is divided between multiple tasks or elements on a page.</li> <li>Design systems help with weight and visual hierarchy, making it easier for users to focus on important information.</li> <li>Content design and reading direction play a role in guiding attention.</li> <li>Compressing resolution can highlight the most visually striking areas of an image.</li> <li>Primary buttons should be distinct from secondary and tertiary ones for accessibility purposes.</li> <li>Attention management is crucial in web design.</li> <li>Design systems help with weight and visual hierarchy.</li> <li>Images can be distracting, especially for screen readers.</li> <li>Prioritize content and avoid auto-playing media.</li> <li>Blind people may have slightly better working memory.</li> <li>Website \"how I experience webtoday.com\" demonstrates attention issues in web design.</li> </ol>"},{"location":"goto_FE/#how-the-sjgar-stack-accelerated-our-digital-transformation-erik-ammerlaan-goto-2022","title":"How the SJGAR Stack Accelerated Our Digital Transformation \u2022 Erik Ammerlaan \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=V5zW3ig2lG8</p> <ul> <li>National Nederlanden (NN) is a large financial institution with over $30 billion in worth, aiming to transform into a tech company.</li> <li>The Sugar Stack was created by Eric Ammerlaan's team for business transformation, using serverless architecture, JavaScript, React, and cloud native services.</li> <li>Serverless reduces operations workload, allowing engineers to focus on customer value.</li> <li>React is used for both frontend and backend development, making it easy to switch between web and mobile apps.</li> <li>Cloud native services provide built-in security controls, enabling teams to focus on innovation without compromising quality or security.</li> <li>Benefits of serverless technologies include reduced operations work, security control baked in, and a focus on customer value.</li> <li>Embrace cloud native services like AWS Lambda, S3, etc., use React for frontend and backends with similar patterns and libraries, and leverage the Apollo library to speed up development.</li> <li>NN's Culture Starter initiative helps functional teams adopt an engineering mindset.</li> <li>The company aims to make platform teams more attractive to engineers by promoting their learnings through successful solutions.</li> <li>Introduce design sprints for team bonding and learning new technologies, reducing duplication of technology stacks and focusing on smarter operations.</li> <li>Encourage continuous delivery and small incremental releases to production.</li> </ul>"},{"location":"goto_FE/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>Over the past decade, web development has seen rapid advancements in frontend technologies with frameworks like Angular and React emerging within a few years.</li> <li>Performance optimization is crucial using tools such as Lighthouse and WebPageTest.org.</li> <li>Stefan's personal blog was outperformed by another website built with minimal knowledge about web development, highlighting the ease of making mistakes in this field.</li> <li>Key takeaways include avoiding complex applications and focusing on user experience through simple websites with minimal dependencies.</li> <li>Static site generators like 11ty can help create pure websites with high Lighthouse scores, prioritizing performance and user benefits.</li> <li>Universal JavaScript apps may not be necessary for content sites as they add complexity and potentially slow down page load times. Progressive enhancement is an alternative approach to ensure basic functionality regardless of JavaScript availability.</li> <li>React's HTML-only version has a similar user experience with less data usage compared to its JavaScript counterpart, showcasing the importance of optimizing for slower connections and limited data plans.</li> <li>Excessive JavaScript usage can harm user experience; Gmail is an example of a site with high JavaScript usage but still enjoyable.</li> <li>Client-side navigation breaks accessibility for assistive technology; new proposals like document transition aim to improve the situation.</li> <li>Astro and Svelte are frameworks that focus on reducing JavaScript usage, while React, Vue, and Next.js have made efforts to reduce JavaScript size.</li> <li>A great site should just work, focusing on HTML, CSS, and JavaScript foundations; front-end developers should concentrate on core skills rather than complex tools and processes.</li> </ul>"},{"location":"goto_FE/#what-are-micro-frontends-how-to-use-them-luca-mezzalira-lucas-dohmen-goto-2022","title":"What Are Micro-Frontends &amp; How to Use Them \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=-thWgobMW_I</p> <ol> <li>Micro-frontends, a topic explored by Luca Mezzalira for seven years, focuses on independent deployments and modularity.</li> <li>The motivation behind micro-frontends is to achieve flexibility similar to microservices in frontend development.</li> <li>Independent deployments are crucial for distributed systems like micro-frontends and microservices.</li> <li>Startups may benefit more from monolithic architectures due to their focus on validating assumptions and reaching prime time.</li> <li>Modularity can be achieved at different levels, including code, infrastructure, architecture, and organization.</li> <li>Deciding between monolithic or microservices architecture depends on context and priorities.</li> <li>Micro-frontends can be split horizontally (multiple teams working together) or vertically (one team responsible for a view).</li> <li>Horizontal splits require more tooling, organizational structure changes, and coordination.</li> <li>Vertical splits are easier to pick up if you have experience with single-page applications.</li> <li>Both approaches can be mixed and matched depending on the application's needs.</li> <li>Horizontal and vertical split approaches for micro-frontends have different pros and cons.</li> <li>In horizontal split, there are challenges in organizational structure and ensuring the application works as a whole.</li> <li>Vertical split is more comfortable for those with experience in single-page applications.</li> <li>Routing can happen on client-side or edge side, but server-side routing provides better decoupling.</li> <li>Blue-green deployment and strangler pattern are possible solutions for migrating legacy apps to micro-frontends.</li> </ol>"},{"location":"goto_FE/#building-micro-frontends-luca-mezzalira-lucas-dohmen-goto-2022","title":"Building Micro-Frontends \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=DG9puFuUb7E</p> <ol> <li>App shell is a lightweight application framework for micro-frontends, handling loading, routing, and delinking.</li> <li>Using multiple frameworks in micro-frontends can be beneficial but may impact performance and user experience; carefully consider the pros and cons.</li> <li>Agility and modularity are crucial for businesses and architects when building micro-frontends.</li> <li>Module Federation enables communication between webpack bundles, allowing code sharing among micro-frontends.</li> <li>Framework updates can be costly, and some frameworks may become obsolete; consider the tradeoffs.</li> <li>Modularity and agility are important for businesses.</li> <li>Webpack's Module Federation allows independent micro-frontends to align on build tool versions.</li> <li>Iframes provide strong boundaries and control over code, useful in integrating different companies' applications or security-sensitive industries.</li> <li>Latest Federation approach: Independent micro-frontends using webpack, aligned on build tool version.</li> <li>Web components offer custom components and Shadow DOM compatibility with various frameworks, enabling evolutionary architecture.</li> <li>Components have context provided by the container, while micro-frontends define input/output without relying on container instructions.</li> <li>CSS class name collisions can be handled using graphics or Shadow DOM for isolation.</li> <li>Handling shared style data: Encapsulate styles in Shadow DOM, use BEM for granular styling, or graphics strategy for mix and match styling.</li> <li>Include base styles in each Shadow DOM or app shell; decide tradeoffs between duplication and potential runtime errors.</li> <li>SSI (Server Side Includes) and ESI (Edge-Side Includes): Server-side markup languages that use transclusion for content replacement.</li> <li>Self-contained Systems guideline focuses on vertical splits, server-side routing, and integrating systems using transclusions or components from other systems.</li> <li>Micro-frontends differ as they focus on an application shell and business domain.</li> <li>Service dictionary approach decouples micro-frontends from endpoints by injecting a list of available services for each version.</li> <li>API gateway: Expose APIs for different teams, maintaining independence while still communicating effectively.</li> <li>Backend for frontend (BFF): A pattern that allows front-end teams to create layers between APIs and the front end, reducing cascading effects when updating APIs.</li> <li>Team structure: Context should drive team organization, with regular checks on whether current models are still valid.</li> <li>Architecture evolution: As companies change, architecture needs to adapt accordingly; question past decisions and be open to change.</li> </ol>"},{"location":"goto_FE/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>Lars, Stefan, and Kevlin discuss the current state of web development, including increased complexity leading to issues like bloated code and performance problems.</li> <li>Google's focus on performance metrics pushes developers towards more efficient solutions.</li> <li>Understanding dependencies and vulnerabilities is crucial for maintaining software agility and security.</li> <li>Complexity in software development leads to issues like performance, security vulnerabilities, and reduced agility.</li> <li>Dependency management plays a significant role in the ecosystem.</li> <li>Responsibility for these issues lies with everyone involved: developers, tool vendors, site providers, etc.</li> <li>Cultural change within organizations can help improve practices and encourage better habits among developers.</li> <li>Numbers and statistics provide insight into the current state of software development and security.</li> <li>Importance of responsibility in data and software engineering.</li> <li>Need for collective understanding and good user experience.</li> <li>Cultural impact on software development.</li> <li>Learning from failures, such as the NPM Left Pad incident.</li> <li>Desire for frameworks to provide more self-containment.</li> <li>Balancing between using frameworks and simple coding problems.</li> <li>Importance of understanding customers' specific problems and tailoring solutions accordingly.</li> <li>The need for evaluating trade-offs in every decision, considering the value it brings over time.</li> <li>Acknowledging that what was good code in one context may not be suitable in another due to changes in technology or business needs.</li> <li>Importance of slowing down and being aware in decision making.</li> <li>Trade-offs change over time, what was good before may not be now.</li> <li>Awareness is key to revisiting decisions based on changing contexts.</li> <li>Responsibility comes with dependencies, considering trade-offs and boundaries.</li> <li>JavaScript ecosystem has issues with duplication due to its rapid evolution and the NPM ecosystem.</li> <li>People tend to copy code from others when learning, which can lead to duplication.</li> <li>Tooling can help with awareness and identifying duplicate code.</li> <li>Communication is crucial for understanding why certain decisions were made.</li> <li>There's no one-size-fits-all approach; each situation should be evaluated individually.</li> <li>Duplication is not always bad; it can help identify patterns and abstractions.</li> <li>Tools should extend human capabilities, not dictate workflow.</li> <li>Learning from observations and iterations can lead to better understanding.</li> <li>Keeping an eye on potential issues and allowing time for insights.</li> </ol>"},{"location":"goto_FE/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>The ideal programming language depends on the problem domain.</li> <li>Richard prefers Elm for frontend web development and is working on a server-side language with ergonomic type checking.</li> <li>Erik agrees that memory management should be left to machines, preferring automatic reference counting or Rust's borrow checker.</li> <li>Both appreciate languages that allow functional and object-oriented programming.</li> <li>Some people struggle with functional programming due to familiarity with object-oriented concepts.</li> <li>Functional programming can be useful for transforming data between different systems.</li> <li>Humans enjoy classification, but it may not always benefit code productivity.</li> <li>Premature abstraction and overuse of inheritance can lead to unnecessary complexity.</li> <li>Testability should be considered during language design.</li> <li>Rust's approach to package manager and unit testing integration is an inspiration for other languages.</li> <li>Discussions on language design and testing, Rust's package manager and unit test integration, automatic reference counting vs ownership systems, tracing garbage collection, compacting malloc implementation, Apple's hardware-level optimizations for automatic reference counting, cyclical dependencies, concurrency models, parallel programming, SIMD algorithms, Rust, Roc, Zig languages, ThoughtWorks focus on Kotlin and WebAssembly, WebAssembly use cases, JavaScript, CoffeeScript, TypeScript, in-house IT systems, Blazor, C#, performance importance for web applications, large organizations' internal application usage.</li> </ol>"},{"location":"goto_FE/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Functional programming emphasizes immutability, pure functions, and functional languages.</li> <li>Advantages include caching, pre-computing, and predictable code; disadvantages involve parallelization and memory usage challenges.</li> <li>Pure functions are crucial in functional programming, enabling memoization for performance gains.</li> <li>Functional languages benefit from caching and pre-computation due to their pure function nature.</li> <li>Memoizing impure functions may lead to inconsistent results.</li> <li>Precomputing is an optimization technique that improves performance by calculating values at build time with known constants or function calls on constants.</li> <li>Pure functions guarantee consistent results and can be memoized, making them ideal for functional programming.</li> <li>Parallelization is a key aspect of functional programming, allowing pure functions to run concurrently without data races or thread safety concerns.</li> <li>Managed effects offer asynchronous abstractions like promises in other languages, providing more control over task execution.</li> <li>Pure functions minimize side effects and reduce flaky tests; Elm has had zero flaky tests since 2015 due to its pure functional nature.</li> <li>Effects can be tested using simulation instead of mocking.</li> <li>Functional programming promotes better testing practices, development experience, and debugging ease.</li> <li>Pure functions have explicit dependencies and are easier to debug than global mutable variables.</li> <li>Side effects introduce implicit dependencies and make debugging more challenging.</li> <li>In a pure functional style, the search space for potential culprits is smaller.</li> <li>Explicit dependencies can be more verbose but offer clear boundaries in pure functions.</li> <li>Deeply nested functions with side effects require all levels to return tasks, leading to potential issues.</li> <li>Functional programming offers benefits such as caching, parallelization, testing, code revision, debugging, and ecosystem advantages.</li> <li>Pure functional programming reduces debugging time and provides predictability.</li> <li>Elm's ecosystem guarantees 100% pure functions, offering confidence in code quality and performance.</li> <li>As a pragmatist, the speaker prefers functional programming for most tasks but appreciates other styles like imperative programming.</li> </ol>"},{"location":"goto_FE/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility is the practice of building products that everyone can use, regardless of their abilities.</li> <li>Web accessibility focuses on navigation, auditory, visual, sound, and motor capabilities for people with disabilities.</li> <li>Importance of accessibility: Understanding how people with disabilities use technology.</li> <li>JavaScript and accessibility: Javascript can be used to display content, communicate updates to screen readers, and handle navigation.</li> <li>Accessible JavaScript examples:</li> <li>Hiding/showing content: Use the hidden property for screen reader communication.</li> <li>Timed content: Set aria live property to polite or forceful for screen reader updates.</li> <li>Navigation: Ensure focusable elements are in logical order and accessible via keyboard navigation.</li> <li>Demonstrate how to handle content for screen readers and constant updates.</li> <li>Create custom elements with proper tab indexes, focusing on semantic elements.</li> <li>Include skip to main content links for easier navigation.</li> <li>Update focus when necessary, ensuring users can interact with hidden elements.</li> <li>Handle interaction by considering both mouse and keyboard events.</li> <li>Test accessibility during development to ensure a smooth user experience.</li> <li>Handle handler events in JavaScript: Ensure equal keyboard and mouse events for custom elements.</li> <li>Testing accessibility: Use tools like Lighthouse, Wave Web Accessibility Evaluation Tool, ChromeVox, Ally.js, and Accessible JS resources.</li> <li>Maintain an accessibility checklist to ensure proper coding practices.</li> <li>Read more on accessible JavaScript with helpful articles and resources.</li> <li>Understand WAI ARIA Authoring Practices for creating custom elements with appropriate roles.</li> </ol>"},{"location":"goto_FE/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Focus on front-end components: Next.js, Tailwind CSS, and Typescript</li> <li>Benefits include structure, predictability, and performance</li> <li>Next.js handles routing, rendering methods, and code splitting for faster delivery</li> <li>Tailwind CSS offers atomic classes, auto-completion, and only ships used rules</li> <li>Typescript provides ahead-of-time compilation, auto-completion, and error protection</li> <li>Create a project with dependencies for speed across the stack</li> <li>Use Next.js for routing and page creation</li> <li>Build a To-Do list app using HTML, CSS, and JavaScript</li> <li>Leverage React's declarative abstraction for better user interaction</li> <li>Manage state of the To-Do list with useState hook from React</li> <li>Use Tailwind CSS for styling and responsiveness</li> <li>Utilize TypeScript to ensure predictable code behavior and auto-completion</li> <li>Create a To-Do list app with React, checkboxes, text input, and manage state using hooks</li> <li>Use Back4App (Kasura) as backend service for free database and API</li> <li>Create 'to-do items' table in the database and query/mutate data from it</li> <li>Demonstrate how to use GraphQL with auto completion for efficient development</li> <li>Added mutation to database, creating a ToDo item</li> <li>Fetched data from the database and set it in state</li> <li>Debugged issues with adding new ToDos to the database</li> <li>Switched to Tailwind for styling improvements</li> <li>Updated tailwind initialization by including necessary files</li> <li>Scalability can be achieved through hosting options like AWS, GCP, and Heroku</li> <li>Predictable code leads to velocity</li> <li>Utilized tools like Hasura and Heroku for load handling</li> </ol>"},{"location":"goto_FE/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix Live View is a real-time web framework built on Elixir, offering minimal JavaScript requirements and efficient performance.</li> <li>Benefits include server-rendered HTML, form validation, reusable components with state, live navigation, and distributed capabilities.</li> <li>The speaker shares their experience using Phoenix Live View to create a real-time stock updates web application.</li> <li>Traditional page controllers were replaced by live views for interactive functionality without manual refreshing.</li> <li>Key concepts of Elixir and Phoenix include assigns, router, and live view templates.</li> <li>The speaker converted their Phoenix app to live view using generators for real-time communication.</li> <li>They implemented a fake database with a publish-subscribe mechanism for updating prices every two seconds.</li> <li>Subscriptions were handled in the socket's connected function.</li> <li>Real-time communication between server and client was achieved, along with adding a live chat feature.</li> <li>Handling submitted comments from forms was managed asynchronously.</li> <li>Temporary assigns were used for efficient handling of large user data.</li> <li>Updating socket connections with new comments without explicit handling.</li> <li>The speaker demonstrated real-time chat using temporary assigns in Phoenix Live View.</li> <li>Testing high update frequencies (1 second, half a second, 200 milliseconds, and 16 milliseconds) to test Elixir and Phoenix limits.</li> <li>Browser handling of high update frequencies was observed.</li> <li>Rendering S&amp;P 500 list with prices updated every 200 milliseconds was demonstrated.</li> <li>Live View's diffing algorithm efficiently handles changes in real-time updates.</li> <li>The book \"Phoenix in Action\" provides information on using Phoenix and Live View.</li> <li>A discount code for Manning books is available.</li> <li>Speaker's contact details and resources shared.</li> </ol>"},{"location":"goto_FE/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte is a compiler-based web framework with no dependencies and no virtual DOM, offering efficient performance.</li> <li>StealthKit builds on top of Svelte, providing features like file-based page routing, REST services, layouts, code splitting, hot module reloading, static pages, tooling support, and serverless functions through adapters.</li> <li>To get started with StealthKit, use 'npm init svelte' for project creation and configuration, followed by development mode ('npm run dev') and deployment ('npm build'). Code quality checks are done using 'npm run lint' and 'npm run format'.</li> <li>A sample ToDo app demonstrates StealthKit's functionality, allowing users to add tasks, mark them as done, and clear completed tasks.</li> <li>Svelte uses components with three sections: JavaScript code, HTML content, and CSS styling. Data flows between components using props and events.</li> <li>The topmost component manages the entire app, importing the ToDo component and handling its state.</li> <li>Svelte is fast, lightweight, and has small bundle sizes with file-based component definitions, clear global styling, efficient updates through reactive declarations, and state management using stores.</li> <li>Reactive statements simplify code and make animations easier while optimizing performance.</li> <li>Stores manage data outside components, offering four types: writable, read-only, derived, and custom.</li> <li>Svelte's popularity is growing but not as fast as other frameworks; however, it offers an improved developer experience.</li> <li>Related tools include VS Code extension, SvelteKit (in beta), testing libraries, Smelt Native for mobile apps, and learning from Rich Harris' talk on rethinking reactivity.</li> </ol>"},{"location":"goto_FE/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Jamstack is a web development approach focused on static websites with dynamic features.</li> <li>Key components include static site generators, CICD process, and deployment to edge servers/CDNs.</li> <li>Complexity has evolved over time with tools like Next, Nuxt, Gatsby, incremental static regeneration, and distributed persistent rendering.</li> <li>The goal is to simplify deployment while still offering dynamic features.</li> <li>Jamstack has become more complex with features like distributed persistent rendering and incremental static regeneration.</li> <li>Complexity is moving closer, allowing users to manage it locally rather than on a CDN.</li> <li>WordPress caching can be complicated for some users.</li> <li>Atomic builds and deploys in Jamstack prevent issues during site building.</li> <li>Large companies with complex websites are adopting Jamstack, leading to changes in the technology.</li> <li>E-commerce is now supported by Jamstack.</li> <li>Static sites were once limited in their applications, but Jamstack can be used for almost anything.</li> <li>User-generated content and more complicated solutions are possible with Jamstack.</li> <li>Popular tools include Eleventy for static site generation and Netlify for deployment.</li> <li>Hugo and Next.js are also used for specific projects depending on requirements.</li> <li>The future of Jamstack may see more debate about its definition, potentially expanding to include edge deployments and tooling.</li> <li>A book on Jamstack is available through Manning Early Access Program, with a physical book release expected in fall.</li> </ol>"},{"location":"goto_FE/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ul> <li>10 years of web development journey</li> <li>Frontend evolution from build tools to universal JavaScript frameworks</li> <li>Personal website built with modern best practices, but not the fastest</li> <li>Comparison with an older website: simpler HTML, fewer resources, and better performance</li> <li>Lighthouse performance score calculation: first contentful paint, time to interactive, speed index, largest contentful paint, total blocking time, cumulative layout shift</li> <li>JavaScript's impact on browser performance - Lighthouse performance score is calculated based on six metrics.</li> <li>Single threaded browser environment can cause frustration for users.</li> <li>Overly optimized websites may not be necessary, as they add complexity and slow down the user experience.</li> <li>Universal JavaScript apps might not be ideal for content sites, as they can lead to slower performance when heavy resources are added.</li> <li>Strive for simplicity in web development to ensure better user experience.</li> <li>Progressive enhancement is important for ensuring websites work without JavaScript.</li> <li>React documentation example shows that experience is similar with or without JavaScript, but the latter is lighter and faster.</li> <li>Average website page weight is 2MB, which can be expensive in some countries.</li> <li>Facebook and Gmail are examples of complex applications using app frameworks effectively.</li> <li>The web almanac shows that jQuery is still used on many websites despite newer frameworks being popular.</li> <li>Discusses the complexity of web development and its impact on user experience, highlighting accessibility, speed, and security as important factors for building great sites.</li> <li>Mentions misuse of HTML as a common issue leading to accessibility problems.</li> <li>Only 6% of websites use Content Security Policy (CSP) for added safety.</li> <li>Criticizes the current JavaScript ecosystem with its reliance on packages and vulnerabilities.</li> <li>Concludes that the web is losing quality due to these issues.</li> <li>Web accessibility issues are common due to misuse of HTML, with 98% of websites having some problems.</li> <li>The complexity of modern web development tools can lead to bloated projects.</li> <li>There's a need to focus on fundamentals like HTML, CSS, and JavaScript for better user experiences.</li> <li>Consider splitting frontend roles into javascript engineers and UX engineers.</li> <li>Ultimately, the goal should be to provide good user experiences regardless of technical implementation.</li> <li>The speaker discusses the complexity of choosing frameworks and their impact on job markets.</li> <li>They suggest that the term \"front-end developer\" may not be accurate anymore, as there are two distinct camps: engineers focused on tools like React and those concerned with HTML, usability, and accessibility.</li> <li>The speaker argues for prioritizing user experience over developer experience.</li> <li>He shares his personal experience of simplifying a project by dropping universal JavaScript in favor of a pure implementation.</li> <li>Developers should focus on building sites that just work and worry less about the technology used to achieve this goal.</li> </ul>"},{"location":"goto_FE/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2020","title":"HTTP/3 Is Next Generation HTTP. Is It QUIC Enough? \u2022 Daniel Stenberg \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=pUxyukqoXR4</p> <ul> <li>HP1 and 2: Challenges with TCP, HTTP1, and ossification</li> <li>Quick (new transport protocol): Improves performance, security, flexibility</li> <li>Key features of Quick: Multiplexing, connection migration, congestion control</li> <li>HP3: Built on top of UDP, expected deployment soon</li> <li>Quick replaces TCP for HTTPS traffic</li> <li>HTTP 3: First application protocol on Quick (similar to HTTP 2)</li> <li>Stack change from TCP/TLS to UDP and Quick</li> <li>Deploying HTTP 3 has challenges due to CPU usage and unoptimized UDP stacks</li> <li>OpenSSL's quick implementation delay affects other libraries</li> <li>New tools needed for understanding encryption and protocols</li> <li>HTTP 3 finalization by early 2021, slower adoption possible</li> <li>Quic: new transport protocol aiming to replace TCP (expected release in early 2021)</li> <li>Quic uses UDP for its transport layer instead of TCP</li> <li>Ongoing discussions about multipath support and improvements within Quic</li> <li>Several companies have implemented HTTP/3 in their products</li> <li>Wireshark can decrypt and analyze latest Quic versions</li> <li>Browsers like Chrome, Edge, Firefox, Safari, Cloudflare CDN support experimental features for enabling HTTP/3</li> </ul>"},{"location":"goto_FE/#going-static-in-a-dynamic-world-with-hasura-and-nuxtjs-debbie-obrien-goto-2020","title":"Going Static in a Dynamic World with Hasura and Nuxt.js \u2022 Debbie O'Brien \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1j9DIX32GpY</p> <p>Error</p>"},{"location":"goto_FE/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>Use HTML properly for better performance, accessibility, and responsiveness.</li> <li>Learn semantic HTML to write better code.</li> <li>Utilize appropriate tags like header, nav, main, article, and footer for easier navigation and accessibility.</li> <li>Employ semantic HTML elements for better accessibility and search engine optimization.</li> <li>Accessibility benefits everyone, not just people with disabilities.</li> <li>Test websites for low contrast, missing alternate text, empty links, form labels, and empty buttons.</li> <li>Choose accessible component libraries like Reach UI, Tourment UI, and Lion.</li> <li>Reduce JavaScript usage to improve website performance and user experience.</li> <li>WebAIM found 98% of websites have accessibility errors.</li> <li>Common issues include low contrast, missing alternate text, empty links, missing form labels, and empty buttons.</li> <li>Use HTML/CSS instead of JavaScript when possible.</li> <li>Test sites without JavaScript and enhance them with JS.</li> <li>Choose libraries carefully; some are tested with assistive technologies while others aren't.</li> <li>Beware of bloated JavaScript files that slow down websites for users on limited data plans.</li> <li>Make the web accessible to everyone, especially those in developing countries where internet access can be life-changing.</li> </ol>"},{"location":"goto_FE/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ul> <li>GraphQL is a powerful query language that abstracts data fetching and orchestration.</li> <li>Gradual adoption of GraphQL can be done in three ways: </li> <li>Use GraphQL on the client side, replacing manual code with automatic queries.</li> <li>Integrate GraphQL into existing APIs by using libraries like Apollo Server.</li> <li>Build a new API from scratch using GraphQL as the foundation.</li> <li>Benefits of adopting GraphQL include improved developer productivity and easier UI development.</li> <li>GraphQL simplifies development by reducing code and automating data fetching.</li> <li>Apollo can be used as a client with its own graphical engine, allowing for local data storage or REST requests.</li> <li>GraphQL Mesh converts existing APIs into GraphQL without affecting the source, enabling querying from multiple sources.</li> <li>It allows querying multiple sources as if they were one GraphQL API, linking them together.</li> <li>The library runs on both client and server sides, making it flexible for use in various scenarios.</li> <li>It supports numerous sources and offers customizations to fit specific needs.</li> <li>Gradually integrating GraphQL Mesh into your stack can help automate manual coding and improve efficiency.</li> </ul>"},{"location":"goto_FE/#advanced-feature-flagging-its-all-about-the-data-dave-karow-goto-2020","title":"Advanced Feature Flagging: It's All About The Data \u2022 Dave Karow \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=f8XDvtfKWQE</p> <ul> <li>Feature flags enable separating code deployment from feature release.</li> <li>Gradual rollouts and randomized controlled trials help account for outside factors in measuring results.</li> <li>Attribution assigns users to different cohorts, while statistical analysis proves or disproves significance of changes.</li> <li>Experimentation platforms combine feature flags with data analytics for a more reliable process.</li> <li>Targeting features include fast, randomized, and sticky user assignment for different experiences.</li> <li>Telemetry collects data on user behavior and feature usage.</li> <li>Statistical analysis uses t-tests to compare distributions and determine if results are significant.</li> <li>Management consoles provide a consistent way for teams to manage rollouts and review metrics.</li> <li>Examples of companies with powerful experimentation tools: Walmart (Expo), LinkedIn (LinkedIn Experimentation or Licks), Booking.com.</li> <li>Trustworthy Online Controlled Experiments book offers lessons on effective experimentation practices.</li> <li>Split provides an off-the-shelf experimentation platform for engineering teams to release software efficiently.</li> </ul>"},{"location":"goto_FE/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ol> <li>Clean architecture separates domain and application layers, with dependencies pointing inwards to isolate core logic.</li> <li>Infrastructure is independent of frameworks, allowing for easier maintenance and scalability.</li> <li>Northwind Traders solution template on GitHub provides a practical example.</li> <li>Domain layer contains entities, value objects, enumerations, and custom exceptions.</li> <li>Application layer has business logic, interfaces, and implementation classes.</li> <li>Presentation layer handles UI concerns.</li> <li>Infrastructure layer manages external dependencies like data access and logging.</li> <li>Merge domain, application, and infrastructure layers for simplicity if desired.</li> <li>Use value objects to represent complex types with specific logic.</li> <li>Initialize collections to enforce good practices and simplify code.</li> <li>Create custom exceptions for expected domain events.</li> <li>Include auditable entity base class for automatic tracking of changes.</li> <li>Provide sample unit tests for guidance on working with value objects.</li> <li>Apply CQRS (Command Query Responsibility Segregation) to improve performance, scalability, and simplicity.</li> <li>Utilize mediator pattern for easy addition of behavior in application layer.</li> <li>Organize code by feature with common folder for shared behaviors.</li> <li>Encapsulate business cases within single folders for easier maintenance and less breaking changes.</li> <li>Demonstration of a solution explorer, query handler, and co-locating code for a specific business case.</li> <li>Implemented cross-cutting concerns such as request logging, validation, and mapping behavior.</li> <li>Used C# 8 interfaces with default implementations to simplify mapping between entities and DTOs.</li> <li>Created a mapping profile for automatic configuration of mappings.</li> <li>Tested the mapping functionality using unit tests provided by AutoMapper.</li> <li>GTO has a mapping method and uses C# 8 interfaces for configuration.</li> <li>Automapper simplifies mappings and projections, while dependency injection handles application dependencies.</li> <li>Infrastructure layer includes persistence, identity, services, and API clients.</li> <li>Experts disagree on the need for repository and unit of work patterns; use them if they solve a problem.</li> <li>Fluid API configuration is simple with F Core 1.0.</li> <li>Asp.net core identity version 3+ requires leaving base statement in configurations.</li> <li>Entity Framework Core used for data access, with Fluent API configuration.</li> <li>Prefer conventions over configuration.</li> <li>Presentation layer has well-defined view models and queries/commands.</li> <li>Clean architecture approach using CQRS to separate logic from controllers.</li> <li>Infrastructure controller is simple, focusing on request-response handling.</li> <li>Open API uses Swagger for specification, client generation, and bridging frontend/backend.</li> <li>Exception middleware handles errors with meaningful responses.</li> <li>Integration tests ensure high-level functionality.</li> </ol>"},{"location":"goto_FE/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2019","title":"HTTP/3 is next Generation HTTP. Is it QUIC enough? \u2022 Daniel Stenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rlN4F1oyaRM</p> <ol> <li>HTTP has evolved over time, with issues in earlier versions like TCP connections and header blocking problems.</li> <li>HTTP 2 addressed these issues by using one connection for multiple streams but introduced new challenges due to packet loss affecting all streams.</li> <li>Quic (Quick UDP Internet Connections) is a new protocol that aims to solve the problems with TCP and HTTP/2, using UDP instead of TCP for faster and more reliable performance in certain situations.</li> <li>Quic is still under development but has potential to become the next generation of HTTP.</li> <li>QUIC can be used for HTTP/3, making the internet faster and more efficient.</li> <li>Google's experimentation led to a new transport protocol called QUIC (Quick UDP Internet Connections), which is now being standardized by IETF.</li> <li>QUIC is built on top of UDP, adding reliability and security features. It uses streams for better performance and flexibility compared to TCP/TLS.</li> <li>HTTP 3 (H2P) is an application layer built on top of QUIC, providing similar functionality but with a different wire format.</li> <li>Quic aims to become a potential TCP replacement in the future.</li> <li>Independent streams allow for better handling of network issues, prioritization, and early data transmission.</li> <li>Quick connections require verification of host certificates.</li> <li>Google and Facebook report 3-7% connection failure rate with quick. Fallback mechanisms are needed due to UDP blocking by some organizations.</li> <li>CPU intensive for servers; efforts underway to improve performance.</li> <li>UDP traffic is blocked by many organizations due to DDoS attacks. Fallback mechanisms for failed connections are complicated and vary based on network topology.</li> <li>Google Quick (QUIC) is a new protocol that aims to improve performance over UDP, but it needs standardization and better tooling.</li> <li>QUIC has been implemented in various browsers and servers, with some limitations. The process of shipping QUIC is ongoing, with the working group aiming for July 2019 release.</li> <li>Browser support for QUIC will depend on its stability and integration into Linux distros.</li> <li>HTTP/3 is in development, facing challenges such as TLS support and integration into Linux distros.</li> <li>Quick (UDP-based protocol) could be a potential TCP replacement for more protocols in the future.</li> <li>WebSockets are not part of HTTP but can be adapted to work with HTTP/3.</li> <li>Encrypted quick over UDP is another new transport protocol being developed, facing challenges on both service and client sides.</li> </ol>"},{"location":"goto_FE/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>Importance of web performance: Alex Russell emphasizes the need for better performance.</li> <li>First meaningful paint (FMP): Measures how quickly content appears on a page, not just loading time.</li> <li>Server-side rendering vs client-side: Serving less HTML doesn't necessarily improve FMP.</li> <li>Network issues: 1% of users don't get JavaScript enhancements due to network or browser issues.</li> <li>User experience: Focus on happy readers and ensure websites load properly for all users regardless of circumstances.</li> <li>The modern web is complex, but frameworks and libraries provide benefits like reusability, consistency, and engineering principles.</li> <li>However, they can also lead to fatigue due to constant changes in technology.</li> <li>Maintaining a good user experience is crucial despite the challenges of modern web development.</li> <li>The evolution of web frameworks aims to control loading experiences through portals.</li> <li>Portals are simple solutions that allow users to navigate within an iframe without losing browser support.</li> <li>Portals can be used for various purposes like creating documentation pages with separate panes.</li> <li>The main advantage of portals is that they are just HTML elements and can be controlled by the developer, unlike complex frameworks.</li> <li>Portal concept can be used for progressive enhancement, allowing separate pages to work together.</li> <li>Portal enables simultaneous access to both the current and next page, providing better control over navigation.</li> <li>This approach uses standard HTML with minimal JavaScript enhancements.</li> <li>Portal is currently non-standard but may become a part of future web standards.</li> <li>It can be used for websites that don't require full single-page apps, offering more flexibility in design and development.</li> <li>Stay updated with industry trends but don't feel pressured to use every new technology.</li> <li>Frameworks can be useful for prototyping ideas before standardization.</li> <li>Polyfilling can help get features in people's hands without waiting for standardization.</li> <li>Be conservative regarding performance and accessibility when using frameworks.</li> </ol>"},{"location":"goto_FE/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ol> <li>Attention is crucial in user experience design, as it determines where users focus on a page.</li> <li>Visual weight and detail influence attention; strong call-to-action buttons can be distracting if they overshadow other important information.</li> <li>Rhythm, tempo, and layout affect how we perceive and process information.</li> <li>Design user interfaces with attention in mind by using bold text, balancing size, color, and positioning to guide users effectively.</li> <li>Executive function helps the brain manage tasks and resist distractions; keep instructions concise and well-formatted.</li> <li>Attention is like a zoom lens, focusing on one thing while ignoring others; inattentional blindness can cause users to miss important details.</li> <li>Design for accessibility by considering different needs and abilities, including those with ADHD, bipolar disorder, dyslexia, low vision, etc.</li> <li>Balance visual weight, size, and placement on pages to minimize issues when glitches occur; ensure websites function well even during disruptions.</li> <li>Designing for attention benefits everyone, not just those with disabilities; avoid distracting animations, pop-ups, and complex layouts.</li> </ol>"},{"location":"goto_FE/#designing-apis-for-150-million-orders-michele-angioni-matt-fewer-goto-2019","title":"Designing APIs for 150 Million Orders \u2022 Michele Angioni &amp; Matt Fewer \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=OB0Pb-nd0g8</p> <ul> <li>Takeaway.com operates in 12 countries, processing 42 million orders annually.</li> <li>Scoober manages delivery drivers and optimizes routes using logistics.</li> <li>Domain-driven design (DDD) helps separate concerns and improve scalability.</li> <li>DDD involves creating a common language, context mapping, and domain modeling.</li> <li>Scoober used DDD to clarify terminology and better understand their business model.</li> <li>Importance of a common terminology and language for effective software architecture.</li> <li>Domain Driven Design (DDD) concepts like context mapping to understand the domain better.</li> <li>Refactoring existing architecture using best practices, such as standardizing event payloads and authentication methods.</li> <li>Implementing role-based access control for authorization.</li> <li>Using error codes and clear formats in API responses.</li> <li>Monitoring and alerting strategies for real-time error handling.</li> <li>Versioning of synchronous communication through topic or event payload.</li> <li>The significance of good documentation for long-term maintainability.</li> <li>Maintain clear error messages and documentation for APIs.</li> <li>Use versioning, such as semantic versioning or timestamps, for synchronous communication.</li> <li>Test different environments: life, staging, load testing, and blue-green deployments.</li> <li>Focus on test automation through unit, integration, and end-to-end tests.</li> <li>Migrate to a new stack with modern technologies for better scalability, efficiency, and security.</li> <li>Improve time to market, deployment speed, performance, and stability.</li> <li>Implement behavioral testing to make data-driven decisions about UI design.</li> <li>Decouple services for clear separation of business domains.</li> <li>Consumer web project: migration to modern technologies, improve time to market, deployment, performance, security, and testing.</li> <li>Back-end for front-end (BFF): separate back-ends for each interface, shielding backend from front-end changes.</li> <li>Design system: centralized design framework with standards, documentation, UI patterns, and components.</li> <li>Challenges: status quo discovery, parallel development, reevaluating dependencies, experimentation without affecting existing apps.</li> <li>The speaker discusses a migration project involving building applications and implementing a centralized design framework called Snacks.</li> <li>They introduce their design system, which includes a React component library, color library, icon library, and documentation.</li> <li>To implement the design system gradually without disrupting existing websites, they plan to rebuild pages on a page-by-page basis.</li> <li>The benefits of this approach include low risk for the business, easier hiring due to using popular technologies, domain separation, and better developer experience.</li> <li>They emphasize the importance of careful planning and designing infrastructure for long-lasting solutions.</li> </ul>"},{"location":"goto_FE/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ol> <li>Dev UX is a practice that focuses on improving collaboration between designers and developers, leading to better products faster.</li> <li>There are four levels of Dev UX: Ground Zero, Level 1 (basics), Level 2 (efficiency), and Level 3 (symbiosis).</li> <li>Clear communication, understanding each other's roles, and defining responsibilities are crucial for a successful team.</li> <li>Designers should provide developers with necessary assets like SVG files instead of PNGs to streamline the development process.</li> <li>Centralize design handoff to ensure all needed information is available for developers.</li> <li>Objectives: Create a process that works for the team, ensuring everyone is updated with relevant information.</li> <li>Missing assets: Understand developers' needs alongside mock-ups and centralize everything in design handoff.</li> <li>Collaboration: Work together next to each other, creating vocal communication.</li> <li>Level 1 challenges: Ensure designers use real sets of data for mock-ups, involve developers for technical insights, and avoid dummy text.</li> <li>Populating designs with real data: Use tools like Craft from Envision to simplify the process.</li> <li>Provide real data for mockups and involve developers.</li> <li>Use tools like Sketch, Figma, and style guides to simplify design processes.</li> <li>Define breakpoints for responsive designs.</li> <li>Create user flows for complex features.</li> <li>Integrate style sheets with linting tools for consistency in coding.</li> <li>Strive for efficient collaboration between designers and developers.</li> <li>Be detail-oriented and fix inconsistencies within the app.</li> <li>Provide real data to designers during feature development.</li> <li>Involve developers and use a common language with style guides.</li> <li>Aim for efficiency by reducing friction points.</li> <li>Good teams communicate, react, and iterate together.</li> <li>Identify small inconsistencies that slow down the team.</li> <li>Share design patterns to improve efficiency.</li> <li>Split components in the same way for better integration.</li> <li>Use tools like Zeppelin's Stiga to link mockups with code.</li> <li>Explore plugins to bridge the gap between designers and developers.</li> <li>Importance of collaboration between designers and developers.</li> <li>Sharing common design patterns for better communication.</li> <li>Involving everyone in the conception, design, and decision process.</li> <li>Understanding each other's roles and experiences.</li> <li>Building trust within teams through open communication and vulnerability.</li> <li>Organizing events like Designer UX Drinks to foster understanding between designers and developers.</li> <li>DevUX.tech website with manifesto, tools, and resources for fostering dev/UX culture.</li> <li>Joining Slack or Twitter communities to share experiences and get help (no context).</li> </ol>"},{"location":"goto_FE/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ul> <li>The speaker shared his journey into machine learning through JavaScript applications.</li> <li>He introduced AI J ROCKS, a website with various JavaScript projects incorporating AI.</li> <li>Emoji Fire is an example application that detects facial features and emotions in images to replace faces with appropriate emojis.</li> <li>Emotion detection involves identifying facial features and using neural networks.</li> <li>Neural networks consist of layers, weights, and activation functions; training involves backpropagation.</li> <li>APIs like Microsoft's Face API use neural networks for emotion detection.</li> <li>TensorFlow.js enables machine learning in the browser with JavaScript.</li> <li>Pretrained models can be loaded for image recognition using tools like TensorFlow.js.</li> <li>Microsoft's Computer Vision API provides detailed descriptions of images.</li> <li>A tool could be created to automatically add alt properties to images based on their descriptions.</li> <li>MobileNet is a lightweight model for image recognition but lacks accuracy.</li> <li>Microsoft's Computer Vision API offers detailed human-readable descriptions of images.</li> <li>Sarah Dresner's demo demonstrates an AI that can generate images based on outlines using Generative Adversarial Networks (GAN).</li> <li>GAN consists of a generator and discriminator neural networks competing to improve their performance.</li> <li>The generated model can be exported for further optimization and use in the browser.</li> <li>GAN can be trained to generate images of anything, making it versatile.</li> <li>Generative neural networks create new images based on input data.</li> <li>TensorFlow JS is a tool for building generative models in the browser.</li> <li>A book titled \"Touch the Machine: TensorFlow JS\" teaches about using TensorFlow JS.</li> <li>The Mojo Fire tutorial demonstrates how to build a text generator.</li> <li>Slack bots can be created with step-by-step guidance, from API integration to creation.</li> </ul>"},{"location":"goto_FE/#fast-by-default-near-instant-load-times-at-scale-with-gatsbyjs-nicolas-goutay-goto-2019","title":"Fast by Default: Near Instant Load Times at Scale with GatsbyJS \u2022 Nicolas Goutay \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=p14g-Sep7HY</p> <ol> <li>Web performance impacts businesses in various ways, including revenue growth and user engagement.</li> <li>Examples of companies benefiting from improved web performance: Zalando (0.7% revenue increase), Trainline (8 million pounds more annual revenue), Financial Times (30% more engaged users), BBC (10% less users lost due to slow load times), Pinterest (15% SEO traffic and conversion rate increases).</li> <li>Web performance is also an ethical issue, as poor performance can lead to exclusion of users with slower devices.</li> <li>Over the years, web development has evolved from static sites to server rendering, client-side rendering, rehydration, pre-rendering, and Gatsby JS. Each approach has its advantages and disadvantages in terms of performance, user experience, and device load.</li> <li>Gatsby JS combines the advantages of static site generators and progressive web apps by handling both static and dynamic data at build time using plugins. It offers performance optimization features like image optimization, code splitting, linked prefetching, and native lazy loading.</li> <li>The framework aims to make building fast websites easy without worrying about performance.</li> <li>Third-party scripts can negatively impact website performance.</li> <li>Monitoring web page performance is crucial to maintain speed. Tools like WebPagetest and Falco help test website performance across different locations, devices, and user journeys. They provide detailed data for debugging issues and catching regressions.</li> </ol>"},{"location":"goto_FE/#webassembly-beyond-the-browser-dan-callahan-goto-2019","title":"WebAssembly Beyond the Browser \u2022 Dan Callahan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TGo3vJVTlyQ</p> <ol> <li>WebAssembly is a low-level programming language designed to address fundamental limitations of the web, enabling efficient compilation from various languages like C++, Rust, and Go into machine code that runs in browsers.</li> <li>The goal is to create a single binary format for running on any platform without requiring compilation for each target architecture or operating system.</li> <li>WebAssembly's potential impact extends beyond web development, potentially influencing edge computing, IoT devices, and distributed systems.</li> <li>Libsass is an example of a library that compiles to WebAssembly, making it compatible with various platforms.</li> <li>WebAssembly allows developers to compile once and distribute to multiple platforms without worrying about compatibility issues.</li> <li>The goal of WebAssembly is to make the web more universal by supporting different languages and allowing them to work together seamlessly.</li> <li>WebAssembly is a binary format that uses 256 operations, enabling efficient execution on various devices.</li> <li>Static typing in WebAssembly helps optimize code execution.</li> <li>Imports and exports allow connecting WebAssembly with other APIs safely.</li> <li>Compilers can convert C/C++ to WebAssembly, enabling porting of game engines like Unreal and Unity to the web.</li> <li>WebAssembly allows exposing browser APIs to WebAssembly modules, enabling compilation of C/C++ code for the web.</li> <li>Demos show potential uses like running old software and games in browsers.</li> <li>Practical use cases include reusing existing libraries on the web without remaking them in JavaScript.</li> <li>WebAssembly offers more predictable performance compared to JavaScript, making it useful for specific compute-intensive tasks.</li> <li>Projects like Sigma and MongoDB Compass are using WebAssembly for better performance and consistency across browsers.</li> <li>WebAssembly is a standardized way to compile code into a binary format that can run on any browser.</li> <li>It offers predictable performance and consistency across browsers, making it useful for compute-intensive tasks.</li> <li>Rust, AssemblyScript, and Go are examples of languages that compile to WebAssembly.</li> <li>Mozilla has created a standalone WebAssembly runtime called Wasmtime, which is small, embeddable, and fast.</li> <li>The Bytecode Alliance aims to define the future of WebAssembly beyond browsers by creating standard libraries for various platforms.</li> </ol>"},{"location":"goto_FE/#internationalization-is-a-piece-of-cake-eli-schutze-ramirez-goto-2019","title":"Internationalization is a Piece of Cake \u2022 Eli Schutze Ramirez \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=nsGmQ0v36bo</p> <ol> <li>Internationalization is about designing content, applications, and specifications to work well for users from different cultures, regions, or languages.</li> <li>It involves building flexibility into your code so that it can be easily adapted later on.</li> <li>Some aspects to consider include language, writing systems, date/time/currency formatting, directionality, pluralization, grammar, and relative time.</li> <li>Internationalization is part of accessibility as it ensures websites are accessible to users from all over the world.</li> <li>Unicode is a standard that assigns each character a number, making content inclusive to everyone.</li> <li>CLDR (Common Locale Data Repository) provides information about languages and regions, including date formats, time zones, and calendar details.</li> <li>ICU (International Components for Unicode) is a library that helps developers handle internationalization in their applications.</li> <li>Always let users choose their own locale to ensure inclusivity.</li> <li>JavaScript has an Internationalization API that can format numbers, dates, and currencies.</li> <li>FormatJS is a library built on top of CLDR and ICU message format with bindings for React, Ember, Handlebars, and Dust.</li> <li>Internationalization is crucial for global apps but can be challenging due to logistics.</li> <li>Use separate files for strings and consider continuous localization services.</li> <li>Make your app flexible from the start by leaving placeholders for Strings.</li> <li>Visual elements should also be considered early on in development.</li> <li>Start internationalizing early to avoid costly redesigns later.</li> <li>Internationalization is part of accessibility. Standards and acronyms help with proper implementation.</li> <li>Start early in the design and development process for flexibility.</li> <li>Consider languages like German for testing as they have long words that can break layouts.</li> <li>Always prioritize user experience when localizing websites.</li> </ol>"},{"location":"goto_FE/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ul> <li>Reasons for rewriting software: inexperience, fun, better solutions, technical debt</li> <li>Recurring technical debt: code, tools, infrastructure</li> <li>Second system effect: refactoring can make new systems worse than the original</li> <li>Importance of good architecture: resilient to change, increasing speed of adding features</li> <li>Challenges with software architecture: lack of common definition, detachment from daily problems</li> <li>Reframe architecture as enabling constraints that help move faster and more safely over time.</li> <li>Examples of constraints include OOP, functional programming, and CSS in JS.</li> <li>Source code dependencies should be managed with rules to avoid the \"big ball of mud\" approach.</li> <li>Layered or modular approaches can help prevent unintended side effects and cross-team conflicts.</li> <li>Discussing directory structure and internal dependencies in apps.</li> <li>Big ball of mud vs layered approach: easier to isolate impact of changes, less cross team conflicts.</li> <li>Shared components: be conservative about code reuse; avoid coupling unrelated code.</li> <li>Enforcing boundaries: maintain documentation but ensure it's followed by the team.</li> <li>Focus on decoupling and simplicity rather than dryness for better code quality.</li> <li>Software changes require code to change too.</li> <li>Architecture can be seen as enabling constraints, helping apps evolve safely.</li> <li>Be conservative about code reuse and think critically about its context.</li> <li>Enforce architectural decisions through automation like forbidden dependency tests.</li> <li>Involve individual contributors in architectural decisions.</li> <li>Don't limit yourself to framework-specific solutions; learn from other programming communities.</li> </ul>"},{"location":"goto_FE/#http-headers-for-the-responsible-developer-stefan-judis-goto-2019","title":"HTTP Headers for the Responsible Developer \u2022 Stefan Judis \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JfjiFsJsO4E</p> <ol> <li>The web connects people globally, making it essential to build for everyone.</li> <li>HTTPS ensures secure connections and browser support, with high adoption rates.</li> <li>Strict Transport Security (HSTS) can enforce HTTPS usage, preventing man-in-the-middle attacks.</li> <li>Certificates are free, so websites should use HTTPS.</li> <li>HSTS ensures encryption for a specific time period and CSP limits allowed content on your website.</li> <li>SameSite cookies prevent third-party scripts from accessing cookies.</li> <li>Consider data consumption across countries to ensure affordable web usage.</li> <li>Discuss various headers and techniques to improve web performance, such as cache control, compression, WebP support, client hints, save data header, link rel preload, feature policy, optimized media headers for staging servers.</li> <li>Feature policy controls website permissions, privacy, content blocking in browsers, and recommends developer tools like Google Lighthouse, Webhint, Weapons.</li> <li>Strive for a safe, affordable, and respectful web experience for everyone.</li> </ol>"},{"location":"goto_FE/#vue-and-you-matt-danforth-goto-2019","title":"Vue and You \u2022 Matt Danforth \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n8ERFbkt_h8</p> <ul> <li>History of web development: Mosaic, browser wars, JavaScript evolution.</li> <li>jQuery's impact on front-end development.</li> <li>Ajax and JSON's role in simplifying data exchange.</li> <li>Single Page Applications (SPAs) and their SEO challenges.</li> <li>Frameworks' pros and cons, constant change.</li> <li>Browser convergence: Improved compatibility, fewer coding challenges.</li> <li>Performance and accessibility considerations during development.</li> <li>Mobile first approach importance due to increasing mobile usage.</li> <li>Componentization for reusable code and flexible software.</li> <li>Considering factors before choosing a framework or tool.</li> <li>React's license change impact on decision making.</li> <li>Angular's lack of upgrade path affecting community perception.</li> <li>History lesson about JavaScript evolution from prototype to jQuery.</li> <li>Contributors' role in determining a framework's success.</li> <li>Live coding with View, focusing on creating an instance, HTTP request library, and pre-made components based on material design.</li> <li>Balancing adding state too soon or later.</li> <li>Beautify component library impact on performance.</li> <li>Next.js benefits for simplifying web development.</li> <li>Beautify's well-documented APIs and easy accessibility.</li> <li>Axios as an HTTP request handler for Ajax requests.</li> <li>Demonstration of creating a table using View, Axios, and Bootstrap components.</li> <li>Important aspects: data binding, state management, pagination.</li> <li>Comparison with other frameworks like React and Gatsby.</li> <li>Focus on developing in components, best practices, accessibility, and performance for great applications.</li> <li>Encouraging session ratings to improve the internet experience.</li> </ul>"},{"location":"goto_FE/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>Draftbit, a platform for building mobile apps visually using Expo and React Native, has adopted Reason as its primary language due to its benefits.</li> <li>The team moved from JavaScript to Reason for reasons including ease of use, reduced technical debt, and faster development.</li> <li>They also integrated GraphQL and Apollo for better data management.</li> <li>Their stack includes React, Reason, Expo, GraphQL, Apollo, Postgres, and WebAssembly.</li> <li>Reason is a JavaScript-like functional language with a friendly compiler built on top of OCaml and uses NPM for package management.</li> <li>Benefits include faster compilation, fewer errors due to static typing, easy integration with existing projects, and helpful error messages.</li> <li>The ecosystem includes tools like Babel, Flux, Redux, Yarn, Immutable, Prettier, and TypeScript.</li> <li>Reason is ten times faster than Babel in compiling real-world projects.</li> <li>Draftbit uses React hooks as the future of development for a safer process and easier development.</li> <li>Pattern matching with switch statements provides powerful data structure representation in Reason.</li> <li>Variants offer a way to represent complex data structures through constructors and arguments.</li> <li>Jen type decorator generates bindings between JavaScript and reason, simplifying onboarding for existing projects.</li> <li>Reason allows using existing JavaScript components alongside reason code.</li> <li>BuckleScript is a fast, efficient JavaScript compiler with deep integration with popular libraries.</li> <li>Tree shaking in BuckleScript reduces the size of compiled JavaScript files significantly.</li> <li>Deep integration with JavaScript libraries allows for efficient optimization and performance improvements.</li> <li>The community can create bindings between Reason and JavaScript using specific syntax.</li> <li>Companies such as Bloomberg, Messenger, Accenture, McKinsey &amp; Company, Jane Street, and Drafted use Reason in production.</li> <li>Join a Chicago meetup or join the Reason ML Google Discord to learn more about the framework.</li> <li>A conference in October will feature Jordan Walke keynoting for the first time since releasing React in 2013.</li> <li>Give BuckleScript a chance and explore its potential as an alternative to other JavaScript frameworks.</li> </ol>"},{"location":"goto_FE/#going-serverless-with-vuejs-divya-sasidharan-goto-2019","title":"Going Serverless with VueJS \u2022 Divya Sasidharan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Mu9zKpGhX1Y</p> <ol> <li>Ordinary world: Sammy, a server worker, manages a popular pizza rating app.</li> <li>Call to adventure: The app becomes very popular but crashes due to high traffic.</li> <li>Initiation: Sammy tries to fix the issue by adding more servers, but it leads to wastage of resources and money.</li> <li>Mentor: Swami server lot advises her on scaling without servers.</li> <li>Crossing the threshold: Sammy rethinks her approach and decides to break down the monolithic app into smaller components.</li> <li>Return: Sammy's company adopts a new architecture, using serverless technology, which helps them scale efficiently and save costs.</li> <li>Challenge: Separate layers in an application called Chai Pie (pizza rating app).</li> <li>Solution: Use serverless functions with Netlify for easier deployment and management of server code.</li> <li>Final result: A more efficient system that saves resources and money while providing better functionality.</li> <li>Utilize View X for state management, Yelp data, Firebase database, authentication with GoTrue, and user roles.</li> <li>View X store handles authentication, login, and user data.</li> <li>Login component uses V-model to bind input values to data properties.</li> <li>Authentication flow: Attempts login, checks for first-time users, and redirects to dashboard.</li> <li>User roles allow assigning different roles (e.g., editor, visitor) to users in the system.</li> <li>Benefit from serverless architecture for automatic scaling.</li> </ol>"},{"location":"goto_FE/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <ol> <li>Speaker loves programming and believes it's a creative discipline with no limits but one's mind.</li> <li>Philosophy and computer science share similarities, as Ludwig Wittgenstein discussed boundaries/limits in his work.</li> <li>Programming languages limit problem-solving due to different paradigms.</li> <li>Audience participates via mobile devices during the talk; majority loves programming, knows multiple languages, and has a favorite language.</li> <li>Programming languages create different ways of thinking about problem solving.</li> <li>74% use Android, some iOS; speaker assumes most haven't seen Lisp before.</li> <li>Lisp has unique data structures and syntax.</li> <li>Closure code can be used for various applications like lecture capture tools.</li> <li>Sharing code between platforms is possible with Closure.</li> <li>Closure has immutable data structures, but atomic references help manage state.</li> <li>Introduced a lecture capture application idea using the Closure language.</li> <li>Explained the importance of sharing code between platforms and how it can be achieved with Closure.</li> <li>Discussed immutable data structures in Closure and their benefits for concurrent problems.</li> <li>Demonstrated hot reloading and state management in a real-world example using Closure.</li> <li>Encouraged learning various programming languages, paradigms, and saving orangutans.</li> </ol>"},{"location":"goto_FE/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ol> <li>Persuasive design can enhance user experience and engagement by focusing on the relationship aspect of a product, with stages like seduction, first use, and ongoing engagement.</li> <li>Use psychology to increase motivation through techniques such as scarcity (Groupon), social proof (reviews, testimonials), and anchoring (setting expectations).</li> <li>Reduce cognitive load for better usability by chunking information into smaller bits and improving processing fluency with clear visuals and simple language.</li> <li>Utilize persuasive design principles like intentional gaps, tunneling, anchoring, and social proof to guide decisions and increase conversion rates.</li> <li>Consider the endowment effect to encourage users to continue after investing time or effort.</li> <li>Understand the importance of social proof and how it influences user behavior.</li> <li>Persuasive design can be used to encourage users to take action, but sometimes adding friction can also be beneficial.</li> <li>Combine business goals with user goals to create a valuable service that aligns with both parties' interests.</li> <li>Use primary and secondary goals to solve chicken-and-egg problems in collecting data for personalized services.</li> <li>Incorporate pattern recognition, feedback loops, and showing users what to do to reinforce desired behavior.</li> <li>Engage users through gamification and motivation by providing achievable goals, feedback, and intrinsic motivation.</li> <li>Avoid tangent motivations; focus on making the process itself enjoyable.</li> <li>Use variable rewards for unpredictability and increased engagement.</li> <li>Extrinsic motivation can be seen in scoreboards and achievements.</li> <li>High scores may not be effective with a large user base; consider alternatives.</li> <li>Persuasive design should focus on facilitating intrinsic motivation for long-term engagement.</li> <li>Constraining experiences (tunneling) can limit unwanted behaviors.</li> <li>Use persuasive design responsibly to create a better world.</li> </ol>"},{"location":"goto_FE/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <ol> <li>Typescript was released in 2012 as a tool for compiling code into JavaScript, differentiating itself from other compile-to-JavaScript tools like CoffeeScript and Dart.</li> <li>Both CoffeeScript and Dart faced challenges in gaining mainstream acceptance within the JavaScript community.</li> <li>TypeScript has seen more success due to its focus on improving the JavaScript language rather than replacing it.</li> <li>NativeScript uses TypeScript for its stack, initially causing concerns but leading to a successful partnership between the two projects.</li> <li>Marketing, partnerships with Google and Microsoft, Visual Studio Code's accessibility, positive feedback from notable companies, and engineering aspects of developer relations have contributed to TypeScript's growth.</li> <li>TypeScript's commitment to the ECMAScript standard, familiarity for JavaScript developers, opt-in typing system, and tooling support in editors like Visual Studio Code make it a valuable tool.</li> <li>TypeScript is popular among frameworks like Angular, React, and NativeScript, offering libraries with inline documentation and suggestions.</li> <li>Flow is another static type checker that operates directly on JavaScript files but has fewer features than TypeScript.</li> <li>Benefits of using TypeScript include improved productivity for large teams, better code understanding, easier collaboration with non-JavaScript developers, and appeal to non-JavaScript developers due to its features from other programming languages like C# and Java.</li> </ol>"},{"location":"goto_FE/#a-cartoon-quest-new-adventures-for-webassembly-lin-clark-goto-2018","title":"A Cartoon Quest: New Adventures for WebAssembly \u2022 Lin Clark \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=rZB9Er8aq4s</p> <ol> <li>WebAssembly (Wasm) is a technology that enables running programming languages other than JavaScript on the web, initially focusing on C and C++ code.</li> <li>To improve performance, Wasm uses an assembly language designed for conceptual machines, allowing quick compilation over the web.</li> <li>WebAssembly supports memory management through typed arrays and aims to run heavier applications like Photoshop and AutoCAD in browsers.</li> <li>Future features include multi-threading support, SIMD (Single Instruction Multiple Data) for parallel processing, and more efficient compilation techniques.</li> <li>WebAssembly needs support for multi-threading, SIMD, 64-bit addressing, streaming compilation, and HTTP caching to improve performance.</li> <li>Small web assembly modules are being used in places where heavy processing is needed, with fast calls between JavaScript and Wasm essential for integration.</li> <li>Converting complex values like objects to numbers for passing data between JavaScript and Wasm can be slow and complicated.</li> <li>WebAssembly focuses on small modules for specific tasks, with proposals like reference types and host bindings improving integration with existing systems.</li> <li>Integration with browsers' built-in ES module support is crucial for seamless use.</li> <li>Tools like WASM Bind Gen automate glue code creation for different languages.</li> <li>Backwards compatibility is vital for older browsers that don't understand Wasm, with tools like wasm-to-js helping.</li> <li>WebAssembly needs to support high-level language features and integrate with JavaScript GC for efficient use in frameworks.</li> <li>The future of web development includes rewriting parts of JavaScript frameworks using Wasm and compiling statically typed languages to it.</li> <li>Outside the browser, web assembly can be used for portability and security models.</li> <li>WebAssembly combines portability and security of the web, improving performance by allowing native modules to run at nearly native speeds without needing compilation for specific devices.</li> <li>Node can benefit from WebAssembly by providing full portability with a POSIX-like API for accessing system resources.</li> <li>Package name maps proposal will help in mapping module names to paths for loading modules across different platforms.</li> <li>Other use cases like CDNs, edge computing, blockchain, IoT, and more can benefit from WebAssembly's performance and security features.</li> <li>A common runtime would speed up development for these use cases.</li> <li>WebAssembly is still evolving to unlock new opportunities.</li> </ol>"},{"location":"goto_FE/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ul> <li>Mozilla contractor and Rust developer, Ashley Williams, shared her experience of convincing NPM to use Rust.</li> <li>NPM is the world's largest package registry with over 1 million packages.</li> <li>Rust is a systems programming language designed for speed, safety, and thread safety.</li> <li>The goal was to provide insights on how to convince companies to adopt Rust.</li> <li>Ashley discussed challenges faced during the process and shared tips for success:</li> <li>Don't completely rewrite your software in Rust.</li> <li>Introduce new technologies through microservices architecture.</li> <li>Show up with code to demonstrate the language's capabilities.</li> <li>Avoid bashing other languages; focus on positives of the chosen technology.</li> <li>Be a systems developer, not just a web developer.</li> <li>Focus on safety and productivity rather than speed.</li> <li>Rust is a programming language that empowers developers to be systems developers.</li> <li>Embrace memory safety guarantees and small memory footprint.</li> <li>Compilers are cool; they can make trade-offs irrelevant.</li> <li>Zen and the art of motorcycle maintenance: complex systems evolve from simple ones, complete rewrites rarely work.</li> <li>Introduce new technology with inclusivity and focus on support elements.</li> <li>Create documentation for different levels of expertise.</li> <li>Invest in tooling, such as cargo and crates.io.</li> <li>Use community channels to share interesting developments.</li> <li>Emphasize the importance of welcoming beginners.</li> <li>Rust has a strong focus on documentation and community support.</li> <li>It offers tools like cargo, rustfmt, Clippy for linting, and IRC channels for beginners.</li> <li>Rust has been the most loved programming language in Stack Overflow surveys for three years.</li> <li>Be prepared for things to change as Rust is still evolving.</li> <li>Writing efficient code in Rust requires understanding memory management and avoiding naive approaches.</li> <li>Node's log parsing was slow, so a team tried using Rust.</li> <li>Rust's default safety features made it slower than expected initially but faster in the end.</li> <li>Andre Arco used Rust for log parsing and achieved 50k records per second, fitting in free AWS Lambda tier.</li> <li>Rust compiler has great error messages and aims to make writing correct code easy.</li> <li>The language encourages making wrong things hard or impossible to prevent errors.</li> <li>Rust is good at processing files and transforms, useful in various scenarios.</li> <li>Server performance affects team dynamics.</li> <li>Focus on solving real problems, not just cool ones.</li> <li>Rust is useful for processing files and memory optimization.</li> <li>Learning curves can be a blessing in disguise.</li> <li>Apply multiple tips simultaneously to enjoy the pleasure of contradictions.</li> <li>Gumption (spirited initiative) is essential alongside understanding context and other people's experiences.</li> <li>Consider using WebAssembly for faster, more reliable client-side components with Rust.</li> </ul>"},{"location":"goto_FE/#make-web-apps-fun-to-build-and-easy-to-refactor-with-elm-daniel-bachler-goto-2017","title":"Make Web Apps Fun to Build and Easy to Refactor with Elm \u2022 Daniel Bachler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=ehtn81p06Ow</p> <ol> <li>Elm is a statically typed, purely functional language for building web apps.</li> <li>It simplifies syntax compared to JavaScript and has strong typing with no runtime errors.</li> <li>Addresses pain points of dynamic languages: refactoring issues and lower code quality.</li> <li>Elm's type system ensures correctness and prevents bugs through exhaustive pattern matching.</li> <li>Union types allow modeling complex data structures and states, ensuring all cases are covered.</li> <li>Polymorphic types provide flexibility in defining tree types, using algebraic data types for modeling various cases.</li> <li>Elm has no null or undefined values; uses Maybe to represent missing values.</li> <li>Everything is immutable, requiring creation of new values instead of modifying existing ones.</li> <li>Loops are replaced by map, fold, and recursion.</li> <li>Pure functions make testing easier due to predictable results.</li> <li>Elm uses unidirectional data flow for easy testing and maintenance.</li> <li>Type annotations help with refactoring and ensure correctness.</li> <li>Elm has a strong community, active development, and nice code formatting.</li> <li>The compiler helps catch errors early and ensures semantic versioning.</li> <li>Ports are used for communication between JavaScript and Elm code.</li> <li>Some limitations include not being able to publish native modules or use Chase and decoders automatically.</li> <li>Learn more about Elm at try.elm-lang.org and join the Elm Slack community.</li> </ol>"},{"location":"goto_FE/#augmented-reality-challenges-writing-ar-experiences-in-javascript-philipp-nagele-goto-2017","title":"Augmented Reality - Challenges &amp; Writing AR Experiences in JavaScript \u2022 Philipp Nagele \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=wVOESt-TpSA</p> <ol> <li>Philipp, CTO of Wikitude, introduces AR and its evolution.</li> <li>The reality continuum includes VR, MR (mixed reality), and AR.</li> <li>Digi Capital's funding growth shows the rise in AR/VR investments.</li> <li>Understanding context is crucial for successful AR experiences.</li> <li>Wikitude has been developing an SDK for creating AR since 2010.</li> <li>Major companies like Facebook, Microsoft, Google, and Apple drive the industry.</li> <li>Gartner Hype Cycle places AR in the \"peak of inflated expectations\" phase.</li> <li>Early examples include hardware-based systems in fighter planes and helicopters.</li> <li>Program and Go is an example of simple AR using location data.</li> <li>Advanced AR uses image recognition, facial detection, and 3D modeling.</li> <li>Field services maintenance, furniture visualization, remote assistance, and training are popular use cases.</li> <li>All AR systems consist of sensing, computing, visualization, and projection parts.</li> <li>Sensing technology improves with stereo cameras, HDR, depth sensors, and radar.</li> <li>Software focuses on understanding the environment and recognizing shapes or objects.</li> <li>Computing status in 2017: advanced with SLAM and VIO.</li> <li>Visualization challenges include believability, adaptive light rendering, and projection on various devices.</li> <li>AR 1.0 example: analog experience of a Roman city arch.</li> <li>Key takeaways for AR: makes the invisible visible and connects offline with online.</li> <li>Context is crucial in AR experiences, ensuring relevance and proper delivery of information.</li> <li>JavaScript can be used to create AR experiences.</li> <li>HTC Dream (T-Mobile G1) was an iconic device as the first commercial Android phone.</li> <li>Weekly SDK architecture includes hardware layer, camera access, gyroscope, optimizations for various platforms, OpenGL rendering, metal rendering, SLAM engine, image recognition, object recognition, and cloud recognition.</li> <li>The speaker discussed their SDK architecture and how it works with JavaScript API on Android, iOS, and Windows 10.</li> <li>They explained how to create augmented reality experiences using images, videos, 3D models, and web views in JavaScript.</li> <li>A location-based experience was demonstrated by overlaying a video onto an image from a catalog.</li> <li>The speaker encouraged attendees to try the SDK on their own and explore more materials on their website.</li> <li>Uses a target management tool to create digital footprints of reference images and match them in real-time.</li> <li>Example: Augmenting an image from a catalog with a video overlay using the Image Tracker.</li> <li>Available for free trial, more information on website.</li> </ol>"},{"location":"goto_FE/#why-backend-for-frontend-is-key-for-microservices-brian-grant-krishnan-ramanathan-goto-2017","title":"Why Backend for Frontend Is Key for Microservices \u2022 Brian Grant &amp; Krishnan Ramanathan \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=PwgQZ8eCGxA</p> <ol> <li>Morningstar is an investment research firm with various client segments.</li> <li>They adopted Back end for front end (BFF) architecture to cater to different user experiences and data needs.</li> <li>BFF layers provide a unified API for multiple products, allowing teams to focus on their specific domain while sharing common infrastructure.</li> <li>BFF helps maintain consistency across platforms and enables the reuse of existing APIs.</li> <li>Domain Driven Design (DDD) principles are applied to ensure data normalization and massaging within the service layer.</li> <li>For mobile apps, a separate user experience with different back-ends was chosen for Android and iOS.</li> <li>Bounded context helps maintain consistent domain modeling within the apps and BFF.</li> <li>Naming issues were addressed by adjusting API names and models in the bounded context.</li> <li>Caching, batch processes, and HTTP cache headers were used to improve performance.</li> <li>The Rest discussion focuses on using HTTP verbs and conventions, but opinions may differ on its implementation.</li> <li>Adopted Richardson Maturity Model for RESTful architecture: Level 1-3, reduce API chattiness with view-specific APIs, parallelism, asynchronous operations, and use Play Framework to handle asynchronous requests.</li> <li>Generalized API handles market data and securities, updated security API supports multiple security IDs for viewing information about multiple securities.</li> <li>BFF service uses Play Framework to handle asynchronous operations, parallelism, and error handling.</li> <li>Anti-corruption layer handles different styles of responses from various data providers.</li> <li>Lessons learned: be cautious when splitting services, consider reuse by other teams, use BFF for buffering change management.</li> <li>Service still exists and may be separated in the future.</li> <li>BFF pattern is used for multiple applications, but reuse by other teams is limited.</li> <li>BFF service helps manage changes across different apps.</li> <li>Stub data is added to help client developers work faster.</li> <li>Balance between general-purpose API and view-specific API achieved.</li> <li>Restful approach not heavily used in the BFF service, but it works well for them.</li> <li>BFF acts as a gateway API for mobile applications.</li> <li>Duplication of stuff in BFF is limited, but consistency benefits client application development.</li> </ol>"},{"location":"goto_FE/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ol> <li>Uber's growth and scale: Present in 73 countries, 470 cities, with 1.5 million active driver partners.</li> <li>JavaScript evolution in Uber's engineering organization: Uses multiple languages (Go, Java, Node.js, Python) for different purposes.</li> <li>Four ways Uber uses JavaScript across its platform: Backend microservices, frontend web applications, data visualization, and external API for developer platform.</li> <li>Uber's focus on availability and scalability: Moved from PHP to Node.js for web applications due to core strengths (asynchronous I/O, non-blocking single threaded event loop, great module ecosystem).</li> <li>Marketplace platform with 3400+ microservices and 100 services per trip.</li> <li>Microservices advantages: Clear ownership boundaries, product specific velocity, independent team velocity, language/platform independence.</li> <li>Node.js adoption due to language independence and talent availability.</li> <li>Challenges of scaling with Node.js: Increased complexity, discovery, eventual consistency, operational overhead, repeated code.</li> <li>Scaling solutions: Application level sharding (Ring Pop), efficient communication (T Channel), distributed tracing (Jager).</li> <li>Node.js performance considerations: Tight interfaces and static typing for quality code.</li> <li>Observability tools like Jager for visualizing distributed applications.</li> <li>Consistent platform foundation for over 250 web applications.</li> <li>Node.js, npm, Express, React, and Redux used for the web platform.</li> <li>Customized internal NPM registry, scaffolding, authentication, security, metrics logging, internationalization, error handling, and analytics tools.</li> <li>Separating front-end services from back-end services allows better utilization of languages and easier scaling.</li> <li>React for standardized UI design across teams, Style Tron for CSS management.</li> <li>React libraries provide various charts and visualizations.</li> <li>Luma GL simplifies WebGL interaction with 64-bit precision.</li> <li>Open source tools available on GitHub and engineering blog.</li> <li>Uber aims to build an open platform for creating moving experiences using their tools and data.</li> <li>Contributions to the community through GitHub, engineering blog, and deep dives into tools on uber.github.com/uber-node and uber.github.com/uber-web.</li> </ol>"},{"location":"goto_FE/#css-vs-javascript-trust-vs-control-christian-heilmann-goto-2017","title":"CSS vs. JavaScript, Trust vs. Control \u2022 Christian Heilmann \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=_3VsoqpnTrs</p> <ol> <li>CSS is a complex language with fault-tolerant nature, leading to misunderstandings among developers.</li> <li>Developers should focus on preventing errors before writing code and ensure layouts work across browsers.</li> <li>CSS prefixes can cause issues; prioritize sensible layouts for different browsers.</li> <li>CSS is essential for web development, focusing on user interface enhancement.</li> <li>Browser support and control are beyond developers' reach, but they should build interfaces that work across all browsers.</li> <li>CSS has evolved with features like calculated values, media queries, generated content, animations, transitions, viewport units, flexbox, grid layouts, custom properties, feature queries, and JavaScript integration.</li> <li>Use these tools wisely to create responsive interfaces without compromising performance or accessibility.</li> </ol>"},{"location":"goto_FE/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Elm is a functional programming language that compiles to JavaScript, offering different semantics for increased reliability and predictability.</li> <li>Interoperating with existing JavaScript code can be achieved by embedding Elm in HTML elements or using techniques like Elm Architecture for interactivity.</li> <li>The Virtual Dom, Actions, Effects, and Update function help maintain Elm's guarantees while working with JavaScript.</li> <li>Elm Runtime handles rendering and updating the virtual DOM efficiently.</li> <li>Interoperating with JavaScript: Use commands (Elm to JS) and subscriptions (JS to Elm).</li> <li>Transitioning from JavaScript to Elm: Keep existing JavaScript and embed Elm for specific parts.</li> <li>Incrementally integrate Elm into existing apps, considering runtime overhead.</li> <li>Use Elm for business logic with JavaScript handling DOM.</li> <li>Drop-in components in frameworks like React using libraries like react-elm-components.</li> <li>Communicate between Elm and JavaScript using data to preserve guarantees.</li> <li>Resources: Official Elm guide, 'How to use Elm at Work' blog post, courses, books, trainers.</li> </ol>"},{"location":"goto_FE/#avoiding-the-nightmare-on-elm-street-thomas-anagrius-goto-2017","title":"Avoiding the Nightmare on Elm Street \u2022 Thomas Anagrius \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Qhx81eI5FPs</p> <ol> <li>Thomas discusses the challenges of choosing tech for a project.</li> <li>Elm is a typed functional language used in their log aggregation and monitoring tool.</li> <li>Considerations when choosing tech include performance, scalability, team culture, and maintainability.</li> <li>Every technology has its own set of pains; it's about picking the right kind of pain for your project.</li> <li>Elm's unique syntax and learning curve can be challenging, but it offers benefits like type safety and fast execution.</li> <li>Technology selection involves trade-offs.</li> <li>Elm was chosen for its data transformation capabilities, type language benefits, and company culture fit.</li> <li>Being early adopters led to challenges, but the investment is expected to pay off in the long run.</li> <li>Elm's time-traveling debugger provides powerful insights into application state changes.</li> <li>Elm is a functional programming language with powerful features such as time-traveling debugging and type inference.</li> <li>It's useful for specific use cases, but has a steep learning curve.</li> <li>Other languages like CoffeeScript and Facebook's Flow offer similar concepts.</li> <li>The future of Elm involves considering alternatives and exploring various web platform languages.</li> <li>State management is built into the language, making it easier to work with compared to separate libraries or frameworks.</li> <li>React state transformations can lead to runtime exceptions, but Facebook's Flow helps with type inference.</li> <li>Elm is a language that focuses on good decisions when starting new projects; consider alternatives like TypeScript.</li> <li>State management is built into the language and how it's used in Elm.</li> <li>Elm produces a shadow DOM for efficient updates, making it faster than React (factor 5).</li> <li>Language choice impacts performance and control over assumptions.</li> </ol>"},{"location":"goto_FE/#we-want-webassembly-ben-smith-goto-2017","title":"We Want WebAssembly \u2022 Ben Smith \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=P2C9bRtCWOA</p> <ol> <li>Web Assembly is a low-level executable format for the web, offering performance benefits through hardware optimization and focus on low-level operations.</li> <li>Modules contain functions, memory, globals, tables, and exports, allowing for various functionalities within Web Assembly.</li> <li>TVM compiles Java bytecode to JavaScript and Web Assembly, supporting languages like Java, Scala, and Kotlin. TurboScript is a new language that can compile to Web Assembly for browser use.</li> <li>Future improvements include support for more languages (e.g., Lisp, OCaml), exception handling, and Cindy optimizations.</li> <li>WebAssembly will enable faster execution of languages like TypeScript and better integration with existing web technologies like JavaScript.</li> <li>Threads and Atomics are being considered for future updates to improve multitasking capabilities.</li> <li>Collaboration between browser vendors ensures compatibility across platforms, while exception handling and garbage collection can be supported in WebAssembly but not as efficiently as native languages.</li> <li>In the future, developers may use WebAssembly libraries or write code directly in new languages for faster performance. Potential uses include client-side face recognition and support for new programming languages.</li> <li>The goal is to make WebAssembly seamless and unnoticeable, improving overall performance.</li> </ol>"},{"location":"goto_FE/#resilience-jeremy-keith-goto-2016","title":"Resilience \u2022 Jeremy Keith \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=t0dUvs3jQnw</p> <ul> <li>Internet creation myth: Paul Baran, Donald Davies, and Vint Cerf developed TCP/IP for a decentralized network.</li> <li>World Wide Web project by Tim Berners-Lee at CERN used HTTP, URLs, and HTML to create an accessible platform.</li> <li>Simplicity is key in adoption: HTTP isn't the best protocol but it's simple enough for people to use.</li> <li>The web's success lies in its openness and lack of central control.</li> <li>Tim Berners-Lee's World Wide Web proposal was simple and powerful, leading to adoption.</li> <li>HTML grew from 21 elements to 121 over time while maintaining compatibility with older browsers.</li> <li>The canvas element allowed for fallback content in older browsers.</li> <li>The image element (IMG) was introduced without a closing tag, resulting in the alt attribute for alternative text.</li> <li>Responsive web design highlighted issues with handling text and images on the web.</li> <li>Introduction of source attribute for responsive images.</li> <li>CSS's fault tolerance and simplicity.</li> <li>Robustness principle (John Pastel's law) applied to web design.</li> <li>Browsers need to be liberal in accepting HTML/CSS due to user switching options.</li> <li>John Pastel's law (robustness principle) is about being tolerant of errors and conservative in what you send.</li> <li>Declarative languages like HTML and CSS can handle errors better due to their loose error handling.</li> <li>Imperative languages, such as JavaScript, require stricter error handling models.</li> <li>XHTML 2 was rejected because it had a draconian error handling model that would break the web experience.</li> <li>Murphy's Law applies to the web and can cause unexpected issues with client-side JavaScript.</li> <li>The auto industry thoroughly tests their cars for safety, similar to how we should test our web applications.</li> <li>Progressive enhancement approach leads to better experiences for all users.</li> <li>Embrace chaos of web and user needs over developer convenience.</li> <li>Focus on core functionality and make it available with the simplest technology.</li> <li>Enhance the experience by adding more features, ensuring compatibility across devices and browsers.</li> <li>The three steps: 1) Core functionality for everyone, 2) Simple tech, 3) Enhanced features.</li> <li>Embrace chaos of web and user needs over developer convenience.</li> <li>Progressive enhancement is a way of thinking, not just a feature.</li> <li>Focus on core functionality and compatibility.</li> <li>Start with accessibility and responsiveness in mind.</li> <li>Draw the line between core functionality and enhancements based on user needs.</li> <li>Easier to design this way from the start than retrofitting later.</li> </ul>"},{"location":"goto_FE/#the-frontend-taboo-a-story-of-full-stack-microservices-luis-mineiro-moritz-grauel-goto-2016","title":"The Frontend Taboo: a Story of Full Stack Microservices \u2022 Luis Mineiro &amp; Moritz Grauel \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=vCzTK4XPfX8</p> <p>Error</p>"},{"location":"goto_FE/#you-can-use-css-for-that-rachel-andrew-goto-2016","title":"You Can Use CSS For That! \u2022 Rachel Andrew \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=TNhR6ol9mBc</p> <ul> <li>CSS Layout: Flexbox and Grid</li> <li>Box Alignment: A new specification for alignment in layouts, not limited to block layouts.</li> <li>CSS Grid Layout: Designed as a fifth purpose layout method, for two-dimensional layouts.</li> <li>Min Max: Allows setting minimum and maximum values for track sizes in grid layouts.</li> <li>Practical use case: Using grid layout to handle varying content lengths without breaking the design.</li> <li>Grid layout allows flexible container design with varying column tracks.</li> <li>Min and max values can be used to set minimum and maximum sizes for elements, ensuring they don't break the layout.</li> <li>Auto placement algorithm in grid layout helps arrange items efficiently.</li> <li>Grid auto flow property can backfill gaps in the grid for a tightly packed display.</li> <li>Accessibility should be considered when using grid layout as it may affect logical order of content.</li> <li>Grid layout is currently being developed behind browser flags, with support expected to ship in major browsers soon.</li> <li>Display contents allows elements to be treated as grid or flex items without affecting their position in the DOM.</li> <li>CSS shapes enable text flow around curved lines or other non-rectangular objects.</li> <li>Clip paths can be used to clip away content around images, providing a nice enhancement for websites.</li> <li>Modernizer is a tool that detects support for CSS features within browsers without using JavaScript.</li> <li>Feature queries allow checking browser support before using new features.</li> <li>Initial letter property creates proper drop caps effect.</li> <li>Test for initial letter support with feature queries.</li> <li>Writing modes help control content direction, useful for mixed languages and creative text effects.</li> <li>Custom properties (CSS variables): Define values and use them in your stylesheets.</li> <li>Calc function: Perform basic math operations with length units in CSS.</li> <li>Sticky positioning: A new value of the position property that makes elements stick when they reach the top of the viewport, commonly used for navigation.</li> <li>Scroll snapping helps pages behave more like apps by automatically moving to the next section when scrolled past a specific point.</li> <li>Encourage browser vendors to adopt new features by raising bugs and discussing use cases.</li> <li>Share thoughts on CSS working group patterns and specs.</li> <li>Participate in discussions about early stage CSS specifications on GitHub.</li> <li>Grid layout is expected to be in browsers early next year but may have performance issues. Start learning now for better understanding when fully supported.</li> <li>Use feature queries to detect support of grid and enhance layouts instead of polyfilling.</li> <li>Discussions on how user agents should handle lazy loading content are not currently addressed in the specification.</li> </ul>"},{"location":"goto_FE/#javascript-the-cloud-the-rise-of-the-new-virtual-machine-scott-hanselman-goto-2016","title":"JavaScript, the Cloud &amp; the Rise of the New Virtual Machine \u2022 Scott Hanselman \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7LZ0Lznq4Aw</p> <ul> <li>The cloud is more than just a remote computer, offering flexibility and scalability through virtualization.</li> <li>Virtualization allows machines to be moved and run in different locations, with 30% of Azure running on Linux as an example.</li> <li>Programmatic ability to create virtual machines is crucial for understanding the underlying technology.</li> <li>Cloud computing encapsulates best practices for scaling web systems, making it easier to use and more efficient.</li> <li>Learning about virtual machines helps understand cloud computing's underlying technology.</li> <li>Language choice in development doesn't matter; focus on what makes the developer happy.</li> <li>High-level abstraction in cloud computing allows better decision-making and problem solving.</li> <li>Renting resources from a cloud provider means they handle failures and issues, reducing workload.</li> <li>A dashboard should show the big picture of company operations, not just monitoring.</li> <li>Yak shaving refers to extra steps before accomplishing tasks; cloud computing allows higher-level problem solving.</li> <li>Functions as a service (FaaS) enables scaling based on input/output.</li> <li>Tim Berners-Lee's vision for the internet was as a hypermedia book, not an application platform.</li> <li>Inventors of technologies like PDF and YouTube made the web more appealing.</li> <li>Toyota uses hybrid systems with outdated software like Windows XP and Firefox.</li> <li>JavaScript is versatile, allowing developers to create impressive projects and complete operating systems.</li> <li>Atwood's Law states that any application written in JavaScript will eventually be rewritten in JavaScript.</li> <li>HTML5 and the open web are pushing technology forward as a viable alternative to native apps.</li> <li>Web design has evolved from simple HTML tables to complex frameworks.</li> <li>jQuery is popular, but vanilla JS can create custom frameworks.</li> <li>The web is powerful with integrated virtual machines in browsers; cloud computing helps offload tasks for better efficiency.</li> </ul>"},{"location":"goto_FE/#building-an-app-using-jstypescript-node-electron-100-oss-components-erich-gamma-goto-2016","title":"Building an App Using JS/TypeScript, Node, Electron &amp; 100 OSS Components \u2022 Erich Gamma \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uLrnQtAq5Ec</p> <ol> <li>Transition from IBM to Microsoft</li> <li>Learning JavaScript and web technologies during a four-month break</li> <li>Building tools for online development with Microsoft</li> <li>Developing Visual Studio Code editor</li> <li>Embracing open source at Microsoft</li> <li>Pivoting from browser-based IDE to desktop ID using the same technology</li> <li>Recognition of Microsoft's transformation through open source announcements - Microsoft transitioned from focusing on Visual Studio to enabling developers to use their preferred tools and platforms.</li> <li>The shift included moving away from a compiler-based approach, embracing open source, and developing a cross-platform desktop IDE with a focus on the inner loop (development process).</li> <li>The new editor aims for lightweight, keyboard-centered functionality while maintaining intelligence and debugging capabilities.</li> <li>OmniSharp is a project that enables C# development in any editor by moving the brains of the language to the editor itself - Demonstration of C# development with OmniSharp, an open source project that enables cross-platform usage.</li> <li>Visual Studio uses electron, a web technology for desktop applications.</li> <li>Typescript was adopted to improve the codebase and provide better tooling support.</li> <li>Typescript offers optional static types, flexible type system, generics, structural typing, interfaces, and powerful type inference for improved safety and documentation - Adoption of TypeScript for better code maintenance and flexibility.</li> <li>Moving from Eclipse's plugin model to a separate extension host for robustness and performance.</li> <li>Using Node and Typescript for extension development, with a focus on deep language integration.</li> <li>Providing an API that enables rich language support for various languages in the editor - Separate extension host for better performance and robustness.</li> <li>Node.js based, allowing reuse of modules in extensions.</li> <li>Fluid API with deep language integration support.</li> <li>Extension ecosystem with marketplace for easy discovery.</li> <li>Lazy activation feature for efficient resource usage.</li> <li>Demonstration of creating an extension with hover provider - Richer code experience through typed TypeScript and JavaScript.</li> <li>Language servers for different programming languages.</li> <li>Open source approach with daily updates and feedback channels.</li> <li>Microsoft's transformation with Visual Studio Code as an example.</li> <li>Encouraging users to create extensions and publish them.</li> </ol>"},{"location":"goto_FE/#visual-studio-code-shipping-one-of-the-largest-microsoft-javascript-apps-alex-dima-goto-2016","title":"Visual Studio Code: Shipping One of the Largest Microsoft JavaScript Apps \u2022 Alex Dima \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=mTKMefhTjh8</p> <ol> <li>Visual Studio Code is a web app built using JavaScript and Node.js, with the Monaco Editor as a separate library.</li> <li>The team behind VS Code started in 2011, focusing on JavaScript development tools for browsers.</li> <li>They adopted TypeScript early on, which provides optional syntactical constructs like type annotations and interfaces to enhance productivity.</li> <li>TypeScript compiles down to JavaScript, offering runtime benefits without additional costs. Rich tooling at compile time helps catch errors before runtime, improving code quality.</li> <li>TypeScript is a superset of JavaScript that adds type annotations and other features, helping catch errors early, improve code readability, and enable better refactoring. It can compile to ECMAScript 5 or lower versions while still using newer syntax.</li> <li>Destructuring and async/await are supported in TypeScript for easier coding.</li> <li>TypeScript's compiler generates a tsconfig.json file that contains instructions for the compiler, such as targeting specific ECMAScript versions.</li> <li>CommonJS and AMD (Asynchronous Module Definition) are two module systems for JavaScript. TypeScript supports compiling to either CommonJS or AMD formats.</li> <li>Lazy code loading is an advantage of AMD, allowing only necessary dependencies to be loaded when needed. Bundling and minifying code can improve startup time by reducing the number of HTTP requests. Minification helps V8's performance by optimizing function bodies under 600 characters.</li> <li>TypeScript can help with better data structures and memory leaks detection. Compile TypeScript to JavaScript for different teams or projects.</li> <li>View models can improve readability and performance by splitting long strings into multiple lines.</li> <li>Electron is a framework that combines HTML, Node.js, and Chromium to create desktop applications using JavaScript. It uses main and renderer processes for communication with the operating system and UI elements, respectively.</li> <li>Visual Studio Code uses multiple processes for different tasks like checking updates, managing extensions, and running on-demand processes. Gulp watch is used to compile TypeScript code incrementally during development.</li> <li>A demo was shown where a small change in CSS made the editor background appear like beer, highlighting Electron's flexibility. Performance tests and virtual scrolling technique were discussed. Issues with minified code, specifically jQuery, were mentioned. Chrome's enabled pane flashing tool for profiling was utilized. Translate3d was used to improve performance.</li> </ol>"},{"location":"goto_FE/#beyond-flux-scalable-frontend-architectures-built-upon-publishsubscribe-m-kurze-goto-2016","title":"Beyond Flux - Scalable Frontend Architectures built upon Publish/Subscribe \u2022 M. Kurze \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=82rrMIf48Zk</p> <ol> <li>Increasing complexity in web applications necessitates better tools and architecture.</li> <li>Three main challenges: managing complexity, ensuring reactivity, and scaling across teams.</li> <li>Unidirectional data flow (Flux) is a solution to handle state, views, and actions.</li> <li>Multiple Flux implementations exist, including Redux which is popular nowadays.</li> <li>A simple web shop example demonstrates how Flux works with multiple stores managing different aspects of the application.</li> <li>Advantages of Flux over MVC: strict separation of state, single storage for state, good testability, simplifies server-side rendering.</li> <li>Disadvantages: harder to manage complex actions, testing difficulties due to dependencies between stores.</li> <li>Compare advantages and disadvantages of classical MVC approaches vs Flux architecture.</li> <li>Flux has better state management, testability, and server-side rendering.</li> <li>Redux eliminates mutable state problems and offers functional composition, snapshot replay, and efficient rendering.</li> <li>Immutable data types can help prevent accidental modifications but may have a steep learning curve.</li> <li>Container components in Redux allow decoupling of components for scalability.</li> <li>Introduced immutable data types and their benefits.</li> <li>Discussed challenges of mutable JS and functional programming paradigms.</li> <li>Explained container components in Redux and their limitations.</li> <li>Presented publish-subscribe architecture as an alternative solution.</li> <li>Described event bus, view, and activity components in this new approach.</li> <li>Demonstrated how it allows decoupling and unidirectional data flow.</li> <li>Highlighted the benefits of this pattern for scalability and maintainability.</li> <li>Introduced a framework called LuxarJS which provides event bus functionality and component configuration.</li> <li>Advantages include decoupling of components, easier testing, reusability across applications, and flexibility in choosing development approaches.</li> <li>Discussed the similarities between LuxarJS and Flux/Redux in terms of unidirectional data flow and handling complexity, reactivity, and scalability.</li> </ol>"},{"location":"goto_FE/#busy-developers-guide-to-meteorjs-ted-neward-goto-2016","title":"Busy Developer's Guide to MeteorJS \u2022 Ted Neward \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uMSY-vWB23w</p> <ul> <li>Meteor is a full-stack JavaScript framework, embracing the language in its database, server, and client.</li> <li>It uses either Angular, React, or Blaze for frontend development.</li> <li>Data on the wire concept: only data travels between client and server.</li> <li>Meteor supports various cloud platforms and NPM ecosystems.</li> <li>Full stack reactivity: live page updates, data synchronization, latency compensation, hot code pushes.</li> <li>Security is taken seriously with insecure package by default, allowing customization of what gets shipped to the client.</li> <li>It's a classic MEAN stack (MongoDB, Express, Angular/React, Node.js).</li> <li>Meteor has a specific directory structure for client and server code.</li> <li>NPM is used to manage dependencies.</li> <li>ECMAScript 6 features are used in Meteor applications.</li> <li>Meteor offers a command line tool, build tool, and deployment options.</li> <li>Transpilers like Babel and TypeScript can be used for non-Meteor projects that need ES6 support.</li> <li>Meteor uses prototype inheritance and ECMAScript import syntax.</li> <li>It creates file structure with directories for client, server, imports, public, and private assets.</li> <li>Components in meteor are more domain-related than reusable across applications.</li> <li>Tasks are managed through templates with events to handle form submissions and updates.</li> <li>Meteor uses mini-mongo for client-side database and has an ecosystem of packages for user management.</li> <li>The platform is opinionated about the type of databases it supports, preferring JSON style ones. Relational databases may need adaptation.</li> </ul>"},{"location":"goto_FE/#the-return-of-stream-io-andre-staltz-medeiros-goto-2016","title":"The Return of Stream I/O \u2022 Andre 'Staltz' Medeiros \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Tkjg179M-Nc</p> <ol> <li>Andre's talk focuses on the return of Stream IO and its similarity to an old concept in Haskell, as well as his journey with reactive programming through Future Eyes.</li> <li>Psycho JS is a small library for frontend frameworks that uses message passing, input/output logic, and streams for asynchronous programming.</li> <li>Stream IO separates logic from effects by treating them as data, similar to monadic I/O in Haskell. It uses generators for pausing and resuming execution.</li> <li>Haskell's original stream IO was an April Fool's joke, making it unsuitable for transformational programs.</li> <li>The history of computer programming has seen a shift from transformational systems (90s) to reactive systems. Haskell moved from stream IO to monadic IO in the late 90s.</li> <li>Psycho JS is a JavaScript framework with message passing, input/output logic, and streams for asynchronous programming. Cycle.js has asynchronous message passing, suitable for user interfaces or reactive systems but not question-and-answer interactions. Elm Architecture handles complex requests and responses using tasks.</li> <li>Message passing can be combined with monadic IO in Elm. Flux and Redux have unidirectional data flow but lack a purely functional approach.</li> <li>Languages like Elm, Closure, Dart, etc., focus on asynchronous programming and message passing. Cycle JS is event-driven and message-passing concurrency.</li> <li>Enforcing developers to avoid creating their own effects can be done with tools like ESLint plugins or by writing a language optimized for the framework.</li> <li>Bind and flatMap are implemented in hacky JavaScript monadic IO, which may not be ideal for reactive UI. Haskell has functional reactive programming libraries.</li> <li>Consider using TypeScript with Angular to benefit from its type checking and self-documenting code. Elm is a purely functional language with zero runtime errors.</li> </ol>"},{"location":"goto_FE/#elm-friendly-functional-programming-for-the-web-luke-westby-goto-2016","title":"Elm-Friendly Functional Programming For The Web \u2022 Luke Westby \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=tN5UmM2yZPY</p> <ol> <li>Elm is a functional programming language designed for the web, focusing on data and functions.</li> <li>Setting up an Elm project involves installation, package management, and creating index.html.</li> <li>Data in Elm has types and shapes, with relationships created using functions.</li> <li>Immutable updates and state management ensure reliable apps with delightful user experiences.</li> <li>Elm's type system catches errors during compilation, while records are used for structured data.</li> <li>Type aliases help refactor code and prevent duplication issues.</li> <li>Custom data types ensure safe code and prevent runtime errors.</li> <li>Pattern matching guarantees robust programs by covering all cases.</li> <li>Elm's syntax keeps developers safe from runtime errors, allowing them to build web apps with confidence.</li> <li>Import HTML and create a basic Elm app with static HTML.</li> <li>Understand the MVU architecture (Model, View, Update) for building Elm applications.</li> <li>Create a model, define update functions, and refactor code into view function with click events.</li> <li>Compile the program using Reactor for real-time debugging.</li> <li>Introduced custom Union types for messages in an application.</li> <li>Created an interactive app with HTML, Elm, and no runtime errors.</li> <li>Share resources to learn more about Elm and join its community.</li> <li>Discuss the benefits of functional languages for web development.</li> </ol>"},{"location":"goto_FE/#ionic-mobile-app-development-with-a-superpowered-platform-matt-kremer-goto-2016","title":"Ionic: Mobile App Development with a Superpowered Platform \u2022 Matt Kremer \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=P7NPfjqeXPY</p> <ul> <li>20+ years of web evolution: from simple websites to dynamic and powerful apps</li> <li>Ionic in 2013: a platform for building hybrid mobile apps using HTML, CSS, JavaScript</li> <li>Hybrid apps use web technologies with native API access, providing a single code base for multiple platforms</li> <li>Web technology advancements have improved performance, making web apps more competitive with native apps</li> <li>Ionic provides a single code base for iOS, Android, Windows, etc., making it easier to build apps</li> <li>Ionic uses Angular 1 or 2, allowing customization through SAS (CSS preprocessor)</li> <li>The stack includes native SDKs, Cordova/PhoneGap, Angular, and Ionic</li> <li>Anak two is modern, modular, object-oriented JavaScript with typescript support</li> <li>Ionic offers various features to simplify app development, including UI components, navigation, and tools like Ionic Creator</li> <li>Ionic is a large ecosystem with CSS, JavaScript, and various components</li> <li>Ionic UI components are well-documented for easy use</li> <li>Collection repeat optimizes DOM performance by loading only visible items</li> <li>Angular 2 (ionic 2) has improved animations, navigation, and material design support</li> <li>Platform continuity allows the same code base to work on iOS, Android, and Windows devices with automatic platform detection</li> <li>Ionic 2 conference video transcript: Google \"ionic 2 conference\" for more info</li> <li>GitHub has app source code, regular Angular 2 with TypeScript</li> <li>Slider component, material design animations, platform continuity, 700+ free icons</li> <li>Ionic CLI makes development easy</li> <li>Ionic Lab GUI tool for serving and previewing apps</li> <li>Ionic View for live app previews on phones</li> <li>ngCordova and ionic native for using Cordova plugins with Angular</li> <li>Ionic Marketplace has starters, plugins, themes (free/paid)</li> <li>Ionic Creator helps non-coders design apps visually</li> <li>Ionic Showcase: Proof of real apps built with Ionic</li> <li>App Camp: Learn Angular alongside Ionic</li> <li>Jobs Board: Find Ionic jobs</li> <li>Platform: Small plans, authentication, push notifications, Ionic Build (builds iOS/Android apps), Deploy (updates app assets)</li> <li>Future improvements: Revamping Ionic Lab and adding more features to the platform</li> <li>Ionic is a platform that allows developers to easily integrate with social media platforms like Twitter, Facebook, and LinkedIn</li> <li>It offers custom authentication, push notifications, and enterprise-ready features</li> <li>Ionic Build enables packaging of apps for iOS and Android through email deployment</li> <li>Deploy service updates apps without going through the App Store process</li> <li>Ionic has a large community with active meetups and a forum</li> <li>The platform works closely with Angular core team to ensure compatibility</li> </ul>"},{"location":"goto_FE/#the-post-mvc-age-maarten-hus-goto-2016","title":"The Post-MVC Age \u2022 Maarten Hus \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=QQxNr6t1HEc</p> <ol> <li>Components are the new way to build applications, offering characteristics such as isolation, declarative nature, composability, and clear input/output semantics.</li> <li>Challenges in component-based apps include state management and communication between components.</li> <li>Redux is a popular solution for these challenges, focusing on unidirectional data flow through its core concept of the store.</li> <li>Benefits of using Redux include simplifying universal JavaScript, providing good developer experience with tools like time travel debugging, and handling complex states.</li> <li>Reactive programming, specifically RxJS, is another powerful tool for asynchronous event handling and supercharging components.</li> <li>Learning curves: Redux has a small learning curve, while RxJS has a steep one.</li> <li>Performance considerations: Redux may degrade with large state but can be mitigated by pagination or storing only necessary data.</li> <li>Memory leaks are not common in Redux due to its single store per application.</li> <li>Component architecture differs from Model-View-Controller, as components combine view and controller into one entity. Angular 2 embraces component architecture for easier migration.</li> </ol>"},{"location":"goto_FE/#adventures-in-elm-jessica-kerr-goto-2016","title":"Adventures in Elm \u2022 Jessica Kerr \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=cgXhMc8M4X4</p> <ul> <li>Exploring Elm: A functional programming language focused on UI development</li> <li>Data-driven architecture with minimal updates for UI changes</li> <li>Smaller ecosystem compared to JavaScript, but more people-friendly</li> <li>Compile errors prevent undefined issues</li> <li>Elm is accessible to various developers and has live coding demonstrations</li> <li>Features include curried functions, type aliases, records, union types, pattern matching, simplicity, readability, testability</li> <li>Elm package manager ensures API stability and documentation</li> <li>Direct translation between data structure and HTML for code generation</li> <li>Refactoring and compiler improvements for better user experience</li> <li>Main function returns a program with type parameter for arguments from JavaScript</li> <li>Focus on modularity, code organization, and separation of business logic from view functions</li> <li>Types and immutability ensure safe code changes and encapsulation</li> <li>Elm community is enjoyable with upcoming events</li> <li>Code for presentation available on GitHub</li> </ul>"},{"location":"goto_FE/#javascript-performance-through-the-spyglass-vyacheslav-egorov-goto-2016","title":"JavaScript Performance Through the Spyglass \u2022 Vyacheslav Egorov \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=r76ZjdzFExg</p> <ol> <li>Understanding JavaScript performance requires knowledge of VM internals.</li> <li>V8's let binding for loop optimization can be inefficient, leading to nested loops.</li> <li>Profiling helps identify issues and optimize code; tools like Perf on Linux provide CPU performance counters.</li> <li>In the example, allocating an array outside of a function improved performance.</li> <li>V8's fast new closure allocation doesn't support arrays inside closures.</li> <li>Microbenchmarks can lead to misleading results; inlining functions may not always improve performance.</li> <li>Doubt everything, including microbenchmark results and use tools like Perf for accurate analysis.</li> <li>Repeat operations multiple times and divide by iterations for more accurate cost measurements.</li> <li>Microbenchmarks can be misleading due to JIT compilers optimizing code; constant propagation, loop invariant code motion, and dead code elimination are common optimizations.</li> <li>Avoid using microbenchmarks; focus on fixing bugs or other useful tasks instead.</li> <li>Verify benchmark results for accuracy; optimizers can make microbenchmarks irrelevant.</li> <li>Avoid loop invariants and dead code; compilers may optimize differently, leading to unexpected results.</li> <li>Be aware of compiler bugs and their impact on performance; confirmation bias can lead to misleading conclusions about performance.</li> <li>Intermediate representation used by the compiler; getters can be inlined into loops for better performance.</li> <li>Older V8 had issues with properties on prototypes, but newer versions handle them better.</li> <li>Optimization bugs exist in compilers; boxing of numbers in v8 can cause performance issues.</li> <li>Object-oriented programming is optimized for v8; other VMs have similar issues that can be analyzed with disassembly.</li> <li>Object-oriented programming is faster in V8; function call vs method call performance comparison: function slower due to unoptimized version, now both perform the same after optimization.</li> <li>Dart VM code optimization example: Replacing non-executed method calls and property accesses improved performance.</li> <li>Inlining decisions in V8 based on source code size; don't assume language features are slow, report bugs to improve them.</li> </ol>"},{"location":"goto_FE/#emulating-a-6502-system-in-javascript-matt-godbolt-goto-2016","title":"Emulating a 6502 system in JavaScript \u2022 Matt Godbolt \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7WuRq-Wmw5o</p> <ul> <li>6502 is an influential 8-bit computer from 1975 with 3,510 transistors.</li> <li>It was used in popular computers like Apple II, Atari 800, BBC Micro, Commodore Pet, and Nintendo Entertainment System.</li> <li>The BBC Micro was part of the UK's Computer Literacy Program.</li> <li>The 6502 processor inspired the ARM chip found in modern smartphones.</li> <li>Learning to program involved typing code from magazines and debugging errors.</li> <li>6502 processor features: 8-bit, three registers (accumulator, X&amp;Y), 256 bytes of stack, assembly instructions, memory addressing, efficiency in memory usage, advanced features, emulator development.</li> <li>Emulating a 6502 system requires understanding hardware manuals and configuring various components.</li> <li>Reverse engineering the 6502 netlist to create virtual processors and simulate behavior.</li> <li>Protection systems in games used encryption, hardware timers, and interrupts.</li> <li>A 6502 emulator was created to crack a game with complex protection system.</li> <li>JavaScript performance tips: avoid switch statements, don't use dynamic dispatch, loop unrolling is useful, use typed arrays for screen, WebGL for multi-threading.</li> <li>Collaborate with game creators and utilize resources like Visual 6502, GitHub, websites for further learning.</li> </ul>"},{"location":"goto_FE/#enhanced-front-end-applications-in-angularjs-13-matias-niemela-goto-2014","title":"Enhanced Front-end Applications in AngularJS 1.3 \u2022 Matias Niemela \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=CTezvNSQPYw</p> <ol> <li>AngularJS is an MVC framework that separates frontend and backend, making testing easier.</li> <li>It uses HTML components for more functionality with less code.</li> <li>SEO support is improving but not perfect yet.</li> <li>Modules and expressions build the application structure.</li> <li>Dynamic templates use data to update the page without reloading.</li> <li>Scope manages application memory, allowing data changes to reflect in the template.</li> <li>Controllers manage specific areas of an application with interactivity.</li> <li>Data binding updates the template when user input changes.</li> <li>Filters format output of data.</li> <li>ngRepeat repeats data and automatically updates the view.</li> <li>Angular's digest cycle updates the page without callbacks.</li> <li>Directives add custom functionality to web pages.</li> <li>Dependency injection enables code reuse and testing.</li> <li>Routing maps URLs to specific pages in an angular application.</li> <li>Unit testing frameworks like Jasmine, Mocha, and Karma test Angular apps.</li> <li>Debugging tools include the console and dollar zero.</li> <li>Protractor tests Angular apps' integration.</li> <li>Angular 1.3 introduces form validation with custom validators and improved error message display.</li> <li>ngModelOptions customizes model behavior, including data binding and animation.</li> <li>Animation support includes CSS animations, JavaScript code triggers, and multiple animations running simultaneously.</li> <li>Animate.css is a third-party library for animations in Angular apps.</li> <li>Reintegration adds accessibility features to Angular applications.</li> <li>Polymer and Angular may have compatibility issues due to their development stages.</li> <li>Angular 1.3 improves performance, browser incompatibilities, and introduces new features like bind once and digesting specific parts of the application.</li> </ol>"},{"location":"goto_FE/#web-assembly-nick-bray-goto-2015","title":"Web Assembly \u2022 Nick Bray \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=NhAPPQqKCi8</p> <ul> <li>Web Assembly is a new technology designed to run native code on the web, addressing issues from previous solutions.</li> <li>It offers promising cross-platform development and legacy code porting capabilities.</li> <li>JavaScript performance has improved but remains inconsistent due to JIT compilers and garbage collection pauses.</li> <li>Porting code to the web is challenging yet offers unique strengths like openness, vendor lock-in avoidance, security, portability, ephemerality, and evergreen apps.</li> <li>WebAssembly aims to combine these properties with native performance, addressing past issues.</li> <li>It has a binary format for better performance and portability, loading files in browsers and integrating with JavaScript engines.</li> <li>Benefits include smaller file sizes, faster start-up times, and easier updates.</li> <li>No pointers are used; data types are represented as integers.</li> <li>WebAssembly is a portable machine architecture, not a programming language.</li> <li>It's smaller than JavaScript, reducing file size by up to 25% before compression. Parsing binary format is 23 times faster than text.</li> <li>Integrates with JavaScript for foreign function invocation.</li> <li>First version can be translated to JavaScript for browsers without native support.</li> <li>No pointers in WebAssembly; data types are represented as integers.</li> <li>Early work shows Web Assembly running at 30 frames per second on a patched Chrome browser (compared to 32 frames with JavaScript).</li> <li>WebAssembly is a new technology aiming for improved performance and predictability of web applications, simplifying the process of getting high performance.</li> <li>Native code can run faster than JavaScript due to differences in floating point math precision.</li> <li>Shared memory multi-threading will be added later as it's complicated and requires careful specification. Dynamic linking is another important feature allowing sharing functionality between apps and partial downloads.</li> <li>WebAssembly is a new binary format for the web, executing compiled code from various languages, initially focusing on \"byte bucket\" languages like Python and C/C++. Memory safety and garbage collection are planned for future versions. Browser vendors coordinate efforts through GitHub. Target audience includes game engine developers, web developers, and native developers.</li> <li>WebAssembly could potentially be used with high-performance libraries like OpenAL and libvorbis.</li> <li>Game engine developers' target audience consists of skilled, dedicated people working on multiple platforms. Web development is easier to learn and use, with JavaScript being popular. Native code has limitations in terms of accessibility and ease of use. Different ecosystems between web and other platforms make it hard to predict their future merging. Web APIs will be different from native ones, requiring compatibility libraries for integration.</li> </ul>"},{"location":"goto_FE/#benchmarking-javascript-vyacheslav-egorov-goto-2015","title":"Benchmarking JavaScript \u2022 Vyacheslav Egorov \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=g0ek4vV7nEA</p> <ol> <li>Complexity in VMs can lead to slow performance for simple code, making it crucial to benchmark carefully.</li> <li>Ensure that each operation in a benchmark performs the same amount of work every time and use real code for accurate results.</li> <li>Browsers optimize code during execution, making predicting performance difficult. Understand different costs involved and how compilers optimize code.</li> <li>Avoid common optimizations like constants, loop invariants, and dead code elimination when writing benchmarks. Verify results to trick certain optimizations.</li> <li>Use real code and production applications for more accurate benchmarks. Write benchmarks that avoid common optimizations.</li> <li>VMs can find bugs in benchmarks or cause them to become nothing; assume reasonable code is reasonably fast, focusing on understanding what happens inside the VM.</li> <li>Older versions of V8 may not support certain optimizations, leading to misleading results. Counter optimization in loops can slow down when counter overflows multiple times. Method invocation vs function call performance: Function calls are slower than method calls due to a lack of optimization.</li> <li>Concatenation trick for faster function calls: Adding concatenations before the benchmark improves performance.</li> <li>Inlining can improve code execution speed by removing unnecessary loops. V8's optimization process is complex, sometimes leading to unexpected results; consult with the VM team for accurate benchmarks and performance analysis.</li> </ol>"},{"location":"goto_FE/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ol> <li>Embrace simplicity in software architecture for better global optimization.</li> <li>React and Redux are examples of simple technologies that can lead to faster applications.</li> <li>Global optimization is not always at odds with modularity, as seen in garbage collection.</li> <li>Find comparable alternatives if you don't want to adopt a specific technology; focus on its properties rather than the exact tool.</li> <li>Embrace simplicity for global optimization.</li> <li>React, ClojureScript, and transit are recommended technologies with immutability support.</li> <li>Backbone, Ember, and Angular suffer from mutable data structure limitations.</li> <li>React's design allows for immutable data structures.</li> <li>Data dominates programming; choose the right data structures for simplicity.</li> <li>The speaker discusses the importance of data structures in programming.</li> <li>React is praised for supporting immutable data structures, leading to better performance and reasoning.</li> <li>ClojureScript and Immutable.js are mentioned as effective solutions for state management and undo/redo functionality.</li> <li>Typescript, Elm, Dart, Scala, CoffeeScript, and Babel are also highlighted as compelling options in the JavaScript ecosystem.</li> <li>Google Closure is praised for its optimization capabilities and ability to be used on both frontend and backend development.</li> <li>Transit is a data format for moving immutable data from backend to frontend.</li> <li>It supports richer types, extensibility, and fast decoding.</li> <li>Meteor is a radical approach that simplifies app development by combining server and client code.</li> <li>Transit is a powerful tool for sharing data across multiple applications.</li> <li>Meteor's radical approach: React and Relay, which simplify UI programming by letting clients define their required data structure.</li> <li>Netflix and Facebook use similar techniques with Falkor and GraphQL.</li> <li>Recursive data description allows efficient querying and composition of data structures.</li> <li>Pull requests in Atomic database enable efficient data retrieval for specific elements.</li> <li>Radical simplicity is achieved by adopting these approaches, reducing complexity and improving UI programming.</li> <li>Speaker discusses simplifying complex nested queries.</li> <li>Uses React and Relay GraphQL to represent queries directly on UI components.</li> <li>Rest is not going away, but its complexity may be reduced.</li> <li>Immutable data model like Git can help reduce complexity.</li> <li>Older technologies like Lisp have time-tested engineering ideas.</li> </ol>"},{"location":"goto_FE/#conquering-time-with-functional-reactive-programming-sergi-mansilla-goto-2014","title":"Conquering Time with Functional Reactive Programming \u2022 Sergi Mansilla \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=gT6il5fJyAs</p> <ol> <li>JavaScript deals with time and asynchronous tasks, leading to complex code.</li> <li>Functional programming focuses on the \"what\" instead of the \"how\".</li> <li>State is dangerous in programming, especially when dealing with events.</li> <li>Event limbo refers to challenges faced by events in JavaScript.</li> <li>FRP (Functional Reactive Programming) can help solve these issues by treating time as a first-class citizen and making events first-class citizens.</li> <li>Rx is a platform for reactive programming that helps compose synchronous and event-based programs across various languages.</li> <li>Observables in Rx are like iterators but push data to the observer instead of pulling from collections.</li> <li>The Observer pattern has limitations, while observable patterns can signal completion or errors.</li> <li>Real-world example: Using Rx to filter, throttle, and accept distinct values for a search input.</li> <li>Observables improve performance by executing only when needed.</li> <li>Reactive programming focuses on sequences of events and composing them.</li> <li>Testing becomes easier with schedulers and customizable behavior.</li> <li>RxJS is a popular reactive library used by companies like Netflix, Microsoft, SoundCloud, and GitHub.</li> <li>Model-View-Controller (MVC) can work with RxJS by having the view subscribe to the controller, which observes the model.</li> <li>Subjects are entities that inherit from both observable and observer, allowing them to do both at once.</li> </ol>"},{"location":"goto_FE/#lessons-learned-from-building-a-css-minifier-stoyan-stefanov-goto-2014","title":"Lessons Learned from Building a CSS Minifier \u2022 Stoyan Stefanov \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=SV2f3whvvm0</p> <ul> <li>CSS performance issues: Blocks page rendering, requires optimization.</li> <li>Common strategies to improve loading time: Inline critical CSS, split into multiple files, use local storage or CDNs.</li> <li>Challenges with CSS complexity: Positioning, formatting context, specificity, cascade inheritance.</li> <li>Solution: Learn CSS thoroughly and understand its architecture for larger web applications.</li> <li>Minification techniques: Regular expressions (regex) or partial parsing. Complex properties like shorthand background declarations require more advanced parsers.</li> <li>The speaker discusses CSS refactoring issues and the need for a unifier. They mention using regular expressions, parsers, and abstract syntax trees to improve minification. A new tool called CSS Shrink is introduced.</li> <li>Minify CSS code by removing unnecessary characters and optimizing syntax. Consistency is key for better Gzip compression. Remove empty rules, duplicate declarations, and invalid properties. Merge adjacent selectors with the same content. Strip generic font families from CSS. Validate CSS to ensure proper syntax and value usage.</li> <li>Avoid manipulating CSS with JavaScript as it can break optimizations. Optimize CSS by removing duplicate keyframes, using shorter names for variables, and converting units. Use browser-specific CSS to reduce page load size. Test CSS transformations with tools like CSS diff and PhantomJS. Explore object-oriented CSS, SMACSS, and CSS for grown-ups/grumpy old men. Continue experimenting with CSS transforms and minification techniques.</li> </ul> <p>No context: 1. Improve CSS performance by optimizing loading time. 2. Address challenges in CSS complexity. 3. Learn CSS thoroughly to handle larger web applications. 4. Use minification techniques for better compression. 5. Remove unnecessary characters, duplicate declarations, and invalid properties. 6. Merge adjacent selectors with the same content. 7. Strip generic font families from CSS. 8. Validate CSS syntax and value usage. 9. Avoid manipulating CSS with JavaScript. 10. Optimize CSS by removing duplicates and converting units. 11. Use browser-specific CSS for reduced page load size. 12. Test transformations using tools like CSS diff and PhantomJS. 13. Explore object-oriented CSS, SMACSS, and CSS for grown-ups/grumpy old men. 14. Continue experimenting with CSS transforms and minification techniques.</p>"},{"location":"goto_FE_v2/","title":"goto FE v2","text":""},{"location":"goto_FE_v2/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ol> <li>Storybook is a popular frontend development tool for creating and testing UI components efficiently.</li> <li>CSF3 introduces a new component story format for Storybook, enhancing its capabilities.</li> <li>Interaction testing can be done using Playwright with visual debugging features.</li> <li>Chromatic offers visual regression testing through screenshots of UI changes.</li> <li>Figma integration allows designers to see live implementations in Storybook.</li> <li>Storybook has a strong community and ecosystem with various integrations.</li> <li>It supports multiple frameworks like React, Angular, Vue, and Webpack.</li> <li>The latest version (Storybook 7) focuses on automation and improved workflow.</li> </ol>"},{"location":"goto_FE_v2/#programming-the-web-with-hyperlang-hypercli-mike-amundsen-goto-2023","title":"Programming the Web with HyperLANG &amp; HyperCLI \u2022 Mike Amundsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vcjOzcxIBdY</p> <ol> <li>The speaker presented Hyper CLI, a programming web application that uses HTTP for interacting with services and websites.</li> <li>Configuration files were discussed as crucial for customization and automation purposes.</li> <li>Improved functionality was stressed through better object models and modularized libraries.</li> <li>Plugins and domain-specific languages (DSLs) were highlighted for creating specialized tools for specific tasks.</li> <li>The speaker emphasized the importance of documentation, testing, and security in software development.</li> <li>They admired Dave's talk on software architecture and its role in making changes easier.</li> </ol>"},{"location":"goto_FE_v2/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ul> <li>Stephanie Stimac, author of \"Design Developers: A Guide for Designing Websites and Web Apps\", highlights the significance of design in web development.</li> <li>The book aims to help developers communicate better with designers and grasp fundamental design concepts.</li> <li>Collaboration between designers and developers is emphasized, along with the advantages of learning from each other's skills.</li> <li>Topics covered include color theory, typography, user experience, accessibility, and testing.</li> <li>Stephanie encourages developers to expand their skill set by learning more about design.</li> </ul>"},{"location":"goto_FE_v2/#simplifying-dev-environments-with-the-right-tools-christian-heilmann-julian-wood-goto-2022","title":"Simplifying Dev Environments with the Right Tools \u2022 Christian Heilmann &amp; Julian Wood \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=o0bYu0HVjNU</p> <ol> <li>GOTO Unscripted focuses on discussing development tools and the future of technology.</li> <li>Denmark has high living costs but offers efficient communication and accessibility for developers.</li> <li>Microsoft Edge's browser development includes a Chromium base and emphasis on developer tools.</li> <li>Making development environments more accessible to everyone, regardless of abilities or preferences is crucial.</li> <li>Photoshop improves accessibility with keyboard support, benefiting those who cannot use a mouse or see well.</li> <li>Learn from industry experts like Christian Heilmann and share knowledge through platforms such as Twitter and blogs.</li> </ol>"},{"location":"goto_FE_v2/#developer-tools-that-shouldnt-be-secrets-christian-heilmann-goto-2022","title":"Developer Tools That Shouldn't Be Secrets \u2022 Christian Heilmann \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lz-nUdotdx4</p> <ol> <li>Developer tools are essential for debugging and inspecting websites.</li> <li>Console is a powerful tool for logging information, monitoring events, and capturing data.</li> <li>Device mode allows simulating different devices like mobile phones, tablets, and desktops.</li> <li>Network pane helps test website performance under various network conditions.</li> <li>Inspector tool provides detailed information about elements on a page.</li> <li>Snippets allow saving and sharing code snippets for future use.</li> <li>Change tools help visualize changes made to a webpage, making it easier to undo or revert them.</li> <li>Visual Studio Code is an integrated development environment with built-in developer tools.</li> <li>DevTools can be used to create custom extensions and enhance the user experience.</li> <li>Developer tools are constantly evolving, offering new features and capabilities for web developers.</li> </ol>"},{"location":"goto_FE_v2/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ol> <li>Transcript is a video conference discussing JavaScript and web development.</li> <li>The speaker covers the evolution of the web, its future, and the significance of JavaScript in server-side applications.</li> <li>Introduced Dino, a project simplifying server-side JavaScript with emphasis on security and performance.</li> <li>Dino Deploy is a serverless system for global code deployment via a user-friendly interface.</li> <li>The speaker presents Fresh, a web framework built upon Dino for creating fast and interactive applications.</li> <li>Compared to Create React App, Fresh has smaller size and faster installation time.</li> </ol>"},{"location":"goto_FE_v2/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ol> <li>In the digital world, understanding human behavior is vital for making decisions based on biases and nudges.</li> <li>Digital decision architects design environments using behavioral economics principles to influence choices.</li> <li>Ethical considerations are crucial when utilizing technology in autonomous systems like self-driving cars.</li> <li>Dataism focuses on improving human lives through data insights and real-time decisions.</li> <li>Humane Tech organizations prioritize user wellbeing, reducing attention hijacking for better digital experiences.</li> <li>Advanced technology should enhance humanity by creating better tools and experiences without replacing humans.</li> </ol>"},{"location":"goto_FE_v2/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ul> <li>Dystopian techwear fashion: A metaphor for the potential consequences of technology and data usage in a dystopian future.</li> <li>Attention as a weapon: The power of attention is crucial, with companies like Facebook using it to their advantage.</li> <li>Overton window shift: Social media platforms have influenced political discourse by shifting acceptable opinions.</li> <li>Advertising and privacy: Companies collect user data for advertising purposes, raising concerns about personal information control.</li> <li>Designing empowered users: To combat these issues, designers should focus on creating products that make users feel in control of their lives.</li> </ul>"},{"location":"goto_FE_v2/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ol> <li>Attention is a limited resource, and effective management is crucial.</li> <li>Visual attention impacts web design through clear hierarchy and prioritization of content.</li> <li>Accessibility requires careful consideration for screen readers; avoid long sections or auto-playing media.</li> <li>Design systems help manage attention with consistent patterns and guidelines.</li> <li>Animation can capture attention, but should be responsibly designed and offer user control.</li> <li>Inattentional blindness makes design choices vital to ensure important details are not missed.</li> </ol>"},{"location":"goto_FE_v2/#how-the-sjgar-stack-accelerated-our-digital-transformation-erik-ammerlaan-goto-2022","title":"How the SJGAR Stack Accelerated Our Digital Transformation \u2022 Erik Ammerlaan \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=V5zW3ig2lG8</p> <ol> <li>A major financial institution with operations in 11 countries and a $30 billion valuation accelerated customer value delivery using a simple technology stack.</li> <li>The company's innovation team became the core of its business, focusing on tech-driven solutions.</li> <li>Key success factors include the Sugar Stack (JavaScript, serverless JavaScript, React, and React Native) and fostering an in-house engineering culture.</li> <li>The platform team developed a library of patterns and frameworks for functional teams to use.</li> <li>The company aims to become a true tech firm by leveraging the Sugar Stack and driving digital transformation.</li> </ol>"},{"location":"goto_FE_v2/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>Transcript is a talk by Stefan about the evolution of web development, focusing on frontend technologies.</li> <li>He discusses the importance of performance and user experience, highlighting the need for simplicity in website design.</li> <li>Using modern frameworks like React can lead to complexities and slow websites; Preact offers a simpler approach with better UIs and performance.</li> <li>The speaker emphasizes prioritizing user satisfaction over fancy technologies.<ul> <li>Importance of performance and user experience</li> <li>Need for simplicity in website design</li> <li>Complexities caused by modern frameworks like React</li> <li>Benefits of using tools like Preact</li> <li>Prioritizing user satisfaction over technology</li> </ul> </li> </ul>"},{"location":"goto_FE_v2/#what-are-micro-frontends-how-to-use-them-luca-mezzalira-lucas-dohmen-goto-2022","title":"What Are Micro-Frontends &amp; How to Use Them \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=-thWgobMW_I</p> <ul> <li>MicroFrontends: A distributed approach to web application development</li> <li>Motivation for exploring microfrontends: addressing challenges in large, complex projects with distributed teams</li> <li>Two approaches: horizontal split (multiple teams on a single view) and vertical split (separate views within a team)</li> <li>Benefits of microfrontends: independent deployment, sharing libraries, reduced external dependencies</li> <li>Differences between MicroFrontends and Single Page Applications: both client-driven but differ in routing and data fetching</li> <li>Edge side routing: decoupling and simplifies client-side logic by handling routing on the server</li> </ul>"},{"location":"goto_FE_v2/#building-micro-frontends-luca-mezzalira-lucas-dohmen-goto-2022","title":"Building Micro-Frontends \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=DG9puFuUb7E</p> <ol> <li>Microfrontends divide an application into smaller, independent parts for easier development and maintenance.</li> <li>App shells handle common app aspects like navigation and layout.</li> <li>Module Federation is a webpack plugin that manages dependencies between microfrontends.</li> <li>Iframes are useful for security and code isolation in applications.</li> <li>Web components create reusable, custom elements shareable across apps.</li> <li>ESI (Edge Side Include) and SSI (Server Side Include) optimize page loading times with fewer HTTP requests.</li> <li>Microfrontends can be organized using self-contained systems, API gateways, BFFs, or service dictionaries.</li> <li>Team structure impacts microfrontend development; feature teams work well for smaller apps while larger ones may need specialized teams.</li> </ol>"},{"location":"goto_FE_v2/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ul> <li>Understanding dependencies and their impact on software development.</li> <li>Collective intelligence in software teams for better decision making.</li> <li>Tooling is vital for code quality, but human interaction remains crucial.</li> <li>Duplication can be beneficial or detrimental; assess tradeoffs.</li> <li>Communication and awareness are key to better decisions during development.</li> <li>Continuous learning and improvement are essential in the software industry.</li> </ul>"},{"location":"goto_FE_v2/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>An ideal programming language should be domain-specific, catering to specific needs and applications.</li> <li>Memory management can vary between languages like Rust and Elm; some have automatic approaches while others require manual handling.</li> <li>Concurrency models differ across languages: Erlang is great for distributed systems, whereas C++ excels in low-level performance.</li> <li>WebAssembly could revolutionize the landscape by enabling any language to run within a web browser.</li> <li>Cultural momentum impacts programming language success; factors like popularity and ease of use influence adoption.</li> <li>In-house applications may benefit from using specific languages, such as C or Rust, for server-side performance.</li> <li>Startups and B2C websites often prefer JavaScript frameworks like React due to their popularity and user-friendliness.</li> </ol>"},{"location":"goto_FE_v2/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Functional programming emphasizes pure functions, avoiding mutation and side effects.</li> <li>Pure functions are thread-safe, making debugging easier due to a smaller search space.</li> <li>Caching and precomputing can improve performance in functional programming.</li> <li>Parallelization is simpler with pure functions as they're innately parallelizable.</li> <li>Testing is more reliable with functional programming since flaky tests are rare.</li> <li>Functional programming languages have better ecosystems, like Elm, which guarantees no flaky tests.</li> <li>Revising code in a functional style can lead to fewer bugs and easier debugging.</li> <li>Pure functions make it easier to refactor code without worrying about side effects.</li> <li>Functional programming is more pragmatic as it focuses on measurable objectives like performance, testing, and parallelization.</li> <li>The ecosystem of a functional programming language can be a significant advantage over imperative languages.</li> </ol>"},{"location":"goto_FE_v2/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility talk: Emphasize writing JavaScript with focus on navigation and accessibility testing.</li> <li>Testing accessibility: Utilize tools like Lighthouse, Chrome DevTools, WAVE, Chromevox, and A1yJS for auditing websites and providing suggestions.</li> <li>Accessible checklist: Use semantic elements, target specific elements with rules, consider keyboard navigation, skip links, zoomability, dynamic content, and custom elements.</li> <li>Resources: Explore accessible JavaScript resources, accessibility best practices, and creating custom components.</li> <li>Connecting: Share thoughts or ask questions via LinkedIn (Joey Mabu), Twitter (@jemimabu), or visit his website (www.mymobile.com).</li> </ol>"},{"location":"goto_FE_v2/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Predictability and velocity are crucial in web development, as demonstrated by examples from NextJS, Tailwind CSS, and Typescript.</li> <li>Auto-completion and strong typing accelerate coding processes.</li> <li>Utilizing tools like Hasura and Heroku streamlines backend tasks.</li> <li>Planning ahead and outsourcing concerns ensures a smooth development process.</li> <li>The focus is on building fast, scalable web applications with modern technologies.</li> </ol>"},{"location":"goto_FE_v2/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix is an Elixir-based web framework with live view functionality for real-time applications.</li> <li>Live view enables developers to update web pages without refreshing, improving user experience.</li> <li>It uses websockets for communication and offers form validation with real-time feedback.</li> <li>The framework provides reusable HTML components and live navigation for seamless page transitions.</li> <li>Phoenix live view has a self-healing mechanism in case of server failure or process crashes.</li> <li>Efficiently handles real-time chat applications by updating the browser with new messages.</li> <li>Integrates well with other technologies like Elixir and Phoenix, making it a powerful tool for modern web apps.</li> </ol>"},{"location":"goto_FE_v2/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte is a lightweight web framework emphasizing simplicity, small bundle size, and fast load times.</li> <li>It utilizes reactive programming for automatic updates when data changes.</li> <li>The framework includes built-in animation features for smooth transitions between states.</li> <li>State management can be achieved through local variables or external stores like Svelte's store module.</li> <li>Svelte promotes splitting components into smaller, reusable functions for better organization and easier testing.</li> <li>It offers native mobile app development options with Sapper and Action.</li> <li>Svelte is an alternative to popular frameworks like Angular and React, providing a better developer experience and potentially improved user experience.</li> </ol>"},{"location":"goto_FE_v2/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Brian and Ray are developers working on The Jamstack Book.</li> <li>Jamstack, a concept since 2015, focuses on static websites.</li> <li>Key tools include static site generators (Jekyll, Hugo, Eleventy, Next.js) and deployment platforms (Netlify, Vercel).</li> <li>Debate continues around defining Jamstack as it evolves with features like distributed persistent rendering and server-side rendering.</li> <li>The Jamstack Book teaches various ways to build websites using tools/frameworks.</li> </ol>"},{"location":"goto_FE_v2/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ul> <li>Web development journey: Evolution from web 1.0 to modern JavaScript</li> <li>Fundamental HTML, CSS, and JavaScript knowledge is crucial</li> <li>Tech stacks and frameworks complexity</li> <li>Benefits of serverless functions, static site generators, and Jamstack</li> <li>Focus on user experience, accessibility, and performance</li> <li>Strive for simplicity and maintainability</li> <li>Consider the impact of technology choices on job requirements</li> </ul>"},{"location":"goto_FE_v2/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2020","title":"HTTP/3 Is Next Generation HTTP. Is It QUIC Enough? \u2022 Daniel Stenberg \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=pUxyukqoXR4</p> <ul> <li>HP3 is an enhanced HTTP protocol with faster handshakes, improved loss recovery, and early data transmission.</li> <li>UDP is utilized in the new stack for better performance compared to TCP.</li> <li>Google Quick (HTTP/2) and Facebook's FBSS are examples of applications using this new stack.</li> <li>The future of HTTP involves encryption and faster connections.</li> <li>H3 is anticipated for release early 2021, with many browsers and servers already supporting it.</li> </ul>"},{"location":"goto_FE_v2/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>Embrace HTML for web accessibility, performance, and enhanced user experience.</li> <li>Utilize semantic HTML elements to boost usability and search engine optimization.</li> <li>Accessibility benefits everyone, not just those with disabilities.</li> <li>Minimize reliance on JavaScript; ensure websites work without it.</li> <li>Select the right library carefully, ensuring adherence to accessibility standards.</li> <li>Consider slow loading times' impact on users in developing countries.</li> <li>Internet access is crucial for global development and economic growth.</li> <li>Contribute to a more inclusive web by improving accessibility for all.</li> </ol>"},{"location":"goto_FE_v2/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ol> <li>Gradual adoption of GraphQL:</li> <li>Helps large companies with digital transformation.</li> <li>Fits into existing environments without writing backend code.</li> <li> <p>Utilizes open-source ecosystems like Serf, Guild, and GraphQL for integration.</p> </li> <li> <p>Benefits of GraphQL:</p> </li> <li>Improves performance through data network optimization.</li> <li> <p>Simplifies complex data fetching and orchestration tasks.</p> </li> <li> <p>Techniques to adopt GraphQL without affecting backend:</p> </li> <li>Use Apollo Client with GraphQL Network Layer (Apollo Link Rest) for REST APIs.</li> <li> <p>Convert existing server schemas into GraphQL using libraries like GraphQL Mesh.</p> </li> <li> <p>Summary:</p> </li> <li>Gradually adopt GraphQL to simplify data fetching and improve performance.</li> <li>Utilize various techniques without affecting the backend.</li> </ol>"},{"location":"goto_FE_v2/#advanced-feature-flagging-its-all-about-the-data-dave-karow-goto-2020","title":"Advanced Feature Flagging: It's All About The Data \u2022 Dave Karow \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=f8XDvtfKWQE</p> <ol> <li>Feature flagging is a versatile tool for separating code, deploying features, and controlling releases.</li> <li>It can be used as an if/else statement or configuration service to modify target code without new deployment.</li> <li>Sophisticated feature flags allow targeted population changes based on user behavior.</li> <li>Gradual rollouts help mitigate errors and bugs during new feature launches.</li> <li>Measuring the impact of feature flag changes is crucial for understanding their effectiveness.</li> <li>Randomized controlled trials can be used to compare different populations and isolate variables.</li> <li>An experimentation platform should include a data management console, randomization, and sticky paradox solutions.</li> <li>Telemetry data helps attribute user experience to specific features or code changes.</li> <li>A frontend wizard simplifies access control for feature flagging tools.</li> <li>Walmart's Expo UI showcases the power of real-time data manipulation.</li> <li>An error alert system can detect issues and resolve them quickly, improving release quality.</li> <li>The book \"Trustworthy Online Controlled Experiments\" provides a comprehensive guide to experimentation in the industry.</li> </ol>"},{"location":"goto_FE_v2/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ul> <li>Clean Architecture: A structured approach to software design.</li> <li>Domain layer: Contains enterprise logic shared across systems.</li> <li>Application layer: Handles system-specific business logic.</li> <li>Infrastructure layer: Manages external concerns like persistence and identity.</li> <li>Presentation layer: Renders data for the user interface.</li> <li>CQRS (Command Query Responsibility Segregation): Separates read and write operations, improving performance and scalability.</li> <li>Mediator pattern: Simplifies crosscutting concerns by handling requests and responses.</li> <li>Fluent validation: Ensures correct input data for business logic.</li> <li>Mapping behavior: Automatically maps entities between different layers.</li> <li>Dependency injection: Allows easy testing and maintenance of code.</li> <li>Unit tests: Verify system functionality, ensuring high-level working correctly.</li> <li>Open API: Generates client code for front-end developers, bridging the gap between back-end and front-end development.</li> <li>Exception handling: Provides meaningful error messages to users.</li> <li>Identity service: Handles user authentication and authorization.</li> <li>Integration tests: Verify system's overall functionality.</li> <li>Open API specification generation: Automates documentation for client code.</li> </ul>"},{"location":"goto_FE_v2/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2019","title":"HTTP/3 is next Generation HTTP. Is it QUIC enough? \u2022 Daniel Stenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rlN4F1oyaRM</p> <ul> <li>The history and development of internet protocols are discussed, focusing on HTTP's evolution.</li> <li>TCP, UDP, TLS are mentioned along with their evolutions over time.</li> <li>Challenges faced by HTTP 2 and the need for a better solution are highlighted.</li> <li>Introduction of HTTP/3 (Quic) as a potential replacement for TCP is discussed.</li> <li>Benefits of Quic include speed, security, and reliability.</li> <li>Challenges during development and implementation are also mentioned.</li> <li>Quic might become the new standard in the future, replacing TCP.</li> </ul>"},{"location":"goto_FE_v2/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>The speaker stressed the significance of web performance and user experience, addressing challenges with complex frameworks and single-page applications.</li> <li>They introduced a solution called 'portal' that focuses on improving page loading control while maintaining browser support.</li> <li>Portals can be utilized for individual pages within a website, enabling smoother navigation without reloading the entire page.</li> <li>The speaker underlined the importance of progressive enhancement and accessibility in web development.</li> <li>They also highlighted the need to stay current with industry trends and standards while balancing performance and user experience.</li> </ol>"},{"location":"goto_FE_v2/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ol> <li>Attention is vital in user experience design, and factors like visual weight, contrast, and animations should be considered to maintain focus.</li> <li>Low vision users may struggle with websites lacking accessibility features such as high contrast and large text.</li> <li>Sleep deprivation can negatively impact attention and cognitive performance, making it harder for users to concentrate on tasks.</li> <li>Animations can effectively guide user attention and improve usability, but should be implemented carefully to avoid distractions.</li> <li>Feedback is crucial in providing a seamless user experience; animations can help convey information about movement direction or object state changes.</li> <li>Run-time profit statistics show that users are more likely to use products with better usability, emphasizing the importance of designing for different audiences and customer bases.</li> </ol>"},{"location":"goto_FE_v2/#designing-apis-for-150-million-orders-michele-angioni-matt-fewer-goto-2019","title":"Designing APIs for 150 Million Orders \u2022 Michele Angioni &amp; Matt Fewer \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=OB0Pb-nd0g8</p> <ol> <li>The speaker discussed migrating a 15-year-old application to modern technology, focusing on frontend development and design systems.</li> <li>They emphasized the importance of clear separation between backends and frontends using Backend for Frontend (BFF) patterns.</li> <li>A design system called Snack was introduced, which includes a React component library with documentation and color management tools.</li> <li>The speaker highlighted the need to scale development by separating business domains and creating weak dependencies between them.</li> <li>They stressed the importance of designing infrastructure carefully and thinking about future changes.</li> <li>The migration process involved gradually replacing existing pages with new ones, ensuring a smooth transition for users and developers.</li> </ol>"},{"location":"goto_FE_v2/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ol> <li>Collaboration between designers and developers is crucial for building better products faster.</li> <li>Utilize a process to manage workflow, clarify responsibilities, and ensure everyone is on the same page.</li> <li>Employ tools like style guides, mockups, and prototypes to improve communication and efficiency.</li> <li>Encourage open communication and feedback between team members.</li> <li>Foster a culture of trust within the team by sharing personal stories and experiences.</li> <li>Organize events such as design and developer meet-ups to build empathy and understanding among team members.</li> <li>Share resources, tools, and best practices with each other to improve work quality and efficiency.</li> </ol>"},{"location":"goto_FE_v2/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ul> <li>Machine Learning and JavaScript: A combination of two powerful technologies, offering new possibilities for web applications.</li> <li>AI JavaScript Meetup (London): A meetup group exploring the intersection of Artificial Intelligence and JavaScript, fostering community growth.</li> <li>Emoji Fire: An app utilizing machine learning to detect emotions in real time, providing an engaging experience.</li> <li>TensorFlow.js: A browser-based version of TensorFlow, enabling local image processing without API requests.</li> <li>Computer Vision API (Microsoft): Detects objects in images with human readable descriptions, enhancing visual understanding.</li> <li>Generative Adversarial Network (GAN): An algorithm generating images based on input data, creating realistic cat images.</li> <li>Future of Machine Learning and JavaScript: Continuous innovation combining machine learning models with browser-based applications.</li> </ul>"},{"location":"goto_FE_v2/#fast-by-default-near-instant-load-times-at-scale-with-gatsbyjs-nicolas-goutay-goto-2019","title":"Fast by Default: Near Instant Load Times at Scale with GatsbyJS \u2022 Nicolas Goutay \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=p14g-Sep7HY</p> <ol> <li>Web performance is crucial for business success.</li> <li>Improved web performance examples: Zalando (7% revenue increase), Trainline (8 million extra annual revenue), BBC, Pinterest.</li> <li>Performance optimization is an ethical issue and can help include users with slow devices or poor connections.</li> <li>YouTube's Project Feather reduced payload by 100KB to solve performance issues.</li> <li>Web performance affects SEO, conversion rates, and user engagement.</li> <li>Performance optimization benefits both UX and business metrics.</li> <li>The web development landscape has changed over the years, affecting web performance.</li> <li>Static websites are fast but lack interactivity; dynamic websites offer interactivity but can be slow.</li> <li>Progressive web apps (PWAs) combine static and dynamic features for better performance.</li> <li>GatsbyJS is a framework that optimizes performance by generating static files, prefetching data, and lazy loading images.</li> <li>Tools like WebPageTest, PageSpeed Insight, Lighthouse, and Falco help monitor and improve web performance.</li> <li>Performance optimization is crucial for user experience and business success.</li> </ol>"},{"location":"goto_FE_v2/#webassembly-beyond-the-browser-dan-callahan-goto-2019","title":"WebAssembly Beyond the Browser \u2022 Dan Callahan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TGo3vJVTlyQ</p> <ol> <li>WebAssembly is a new technology that aims to improve web performance and efficiency by compiling code into a low-level assembly language, which can be executed in the browser or other environments.</li> <li>It allows developers to use their preferred programming languages and compile them into a common format for execution on different platforms.</li> <li>WebAssembly is designed to provide better security and isolation than traditional JavaScript execution by running code in a sandboxed environment.</li> <li>The technology has been adopted by major browsers, including Firefox, Chrome, Safari, and Edge, as well as Node.js.</li> <li>It enables the creation of portable runtime environments for web applications and services, making it easier to distribute software across different platforms.</li> <li>WebAssembly is being used in various projects such as CloudFlare's Workers platform, Mozilla's Rust compiler, and Google's TensorFlow machine learning library.</li> <li>The technology has the potential to revolutionize web development by providing a more efficient and secure way of running code across different platforms and devices.</li> </ol>"},{"location":"goto_FE_v2/#internationalization-is-a-piece-of-cake-eli-schutze-ramirez-goto-2019","title":"Internationalization is a Piece of Cake \u2022 Eli Schutze Ramirez \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=nsGmQ0v36bo</p> <ol> <li>Importance of internationalization in web development</li> <li>Utilizing Unicode, CLD, and ICU for language support</li> <li>Message format for localized strings</li> <li>React Internationalization library for easy integration</li> <li>Continuous localization through translation memory</li> <li>Flexible design to accommodate various languages</li> <li>Accessibility considerations for different cultures</li> <li>Bonus tip: Allow users to choose their preferred locale</li> <li>Summary: Start early, be flexible, and focus on accessibility for successful internationalization.</li> </ol>"},{"location":"goto_FE_v2/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ol> <li>Software rewriting occurs due to inexperience, enjoyment, technical debt, and changing requirements.</li> <li>Ensuring resilience through architecture can help systems adapt to change.</li> <li>Code dependency organization: Big ball of mud vs layered or modular approach.</li> <li>Conservative code reuse: Avoid coupling unrelated code by copying and pasting when necessary.</li> <li>Use automated tools like Dependency Cruiser for clear directory structures and enforcing boundaries.</li> <li>Architectural decisions should be made during feature development, considering individual contributors and teams.</li> <li>Be open to learning from other programming paradigms and communities to build better web applications.</li> </ol>"},{"location":"goto_FE_v2/#http-headers-for-the-responsible-developer-stefan-judis-goto-2019","title":"HTTP Headers for the Responsible Developer \u2022 Stefan Judis \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JfjiFsJsO4E</p> <ul> <li>A web developer with 10 years of experience discusses various aspects of web development.</li> <li>He focuses on internet usage statistics and their impact on user experience, emphasizing accessibility for all users regardless of location or device.</li> <li>The speaker covers different headers used in web development, such as feature policy header for privacy control, preload link rel for faster loading, and HTTP/2 for better performance.</li> <li>He also highlights the importance of considering design, content, performance, accessibility, frameworks, network devices, and device lists while building websites.</li> <li>The speaker recommends using tools like Google Lighthouse to audit web pages and ensure they meet all requirements.</li> <li>He concludes by stressing the significance of creating a safe, affordable, respectful, and accessible web experience for everyone.</li> </ul>"},{"location":"goto_FE_v2/#vue-and-you-matt-danforth-goto-2019","title":"Vue and You \u2022 Matt Danforth \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n8ERFbkt_h8</p> <ol> <li>Web development evolution: From modem sounds to modern performance and accessibility concerns</li> <li>Frontend frameworks: React, Angular, Inferno, Jamstack - pros and cons for each</li> <li>Live coding: Demonstrate building a simple app with tools like Axios, Bootstrap, Material UI</li> <li>Accessibility: Make websites usable by everyone, including those with disabilities</li> <li>Performance optimization: Tips to improve website speed and user experience</li> <li>Collaboration: Importance of teamwork for better products</li> <li>Learning resources: Suggestions for books, courses, conferences - stay updated in the field</li> </ol>"},{"location":"goto_FE_v2/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>JavaScript ecosystem discussion, focusing on React Native and its related tools: BuckleScript, Draftbit, and ReasonML.</li> <li>Key points:</li> <li>ReasonML is a functional programming language with fast compilation and type inference.</li> <li>It's easy to integrate existing JavaScript projects with ReasonML.</li> <li>The ecosystem includes libraries for React Native, GraphQL, Apollo, and Redux.</li> <li>Draftbit helps build apps visually using ReasonML.</li> <li>BuckleScript is a compiler that converts ReasonML to JavaScript.</li> <li>Benefits:</li> <li>Faster compilation times than other languages.</li> <li>Type inference and type safety make debugging easier.</li> <li>Better performance due to immutable data structures.</li> <li>Community:</li> <li>Regular meetups in Chicago for the ReasonML community.</li> <li>Key figures like Jordan Walke, creator of React, are involved in the ecosystem.</li> </ol>"},{"location":"goto_FE_v2/#going-serverless-with-vuejs-divya-sasidharan-goto-2019","title":"Going Serverless with VueJS \u2022 Divya Sasidharan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Mu9zKpGhX1Y</p> <ol> <li>Chicago-based conference focusing on serverless architecture and DevOps.</li> <li>Speaker Divya Stasi Darrin uses the hero's journey to share her story.</li> <li>Introduces Sammy, a server worker facing scaling challenges in their application.</li> <li>Sammy learns about serverless functions using AWS Lambda and Netlify.</li> <li>Discusses authentication and authorization for users with different roles.</li> <li>Ends with Sammy's success; audience encouraged to try the live demo.</li> </ol>"},{"location":"goto_FE_v2/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <ol> <li>Speaker's love for programming and his journey in the field</li> <li>Focus on Closure, a unique programming language with specific features</li> <li>Practical application of Closure in University Applied Science use case</li> <li>Implementation of immutable data structures and atomic references</li> <li>Demonstration of hot reloading and state management in development systems</li> <li>Example of using Closure to create a game for Borneo fundraising campaign</li> <li>Open source project and technical challenges faced during the presentation</li> </ol>"},{"location":"goto_FE_v2/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ol> <li>Persuasive design leverages psychology to reduce friction.</li> <li>Intrinsic and extrinsic motivations are crucial for user engagement.</li> <li>Tailor experiences to align with both user goals and business objectives.</li> <li>Utilize techniques like tunneling, dashboards, and gamification for motivation.</li> <li>Facilitate intrinsic motivation through challenges, learning, and mastery.</li> <li>Apply seduction and falling love principles to encourage product usage.</li> <li>Balance persuasion and manipulation carefully to create a better world.</li> </ol>"},{"location":"goto_FE_v2/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <ol> <li>Typescript is a popular tool among JavaScript developers due to its commitment to the ECMAScript standard, advanced typing system, and excellent tooling support.</li> <li>The typescript compiler provides intelligent suggestions and autocompletion based on type information, making development more efficient.</li> <li>Strong community support has led to various frameworks like React, Angular, and NativeScript using Typescript as their default language.</li> <li>For large teams or complex applications, Typescript becomes even more valuable due to its ability to catch errors early in the development process.</li> <li>Non-JavaScript developers can find Typescript appealing as it provides a comfortable frontend workflow while still leveraging JavaScript's vast ecosystem.</li> <li>NativeScript is an open-source framework that allows developers to build native iOS and Android apps using JavaScript, with Typescript providing additional benefits like inline syntax checking and autocompletion.</li> </ol>"},{"location":"goto_FE_v2/#a-cartoon-quest-new-adventures-for-webassembly-lin-clark-goto-2018","title":"A Cartoon Quest: New Adventures for WebAssembly \u2022 Lin Clark \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=rZB9Er8aq4s</p> <ol> <li>WebAssembly (Wasm) is a new web technology that compiles code into a binary format, allowing it to run on the web without needing a virtual machine.</li> <li>It's designed for high-performance applications and can be used in browsers or servers.</li> <li>WASM has several advantages: portability, security (sandboxing), performance, and compatibility with existing codebases.</li> <li>Node.js is another technology that allows JavaScript to run on the server side; it provides a similar level of portability but lacks some security features.</li> <li>WebAssembly can be used in edge computing scenarios, where it helps reduce costs by making applications more efficient and secure.</li> <li>Blockchain platforms like Ethereum are using WASM to improve their performance and security.</li> <li>The future of WebAssembly is promising as it continues to evolve and address new use cases.</li> </ol>"},{"location":"goto_FE_v2/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ol> <li>Introduce microservices architecture and rewrite existing systems in Rust.</li> <li>Create a welcoming community, documentation, and tools for beginners.</li> <li>Emphasize safety, performance, and ease of use.</li> <li>Educate developers about Rust's ecosystem: showcase cargo, crate.io, etc.</li> <li>Highlight Rust's community: share stories of helpful people.</li> <li>Explain that learning curves can be challenging but rewarding.</li> <li>Showcase real-world use cases: share success stories from companies using Rust.</li> <li>Encourage boring code: demonstrate the benefits of writing simple, reliable code in Rust.</li> <li>Focus on problem solving: show how Rust helps solve specific problems and improve performance.</li> <li>Emphasize learning new technologies: encourage people to learn Rust for skill expansion.</li> </ol>"},{"location":"goto_FE_v2/#make-web-apps-fun-to-build-and-easy-to-refactor-with-elm-daniel-bachler-goto-2017","title":"Make Web Apps Fun to Build and Easy to Refactor with Elm \u2022 Daniel Bachler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=ehtn81p06Ow</p> <ol> <li>Elm is a functional programming language with static typing and immutability, making it easy to test and debug.</li> <li>It has an unidirectional architecture, suitable for building complex applications.</li> <li>The language uses Union types to handle different states in the application, ensuring only valid states can be reached.</li> <li>Elm's compiler helps catch errors early on by providing type checking and error messages.</li> <li>It has a strong community with helpful resources like Slack channels for support.</li> <li>Elm is suitable for building server-side rendering applications using Node.js, making it versatile across different platforms.</li> <li>The language can be used to create web applications that are accessible even without JavaScript, catering to non-JavaScript enabled clients.</li> <li>Elm's focus on writing user interfaces makes it a good choice for frontend development teams.</li> <li>It has a learning curve but is worth investing time in due to its benefits and strong community support.</li> </ol>"},{"location":"goto_FE_v2/#augmented-reality-challenges-writing-ar-experiences-in-javascript-philipp-nagele-goto-2017","title":"Augmented Reality - Challenges &amp; Writing AR Experiences in JavaScript \u2022 Philipp Nagele \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=wVOESt-TpSA</p> <ol> <li>AR and VR are part of the same reality continuum, with AR focusing on real-world content and VR on virtual content.</li> <li>The AR market is growing rapidly, with companies like Wikitude offering enterprise solutions.</li> <li>Developers can create AR experiences using JavaScript APIs for web views, 3D models, and video overlays.</li> <li>SDKs provide essential tools for creating AR applications, such as location-based services, image recognition, and object tracking.</li> <li>The future of AR involves enhancing sensing capabilities, visualization, and computing power while maintaining a seamless user experience.</li> </ol>"},{"location":"goto_FE_v2/#why-backend-for-frontend-is-key-for-microservices-brian-grant-krishnan-ramanathan-goto-2017","title":"Why Backend for Frontend Is Key for Microservices \u2022 Brian Grant &amp; Krishnan Ramanathan \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=PwgQZ8eCGxA</p> <ul> <li>BFF architecture is a pattern that helps manage backend APIs and user experience.</li> <li>It allows reusing legacy web application services, normalizing data, and providing consistent error handling across multiple applications.</li> <li>Standardization and consistency are crucial in building microservices.</li> <li>A centralized service handles errors and provides unified responses.</li> <li>BFF can act as an API gateway, connecting with user experience client apps while maintaining consistency among different data providers.</li> </ul>"},{"location":"goto_FE_v2/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ol> <li>Utilize JavaScript with React, Express, and Node.js for web development.</li> <li>Employ microservices architecture to achieve scalability and flexibility.</li> <li>Invest in developer productivity tools like Jager, Lent, and Ring Pop.</li> <li>Standardize infrastructure using NPM, Gulp, and Babel.</li> <li>Optimize performance with WebGL libraries like Deck.gl and Luma.gl.</li> <li>Build an open platform for third parties to use your services.</li> <li>Encourage collaboration through open source engineering blogs and tutorials.</li> <li>Hire smart people from around the world to work on your team.</li> </ol>"},{"location":"goto_FE_v2/#css-vs-javascript-trust-vs-control-christian-heilmann-goto-2017","title":"CSS vs. JavaScript, Trust vs. Control \u2022 Christian Heilmann \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=_3VsoqpnTrs</p> <ol> <li>CSS evolution: From basic HTML to complex layouts, CSS has undergone significant changes over the years.</li> <li>Flexbox and Grid: These tools enable flexible and responsive designs, simplifying web development.</li> <li>Custom Properties: Define variables within CSS for improved code reusability and maintainability.</li> <li>Browser support: Consider compatibility when using these features across different browsers.</li> <li>Community: A passionate developer community shares knowledge on blogs, social media, and conferences.</li> <li>Future trends: Web animation, CSS filters, and advanced techniques are shaping the future of web design.</li> </ol>"},{"location":"goto_FE_v2/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Incorporate Elm into existing JavaScript apps:</li> <li>Embed Elm code within a page using L map, passing an element for rendering the app.</li> <li>Utilize Elm's virtual DOM and command pattern for communication between Elm and JS.</li> <li>Maintain Elm's guarantees by preserving its immutability and side-effect-free nature.</li> <li>Use Elm architecture (model, view, update) to handle state, UI rendering, and user interactions.</li> <li>Leverage subscriptions for bi-directional communication between Elm and JS.</li> <li>Employ error handling in Elm by returning commands instead of throwing exceptions.</li> <li>Explore using Elm components within frameworks like React for easier integration.</li> <li>Learn Elm:<ul> <li>Refer to the official guide, free courses, and books for training.</li> </ul> </li> </ol>"},{"location":"goto_FE_v2/#avoiding-the-nightmare-on-elm-street-thomas-anagrius-goto-2017","title":"Avoiding the Nightmare on Elm Street \u2022 Thomas Anagrius \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Qhx81eI5FPs</p> <ol> <li>Thomas shares his experience with Elm, a functional programming language.</li> <li>He emphasizes the challenges of JavaScript and how Elm solves them.</li> <li>Elm's time-traveling debugger is considered unique and powerful.</li> <li>The speaker recommends exploring alternative languages for future projects.</li> <li>React and Elm have similarities in state management, but Elm has faster performance.</li> <li>Language choice depends on project requirements and team culture.</li> </ol>"},{"location":"goto_FE_v2/#we-want-webassembly-ben-smith-goto-2017","title":"We Want WebAssembly \u2022 Ben Smith \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=P2C9bRtCWOA</p> <ol> <li>WebAssembly is a low-level assembly language that can be compiled to binary format, providing performance boosts for certain tasks.</li> <li>It supports various programming languages and can be used as a self-contained unit within JavaScript.</li> <li>New languages like TurboScript are being developed to compile directly into WebAssembly for better performance.</li> <li>Future developments may include support for garbage collection, exception handling, and more efficient threading models.</li> <li>WebAssembly could potentially be used in mobile devices and browsers, improving their performance.</li> <li>The community is working on adding new features to the technology, making it more accessible and useful for developers.</li> </ol>"},{"location":"goto_FE_v2/#resilience-jeremy-keith-goto-2016","title":"Resilience \u2022 Jeremy Keith \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=t0dUvs3jQnw</p> <ol> <li>Building web applications involves identifying core functionality and making it accessible to all users across devices and browsers.</li> <li>Key principles include accessibility, responsiveness, and progressive enhancement.</li> <li>Retrofitting existing websites can be challenging due to compatibility issues; building new projects from scratch offers better control over design and functionality.</li> <li>Enhancements can be achieved through the use of modern technologies, APIs, and browser features.</li> <li>Strive for a balance between developer convenience and user needs, prioritizing core functionality and accessibility.</li> <li>Embrace change by being open to new ideas and technologies that improve web experiences.</li> <li>Build resilient websites that work across different browsers, devices, and network conditions. Ensure core functionality is available in extreme situations.</li> </ol>"},{"location":"goto_FE_v2/#you-can-use-css-for-that-rachel-andrew-goto-2016","title":"You Can Use CSS For That! \u2022 Rachel Andrew \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=TNhR6ol9mBc</p> <ol> <li>New CSS features: Flexbox, Grid Layout, Shape, Writing Mode, Custom Properties (CSS Variables), Position Sticky, Scroll Snapping.</li> <li>Browser support varies; some features are experimental or behind flags.</li> <li>Use feature query for testing browser support and enabling/disabling features based on capabilities.</li> <li>Polyfills can bridge gaps in browser support, allowing older browsers to render newer CSS features.</li> <li>Grid Layout expected to have good cross-browser compatibility by early 2017.</li> <li>Feature testing JavaScript libraries like Lazy Load Content optimize website performance and ad loading.</li> <li>User Agent specs are not ideal for feature detection, as they don't cover all browsers or features.</li> </ol>"},{"location":"goto_FE_v2/#javascript-the-cloud-the-rise-of-the-new-virtual-machine-scott-hanselman-goto-2016","title":"JavaScript, the Cloud &amp; the Rise of the New Virtual Machine \u2022 Scott Hanselman \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7LZ0Lznq4Aw</p> <ul> <li>The speaker shares their transition from working at Microsoft to open source projects and cloud computing.</li> <li>They emphasize the significance of learning new technologies, such as web development, with JavaScript being a powerful tool for creating complex applications.</li> <li>The speaker discusses various frameworks like jQuery, vanilla JS, and server-side rendering.</li> <li>They highlight the benefits of cloud computing, including scalability and elasticity.</li> <li>The importance of continuous learning and adapting to changing technologies is stressed.</li> </ul>"},{"location":"goto_FE_v2/#building-an-app-using-jstypescript-node-electron-100-oss-components-erich-gamma-goto-2016","title":"Building an App Using JS/TypeScript, Node, Electron &amp; 100 OSS Components \u2022 Erich Gamma \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uLrnQtAq5Ec</p> <ol> <li>Transition from traditional desktop IDEs to cross-platform web-based editors</li> <li>Focus on efficiency, productivity, and developer experience</li> <li>Emphasis on open source, collaboration, and community contributions</li> <li>Use of intelligent language servers for real-time code analysis and assistance</li> <li>Extensibility through custom extensions and plugins</li> <li>Leveraging modern technologies like TypeScript, Node.js, and Electron</li> <li>Openness to feedback and continuous improvement</li> <li>Emphasis on developer happiness and satisfaction</li> </ol>"},{"location":"goto_FE_v2/#visual-studio-code-shipping-one-of-the-largest-microsoft-javascript-apps-alex-dima-goto-2016","title":"Visual Studio Code: Shipping One of the Largest Microsoft JavaScript Apps \u2022 Alex Dima \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=mTKMefhTjh8</p> <ol> <li>TypeScript: A powerful tool for JavaScript development, offering features like type annotations, interfaces, and classes.</li> <li>Dependency Management: Use AMD to load dependencies lazily, improving loading times and reducing bundle sizes.</li> <li>Bundling &amp; Minification: Combine multiple files into a single file for faster loading and reduce file size by removing unnecessary code.</li> <li>Electron: A framework that combines Chromium, Node.js, and HTML5 to create desktop applications with rich features like mouse movement tracking.</li> <li>Visual Studio Code: An open-source editor with powerful debugging tools, allowing developers to work on multiple platforms.</li> <li>Virtual Scrolling: A technique for improving performance in editors by rendering only the visible part of a document and updating the DOM as needed.</li> <li>Performance Profiling: Use Chrome DevTools to analyze CPU usage and frame rates to optimize application performance.</li> <li>Code Refactoring: Rewrite code to improve readability, maintainability, and performance. For example, refactor jQuery minified code into a more readable version.</li> </ol>"},{"location":"goto_FE_v2/#beyond-flux-scalable-frontend-architectures-built-upon-publishsubscribe-m-kurze-goto-2016","title":"Beyond Flux - Scalable Frontend Architectures built upon Publish/Subscribe \u2022 M. Kurze \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=82rrMIf48Zk</p> <ol> <li>The talk addressed the challenges of building large web applications, focusing on complexity and responsiveness.</li> <li>It introduced unidirectional data flow as a solution, mentioning frameworks like Flux, Redux, and Event Bus (Luxar).</li> <li>Flux uses actions, dispatchers, stores, and views for communication between components; Redux simplifies this by using reducers and eliminating mutable state.</li> <li>The importance of decoupling components was highlighted, making them easier to test and reuse across applications.</li> <li>A clear architecture was emphasized, allowing developers to identify the business value of each component.</li> <li>Luxar, an event bus framework, helps manage complex web applications with multiple teams and backgrounds.</li> </ol>"},{"location":"goto_FE_v2/#busy-developers-guide-to-meteorjs-ted-neward-goto-2016","title":"Busy Developer's Guide to MeteorJS \u2022 Ted Neward \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uMSY-vWB23w</p> <ol> <li>Meteor is a JavaScript framework that simplifies web development by combining client and server-side code into one application.</li> <li>It utilizes reactive programming, enabling automatic UI updates when data changes.</li> <li>The framework has Atmosphere, its package manager for dependency management.</li> <li>Meteor supports various database options like MongoDB, Redis, and Couchbase.</li> <li>Its ecosystem includes packages for authentication, user management, and common web app features.</li> <li>It uses a unique deployment model where the entire application is deployed as one unit to a single server.</li> <li>The framework focuses on simplicity and productivity, making it ideal for building full-stack applications quickly.</li> </ol>"},{"location":"goto_FE_v2/#the-return-of-stream-io-andre-staltz-medeiros-goto-2016","title":"The Return of Stream I/O \u2022 Andre 'Staltz' Medeiros \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Tkjg179M-Nc</p> <ul> <li>Introduction to Stream IO and message passing</li> <li>Comparison of programming languages for frontend development</li> <li>Evolution of programming languages over time, focusing on functional, event-driven, and message-passing approaches</li> <li>Use of frameworks like Cycle.js, Elm, Dart, React, Angular, and RxJS with these programming styles</li> <li>Benefits of using TypeScript with these frameworks</li> <li>Discussion on Haskell's reactive UI capabilities</li> <li>Importance of functional programming languages for future development</li> </ul>"},{"location":"goto_FE_v2/#elm-friendly-functional-programming-for-the-web-luke-westby-goto-2016","title":"Elm-Friendly Functional Programming For The Web \u2022 Luke Westby \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=tN5UmM2yZPY</p> <ol> <li>Elm: A functional programming language for the web, emphasizing simplicity and safety.</li> <li>Type system and architecture: Ensures code correctness with its type system, while Elm Architecture helps build interactive apps with minimal runtime errors.</li> <li>Building an app: Create a model to represent user data, update it based on actions, and display the updated state in HTML using view functions.</li> <li>Community involvement: Engage with Elm's community for feedback, support, and collaboration.</li> <li>Functional programming benefits: Focuses on problem-solving rather than implementation details, leading to more maintainable code.</li> </ol>"},{"location":"goto_FE_v2/#ionic-mobile-app-development-with-a-superpowered-platform-matt-kremer-goto-2016","title":"Ionic: Mobile App Development with a Superpowered Platform \u2022 Matt Kremer \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=P7NPfjqeXPY</p> <ul> <li>Ionic is a leading mobile app development platform based on HTML, CSS, and JavaScript.</li> <li>Over the years, it has evolved from niche technologies to modern web technology.</li> <li>The platform supports frameworks like Angular, React, Vue, etc., for building apps.</li> <li>Ionic App Builder enables creating native iOS and Android apps with a single codebase.</li> <li>It offers an extensive ecosystem with components, themes, and plugins for better development experience.</li> <li>A strong community provides regular meetups and active forums for help.</li> <li>Enterprise support is available with enhanced security and dedicated assistance.</li> <li>Learn more about Ionic through their website or attend events like Ionic Chicago Meetup.</li> </ul>"},{"location":"goto_FE_v2/#the-post-mvc-age-maarten-hus-goto-2016","title":"The Post-MVC Age \u2022 Maarten Hus \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=QQxNr6t1HEc</p> <ol> <li>The presentation focused on the PostMVC Age, exploring component architecture and reactive programming.</li> <li>A Google Maps example using Polymer Framework was demonstrated to showcase component isolation, clear input/output semantics, declarative nature, and composability.</li> <li>Angular 20's Todo application was used as an example of component-based applications, highlighting state management and communication issues between components.</li> <li>Redux was introduced as a solution to these problems, offering unidirectional data flow, centralized state management, simplified event routing, and improved developer experience.</li> <li>Reactive programming with RxJS was discussed for handling asynchronous events in complex projects. An autocomplete example demonstrated its power.</li> <li>Redux is recommended for small applications with simple state management needs, while RxJS is better suited for larger projects requiring complex event coordination.</li> <li>The presentation concluded by emphasizing the importance of component architecture and reactive programming in modern web development.</li> </ol>"},{"location":"goto_FE_v2/#adventures-in-elm-jessica-kerr-goto-2016","title":"Adventures in Elm \u2022 Jessica Kerr \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=cgXhMc8M4X4</p> <ul> <li>Elm programming language is discussed, highlighting its simplicity, functional programming, and immutability.</li> <li>Good architecture and modularity in code organization are emphasized.</li> <li>Clear and readable code that resembles natural English is considered essential.</li> <li>The benefits of Elm's type system and error detection are noted.</li> <li>The speaker shares their experience working at Stripe, using Elm in projects.</li> <li>Elm community, events, and resources for learning and contributing are mentioned.</li> </ul>"},{"location":"goto_FE_v2/#javascript-performance-through-the-spyglass-vyacheslav-egorov-goto-2016","title":"JavaScript Performance Through the Spyglass \u2022 Vyacheslav Egorov \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=r76ZjdzFExg</p> <ol> <li>The speaker discussed JavaScript performance and optimization, focusing on high-level understanding rather than micro-optimizations.</li> <li>V8, a JavaScript engine, has improved over time in terms of performance and optimization.</li> <li>Write reasonable code for performance without relying on slow language features.</li> <li>Understand compiler behavior and how it affects optimization.</li> <li>Some optimizations may not work as expected; avoid complex techniques.</li> <li>V8 handles prototype chains, getters, and setters better for improved performance.</li> <li>Avoid using slow or unoptimized language features in code.</li> <li>Write readable code and continue learning from mistakes.</li> </ol>"},{"location":"goto_FE_v2/#emulating-a-6502-system-in-javascript-matt-godbolt-goto-2016","title":"Emulating a 6502 system in JavaScript \u2022 Matt Godbolt \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7WuRq-Wmw5o</p> <ol> <li>Emulating 6502 systems using JavaScript is discussed by the speaker.</li> <li>The process of emulation, from loading a game to rendering graphics and playing sounds, is explained.</li> <li>Timing plays an important role in emulators and affects performance; optimization techniques like JIT compilation, loop unrolling, and WebGL are mentioned.</li> <li>Game hacking and reverse engineering stories are shared along with the speaker's past experiences.</li> <li>Gratitude is expressed to those who contributed to the 6502 community and their work on decapping chips and creating emulators.</li> </ol>"},{"location":"goto_FE_v2/#enhanced-front-end-applications-in-angularjs-13-matias-niemela-goto-2014","title":"Enhanced Front-end Applications in AngularJS 1.3 \u2022 Matias Niemela \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=CTezvNSQPYw</p> <ul> <li>AngularJS 13: Key features and enhancements.</li> <li>New features, improvements, and enhancements in version 13.</li> <li>Enhanced validation with form support, custom validators, and better error handling.</li> <li>Improved animation capabilities using animate.css library.</li> <li>Material design integration for mobile and desktop compatibility.</li> <li>Better performance and optimization.</li> <li>Best practices for organizing JavaScript code across files.</li> <li>Focus on improving browser compatibility and performance.</li> </ul>"},{"location":"goto_FE_v2/#web-assembly-nick-bray-goto-2015","title":"Web Assembly \u2022 Nick Bray \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=NhAPPQqKCi8</p> <ol> <li>Web Assembly is a new technology for running native code on the web.</li> <li>It simplifies porting native applications to the web by providing shared memory and multi-threading capabilities.</li> <li>The goal is to make running native code in browsers as fast, reliable, and secure as possible.</li> <li>Web Assembly has two versions: version 1 focuses on performance, while version 2 emphasizes safety and portability.</li> <li>It aims to be a universal platform for running any application, from simple scripts to complex games and applications.</li> <li>The future of web assembly involves integrating it into browsers and standardizing its implementation across different platforms.</li> </ol>"},{"location":"goto_FE_v2/#benchmarking-javascript-vyacheslav-egorov-goto-2015","title":"Benchmarking JavaScript \u2022 Vyacheslav Egorov \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=g0ek4vV7nEA</p> <ol> <li>Speaker worked on virtual machines (VMs) and optimizing compilers.</li> <li>Optimized benchmarking to find bugs in VMs, improving performance by fixing issues in v8 through prototype chain access, property access, and loop optimization.</li> <li>Explained how v8 works with data properties and getters.</li> <li>Showed how v8 handles tagged variables and optimizes code for specific cases.</li> <li>Demonstrated the importance of benchmarking to understand performance issues in VMs.</li> </ol>"},{"location":"goto_FE_v2/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ol> <li>Simplicity is crucial in software development.</li> <li>Embrace immutability throughout the stack for better reasoning and performance.</li> <li>Utilize frameworks like React, Relay, and Falkor that support immutable data structures.</li> <li>Choose the appropriate data structure for your problem to avoid complexity.</li> <li>Leverage tools like Git and query languages for efficient data management.</li> <li>Closure Script is a powerful tool for UI development with optimization features.</li> <li>Transit provides an easy-to-use format for representing complex data structures.</li> <li>Meteor's Falkor offers a simplified approach to building apps by composing queries and sending batches of data.</li> <li>Atomic databases offer powerful editing capabilities and efficient querying.</li> <li>Consider using atomic support in your stack for better performance and simplicity.</li> </ol>"},{"location":"goto_FE_v2/#conquering-time-with-functional-reactive-programming-sergi-mansilla-goto-2014","title":"Conquering Time with Functional Reactive Programming \u2022 Sergi Mansilla \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=gT6il5fJyAs</p> <ol> <li>FRP (Functional Reactive Programming) was discussed, focusing on its applications in JavaScript.</li> <li>The speaker emphasized the need for efficient handling of asynchronous tasks using event-based programming.</li> <li>RxJS, a popular library for reactive programming in JavaScript, was introduced to manage asynchronous data streams.</li> <li>Demonstration of using RxJS to handle mouse events and user interactions in a reactive manner.</li> <li>Real-world applications of FRP were mentioned, including Facebook React, Netflix, and SoundCloud.</li> <li>The potential application of MVC (Model View Controller) with FRP for better control over data flow was discussed.</li> </ol>"},{"location":"goto_FE_v2/#lessons-learned-from-building-a-css-minifier-stoyan-stefanov-goto-2014","title":"Lessons Learned from Building a CSS Minifier \u2022 Stoyan Stefanov \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=SV2f3whvvm0</p> <ul> <li>The speaker discussed CSS minification, performance optimization, and transformation tools.</li> <li>Understanding CSS syntax and structure is crucial for better optimization.</li> <li>Techniques like removing duplicate selectors, shortening property values, and using browser-specific CSS were introduced.</li> <li>He also talked about CSS transforms and testing tools such as BS CSS and CSS diff.</li> <li>Experimenting with different approaches to improve performance and efficiency in web development was encouraged.</li> </ul>"},{"location":"goto_FE_v2/#turbopack-dx-matters-tobias-koppers-goto-2023","title":"Turbopack: DX Matters \u2022 Tobias Koppers \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=5wPCObSNY5Q</p> <ol> <li>Web development challenges: Performance optimization, configuration complexity, tooling limitations, and dependency management.</li> <li>Solutions: Incremental build approach, caching, lazy loading, flexible architecture for different environments.</li> <li>Turbo Engine: Rust-based incremental computation engine with reactive programming concepts, graph-based dependencies, and persistent caching.</li> <li>Graph-based linting: Visualizing module imports to improve code organization and safety.</li> <li>Build introspection: Understanding build processes and optimizations for better control over production builds.</li> <li>Optimization opportunities: Split modules into smaller statements, lazy evaluation, special optimization for different environments like Lambda and Edge workers.</li> </ol>"},{"location":"goto_FE_v3/","title":"goto FE v3","text":""},{"location":"goto_FE_v3/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ul> <li>K Held discusses Storybook, a popular frontend development tool.</li> <li>It helps in building UI components and testing them efficiently.</li> <li>CSF3 is a new component story format for Storybook.</li> <li>Interaction testing allows simulating user behavior and debugging.</li> <li>Chromatic offers visual regression testing and documentation features.</li> <li>Figma integration shows live design alongside the code.</li> <li>Storybook has an extensive ecosystem with various integrations.</li> <li>It brings improvements to existing projects and supports multiple frameworks.</li> </ul>"},{"location":"goto_FE_v3/#programming-the-web-with-hyperlang-hypercli-mike-amundsen-goto-2023","title":"Programming the Web with HyperLANG &amp; HyperCLI \u2022 Mike Amundsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vcjOzcxIBdY</p> <ol> <li>The speaker discussed their programming web application, Hyper CLI, which uses HTTP to interact with various services and websites.</li> <li>They mentioned the importance of using configuration files for easy customization and automation.</li> <li>They highlighted the need for a better object model and modularized libraries for improved functionality.</li> <li>The speaker emphasized the significance of plugins and DSL programming platforms, especially in the context of specific domains like insurance or healthcare.</li> <li>They also talked about the potential benefits of using event-driven architectures and command line tools to simplify tasks.</li> <li>The speaker expressed interest in improving security features within their application.</li> <li>They acknowledged the importance of documentation and a strong community for successful software development.</li> </ol>"},{"location":"goto_FE_v3/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ol> <li> <p>Stephanie Stimac, a designer and developer, discusses her new book \"Design Developers\" which focuses on teaching developers about design fundamentals, user experience basics, and other essential skills for building polished websites.</p> </li> <li> <p>The importance of communication between designers and developers is emphasized, as it helps in identifying issues early and improves the overall product quality.</p> </li> <li> <p>Designers can learn from developers' technical knowledge to better understand constraints and feasibility while developers can benefit from understanding design principles for creating visually appealing products.</p> </li> <li> <p>The book aims to bridge the gap between designers and developers, providing a foundation in design fundamentals, user experience basics, and other essential skills for building polished websites.</p> </li> <li> <p>The author highlights the need for continuous learning and adaptation in both design and development fields as technology evolves rapidly.</p> </li> <li> <p>The book is intended to be accessible to people with various backgrounds, including those who are self-taught or have a non-traditional education path.</p> </li> <li> <p>The importance of accessibility, color theory, typography, and other design principles is discussed in the context of creating inclusive and visually appealing products.</p> </li> <li> <p>The author encourages readers to explore different roles within the tech industry, such as fullstack developers or unicorns, and emphasizes the value of learning new skills throughout their careers.</p> </li> </ol>"},{"location":"goto_FE_v3/#simplifying-dev-environments-with-the-right-tools-christian-heilmann-julian-wood-goto-2022","title":"Simplifying Dev Environments with the Right Tools \u2022 Christian Heilmann &amp; Julian Wood \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=o0bYu0HVjNU</p> <ul> <li>Welcoming to GOTO Unscripted, discussing the Danish experience and its advantages.</li> <li>Discussing the future of developer tools, focusing on browser-based development environments like Visual Studio Code.</li> <li>Highlighting the importance of accessibility in software development and how it can benefit everyone.</li> <li>Emphasizing the need for simpler interfaces and better integration between different tools to make developers more efficient.</li> <li>Mentioning the role of machine learning in code generation, autocompletion, and improving developer efficiency.</li> <li>Discussing the importance of teaching and sharing knowledge within the community to learn and grow together.</li> </ul>"},{"location":"goto_FE_v3/#developer-tools-that-shouldnt-be-secrets-christian-heilmann-goto-2022","title":"Developer Tools That Shouldn't Be Secrets \u2022 Christian Heilmann \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lz-nUdotdx4</p> <ul> <li>Developer tools are essential for web development.</li> <li>Console is a powerful tool for debugging and logging information.</li> <li>Device mode allows simulating different devices, resolutions, and network speeds.</li> <li>Inspector helps with element identification and accessibility testing.</li> <li>Snippets allow saving and sharing code snippets.</li> <li>Color picker simplifies changing colors on websites.</li> <li>Visual Studio Code integrates developer tools into the editor.</li> <li>DevTools can be used to create custom extensions for specific tasks.</li> <li>Developer tools help in accessing and modifying source code, making development easier.</li> </ul>"},{"location":"goto_FE_v3/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ul> <li>Transcript is a video conference about JavaScript and web development.</li> <li>The speaker discusses the evolution of the web, its future, and the importance of JavaScript.</li> <li>They introduce Dino, a serverless edge runtime that runs JavaScript code globally with low latency.</li> <li>Dino Deploy is a product built on top of Dino, providing GitHub integration for easy deployment.</li> <li>The speaker showcases Fresh, a web framework built on Dino, which renders everything on the server side and uses Tailwind CSS.</li> <li>A comparison between Fresh and Create React App is made in terms of installation time and size.</li> </ul>"},{"location":"goto_FE_v3/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ol> <li>Understanding human behavior is crucial in the digital world, where decisions are made based on biases and nudges.</li> <li>Digital Decision Architects design environments to influence people's choices through behavioral economics principles.</li> <li>Ethical considerations should be taken into account when using technology to make decisions for others.</li> <li>Dataism is a concept that uses data to improve human lives, with examples like continuous glucose monitors and stress-tracking wearables.</li> <li>Humane Tech organizations aim to create better digital experiences by focusing on user wellbeing and reducing attention hijacking.</li> </ol>"},{"location":"goto_FE_v3/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ol> <li>Dystopian themes in technology: The speaker discusses the dystopian nature of modern technology and how it affects attention, agency, and control over personal data.</li> <li>Attention as a weapon: The speaker believes that attention has become a weapon used by companies to manipulate users for profit.</li> <li>Psychology and technology: The speaker highlights the importance of understanding psychology in designing technology and ensuring user empowerment.</li> <li>Designing for privacy and security: They emphasize the need for better privacy and security measures in technology, such as ad blockers and clothing that can confuse facial recognition systems.</li> <li>Government regulation and digital services: The speaker advocates for more government involvement in regulating tech companies to protect user data and promote transparency.</li> <li>Diversity in AI development: They argue for a diverse team working on AI projects, as it helps prevent biased outcomes.</li> <li>Greta Thunberg's activism: The speaker admires Greta Thunberg's direct action approach to climate change advocacy and believes that inaction is also a powerful form of protest.</li> </ol>"},{"location":"goto_FE_v3/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ul> <li>Attention is a limited resource and needs to be managed effectively.</li> <li>Design can influence attention by using visual cues, prioritizing content, and avoiding distractions.</li> <li>Screen readers require careful design as they may skip over non-essential content.</li> <li>Working memory capacity affects attention span and retaining information.</li> <li>Animation can help with accessibility but should be used responsibly to avoid overwhelming users.</li> <li>Design systems can aid in managing attention by providing consistent patterns and guidelines.</li> </ul>"},{"location":"goto_FE_v3/#how-the-sjgar-stack-accelerated-our-digital-transformation-erik-ammerlaan-goto-2022","title":"How the SJGAR Stack Accelerated Our Digital Transformation \u2022 Erik Ammerlaan \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=V5zW3ig2lG8</p> <ol> <li>A large financial institution with 11 countries and a $30 billion worth uses a simple technology stack to deliver customer value faster.</li> <li>The company's innovation team has transformed its business by adopting the Sugar Stack, which includes technologies like JavaScript, serverless, React, and more.</li> <li>This stack helps them build products quickly with low cost failures, allowing for rapid experimentation.</li> <li>The platform team focuses on providing libraries and frameworks to help other teams build customer-focused solutions.</li> <li>By embracing the Sugar Stack, companies can foster an engineering culture that promotes innovation and collaboration across departments.</li> </ol>"},{"location":"goto_FE_v3/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>Transcript is a talk by Stefan about the evolution of web development and frontend technologies.</li> <li>He discusses the importance of performance, accessibility, and user experience.</li> <li>He mentions various frameworks like React, Vue, Svelte, and Astro, as well as serverless functions.</li> <li>Stefan emphasizes the need for simplicity in building websites and using the right tools.</li> <li>He talks about the value of developer experience and user experience.</li> <li>The speaker shares his journey from a javascript-driven approach to a pure approach with reduced page weight and build time.</li> <li>He highlights the importance of considering tradeoffs when choosing technology for a project.</li> </ul>"},{"location":"goto_FE_v3/#what-are-micro-frontends-how-to-use-them-luca-mezzalira-lucas-dohmen-goto-2022","title":"What Are Micro-Frontends &amp; How to Use Them \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=-thWgobMW_I</p> <ul> <li>Building MicroFrontends is a topic explored by Luca Mezzalira and Lucas Dohmen.</li> <li>The motivation behind exploring microfrontends comes from the need to address challenges in large web applications with distributed teams.</li> <li>There are two main approaches for splitting an application: horizontal split (multiple teams working together) and vertical split (teams responsible for specific views).</li> <li>MicroFrontends can be seen as a way to decouple different parts of an application, allowing for independent deployment and better organization.</li> <li>The concept of microfrontends is closely related to single-page applications, which load packages from the server using APIs.</li> <li>Edge servers can provide a nice decoupling container for microfrontends, while client-side routing can be challenging due to increased complexity.</li> <li>MicroFrontends can help in migrating existing monolithic codebases towards a more modular architecture.</li> </ul>"},{"location":"goto_FE_v3/#building-micro-frontends-luca-mezzalira-lucas-dohmen-goto-2022","title":"Building Micro-Frontends \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=DG9puFuUb7E</p> <ol> <li>Luca discussed the concept of microfrontends and its implementation techniques.</li> <li>He highlighted the importance of an application shell, which acts as a container for business logic and handles routing.</li> <li>Microfrontends can be implemented using various technologies like Module Federation, iframes, web components, and serverside includes (SSI/ESI).</li> <li>Luca emphasized the need to maintain a clear separation between frontend and backend systems using API gateways, BFFs, or service dictionaries.</li> <li>The role of feature teams was discussed in relation to microfrontends development.</li> <li>The importance of flexibility and adaptability in architecture design was stressed, as companies evolve over time.</li> </ol>"},{"location":"goto_FE_v3/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>Kevlin Henney's talk focused on the complexity of modern web development, highlighting issues like bloated code and inefficient JavaScript.</li> <li>The importance of collective intelligence was emphasized, with a call for better tooling to help developers make informed decisions.</li> <li>Dependency management was discussed as an area needing improvement, with suggestions for more deliberate approaches to avoid duplication and abstraction.</li> <li>The need for better communication within teams and the software development community was stressed, encouraging sharing of experiences and learning from each other's mistakes.</li> <li>Awareness of tradeoffs in decision-making was emphasized, suggesting that developers should be mindful of the long-term consequences of their choices.</li> </ol>"},{"location":"goto_FE_v3/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ul> <li>Ideal programming language should be domain specific.</li> <li>Memory management can be automatic or manual, with different tradeoffs.</li> <li>Concurrency models vary; Erlang's is great for distributed systems while Rust has channels.</li> <li>WebAssembly may become a popular way to run web applications without compromising performance.</li> <li>JavaScript remains dominant due to its cultural momentum and ecosystem.</li> <li>In-house applications in large organizations can benefit from custom languages or frameworks.</li> <li>Language design should consider portability, memory management, concurrency, and performance.</li> <li>New programming languages may emerge for specific use cases like game development or web browsers.</li> </ul>"},{"location":"goto_FE_v3/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <pre><code>- Functional programming focuses on pure functions, avoiding mutation and side effects.\n- Pure functions are thread-safe, making testing easier with no flaky tests.\n- Caching and precomputing can improve performance in functional programs.\n- Parallelization is easier in functional languages due to their innate parallelizability.\n- Functional programming languages have better ecosystems, like Elm's 100% pure function guarantee.\n- Testing is simplified with fewer flaky tests and no need for mocks or mocking frameworks.\n- Debugging is easier due to smaller search spaces and explicit dependencies.\n- Functional programming languages have better performance, especially in parallel computing.\n- Pure functional programming can lead to more efficient code through caching and precomputation.\n- Parallelization is inherent in functional programs, making it easier to achieve high performance.\n- Functional programming languages have better ecosystems with fewer dependencies and flaky tests.\n- Debugging is simplified due to smaller search spaces and explicit dependencies.\n- Pure functional programming can lead to more efficient code through caching and precomputation.\n- Parallelization is inherent in functional programs, making it easier to achieve high performance.\n</code></pre>"},{"location":"goto_FE_v3/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility talk: Discussing writing accessible JavaScript, navigation, and testing methods.</li> <li>Importance of accessibility: Legal requirements, human aspect, and user experience.</li> <li>Handling displaying content: Useful techniques like setting area hidden property, live property, and tab index for better screen reader support.</li> <li>Navigation: Skip main content link, focus management, keyboard navigation, and dynamic content handling.</li> <li>Testing accessibility: Tools like Lighthouse, Chrome DevTools, AccessibleJS, Wave Web Accessibility Evaluation Tool, Chromevox, and A1yjs.</li> <li>Checklist for accessible JavaScript development: Follow semantic elements, use proper HTML tags, consider keyboard navigation, and ensure focus management.</li> </ol>"},{"location":"goto_FE_v3/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Transcript overview: A well-known conference speaker discussed building web applications quickly using modern technologies like NextJS, Typescript, Tailwind CSS, and GraphQL.</li> <li>Key points: Predictability, auto completion, and a strong editor experience were emphasized to help developers move fast. The use of tools such as Hasura and Heroku was also mentioned for scaling purposes.</li> <li>Incremental static regeneration (ISR) was highlighted as a way to improve performance by serving pre-rendered pages while updating the database in the background.</li> <li>Tailwind CSS was used to make web apps look good quickly, with auto completion and live preview features helping developers iterate rapidly.</li> <li>The speaker mentioned the importance of planning ahead and outsourcing concerns like hosting and scaling to cloud providers such as AWS or GCP.</li> </ol>"},{"location":"goto_FE_v3/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix is an Elixir-based web framework with live view, a real-time HTML communication feature.</li> <li>Live View provides instant feedback to users and can handle form validation in real time.</li> <li>It supports reusable HTML components and server-side state management.</li> <li>Live Navigation allows updating page content without refreshing the entire page, saving bandwidth and user processing time.</li> <li>Elixir's distributed nature enables efficient handling of requests and state information across multiple processes.</li> <li>Phoenix provides a generator for creating live view applications.</li> <li>The framework can handle real-time chat functionality using pub/sub mechanisms.</li> <li>Live View can be used to create self-healing web applications that recover from errors or server restarts.</li> <li>It supports efficient handling of large amounts of data and can scale well with distributed systems.</li> <li>Phoenix is a powerful tool for building real-time, scalable web applications using Elixir.</li> </ol>"},{"location":"goto_FE_v3/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte is a web framework that focuses on simplicity, performance, and developer experience.</li> <li>It uses compiler-based runtime library to compile components into JavaScript, resulting in smaller bundles.</li> <li>Svelte encourages component-based development with state management using stores for data sharing between components.</li> <li>The framework has a growing community and offers tools like VS Code extensions, Storybook, and SvelteKit for building mobile apps.</li> <li>Svelte's emphasis on developer experience makes it an attractive alternative to other popular frameworks like Angular and React.</li> </ol>"},{"location":"goto_FE_v3/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Brian and Ray are developers who work on The Jamstack Book.</li> <li>Jamstack is an important concept that has been around since 2015-2016, with a focus on JavaScript, APIs, and markup.</li> <li>The definition of Jamstack has evolved over time, but it's now focused on static site generators, CICD processes, and edge servers/CDNs.</li> <li>Static site generators like Eleventy, Hugo, and Nextjs are popular tools for building websites.</li> <li>Netlify and Vercel are leading platforms in the Jamstack space, with different strengths depending on the project.</li> <li>The debate around broadening the definition of Jamstack continues as it gains more mainstream adoption.</li> <li>The book \"The Jamstack Book\" covers various solutions for building websites using different tools and techniques.</li> </ol>"},{"location":"goto_FE_v3/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ul> <li>Web development journey: from HTML, CSS, and JavaScript to modern frameworks</li> <li>Importance of accessibility, performance, and security in web development</li> <li>Serverless functions and Jamstack for easier website building</li> <li>Focus on fundamental technologies like HTML, CSS, and JavaScript</li> <li>Consider the impact of technology choices on company bottom line</li> <li>Strive for simplicity and maintainability in web projects</li> <li>Embrace universal JavaScript apps and custom elements</li> <li>Prioritize user experience over complex implementations</li> </ul>"},{"location":"goto_FE_v3/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2020","title":"HTTP/3 Is Next Generation HTTP. Is It QUIC Enough? \u2022 Daniel Stenberg \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=pUxyukqoXR4</p> <ul> <li>HP3 is an improved version of HTTP, with focus on performance and security.</li> <li>It uses UDP as the underlying transport protocol instead of TCP.</li> <li>Key features include faster handshakes, early data transfer, and better loss recovery mechanisms.</li> <li>Google Quick (now called QUIC) is a similar protocol that has been in use for several years.</li> <li>The future of HTTP will likely involve more encrypted connections and improved transport protocols.</li> <li>UDP is gaining popularity due to its performance advantages over TCP.</li> <li>Browsers are gradually adopting new protocols, with Chrome, Edge, Firefox, Safari, Facebook, Instagram, YouTube, and Cloudflare already supporting HTTP3.</li> <li>The transition to a new transport protocol will take time, but the benefits of improved performance and security make it worthwhile.</li> </ul>"},{"location":"goto_FE_v3/#going-static-in-a-dynamic-world-with-hasura-and-nuxtjs-debbie-obrien-goto-2020","title":"Going Static in a Dynamic World with Hasura and Nuxt.js \u2022 Debbie O'Brien \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1j9DIX32GpY</p> <p>Error</p>"},{"location":"goto_FE_v3/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ul> <li>Make Loveliness: HTML is essential for web accessibility, performance, and usability.</li> <li>Use semantic HTML elements to improve readability and maintainability.</li> <li>Accessibility benefits everyone, not just people with disabilities.</li> <li>Ensure proper color contrast, alternate text, and form labels.</li> <li>Avoid empty links and buttons without clear purpose.</li> <li>Choose the right JavaScript library carefully for better performance.</li> <li>Prioritize web accessibility as a global priority to improve lives.</li> <li>Increase internet maturity leads to higher GDP per capita.</li> <li>Pay forward by making the web accessible for everyone.</li> </ul>"},{"location":"goto_FE_v3/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ul> <li>Adopt GraphQL gradually without writing backend code</li> <li>Benefits include performance, data management, and developer productivity</li> <li>Use tools like Serf, Guild, OpenGraphQL ecosystem</li> <li>Introduce graphical server with GraphQL Server (GS)</li> <li>Automate frontend development using Apollo Client or Polar Link Rest</li> <li>Third technique: Convert existing APIs to GraphQL without changing backend using GraphQL Mesh</li> <li>Benefits include faster development and easier integration of new services</li> </ul>"},{"location":"goto_FE_v3/#advanced-feature-flagging-its-all-about-the-data-dave-karow-goto-2020","title":"Advanced Feature Flagging: It's All About The Data \u2022 Dave Karow \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=f8XDvtfKWQE</p> <ul> <li>Feature flagging is a powerful tool for separating code, deploying features, and controlling releases.</li> <li>It can be used to gradually roll out new features, monitor their impact, and mitigate errors.</li> <li>A smarter way of measuring data is through randomized controlled trials, which help in attribution and analysis.</li> <li>An experimentation platform should include a targeting system, a flagging system, and a data management console.</li> <li>Telemetry plays an important role in collecting user data and providing insights into their experience.</li> <li>A wizard can simplify the process of managing rollups, review metrics, and access control.</li> <li>An alert system can detect issues quickly and help resolve them efficiently.</li> <li>The experimentation guide is a valuable resource for learning about different approaches to testing and improving software releases.</li> </ul>"},{"location":"goto_FE_v3/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <p>Summary: - Clean Architecture is a software design approach that separates concerns and simplifies development. - Domain layer contains enterprise logic, Application layer handles business logic, Infrastructure layer manages external dependencies, and Presentation layer renders UI. - Use CQRS (Command Query Responsibility Segregation) to separate read and write operations for better performance and scalability. - Leverage Mediator pattern to handle commands and queries in the Application layer. - Fluent Validation is useful for complex validation scenarios, while Data Annotation is suitable for simple cases. - Use AutoMapper for mapping between DTOs and entities. - Dependency Injection helps with testability and maintainability. - AspNet Core Identity provides authentication and authorization features. - Unit Testing ensures code quality and simplifies development. - Open API allows integration of frontend and backend systems. - Use a well-defined view model for the client to consume, and generate an Angular client using Swagger UI. - Exception handling is crucial for a smooth user experience. - Infrastructure layer should be independent from presentation layer. - CQRS and Mediator patterns help simplify complex systems.</p>"},{"location":"goto_FE_v3/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2019","title":"HTTP/3 is next Generation HTTP. Is it QUIC enough? \u2022 Daniel Stenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rlN4F1oyaRM</p> <ul> <li>Transcript overview: Discussion on the evolution of internet protocols, focusing on TCP, HTTP, and new developments like QUIC.</li> <li>Key points:</li> <li>TCP has been the backbone of the Internet since 1981 but faces challenges with modern web traffic.</li> <li>HTTP 1.0 and 2.0 have improved performance by reducing latency and optimizing data transfer, but still face issues like prioritization and connection management.</li> <li>QUIC (Quick UDP Internet Connections) is a new protocol that aims to address these challenges by using UDP as its base and adding encryption and multiplexing features.</li> <li>QUIC has been adopted by major companies, including Google, Facebook, Cloudflare, and others. It's expected to become the standard for web traffic in the future.</li> <li>The evolution of protocols is driven by technological advancements and user expectations, leading to a more efficient and secure internet experience.</li> </ul>"},{"location":"goto_FE_v3/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>The speaker discussed the importance of web performance and user experience, highlighting the need for efficient loading times and smooth transitions between pages.</li> <li>He introduced a concept called \"portal\", which aims to provide control over page navigation without relying on complex frameworks or single-page applications.</li> <li>The portal uses standard CSS techniques like transforms and animations to achieve its effects, making it accessible across different browsers.</li> <li>The speaker emphasized the need for progressive enhancement and accessibility in web development, while also acknowledging the importance of performance optimization.</li> <li>He encouraged developers to stay up-to-date with industry trends and standards, but not to chase every new technology or framework.</li> </ol>"},{"location":"goto_FE_v3/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ol> <li>The speaker discussed the importance of attention in user experience design and how it affects various aspects like accessibility, reading difficulties, and sleep deprivation.</li> <li>They highlighted the need for good web design that is easy to navigate, has clear visual hierarchy, and provides a smooth user experience.</li> <li>Animation can be used effectively to guide users' attention and improve usability by providing feedback and easing transitions.</li> <li>Disney's animation principles can also be applied to web design to create engaging experiences for users.</li> <li>The speaker emphasized the need for designers to consider different user groups, such as those with low vision or sleep deprivation issues, when designing websites.</li> </ol>"},{"location":"goto_FE_v3/#designing-apis-for-150-million-orders-michele-angioni-matt-fewer-goto-2019","title":"Designing APIs for 150 Million Orders \u2022 Michele Angioni &amp; Matt Fewer \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=OB0Pb-nd0g8</p> <ol> <li>The speaker discusses the evolution of a 15-year-old application, from monolith to modern stack using JavaScript and React.</li> <li>They mention the importance of clear separation between business domains and stacks, with each team focusing on specific contexts.</li> <li>A backend frontend (BFF) pattern is introduced for better scalability and easier development.</li> <li>The speaker highlights the need for a design system to manage branding across different platforms like iOS, Android, and web applications.</li> <li>They emphasize the importance of careful infrastructure planning and designing for future changes.</li> <li>A conclusion is drawn about the excitement for the project's potential impact on user experience and developer performance.</li> </ol>"},{"location":"goto_FE_v3/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ol> <li>Collaboration between designers and developers is crucial for building better products.</li> <li>Use a common language, such as style guides, to improve communication.</li> <li>Involve everyone in the decision-making process during design and development.</li> <li>Encourage trust within teams by sharing vulnerabilities and understanding each other's aspirations.</li> <li>Organize events like DevUX Drinks to build empathy and foster a collaborative environment.</li> <li>Share tools, such as Zeppelin, to streamline the process and improve communication between designers and developers.</li> <li>Learn from each other's experiences and struggles to continuously improve team dynamics.</li> </ol>"},{"location":"goto_FE_v3/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ul> <li>Introduction to Machine Learning and JavaScript</li> <li>AI JavaScript Meetup: London's fastest growing meetup group focused on AI and JavaScript</li> <li>Demo of Emoji Fire, a real-time emotion detection app using TensorFlow.js</li> <li>Mobile Net: A lightweight model for image recognition in browsers</li> <li>Computer Vision API by Microsoft: An alternative to building your own image analysis system</li> <li>Generative Adversarial Networks (GANs): A deep learning algorithm that generates images from input data</li> <li>Demo of a GAN-based cat generator using TensorFlow.js</li> <li>Future of Machine Learning and JavaScript: Incorporating AI into websites, e-commerce platforms, and creative applications</li> </ul>"},{"location":"goto_FE_v3/#fast-by-default-near-instant-load-times-at-scale-with-gatsbyjs-nicolas-goutay-goto-2019","title":"Fast by Default: Near Instant Load Times at Scale with GatsbyJS \u2022 Nicolas Goutay \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=p14g-Sep7HY</p> <ul> <li>Web performance is crucial for user experience and business metrics.</li> <li>Optimizing web performance can lead to increased revenue, reduced latency, and better SEO rankings.</li> <li>Tools like Google PageSpeed Insight, Lighthouse, and WebPageTest help monitor and improve website performance.</li> <li>GatsbyJS is a framework that focuses on performance optimization by default, making it easier for developers to build fast websites without backend support.</li> <li>Falco is an open source tool that helps track website performance over time and compare different scenarios, helping teams identify and fix issues.</li> </ul>"},{"location":"goto_FE_v3/#webassembly-beyond-the-browser-dan-callahan-goto-2019","title":"WebAssembly Beyond the Browser \u2022 Dan Callahan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TGo3vJVTlyQ</p> <ol> <li>WebAssembly is a new platform for running code on the web, allowing developers to use any programming language and compile it into a common binary format.</li> <li>It provides a safe sandboxed environment for untrusted code execution, making it ideal for edge computing and IoT devices.</li> <li>The Bytecode Alliance aims to standardize WebAssembly executable runtimes outside the browser, creating a universal library format for software distribution.</li> <li>WebAssembly can improve performance by up to 10x compared to JavaScript, while reducing memory usage and overhead.</li> <li>It enables developers to use their preferred programming language without worrying about compatibility issues across different browsers.</li> <li>The future of web development lies in a combination of languages, with WebAssembly providing a unified platform for all.</li> </ol>"},{"location":"goto_FE_v3/#internationalization-is-a-piece-of-cake-eli-schutze-ramirez-goto-2019","title":"Internationalization is a Piece of Cake \u2022 Eli Schutze Ramirez \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=nsGmQ0v36bo</p> <ol> <li>Internationalization is about adapting websites and apps to different languages, cultures, and regions.</li> <li>It involves separating content from presentation, using flexible layouts, and providing localized versions for various markets.</li> <li>Key standards include Unicode, ICU, CLD, BCP 47, and message formats like I18n.js.</li> <li>Use libraries to simplify internationalization, such as format-js, react-intl, and i18next.</li> <li>Continuous localization is essential for maintaining a global presence.</li> <li>Start early in the design process and consider accessibility.</li> <li>Test your website with different languages and cultures.</li> <li>Be aware of cultural differences, such as date formats and number systems.</li> <li>Use translation memory tools to reduce costs and improve efficiency.</li> <li>Always let users choose their preferred language or region settings.</li> </ol>"},{"location":"goto_FE_v3/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ul> <li>Software rewriting is common due to inexperience, fun, technical debt, and changing requirements.</li> <li>Enabling constraints through architecture can help make systems resilient to change.</li> <li>Source code dependency management: use layered or modular approaches for better isolation and easier testing.</li> <li>Conservative code reuse: avoid coupling unrelated code together by copying and pasting when needed.</li> <li>Enforce boundaries with automated tools like dependency cruisers to maintain clear directory structures and prevent circular dependencies.</li> <li>Encourage open-mindedness in the frontend community, learning from different programming paradigms and languages for building large apps.</li> </ul>"},{"location":"goto_FE_v3/#http-headers-for-the-responsible-developer-stefan-judis-goto-2019","title":"HTTP Headers for the Responsible Developer \u2022 Stefan Judis \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JfjiFsJsO4E</p> <ul> <li>34-year-old tech-savvy web developer with experience in the early internet days</li> <li>Importance of Internet user growth, especially in China, India, and the US</li> <li>Blogging about internet statistics and analytics</li> <li>Focus on building a better web for everyone</li> <li>Understanding HTTP, browsers, and web performance</li> <li>Enhancing website security through HTTPS, Content Security Policy (CSP), and Set-Cookie headers</li> <li>Compression techniques like gzip and portly</li> <li>Responsive image optimization with client hints and WebP support</li> <li>Safe data mode in browsers and Google's approach to it</li> <li>Feature policy header for controlling browser access to device features</li> <li>Privacy concerns and tracking prevention efforts by browsers</li> <li>Importance of performance, accessibility, frameworks, and network considerations</li> <li>Useful tools like Lighthouse for auditing web pages</li> <li>Web safety, affordability, respectfulness, and the need for responsible development</li> </ul>"},{"location":"goto_FE_v3/#vue-and-you-matt-danforth-goto-2019","title":"Vue and You \u2022 Matt Danforth \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n8ERFbkt_h8</p> <ol> <li>History of frontend development: From vanilla JavaScript to modern frameworks like React, Angular, and Inferno.</li> <li>Live coding demonstration using a Star Wars API to showcase data manipulation, pagination, sorting, and component creation.</li> <li>Importance of accessibility, performance, and progressive enhancement in web development.</li> <li>Use of tools such as beautify, Axios, and Gatsby for efficient frontend development.</li> <li>The need for continuous learning and improvement to stay ahead in the fast-paced world of technology.</li> </ol>"},{"location":"goto_FE_v3/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>Transcript: A detailed discussion about the JavaScript ecosystem, React, and its related technologies.</li> <li>Key points: ReasonML, Expo, Draftbit, BuckleScript, Jest, GraphQL, Apollo, Redux, Y Combinator, Co-founder of Draftbit, Draftbit's history, Draftbit's stack, Draftbit's development process, Draftbit's clients, ReasonML's advantages over JavaScript, ReasonML's ecosystem, and the importance of community.</li> <li>Summary: The speaker discussed various technologies in the JavaScript ecosystem, focusing on React and its related tools like ReasonML, Expo, Draftbit, BuckleScript, Jest, GraphQL, Apollo, Redux, Y Combinator, and the importance of a strong community.</li> </ol>"},{"location":"goto_FE_v3/#going-serverless-with-vuejs-divya-sasidharan-goto-2019","title":"Going Serverless with VueJS \u2022 Divya Sasidharan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Mu9zKpGhX1Y</p> <ol> <li>Chicago-based conference with a local focus on serverless architecture and application development.</li> <li>The speaker, Divya Stasi Darrin, uses the narrative device of a hero's journey to explain her story.</li> <li>The main character, Sammy Cerberus, is a server worker who faces challenges in scaling their company's pizza rating app.</li> <li>To solve this problem, Sammy learns about serverless architecture and cloud computing using AWS Lambda and Firebase.</li> <li>The speaker shares her experience building the application with various technologies like React, Redux, and Auth0 for authentication.</li> <li>The final result is a working application that scales automatically and provides different access levels based on user roles.</li> </ol>"},{"location":"goto_FE_v3/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <pre><code>1. Speaker's love for programming since childhood\n2. Boundary exploration in programming languages and software development\n3. Closure as a creative discipline with unique selling proposition\n4. Practical application of closure in lecture capture tool development\n5. Closure's immutable data structure, atomic reference, and state management\n6. React framework integration for frontend and backend functionality\n7. Hot reloading and keeping state in mobile app development\n8. Fundraising game website using jump run game to save orangutans\n9. Ripple technology for network applications\n</code></pre> <p>No context provided: Summary of the speaker's technical presentation.</p>"},{"location":"goto_FE_v3/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ul> <li>Persuasive design reduces friction using psychology.</li> <li>Intrinsic and extrinsic motivations play a key role in user engagement.</li> <li>Tailor experiences to users' goals, providing appropriate challenges.</li> <li>Use gamification elements like scoreboards, badges, and achievements.</li> <li>Facilitate intrinsic motivation through mastery, feedback, and progression.</li> <li>Avoid coercive techniques and focus on persuasion.</li> <li>Balance between manipulation and facilitation to create a positive experience.</li> </ul>"},{"location":"goto_FE_v3/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <pre><code>- Typescript is a successful tool due to its commitment to JavaScript standard, typing system, and powerful tooling.\n- It provides an easy learning curve for experienced JavaScript developers while offering advanced features like union types and generics.\n- Typescript's configuration can be challenging in larger projects or teams, but it scales well with the app size.\n- For non-JavaScript developers, Typescript offers a comfortable frontend workflow by bringing them into the JavaScript world.\n- Native Script is another tool that uses Typescript for building iOS and Android apps using JavaScript code.\n- The main challenge in adopting Typescript is its configuration, but it provides significant benefits for larger projects or teams.\n</code></pre>"},{"location":"goto_FE_v3/#a-cartoon-quest-new-adventures-for-webassembly-lin-clark-goto-2018","title":"A Cartoon Quest: New Adventures for WebAssembly \u2022 Lin Clark \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=rZB9Er8aq4s</p> <ol> <li>WebAssembly (Wasm) is a new assembly language for the web, designed to run on modern browsers and enable faster execution of code.</li> <li>Wasm has been in development since 2015 and is now supported by major browsers like Firefox, Chrome, Safari, and Edge.</li> <li>It's designed to be portable across different platforms and devices, allowing developers to write code once and run it anywhere.</li> <li>WebAssembly can improve performance for heavyweight applications such as Photoshop and AutoCAD, which are now available in browsers.</li> <li>Wasm is also useful for serverless edge computing, blockchain applications, and Internet of Things devices due to its low memory requirements and efficient execution.</li> <li>The future of WebAssembly will focus on improving performance, portability, and security while expanding its capabilities to support more complex use cases.</li> </ol>"},{"location":"goto_FE_v3/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ol> <li>Convince companies to use Rust</li> <li>Introduce new technology gradually with microservices</li> <li>Sell Rust, not just the language</li> <li>Documentation and tooling are crucial for adoption</li> <li>Rust community is welcoming and diverse</li> <li>Focus on selling technical merit, not just speed</li> <li>Prepare for change, even if it's boring</li> <li>Measure impact with data to show improvements</li> <li>Solve problems efficiently without losing sight of the problem</li> <li>Enjoy learning new technologies and embrace challenges</li> </ol>"},{"location":"goto_FE_v3/#make-web-apps-fun-to-build-and-easy-to-refactor-with-elm-daniel-bachler-goto-2017","title":"Make Web Apps Fun to Build and Easy to Refactor with Elm \u2022 Daniel Bachler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=ehtn81p06Ow</p> <ol> <li>Elm is a functional programming language with static typing and immutability, focusing on web development.</li> <li>It has an easy-to-use syntax similar to JavaScript but with better error handling and type safety.</li> <li>The language's architecture follows the unidirectional data flow pattern, making it easier for testing and debugging.</li> <li>Elm's community is active in maintaining and improving the language, with a focus on real-world applications.</li> <li>It can be used for server-side rendering with Node.js, providing concurrency support and efficient handling of complex web apps.</li> <li>The language has a learning curve but offers a great experience for developers who prefer functional programming and type safety.</li> </ol>"},{"location":"goto_FE_v3/#augmented-reality-challenges-writing-ar-experiences-in-javascript-philipp-nagele-goto-2017","title":"Augmented Reality - Challenges &amp; Writing AR Experiences in JavaScript \u2022 Philipp Nagele \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=wVOESt-TpSA</p> <ol> <li>AR and VR are different concepts, with AR focusing on reality superimposition and VR on virtual content immersion.</li> <li>AR adoption is expected to reach mass market in 5-10 years.</li> <li>AR technology evolution includes sensing, computing, visualization, and projection components.</li> <li>AR experiences can be created using JavaScript APIs, with SDKs providing essential features like location tracking, image recognition, and object detection.</li> <li>Wikitude's AR experience is built on a JavaScript framework, allowing developers to create custom AR applications for various platforms.</li> </ol>"},{"location":"goto_FE_v3/#why-backend-for-frontend-is-key-for-microservices-brian-grant-krishnan-ramanathan-goto-2017","title":"Why Backend for Frontend Is Key for Microservices \u2022 Brian Grant &amp; Krishnan Ramanathan \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=PwgQZ8eCGxA</p> <ul> <li>Discussed the journey of building a Backend for Frontends (BFF) architecture.</li> <li>BFF is a pattern that helps in creating backend APIs tailored to specific user experiences, reducing chattiness and improving performance.</li> <li>Error handling was discussed using an anti-corruption layer, normalizing errors across different data providers.</li> <li>The speaker mentioned the importance of generalized APIs for multiple applications and BFF services as a pragmatic approach.</li> <li>A gateway API was introduced to handle mobile application calls to BFF services.</li> <li>Consistent error handling and response standardization were emphasized, along with the benefits for client application development.</li> </ul>"},{"location":"goto_FE_v3/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ul> <li>Use JavaScript for web platform with React, Express, and Node.js</li> <li>Leverage isomorphic rendering for better performance and scalability</li> <li>Utilize React components for standardized UI without writing code</li> <li>Employ analytics instrumentation to track user interactions</li> <li>Visualize data using powerful libraries like D3.js, Luma GL, and WebGL</li> <li>Build an open platform with 3400 microservices for third-party developers</li> <li>Use Node SDK for custom experiences in Uber applications</li> <li>Contribute back to the community through open source tools and engineering blogs</li> <li>Focus on security, performance, and scalability while maintaining a consistent codebase</li> </ul>"},{"location":"goto_FE_v3/#css-vs-javascript-trust-vs-control-christian-heilmann-goto-2017","title":"CSS vs. JavaScript, Trust vs. Control \u2022 Christian Heilmann \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=_3VsoqpnTrs</p> <ol> <li>CSS history: From basic HTML layout to modern features like flexbox, grid, and custom properties.</li> <li>Browser support: Importance of checking browser compatibility for new CSS features.</li> <li>Accessibility: Ensuring websites are usable by everyone, including those with disabilities.</li> <li>Performance: Optimizing CSS code for faster rendering and better user experience.</li> <li>Responsive design: Adapting to different screen sizes and devices using media queries.</li> <li>Animation: Using CSS animations and transitions for smooth interactions.</li> <li>Browser testing: Testing browsers' CSS engines for performance improvements.</li> <li>Community: Staying updated with the latest developments in the CSS world through blogs, talks, and conferences.</li> </ol>"},{"location":"goto_FE_v3/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Incrementally integrate Elm into existing JavaScript applications by embedding Elm code within the DOM using LMap.</li> <li>Use Elm's virtual DOM and data-driven architecture to communicate between Elm and JavaScript apps, preserving guarantees.</li> <li>Utilize Elm's subscriptions for bi-directional communication between Elm and JavaScript apps.</li> <li>Leverage Elm's worker concept to run Elm business logic as a service without embedding elements on the page.</li> <li>Use React components with Elm integration libraries like ElmReact to embed Elm applications within React apps.</li> <li>Maintain consistency in communication between Elm and JavaScript apps using data representation for both page appearance and effects.</li> <li>Embrace Elm's functional programming approach, which simplifies maintenance and reduces the likelihood of runtime exceptions.</li> </ol>"},{"location":"goto_FE_v3/#avoiding-the-nightmare-on-elm-street-thomas-anagrius-goto-2017","title":"Avoiding the Nightmare on Elm Street \u2022 Thomas Anagrius \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Qhx81eI5FPs</p> <ul> <li>Thomas discusses his experience with Elm, a functional programming language.</li> <li>He highlights the benefits of using Elm for high volume data transformation and real-time applications.</li> <li>The timetraveling debugger feature is mentioned as an exciting aspect of Elm.</li> <li>The speaker acknowledges the steep learning curve associated with Elm but believes it's worth considering for specific use cases.</li> <li>He emphasizes the importance of choosing the right technology for a project and the need to balance performance, maintainability, and developer happiness.</li> </ul>"},{"location":"goto_FE_v3/#we-want-webassembly-ben-smith-goto-2017","title":"We Want WebAssembly \u2022 Ben Smith \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=P2C9bRtCWOA</p> <pre><code>1. WebAssembly is a low-level assembly language that can be compiled to binary format for various platforms, providing performance boosts and better optimization.\n2. It supports multiple programming languages like C/C++, Rust, and Go, with new languages being added regularly.\n3. WebAssembly can integrate with existing JavaScript code through APIs like Emscripten, allowing developers to use it for web applications.\n4. The future of WebAssembly includes support for garbage collection, exception handling, and integration with other programming languages.\n5. It may enable faster execution of complex tasks such as facial recognition on the client-side without requiring a server.\n6. WebAssembly could potentially become a standard way to compile high-performance code for mobile devices and browsers.\n</code></pre>"},{"location":"goto_FE_v3/#resilience-jeremy-keith-goto-2016","title":"Resilience \u2022 Jeremy Keith \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=t0dUvs3jQnw</p> <ol> <li> <p>Three-step process for building web applications:    a. Identify core functionality - Determine the essential features users need, regardless of device or browser.    b. Make core functionality available using simplest technology - Ensure it works on every device and browser.    c. Enhance - Improve user experience by adding new features for modern browsers and devices.</p> </li> <li> <p>Pushback against the three-step process:    a. Easy or naive approach - Critics argue that simple websites can't scale to complex applications.    b. Developer convenience vs. User needs - Some believe developers should prioritize their own comfort over user experience.    c. Accessibility and responsiveness - Ensuring accessibility and responsiveness can be challenging, especially for older browsers or devices.</p> </li> <li> <p>Tips for building web applications:    a. Focus on core functionality - Prioritize essential features that users need across all platforms.    b. Embrace progressive enhancement - Start with the simplest technology and enhance for modern browsers.    c. Consider accessibility and responsiveness - Ensure your application works well for everyone, regardless of device or browser.</p> </li> <li> <p>Key takeaways:    a. Building web applications should be accessible to all users.    b. Prioritize core functionality over fancy features.    c. Embrace progressive enhancement and accessibility to create a better user experience.</p> </li> </ol>"},{"location":"goto_FE_v3/#the-frontend-taboo-a-story-of-full-stack-microservices-luis-mineiro-moritz-grauel-goto-2016","title":"The Frontend Taboo: a Story of Full Stack Microservices \u2022 Luis Mineiro &amp; Moritz Grauel \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=vCzTK4XPfX8</p> <p>Error</p>"},{"location":"goto_FE_v3/#you-can-use-css-for-that-rachel-andrew-goto-2016","title":"You Can Use CSS For That! \u2022 Rachel Andrew \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=TNhR6ol9mBc</p> <ol> <li>New CSS features discussed: Flexbox, Grid Layout, Shape, Writing Mode, Custom Properties (CSS variables), Position Sticky, Scroll Snapping.</li> <li>Browser support for these features varies; some are still in development or experimental stages.</li> <li>Feature query allows checking browser support and enabling/disabling CSS features based on availability.</li> <li>Polyfills can be used to fill gaps in browser support, especially for older browsers.</li> <li>Grid Layout is a powerful tool for creating responsive layouts; it's worth learning and using now as it will likely become more widely supported in the future.</li> <li>Feature testing JavaScript libraries like Lazy Load Content can help optimize website performance by loading content only when needed.</li> <li>User Agent specification deals with browser identification, which could be used to provide customized experiences for different browsers.</li> </ol>"},{"location":"goto_FE_v3/#javascript-the-cloud-the-rise-of-the-new-virtual-machine-scott-hanselman-goto-2016","title":"JavaScript, the Cloud &amp; the Rise of the New Virtual Machine \u2022 Scott Hanselman \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7LZ0Lznq4Aw</p> <ol> <li>The speaker discussed various aspects of web development, cloud computing, and technology evolution.</li> <li>He emphasized the importance of learning JavaScript for modern web development.</li> <li>He highlighted the need to understand the underlying principles behind frameworks like jQuery.</li> <li>The speaker advocated for using vanilla JS libraries and frameworks for better performance and scalability.</li> <li>He praised cloud computing, particularly serverless architectures, as a powerful tool for developers.</li> <li>The speaker also mentioned the importance of learning about web assembly and its potential impact on future web development.</li> </ol>"},{"location":"goto_FE_v3/#building-an-app-using-jstypescript-node-electron-100-oss-components-erich-gamma-goto-2016","title":"Building an App Using JS/TypeScript, Node, Electron &amp; 100 OSS Components \u2022 Erich Gamma \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uLrnQtAq5Ec</p> <ul> <li>Transition from traditional IDEs to modern editors like Visual Studio Code</li> <li>Focus on efficiency, lightweight, and keyboard-centric editing</li> <li>Embrace open source and cross-platform tools for better developer experience</li> <li>Use language servers for intelligent code completion, refactoring, and diagnostics</li> <li>Leverage extensions for customization and integration with other services</li> <li>Maintain a transparent development process with frequent updates and feedback loops</li> </ul>"},{"location":"goto_FE_v3/#visual-studio-code-shipping-one-of-the-largest-microsoft-javascript-apps-alex-dima-goto-2016","title":"Visual Studio Code: Shipping One of the Largest Microsoft JavaScript Apps \u2022 Alex Dima \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=mTKMefhTjh8</p> <ol> <li>TypeScript: A powerful tool for JavaScript development, providing type annotations and better code organization.</li> <li>Dependency Management: Use AMD (Asynchronous Module Definition) to load dependencies lazily.</li> <li>Bundling &amp; Minification: Improve performance by combining multiple files into one and reducing file size.</li> <li>Electron: A framework for building cross-platform desktop applications using web technologies.</li> <li>Visual Studio Code: An open-source code editor with powerful features, including debugging, syntax highlighting, and intelligent code completion.</li> <li>Virtual Scrolling in Editors: Optimize scrolling performance by creating a virtual DOM tree to render only visible elements.</li> <li>Performance Profiling: Use developer tools to identify bottlenecks and improve application speed.</li> <li>Code Refactoring: Rewrite complex code into simpler, more readable versions for better maintainability.</li> </ol>"},{"location":"goto_FE_v3/#beyond-flux-scalable-frontend-architectures-built-upon-publishsubscribe-m-kurze-goto-2016","title":"Beyond Flux - Scalable Frontend Architectures built upon Publish/Subscribe \u2022 M. Kurze \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=82rrMIf48Zk</p> <ol> <li>The speaker discussed the challenges of building large web applications, focusing on complexity and responsiveness.</li> <li>He introduced unidirectional data flow as a solution to these problems, mentioning frameworks like Flux (Facebook), Redux, and Event-based architecture (Luxar).</li> <li>Flux is a pattern that separates application state into stores, actions, and views. It uses a dispatcher to handle events and communicate between components.</li> <li>Redux simplifies the Flux implementation by combining the store and dispatcher into one single state tree. It also eliminates mutable state problems through functional programming techniques.</li> <li>Event-based architecture (Luxar) is a framework that uses publish/subscribe patterns to decouple components, making them easier to test and reuse across applications.</li> <li>The speaker emphasized the importance of choosing the right architecture for complex web applications based on factors like scalability, performance, and developer experience.</li> </ol>"},{"location":"goto_FE_v3/#busy-developers-guide-to-meteorjs-ted-neward-goto-2016","title":"Busy Developer's Guide to MeteorJS \u2022 Ted Neward \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=uMSY-vWB23w</p> <ol> <li>Meteor is a JavaScript framework that aims to simplify web development by combining client and server-side code into one application.</li> <li>It uses a reactive programming model, which automatically updates the UI when data changes.</li> <li>Meteor has its own package manager called Atmosphere for managing dependencies.</li> <li>The framework is built on top of Node.js, using NPM packages and MongoDB as its default database.</li> <li>It supports a single codebase for both client and server-side development, with separate environments for each side.</li> <li>Meteor has a strong focus on simplicity and ease of use, making it popular among beginners and experienced developers alike.</li> <li>The framework is constantly evolving, with new features being added regularly.</li> <li>While some may criticize its opinionated approach to database management, others appreciate the flexibility it offers in handling data.</li> </ol>"},{"location":"goto_FE_v3/#the-return-of-stream-io-andre-staltz-medeiros-goto-2016","title":"The Return of Stream I/O \u2022 Andre 'Staltz' Medeiros \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Tkjg179M-Nc</p> <ul> <li>Introduction to Stream IO and message passing in programming languages</li> <li>Comparison of different frameworks: Elm, Closure Script, Core Async, Angular 1/2, NgRx, Cycle.js, React, Flux, Redux, RxJS, Dart, Sunglass UJ, Object Oriented Programming</li> <li>Advantages and disadvantages of each framework</li> <li>Prediction for the future of programming languages: focus on functional, event-driven, message passing, and concurrency</li> <li>Recommendations for using specific languages based on requirements</li> </ul>"},{"location":"goto_FE_v3/#elm-friendly-functional-programming-for-the-web-luke-westby-goto-2016","title":"Elm-Friendly Functional Programming For The Web \u2022 Luke Westby \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=tN5UmM2yZPY</p> <ul> <li>Introducing Elm: A functional programming language for web development.</li> <li>Benefits of using Elm: Type system, easy debugging, and a strong community.</li> <li>Data types in Elm: Primitive types (int, float, string), tuples, records, and custom types.</li> <li>Architecture: Model-View-Update pattern with data-driven UI updates.</li> <li>Building an interactive application using Elm: Showcasing a simple stage example.</li> <li>Community involvement: Meetups, Slack channels for help and feedback.</li> <li>Comparison to TypeScript: Functional programming paradigms offer better focus on problem solving.</li> </ul>"},{"location":"goto_FE_v3/#ionic-mobile-app-development-with-a-superpowered-platform-matt-kremer-goto-2016","title":"Ionic: Mobile App Development with a Superpowered Platform \u2022 Matt Kremer \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=P7NPfjqeXPY</p> <ul> <li>Ionic is a mobile app development framework based on HTML, CSS, and JavaScript.</li> <li>It has evolved over the years, starting with nintendo 64 games in 1998 to modern web technologies like jQuery (2006), Angular (2011), and Ionic (2013).</li> <li>Ionic allows developers to create hybrid apps that run on iOS and Android using a single code base.</li> <li>It offers various features such as push notifications, authentication, and enterprise support.</li> <li>The community is strong with regular meetups and an active forum where developers can help each other.</li> <li>To learn more about Ionic, visit the official website (ionic.io) or check out their documentation.</li> </ul>"},{"location":"goto_FE_v3/#the-post-mvc-age-maarten-hus-goto-2016","title":"The Post-MVC Age \u2022 Maarten Hus \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=QQxNr6t1HEc</p> <ol> <li>The speaker discussed the PostMVC Age, focusing on component architecture and reactive programming.</li> <li>He demonstrated a Google Maps example using Polymer Framework to showcase component isolation, clear input/output semantics, declarative nature, and composability.</li> <li>A Todo application was built in Angular 20 as an example of component-based architecture. The speaker highlighted the need for state management and event communication between components.</li> <li>Redux was introduced as a solution to these problems, providing a unidirectional data flow and centralized state storage.</li> <li>A counter application was used to demonstrate how Redux can handle complex scenarios with dynamically added/removed counters.</li> <li>The speaker discussed the benefits of reactive programming using RxJS, including decoupled producer-consumer relationships and powerful operators for manipulating asynchronous events.</li> <li>Recommendations were given on when to use Redux or RxJS based on application size and complexity.</li> <li>A brief history of component architecture was provided, highlighting the shift from ModelViewController to components in modern frameworks like Angular 2.</li> </ol>"},{"location":"goto_FE_v3/#adventures-in-elm-jessica-kerr-goto-2016","title":"Adventures in Elm \u2022 Jessica Kerr \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=cgXhMc8M4X4</p> <ol> <li>The speaker discusses Elm programming language and its features, focusing on its simplicity, functional programming, and type inference.</li> <li>They explain how to create an HTML app using Elm by creating a module for the main view and handling mouse events.</li> <li>The speaker emphasizes the importance of encapsulation and immutability in Elm code.</li> <li>They mention the benefits of the Elm architecture, such as explicitness and easy refactoring.</li> <li>The speaker highlights the community around Elm and its positive aspects.</li> <li>They talk about the future of Elm and how it can be used to create live applications.</li> </ol>"},{"location":"goto_FE_v3/#javascript-performance-through-the-spyglass-vyacheslav-egorov-goto-2016","title":"JavaScript Performance Through the Spyglass \u2022 Vyacheslav Egorov \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=r76ZjdzFExg</p> <ol> <li>The speaker discussed various aspects of JavaScript performance and optimization.</li> <li>They highlighted the importance of understanding a program's high-level logic rather than micro-optimizations.</li> <li>A key point was that optimizing compilers like V8 can handle complex code efficiently, but sometimes they need help with specific cases.</li> <li>The speaker emphasized the importance of writing reasonable and fast code for performance.</li> <li>They mentioned the impact of prototype chains on performance and how to improve them.</li> <li>Optimization techniques such as loop unrolling and inlining were discussed.</li> <li>The speaker shared insights into V8's internal workings, including its optimization process and limitations.</li> <li>They also talked about the importance of understanding compiler behavior and working with it rather than against it.</li> <li>The speaker provided tips for writing efficient code, such as avoiding unnecessary operations and using optimized data structures.</li> <li>Finally, they stressed the need to understand the context in which a program runs and how it affects performance.</li> </ol>"},{"location":"goto_FE_v3/#emulating-a-6502-system-in-javascript-matt-godbolt-goto-2016","title":"Emulating a 6502 system in JavaScript \u2022 Matt Godbolt \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=7WuRq-Wmw5o</p> <ol> <li>Speaker discussed emulating 6502 systems, a popular computer chip from the 80s.</li> <li>The speaker created a JavaScript emulator for 6502 systems and shared insights into its development.</li> <li>They highlighted the importance of timing in these systems and how it affects performance.</li> <li>The speaker mentioned various optimization techniques used in their emulator, such as JIT compilation and WebGL rendering.</li> <li>They also talked about reverse engineering games to understand their inner workings and crack protection systems.</li> <li>The speaker emphasized the importance of community support and collaboration with other developers.</li> <li>Finally, they shared resources for learning more about 6502 systems and emulation techniques.</li> </ol>"},{"location":"goto_FE_v3/#enhanced-front-end-applications-in-angularjs-13-matias-niemela-goto-2014","title":"Enhanced Front-end Applications in AngularJS 1.3 \u2022 Matias Niemela \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=CTezvNSQPYw</p> <ul> <li>AngularJS 13 talk highlights:</li> <li>New features, improvements, and updates in the framework.</li> <li>Enhanced validation with form handling, animation support, and material design integration.</li> <li>Unit testing using Jasmine, Mocha, and Karma for better debugging.</li> <li>Improved performance, especially on mobile browsers.</li> <li>Better organization of JavaScript code across files.</li> <li>Continued development towards a more efficient framework.</li> </ul>"},{"location":"goto_FE_v3/#web-assembly-nick-bray-goto-2015","title":"Web Assembly \u2022 Nick Bray \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=NhAPPQqKCi8</p> <ul> <li>Web Assembly is a new technology designed to run native code on the web.</li> <li>It simplifies browser life by making browsers more efficient and secure.</li> <li>The goal is to make running native code in the browser as fast as possible.</li> <li>Web Assembly has a binary format that can be compiled from various languages, including JavaScript.</li> <li>It supports shared memory and multi-threading for better performance.</li> <li>Dynamic linking allows apps to update parts of their code without reloading the entire app.</li> <li>The future of web development may involve more native code running in browsers through Web Assembly.</li> </ul>"},{"location":"goto_FE_v3/#benchmarking-javascript-vyacheslav-egorov-goto-2015","title":"Benchmarking JavaScript \u2022 Vyacheslav Egorov \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=g0ek4vV7nEA</p> <ul> <li>Speaker worked on VMs, optimizing compilers, and performance optimization.</li> <li>Optimization techniques include loop unrolling, constant folding, and dead code elimination.</li> <li>Benchmarking is crucial for understanding performance issues in different VMs.</li> <li>Some benchmarks show that v8 has bugs or can be improved.</li> <li>Optimizations can sometimes make code slower due to side effects or complexity.</li> <li>The speaker shared various examples of optimized and non-optimized code, explaining the tradeoffs.</li> <li>Benchmarking is essential for understanding performance issues in different VMs.</li> </ul>"},{"location":"goto_FE_v3/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ul> <li>Simplicity is key in modern software development.</li> <li>Embrace immutability and reactive programming for better performance and reasoning power.</li> <li>Pick the right data structure, such as immutable data structures like transit or Falkor/Jason graph.</li> <li>Use frameworks that support immutability, like React, React Native, and Elm.</li> <li>Optimize data transfer with techniques like batching and caching.</li> <li>Consider atomic databases for efficient querying and editing capabilities.</li> <li>Adopt radical simplicity by representing queries directly in the UI components.</li> <li>Use well-tested engineering ideas such as Git and Lisp.</li> <li>Focus on removing complexity, even if it means adopting older technologies that have been proven effective.</li> </ul>"},{"location":"goto_FE_v3/#conquering-time-with-functional-reactive-programming-sergi-mansilla-goto-2014","title":"Conquering Time with Functional Reactive Programming \u2022 Sergi Mansilla \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=gT6il5fJyAs</p> <ol> <li>The speaker discussed FRP (Functional Reactive Programming) and its applications in JavaScript.</li> <li>They explained how RxJS is a reactive programming library that helps manage asynchronous tasks by treating events as first-class citizens.</li> <li>The speaker provided examples of using RxJS to handle mouse interactions, dragging, and other UI events efficiently.</li> <li>They mentioned some real-world applications of FRP, such as Facebook React, Netflix, SoundCloud, and Microsoft's Windows app.</li> <li>The speaker also discussed the potential application of MVC (Model View Controller) in a reactive programming context.</li> </ol>"},{"location":"goto_FE_v3/#lessons-learned-from-building-a-css-minifier-stoyan-stefanov-goto-2014","title":"Lessons Learned from Building a CSS Minifier \u2022 Stoyan Stefanov \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=SV2f3whvvm0</p> <ul> <li>Speaker discussed CSS minification and performance optimization.</li> <li>He mentioned the importance of understanding CSS syntax, parsing, and transformation tools.</li> <li>The speaker shared his experience with various projects related to CSS optimization.</li> <li>He emphasized the need for browser support and compatibility when using advanced techniques like shorthand properties, browser-specific CSS, and transforms.</li> <li>The speaker encouraged experimentation with different approaches and tools in the field of CSS optimization.</li> </ul>"},{"location":"goto_FE_v3/#turbopack-dx-matters-tobias-koppers-goto-2023","title":"Turbopack: DX Matters \u2022 Tobias Koppers \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=5wPCObSNY5Q</p> <ol> <li>Challenges in web development: Performance, configuration complexity, and tooling improvements.</li> <li>NextJS: Improving performance with incremental builds, caching, and parallelization.</li> <li>Rust: Efficient language for high-performance applications but slow compilation time.</li> <li>Turbo Engine: Incremental computation engine for faster builds and better memory usage.</li> <li>Consistency issues in large applications: Handling file changes and propagating values.</li> <li>Linting and introspection: Better visualization of build information to improve developer experience.</li> <li>Optimization opportunities: Split modules, lazy evaluation, and special optimization for different environments like Edge workers.</li> </ol>"},{"location":"goto_FE_v4/","title":"goto FE v4","text":""},{"location":"goto_FE_v4/#turbopack-dx-matters-tobias-koppers-goto-2023","title":"Turbopack: DX Matters \u2022 Tobias Koppers \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=5wPCObSNY5Q</p> <ol> <li>Vercel's Next.js aims to improve web application development, focusing on performance and developer experience.</li> <li>The team is working on optimizing the wepack compiler for better performance, especially in smaller and mid-range applications.</li> <li>To solve the problem of different environments (client-side and server-side code), a new tool called Turbo Pack will be developed to handle code for both environments.</li> <li>The challenge of configuring Next.js is being addressed by developing a more intuitive and user-friendly configuration system.</li> <li>A new architecture called \"Turbo Engine\" is being built, which uses incremental computation and graph building techniques to improve performance and build times.</li> <li>Turbo Engine will also support lazy loading and caching, allowing developers to optimize their applications based on usage patterns.</li> <li>The team is working on improving the developer experience by making the toolchain more efficient and easier to use.</li> <li>A new plugin system is being developed for Next.js, allowing developers to create custom plugins and extend the functionality of the framework.</li> <li>The team is also exploring ways to make Next.js more flexible and adaptable to different use cases and environments.</li> <li>Turbo Engine will incorporate a tracing and benchmarking infrastructure, providing developers with insights into their application's performance and behavior.</li> </ol>"},{"location":"goto_FE_v4/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ol> <li>Keld Helmer-Petersen, a Staff Software Engineer at Chromatic (Storybook's company), presented his talk on improving UI development using Storybook workflow.</li> <li>He emphasized that Storybook is an industry standard for frontend development and that it helps with development, testing, documentation, and maintaining the UI.</li> <li>Keld shared some challenges in UI development, such as complex UIs, interconnected behavior, and data flow throughout apps.</li> <li>He explained how Storybook isolates components and allows developers to work on specific parts of the UI without affecting other components or the entire app.</li> <li>He demonstrated how Storybook helps with component organization by using a catalog of variants for each component.</li> <li>Keld highlighted that Storybook is used in various industries, including gaming (e.g., Age of Empires inside Storybook).</li> <li>He discussed recent updates to Storybook 7.0 and 7.1, which include significant workflow improvements and bug fixes.</li> <li>He showed how the Storybook framework can be customized using different styling options and viewpoints.</li> <li>Keld explained that Storybook can be used for testing and debugging components by simulating user behavior and running tests on individual components.</li> <li>He demonstrated how to use interaction testing in Storybook, which allows developers to test the functionality of a component when interacting with it.</li> <li>He discussed the use of the \"play\" function in Storybook, which helps run tests and interact with components during development.</li> <li>Keld mentioned that there is an integration between Storybook and CI tools like GitHub Actions, CircleCI, and Jenkins.</li> <li>He talked about the importance of documenting components using MDX format, which allows developers to mix Markdown text with rendered component code.</li> <li>He also discussed the use of Figma Integrations in Storybook, which helps designers see real-time live implementations of their designs within the Storybook interface.</li> <li>Finally, he touched upon the growing ecosystem around Storybook and how it has become a standard tool for frontend development teams.</li> </ol>"},{"location":"goto_FE_v4/#programming-the-web-with-hyperlang-hypercli-mike-amundsen-goto-2023","title":"Programming the Web with HyperLANG &amp; HyperCLI \u2022 Mike Amundsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vcjOzcxIBdY</p> <ol> <li>Presentation about creating a tool called Hyper CLI using Python for web development tasks.</li> <li>Demonstration of using HTTP requests to interact with websites and APIs, focusing on RESTful services.</li> <li>Discussion of the benefits of using HTTP as an interface language due to its widespread adoption and flexibility.</li> <li>Introduction to the concept of a \"service stack\" for managing session data and interactions between different services.</li> <li>Brief mention of the history of programming languages, including COBOL, FORTRAN, C, Java, and C++.</li> <li>Introducing the concept of a DSL (Domain Specific Language) called Hyper Lang, designed to simplify web development tasks using HTTP requests.</li> <li>Demonstration of how to use Hyper Lang to interact with websites and APIs, including creating, updating, and deleting records in databases.</li> <li>Discussion of the challenges and opportunities presented by working with multiple services and APIs, including authentication, data manipulation, and error handling.</li> <li>Introduction to the concept of a \"plugin\" for extending Hyper Lang's functionality, using examples from OAuth 2.0 and custom math functions.</li> <li>Brief discussion of the future direction of Hyper CLI, including plans to improve its modularity, scalability, and documentation.</li> </ol>"},{"location":"goto_FE_v4/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ol> <li>Stephanie Stimac's new book, \"Design Developers,\" aims to bridge the gap between design and development skills.</li> <li>The book covers design fundamentals, UX basics, user research, and visual design principles.</li> <li>Designers should learn basic coding and developers should understand design concepts to work effectively together.</li> <li>A well-rounded skill set is valuable in fast-paced startups and large companies alike.</li> <li>Stephanie emphasizes the importance of color theory, accessibility, and user testing in her book.</li> <li>The book provides a practical approach to designing websites and applications by applying design principles and techniques.</li> <li>Designers and developers should work together early in the product development process to create better products and avoid misunderstandings.</li> <li>Stephanie's career journey includes working as a designer, developer advocate, and product manager at Microsoft.</li> <li>The book \"Design Developers\" helps designers and developers understand each other's roles and collaborate more effectively.</li> </ol>"},{"location":"goto_FE_v4/#simplifying-dev-environments-with-the-right-tools-christian-heilmann-julian-wood-goto-2022","title":"Simplifying Dev Environments with the Right Tools \u2022 Christian Heilmann &amp; Julian Wood \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=o0bYu0HVjNU</p> <ol> <li>Edge Browser's Principal Program Manager, Chris, discusses the current thinking in developer tools and browser technologies.</li> <li>The Edge team is focused on making development more efficient by reducing context switching between different tools.</li> <li>Visual Studio Code (VSC) is being used as a platform to build new developer tools inside the editor itself.</li> <li>VS Code extensions are being developed to provide better accessibility and localization options for developers.</li> <li>The goal is to make development more lightweight by breaking away from monolithic IDEs and focusing on smaller, interchangeable components.</li> <li>Chris mentions the growing popularity of cloud-based services and how developers are adapting their tools to work well with these platforms.</li> <li>He also discusses his experience working in different environments (like Linux) and how he has seen tools evolve over time.</li> <li>Chris highlights the importance of understanding and using the right tool for the job, rather than relying on a single IDE or platform.</li> <li>The idea of \"lightweight thinking\" is emphasized, with a focus on creating more efficient and simpler environments for developers to work in.</li> <li>He talks about how the Edge team is working to improve the user experience by making it easier for developers to find and use the tools they need.</li> <li>Chris also discusses his thoughts on the future of developer tools, including the potential for more advanced machine learning-based autocompletion features in IDEs.</li> <li>He believes that these advancements will help make development more accessible and efficient for all developers, regardless of their skill level or experience.</li> </ol>"},{"location":"goto_FE_v4/#developer-tools-that-shouldnt-be-secrets-christian-heilmann-goto-2022","title":"Developer Tools That Shouldn't Be Secrets \u2022 Christian Heilmann \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lz-nUdotdx4</p> <ol> <li>Developer tools are essential for web development, allowing developers to inspect and manipulate web pages in real-time.</li> <li>The speaker demonstrates various features of developer tools in Chrome and Edge browsers, such as the command menu, console, element tool, and device mode.</li> <li>Device mode simulates different devices and screen sizes, allowing developers to test responsiveness and design across various platforms.</li> <li>The speaker emphasizes the importance of understanding and utilizing developer tools for effective web development and problem-solving.</li> <li>Console logs are a powerful debugging tool, providing detailed information about website behavior and performance.</li> <li>Snippets are reusable code blocks that can be stored and shared among developers, streamlining common tasks and improving productivity.</li> <li>The speaker encourages developers to use developer tools as a learning resource, exploring features and functions in detail and experimenting with different settings and configurations.</li> </ol>"},{"location":"goto_FE_v4/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ol> <li>Dino Project: A JavaScript-focused dream stack for serverless web development</li> <li>Web remains the primary medium for human information exchange</li> <li>JavaScript is crucial for both frontend and backend development, with modern tooling and libraries improving its usability</li> <li>Dream stack includes universal scripting language (JavaScript), minimal boilerplate, and small apps defined in single files</li> <li>Dino aims to simplify serverless web development by providing a comprehensive platform that supports JavaScript, TypeScript, and WebAssembly</li> <li>Dino emphasizes performance optimization, security, and cost-effectiveness for deploying applications worldwide</li> <li>Dino Deploy is a white-label, serverless edge runtime that allows developers to run JavaScript functions at the edge of the network</li> <li>Fresh, a web framework built on Dino, aims to provide an optimized, server-side rendering solution with minimal configuration and dependency management</li> <li>In a comparison with Create React App, Fresh app demonstrates significantly smaller size and faster load times due to its optimized architecture and use of modern tools</li> </ol>"},{"location":"goto_FE_v4/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ol> <li>Psychology and technology play a crucial role in decision-making.</li> <li>Behavioral economics can help understand how people make decisions, including the influence of biases and nudges.</li> <li>Digital nudging is a powerful tool to guide people's choices in the digital world.</li> <li>The concept of a \"digital citizen\" involves understanding how technology influences our behavior and making conscious decisions.</li> <li>Ethics and morality are important considerations when designing technology, especially as it becomes more autonomous and interconnected.</li> <li>Technologies like wearables and AI-powered devices can help people make better decisions by providing data and insights.</li> <li>Attention management is a critical aspect of digital design, as it helps prevent users from becoming overwhelmed or distracted.</li> <li>Building better technology means creating experiences that enhance human lives while also respecting privacy and ethical considerations.</li> </ol>"},{"location":"goto_FE_v4/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ol> <li>The speaker discusses the concept of dystopia and its relevance in tech design, drawing from personal interests and experiences.</li> <li>They mention various psychological theories and concepts such as attention span, learned helplessness, and behaviorism.</li> <li>The speaker highlights the role of technology in changing human behavior and how it can lead to a loss of agency or control.</li> <li>They emphasize the importance of user experience and design principles that prioritize empathy and mindfulness.</li> <li>The speaker talks about the challenges designers face when working with large organizations and the need for diverse teams to create inclusive products.</li> <li>They discuss the use of technology to manipulate attention and influence behavior, as well as the potential impact on democracy and societal values.</li> <li>Finally, the speaker encourages listeners to take action and make a positive impact in their own way, drawing inspiration from Greta Thunberg's activism.</li> </ol>"},{"location":"goto_FE_v4/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ol> <li>Attention is a finite resource that can be hijacked or lost easily.</li> <li>Cognitive load refers to the amount of working memory a task requires, which can impact attention span and capacity.</li> <li>Design elements such as animation, color, and layout can either attract or distract users' attention.</li> <li>Attention management is crucial in web design, especially for those with cognitive disabilities or impairments.</li> <li>Prioritizing content and using clear navigation can help guide users' attention effectively.</li> <li>Animation and motion can be used to capture attention, but should not overwhelm the user experience.</li> <li>Design systems can help maintain consistency and clarity in web design, which can improve attention management.</li> <li>Visual attention is often quicker and more efficient than auditory attention, especially for those using screen readers or other assistive technologies.</li> <li>Prioritizing content and designing for accessibility can help improve the user experience for all users, regardless of their abilities or needs.</li> </ol>"},{"location":"goto_FE_v4/#how-the-sjgar-stack-accelerated-our-digital-transformation-erik-ammerlaan-goto-2022","title":"How the SJGAR Stack Accelerated Our Digital Transformation \u2022 Erik Ammerlaan \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=V5zW3ig2lG8</p> <ol> <li>Eric Ammerlaan from Nationale Nederlanden shares his journey of transforming the business using a simple technology stack</li> <li>The company started as an 11-country enterprise with a worth of over $30 billion, aiming for a 175-year transformation into a tech company</li> <li>A small innovation team was formed to create better engineering culture and deliver customer value faster</li> <li>The success factors include:</li> <li>Using a new technology stack that includes Javascript and serverless architecture</li> <li>Prioritizing speed, low cost, and security</li> <li>The Sugar Stack (Javascript + Serverless) was chosen as the primary technology stack due to its speed in development, flexibility, and scalability</li> <li>React front framework was adopted for its ease of use, ability to create cross-platform apps, and reusable components</li> <li>The platform team's main focus is on providing libraries, building frameworks, and supporting functional teams</li> <li>The functional teams are responsible for delivering features to customers quickly but may struggle with experimentation and innovation</li> <li>A strong engineering culture was fostered by empowering engineers to take ownership of projects, focusing on the customer journey, and encouraging collaboration and learning</li> <li>The use of a simple technology stack enabled the company to accelerate its digital transformation, empower teams, and build more innovative products</li> </ol>"},{"location":"goto_FE_v4/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ol> <li>Javascript ecosystem complexity</li> <li>Need for a balance between performance and user experience</li> <li>Importance of understanding web fundamentals (HTML, CSS, JS)</li> <li>The rise and fall of popular frontend frameworks (Angular 1, React 1, etc.)</li> <li>The impact of tools like Webpack and Babel on the ecosystem</li> <li>The role of developers in choosing the right technology stack for a project</li> <li>The importance of considering trade-offs when selecting technologies</li> <li>The need to prioritize user experience over trendy technologies</li> <li>The potential downsides of focusing too much on cutting-edge frameworks and tools</li> <li>The value of maintaining a good developer workflow and process</li> </ol>"},{"location":"goto_FE_v4/#what-are-micro-frontends-how-to-use-them-luca-mezzalira-lucas-dohmen-goto-2022","title":"What Are Micro-Frontends &amp; How to Use Them \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=-thWgobMW_I</p> <ol> <li>Microfrontends: An Introduction</li> <li>Motivation for exploring microfrontends</li> <li>Need to handle variety of devices and platforms</li> <li>Distributed teams working on different parts of the application</li> <li>Challenges in managing a monolithic codebase</li> <li>Key characteristics of distributed systems (like microservices and microfrontends)</li> <li>Independent deployment</li> <li>Organizational structure impacting architecture design</li> <li>Importance of independent deployment in microfrontends</li> <li>Reducing external dependencies between teams</li> <li>Benefits of a modular architecture for future applications</li> <li>Decision framework: Horizontal vs. Vertical split</li> <li>Horizontal split (multiple teams working on different views)</li> <li>Example: Homepage with multiple components from different teams</li> <li>Challenges in managing organizational structure and ensuring microfrontends work together</li> <li>Vertical split (one team responsible for a single view or feature)</li> <li>Easier to develop and maintain if the team has experience with single-page applications</li> <li>Differences between single-page applications and traditional web applications</li> <li>Interesting points about routing in vertical split microfrontends<ul> <li>Can happen on the client side (JS frameworks) or edge server (application shell)</li> </ul> </li> <li>Potential solutions for deploying application shell alongside microfrontends<ul> <li>Bluegreen deployment, Strangler pattern</li> </ul> </li> </ol>"},{"location":"goto_FE_v4/#building-micro-frontends-luca-mezzalira-lucas-dohmen-goto-2022","title":"Building Micro-Frontends \u2022 Luca Mezzalira &amp; Lucas Dohmen \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=DG9puFuUb7E</p> <ol> <li>Microfrontends are a way to divide a single-page application into smaller, independent applications called \"microfrontends\".</li> <li>The application shell is responsible for loading microfrontends and routing URLs.</li> <li>A challenge with microfrontends is that they may require different frameworks or libraries in each part.</li> <li>Module Federation is a webpack plugin that allows multiple microfrontends to be loaded into the same application, sharing dependencies.</li> <li>Iframes can also be used as a way to isolate different parts of an application, providing security benefits.</li> <li>Web components provide a way to create reusable, customizable UI components that can be shared across different microfrontends or applications.</li> <li>The concept of \"evolutionary architecture\" allows for the gradual evolution of an application's structure and components as business needs change over time.</li> <li>SSI (Server-Side Include) and ESI (Edge-Side Include) are technologies that allow server-side or edge-level inclusion of dynamic content into web pages, providing a way to compose pages from multiple independent parts.</li> <li>The concept of \"self-contained systems\" involves dividing a larger application into smaller, independent systems that can be developed and deployed separately, but still work together as part of the overall application.</li> <li>There are three main approaches to structuring backend services for microfrontends: service dictionary, API gateway, and BFF (Backend For Frontend). Each approach has its own benefits and trade-offs, depending on the specific needs of the application and organization.</li> </ol>"},{"location":"goto_FE_v4/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>Kevlin Henney and Stefan Kevlin discuss the current state of web development, focusing on complexity, performance, and dependency management.</li> <li>They express concern about the impact of JavaScript's popularity on code complexity and performance.</li> <li>The speakers emphasize the importance of understanding dependencies and their implications for security, maintenance, and scalability.</li> <li>They highlight the need for developers to take responsibility for their decisions and consider trade-offs when choosing tools or frameworks.</li> <li>Kevlin Henney shares his experience with a failed startup screen and discusses the broader implications of broken user experiences on software development culture.</li> <li>Both speakers stress the importance of communication, collaboration, and learning from mistakes in order to improve the quality and efficiency of software development processes.</li> <li>They acknowledge that tooling plays a crucial role in helping developers make informed decisions and maintain code quality, but also emphasize the need for human judgment and interaction in the software development process.</li> </ol>"},{"location":"goto_FE_v4/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>The ideal programming language would be domain-specific and have ergonomic type checking.</li> <li>Automatic memory management is important for large systems, but manual memory management allows more direct control and may be necessary for certain operating systems.</li> <li>Functional programming has a \"subtractive\" appeal, focusing on removing unnecessary complexity and features.</li> <li>A good language design would take inspiration from Rust's borrow checker and Elm's type system.</li> <li>A good concurrency model should be easy to use and built-in, such as the one found in Erlang.</li> <li>WebAssembly has potential for running compiled code across different platforms, but it may not significantly change the cultural momentum of JavaScript-based web development.</li> <li>Blazor and C# might gain traction in enterprise environments due to their ability to run on both servers and clients.</li> </ol>"},{"location":"goto_FE_v4/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Functional Programming Pragmatist: Im Richard Feldman</li> <li>Pure functions and immutability are the focus of functional programming</li> <li>Advantages of pure functions include easier testing, debugging, and parallelization</li> <li>Caching and precomputation can improve performance in functional programming</li> <li>Functional programming languages often rely on higher-order functions, which allow for more abstraction and less mutable state</li> <li>Managed effects (like promises) are a way to handle asynchronous operations in imperative programming languages, but they can introduce complexity and side effects in pure functional programming</li> <li>Testing is easier with pure functions due to their predictability and lack of side effects</li> <li>Revising code is simpler with pure functions because there's no need to worry about mutable state or order of operations</li> <li>Debugging is more straightforward in pure functional programs, as there are fewer potential sources of error</li> <li>Ecosystem benefits of functional programming languages include strong tooling support and community-driven best practices</li> <li>Elm is an example of a functional programming language with a strong ecosystem that guarantees pure functions and enforces best practices through its compiler</li> </ol>"},{"location":"goto_FE_v4/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility is important for everyone, including those with disabilities.</li> <li>Web accessibility involves considering navigation, auditory and visual cues, motor capabilities, and cognitive aspects.</li> <li>Writing accessible JavaScript involves using HTML semantics, setting CSS properties appropriately, and targeting specific elements with Javascript.</li> <li>Use the <code>aria-*</code> attributes to provide additional information about an element's purpose or state.</li> <li>Test your code for accessibility by manually navigating through it, using automated tools like Lighthouse and Wave, and testing with screen readers like ChromeVox and VoiceOver.</li> <li>Follow an accessibility checklist while writing code to ensure you don't miss any important aspects.</li> <li>Use semantic HTML elements instead of generic containers (e.g., use <code>&lt;button&gt;</code> instead of a <code>&lt;div&gt;</code>) to make your code more accessible.</li> <li>Consider keyboard navigation, including skip navigation links and tab index attributes, when designing your website's layout and functionality.</li> </ol>"},{"location":"goto_FE_v4/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Focus on rapid development and deployment</li> <li>Use modern technologies like NextJS, Typescript, and Tailwind CSS for fast, predictable outcomes</li> <li>Auto-completion from TypeScript helps save time and catch errors early</li> <li>Incremental Static Regeneration (ISR) allows for efficient server-side rendering and caching</li> <li>Utilize cloud services like AWS, GCP, and Heroku to scale applications easily</li> <li>Outsourcing backend services like Hasura can help save time and money on database management</li> <li>Testing and iteration are key to rapidly improving product quality</li> </ol>"},{"location":"goto_FE_v4/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix Live View is a web framework built on Elixir that provides real-time HTML communication between server and client without requiring JavaScript.</li> <li>It uses WebSocket for server-client communication, providing an edge case for push HTML and saving bandwidth and user processing time.</li> <li>Phoenix Live View allows developers to create real-time form validation, instant feedback for users filling forms, and reusable HTML components on the server side.</li> <li>The framework provides live navigation, which does not send markup wirelessly unless required, thus saving bandwidth and improving user experience.</li> <li>Elixir's distributed, real-time nature allows Phoenix Live View to handle multiple web pages concurrently, providing a self-healing state for each component.</li> <li>The speaker demonstrates how to create a real-time stock update application using Phoenix Live View in an Elixir environment, showing how to handle errors and updates efficiently.</li> </ol>"},{"location":"goto_FE_v4/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte: A lightweight, modern JavaScript framework for building fast, reactive web applications</li> <li>Key Features: Fast compilation, small bundle size, component-based architecture, reactive programming model</li> <li>Sapper: A full-stack Svelte framework for building web apps with server-side rendering and routing</li> <li>Sveltkit: A collection of libraries and tools for building Svelte applications, including a CLI, test utilities, and a storybook for visualizing components</li> <li>State Management: Svelte encourages managing state within single components using reactive statements, which automatically update the DOM when data changes</li> <li>Stores: A way to share data across multiple components by creating a global store that can be read or written from any component</li> <li>Testing: Svelte provides tools for testing components in isolation, such as storybook and Jest</li> <li>Mobile Apps: Svelt Native is a framework for building mobile apps using native platform APIs, with the same syntax and principles as web Svelte</li> <li>Developer Experience: Svelte emphasizes developer experience by providing intuitive tools, fast compilation times, and a concise, easy-to-understand syntax</li> </ol>"},{"location":"goto_FE_v4/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Brian Rinaldi and Ray Camden discuss their book, \"The Jamstack Book.\"</li> <li>The term \"Jamstack\" was introduced in 2015 and has evolved since then.</li> <li>Key components of the Jamstack approach include static site generation, deployment through CDNs, and serverless functions.</li> <li>The authors agree that the Jamstack methodology offers flexibility and scalability compared to traditional server-based web development.</li> <li>They acknowledge that the line between \"Jamstack\" and other methods can be blurry as new technologies emerge.</li> <li>Ray Camden emphasizes the importance of the CICD process in deploying static websites using edge servers or CDNs.</li> <li>The authors discuss the growing complexity of Jamstack-based website development, including the introduction of distributed persistent rendering (DPR) and incremental static regeneration (ISR).</li> <li>They mention that larger companies are increasingly adopting the Jamstack approach to handle complex problems and large-scale websites.</li> <li>Both authors express excitement about the future of the technology and its potential to continue evolving and gaining mainstream adoption.</li> </ol>"},{"location":"goto_FE_v4/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ol> <li>Javascript-based web development best practices</li> <li>Importance of performance and user experience</li> <li>Case study: Italian website outperforming modern websites built with popular frameworks</li> <li>Contentful's tech stack and focus on universal Javascript applications</li> <li>The impact of technology choices on a company's bottom line</li> <li>Evolution of frontend development roles and responsibilities</li> <li>The importance of fundamental knowledge in web development</li> <li>The role of Javascript in modern web development</li> <li>The benefits of focusing on user experience rather than technology choice</li> <li>The need for developers to be versatile in their skillset</li> </ol>"},{"location":"goto_FE_v4/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2020","title":"HTTP/3 Is Next Generation HTTP. Is It QUIC Enough? \u2022 Daniel Stenberg \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=pUxyukqoXR4</p> <ol> <li>Introduction to HTTP/3</li> <li>HP (Hypertext Transfer Protocol) has evolved over time, with the latest version being HP/3.</li> <li>HP/3 vs Previous Versions </li> <li>HP/3 is designed for better performance and security compared to its predecessors.</li> <li>It uses a new transport protocol called QUIC (Quick UDP Internet Connections) which is built on top of UDP instead of TCP.</li> <li>Unlike HTTP/2, HP/3 does not use multiplexing, instead it sends data in independent streams.</li> <li>QUIC Protocol </li> <li>QUIC is a transport protocol designed to improve performance and security over the internet.</li> <li>It uses UDP as its base protocol and adds features like encryption, congestion control, and error recovery.</li> <li>Key Features of HP/3</li> <li>Improved Performance: QUIC eliminates the need for TCP's three-way handshake, allowing faster connection establishment.</li> <li>Security: All communication over QUIC is encrypted by default, providing better security than TCP or HTTP/2.</li> <li>Independent Streams: In HP/3, each request and response is sent as a separate stream, allowing for more efficient use of network resources.</li> <li>Deployment Challenges </li> <li>Organizations may need to update their firewalls and network infrastructure to support QUIC traffic.</li> <li>Some ISPs still block UDP traffic due to its association with DDoS attacks.</li> <li>Future of HP/3 </li> <li>HP/3 is expected to become widely adopted in the coming years, as more browsers and servers implement support for it.</li> <li>It may also lead to the development of new application protocols that take advantage of QUIC's features.</li> </ol>"},{"location":"goto_FE_v4/#going-static-in-a-dynamic-world-with-hasura-and-nuxtjs-debbie-obrien-goto-2020","title":"Going Static in a Dynamic World with Hasura and Nuxt.js \u2022 Debbie O'Brien \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1j9DIX32GpY</p> <p>Error</p>"},{"location":"goto_FE_v4/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>The talk is about making the web more accessible and performant, with a focus on using HTML semantically and responsibly.</li> <li>The importance of writing good, clean HTML to ensure better performance and accessibility for all users, including those with disabilities.</li> <li>Avoid relying solely on JavaScript for functionality; use the right tool for the job.</li> <li>Use pattern-based design, such as the picture element, to create a more accessible web experience.</li> <li>Design for resilience and backwards compatibility, ensuring that websites work well even with slow connections or older browsers.</li> <li>The power of HTML lies in its ability to describe content semantically, which improves search engine results and user experiences.</li> <li>Use appropriate HTML tags instead of generic ones (like <code>div</code>) for better accessibility and maintainability.</li> <li>Screen readers and assistive technologies rely on landmarks (like headers and footers) to help users navigate websites more easily.</li> <li>Use Schema.org markup to provide more context and information about the content on your website, which can improve search engine visibility and user experience.</li> <li>Accessibility is not just for people with disabilities; it also benefits users without disabilities by improving usability, aesthetic appeal, and trustworthiness of websites.</li> </ol>"},{"location":"goto_FE_v4/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ol> <li>Gradual adoption of graphical technology without writing backend code is important for large companies and existing environments.</li> <li>The presentation shared a master plan to introduce graphical technology in an organization.</li> <li>GraphQL is a powerful query language that enables developers to fetch exactly the data they need from APIs.</li> <li>A key benefit of using GraphQL is its ability to improve performance by reducing the number of requests needed to fetch data.</li> <li>The speaker introduced three techniques for gradually adopting graphical technology:<ul> <li>Technique 1: Start with a client-side application and introduce GraphQL server and frontend tools like Apollo and React Apollo.</li> <li>Technique 2: Use the Polar Link Rest technique to start introducing REST APIs in a practical way for the frontend, using Apollo Client and Type Architecture.</li> <li>Technique 3: Utilize GraphQL Mesh, which can automatically convert existing GraphQL schemas from different services into one graphical schema without affecting the source.</li> </ul> </li> <li>The speaker emphasized that these techniques can be used in any backend context and help developers move faster while focusing on frontend development.</li> </ol>"},{"location":"goto_FE_v4/#advanced-feature-flagging-its-all-about-the-data-dave-karow-goto-2020","title":"Advanced Feature Flagging: It's All About The Data \u2022 Dave Karow \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=f8XDvtfKWQE</p> <ol> <li>Feature flags empower organizations to separate code and deployments</li> <li>Gradual rollouts are crucial for error mitigation, testing, and understanding the impact of a feature change</li> <li>Measurement is key: traditional metrics can be misleading when analyzing gradual rollouts</li> <li>Randomized controlled trials (RCTs) provide a more accurate method of attribution and causation analysis</li> <li>Experimentation platforms streamline the process of running controlled experiments, making it easier to measure the impact of feature changes in real-time</li> <li>A well-designed experimentation platform should include components such as targeting, data management, and distribution</li> <li>Effective data management involves normalizing and consolidating telemetry data from various sources</li> <li>Advanced features like randomized sticky courses ensure that users receive consistent experiences throughout the course of an experiment</li> <li>Comparative analysis tools help teams analyze and compare data distributions, enabling them to identify patterns and make informed decisions</li> <li>The use of statistical tests such as t-tests helps validate the significance of experimental results</li> <li>A robust management console simplifies the process of managing rollouts, access control, and reporting metrics</li> <li>Alerts can be used to detect anomalies in data distributions or unexpected behavior, allowing teams to quickly identify and resolve issues</li> <li>The Trustworthy Online Controlled Experiment (TOCE) book provides a comprehensive guide for creating effective online experiments</li> </ol>"},{"location":"goto_FE_v4/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ol> <li>Clean Architecture: Domain-driven design approach with enterprise logic in domain layer, business logic in application layer, and external concerns in infrastructure layer.</li> <li>Dependency Inversion Principle (DIP): Infrastructure depends on abstractions, not concrete implementations.</li> <li>Repository Pattern: Provides a layer of abstraction for accessing data from the database.</li> <li>CQRS: Separates read and write operations to improve performance and scalability.</li> <li>Mediator: Defines a simple way to encapsulate how different objects interact with each other.</li> <li>Fluent API: Provides a more natural and concise syntax for configuration settings.</li> <li>AutoMapper: Automatically maps data between models.</li> <li>Aspnet Core Identity: Pre-built authentication system that can be used in applications.</li> <li>Presentation Infrastructure: Dependent on application layer to provide a consistent user interface.</li> <li>Unit Testing: Verifies individual components of the software work as expected.</li> <li>Integration Testing: Verifies that different parts of the software work together correctly.</li> <li>Open API: Defines a standard for describing APIs, making it easier to use and share them across different systems.</li> </ol>"},{"location":"goto_FE_v4/#http3-is-next-generation-http-is-it-quic-enough-daniel-stenberg-goto-2019","title":"HTTP/3 is next Generation HTTP. Is it QUIC enough? \u2022 Daniel Stenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rlN4F1oyaRM</p> <ol> <li>The speaker, Daniel Steinberg, talks about the history of HTTP and its evolution.</li> <li>He introduces the concept of HTTP/3 (also known as QUIC) and explains how it differs from previous versions of HTTP.</li> <li>HTTP/3 is designed to be faster, more reliable, and more secure than previous versions by using UDP instead of TCP for data transfer.</li> <li>The speaker discusses the challenges and complexities involved in implementing HTTP/3, including the need for new protocols and tools.</li> <li>He mentions that some major companies like Google, Facebook, and CloudFlare are already supporting or planning to support HTTP/3.</li> <li>The speaker also talks about other related technologies such as WebSockets, TLS 1.3, and DNS over HTTPS (DoH).</li> <li>Finally, he shares his thoughts on the future of HTTP/3 and its potential impact on the internet.</li> </ol>"},{"location":"goto_FE_v4/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>The Importance of Fast Web Performance<ul> <li>First Meaningful Paint (FMP) is a crucial metric for assessing web performance.</li> <li>A 27,000-file React website with an 85MB HTML file took 1 hour and 28 minutes to fully load one tweet, highlighting the need for optimization.</li> <li>The Impact of JavaScript on Web Performance<ul> <li>Serving client-side JavaScript can slow down web apps.</li> <li>Server-side rendering is a more efficient approach than client-side rendering. Tactics to Improve Web Performance</li> </ul> </li> <li>Efficient Use of JavaScript and Libraries<ul> <li>Avoid unnecessary JavaScript code.</li> <li>Minimize the use of libraries and frameworks.</li> <li>The Benefits of Serving Lean Client-side Code<ul> <li>Smaller file sizes lead to faster load times.</li> <li>Removing unneeded code can improve performance without sacrificing functionality.</li> </ul> </li> </ul> </li> <li>Avoid Unnecessary Browser Requests<ul> <li>Use treeshaking and bundling techniques to minimize the number of requests made by a webpage.</li> <li>The Importance of Compression, Minification, and Bundling<ul> <li>These techniques can help reduce the size of files served to users, improving overall site performance.</li> </ul> </li> </ul> </li> <li>Optimizing Availability<ul> <li>A 2017 UK government study found that only 89% of people visiting a government website were able to load JavaScript enhancements.</li> <li>The Importance of Progressive Enhancement<ul> <li>Building websites with progressive enhancement in mind ensures that users who do not have the latest technology can still access and use the site.</li> </ul> </li> </ul> </li> <li>Addressing User Experience Challenges<ul> <li>The Imported Cost of Complexity<ul> <li>The complexity of modern web development can lead to poor user experiences, as developers may struggle to ensure that their websites work correctly on all devices.</li> </ul> </li> <li>The Importance of Building for the Web First<ul> <li>Developers should focus on building websites that are optimized for the web first and forend then consider adding additional features or functionality.</li> </ul> </li> </ul> </li> <li>The Benefits of Leveraging Existing Code<ul> <li>Using existing code libraries and frameworks can help developers save time and effort, allowing them to build better websites more quickly.</li> </ul> </li> </ul> </li> </ol> <p>I hope this summary helps! It's based on the transcript provided in your question.</p>"},{"location":"goto_FE_v4/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ol> <li>Attention is a key factor in user experience design and can be influenced by various factors such as visual weight, contrast, movement, and layout.</li> <li>Inattentional blindness occurs when people fail to notice unexpected changes or events in their environment due to focused attention on a specific task or object.</li> <li>Designing for cognitive difficulties like ADHD and bipolar disorder involves understanding the challenges these individuals face in managing their attention and resisting distractions.</li> <li>Reading comprehension can be hindered by factors such as low vision, contrast issues, and animations that distract from the text content.</li> <li>Sleep deprivation can negatively impact cognitive performance and attention span, making it more difficult for individuals to focus on tasks and process information effectively.</li> <li>Animation can be used to enhance user experience by guiding attention, providing feedback, and improving the overall visual appeal of a web page or application. However, care must be taken to ensure that animations do not distract from the main content or purpose of the interface.</li> </ol>"},{"location":"goto_FE_v4/#designing-apis-for-150-million-orders-michele-angioni-matt-fewer-goto-2019","title":"Designing APIs for 150 Million Orders \u2022 Michele Angioni &amp; Matt Fewer \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=OB0Pb-nd0g8</p> <ol> <li>Scuba (Scoober) is a food delivery service operating in multiple countries, experiencing rapid growth and needing to scale infrastructure efficiently.</li> <li>Domain Driven Design (DDD) is used as a strategy for designing software architecture that closely aligns with the business domain.</li> <li>The Scoober team decided to split their application into smaller, independent microservices, each dedicated to a specific subdomain within the IT landscape.</li> <li>Event Storming was used as a tool to help understand and design the different bounded contexts within the system.</li> <li>The team chose to use Kafka for message brokering, which allowed them to maintain consistent communication between services.</li> <li>They adopted a standardized format for event payloads, using the Pocket Change Event Standard.</li> <li>In order to ensure uniformity in handling user authentication and authorization, they implemented a role-based access control (RBAC) system.</li> <li>The team decided to use Octopus Deploy as their deployment automation tool, which helped them manage the release process for their microservices.</li> <li>They also made a conscious effort to document their API endpoints thoroughly and maintain consistent error handling across all services.</li> <li>The Scoober team is currently working on implementing a design system called \"Snack\" to help standardize and streamline the process of creating new UI components for their applications.</li> <li>The migration project towards a more modern, scalable tech stack has been broken down into smaller phases, with each phase focused on rebuilding specific sections of the application while gradually routing users to the new versions.</li> </ol>"},{"location":"goto_FE_v4/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ol> <li>Emphasize the importance of collaboration between designers and developers</li> <li>Share personal stories to illustrate challenges faced in traditional development processes</li> <li>Introduce a four-level VX collaboration model:<ul> <li>Ground Zero (siloed)</li> <li>Level 1 (basic move)</li> <li>Level 2 (efficiency, symbiosis)</li> <li>Level 3 (optimization)</li> </ul> </li> <li>Discuss the benefits of using tools like Figma and Zeppelin to streamline design processes and improve communication between designers and developers</li> <li>Encourage openness and transparency within teams to foster better collaboration and trust</li> <li>Share tips for effective team building, including breaking the ice, sharing vulnerabilities, and celebrating successes together</li> <li>Emphasize the importance of empathy and understanding in the design process, and how this can lead to better products and happier users</li> </ol>"},{"location":"goto_FE_v4/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p>"},{"location":"goto_best_of_v1/","title":"Goto best of v1","text":""},{"location":"goto_best_of_v1/#one-rule-to-rule-them-all-pragmatic-dave-thomas-goto-2023","title":"One Rule to Rule Them All \u2022 Pragmatic Dave Thomas \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ug8XX2MpzEw</p> <ul> <li>The speaker presented the rule \"make it easier to change\" as a guiding principle in software development</li> <li>They emphasized that this is not a hard and fast rule, but rather a value that can help guide decision-making</li> <li>The speaker discussed their experiences with refactoring code and how they've learned to trust their intuition when estimating the cost of change</li> <li>They encouraged the audience to observe and learn from their own experiences in order to improve their estimation skills</li> <li>The speaker also emphasized the importance of making software development a fun and enjoyable process.</li> </ul>"},{"location":"goto_best_of_v1/#programmings-greatest-mistakes-mark-rendle-goto-2023","title":"Programming's Greatest Mistakes \u2022 Mark Rendle \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=Y9clBHENy4Q</p> <ul> <li>The title of the talk is \"Computers are stupid\"</li> <li>The speaker argues that computers cannot be trusted with important decisions because they lack common sense and can only do what they are programmed to do</li> <li>They are prone to errors, especially when dealing with ambiguity or unexpected situations</li> <li>Examples of computer failures include:<ul> <li>A computer-guided missile missing its target by 10 miles during the Gulf War</li> <li>The Therac-25 radiation therapy machine overdosing patients and causing their deaths</li> <li>Amazon's AI-powered hiring tool discriminating against women</li> <li>Google's image recognition algorithm labeling black people as gorillas</li> </ul> </li> <li>The speaker also mentions that computer algorithms are often biased because they are based on data created by humans, who are themselves biased</li> <li>The speaker concludes that computers are not intelligent and should not be trusted with important decisions, especially when human lives are at stake.</li> </ul>"},{"location":"goto_best_of_v1/#building-owly-an-ai-comic-video-generator-for-my-son-agustinus-nalwan-yow-2023","title":"Building Owly: An AI Comic Video Generator for My Son \u2022 Agustinus Nalwan \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=jkHCI4XCOg4</p> <ul> <li>The speaker presented a project using the stable diffusion model to generate comics based on user input.</li> <li>The stable diffusion model is a text-to-image generation model that can create images from text descriptions.</li> <li>The speaker used the model to generate images for each panel of a comic, with the text for each panel provided by the user.</li> <li>The project also included features such as off-riding existing concepts and enhancing engagement through storytelling.</li> <li>The speaker encouraged audience members to reach out to them for more information or to connect.</li> </ul>"},{"location":"goto_best_of_v1/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm in data management</li> <li>It allows for decentralized production and consumption of data</li> <li>Governance in the data world will be a big focus, but it needs to be federated through tooling</li> <li>Vendors have high motivation to get you on board right now, so it's important to be mindful of their motivations</li> </ul>"},{"location":"goto_best_of_v1/#cultivating-instinct-katrina-owen-yow-2023","title":"Cultivating Instinct \u2022 Katrina Owen \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=4As7GDQ8EYg</p> <ul> <li>The talk is about the importance of perceptual expertise in programming.</li> <li>Perceptual expertise is the ability to quickly and accurately recognize patterns, which allows experts to focus on higher level thinking.</li> <li>Programming requires a high level of perceptual expertise because it involves processing many different dimensions at once.</li> <li>The brain has to figure out which dimensions are important and how to categorize them, which can be overwhelming for new programmers.</li> <li>Over the past 50 years, the number of programmers in the world has doubled roughly every five years.</li> <li>Many new programmers may not be exposed to good patterns, useful distinctions, or signal that would help them develop perceptual expertise.</li> <li>Compressing these lessons can help new developers waste less time on mechanics and focus more on solving meaningful problems.</li> </ul>"},{"location":"goto_best_of_v1/#is-software-engineering-real-engineering-hillel-wayne-yow-2023","title":"Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=CmIGPGPdxTI</p> <ul> <li>The speaker discusses their experience of entering the software industry from a non-traditional background.</li> <li>They emphasize the importance of learning and adapting in order to succeed in a new field.</li> <li>They encourage others to seek out people with diverse backgrounds and experiences in order to learn from them.</li> <li>They suggest that there is much to be gained from learning about other fields and how they intersect with software engineering.</li> <li>The speaker encourages the audience to talk to people who have entered software from unusual directions in order to learn from their experiences.</li> </ul>"},{"location":"goto_best_of_v1/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ul> <li>Low-level programming is writing code that runs directly on the hardware, without an operating system or virtual machine.</li> <li>It can be useful for tasks such as embedded systems and kernel development.</li> <li>Rust is a good language for low-level programming because it allows for fine control over memory management while also providing safety features to prevent common errors.</li> <li>The ARM Cortex-M4 microcontroller is a popular choice for low-level programming, due to its wide availability and powerful capabilities.</li> <li>When working with low-level programming, it's important to have access to the datasheet and reference manuals for the hardware being used.</li> <li>Low-level programming can be challenging but rewarding, as it allows for greater control over the hardware and more efficient use of resources.</li> </ul>"},{"location":"goto_best_of_v1/#have-i-been-pwned-troy-hunt-goto-2023","title":"Have I Been Pwned? \u2022 Troy Hunt \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=pxPEdUFdayA</p> <ul> <li>The talk was about the Genesis Market, a darknet marketplace that sold access to compromised machines.</li> <li>The presenter discussed how the FBI took down the site and arrested its administrators in Operation Cookie Monster.</li> <li>The FBI used binary code and hoodies as imagery in their operations, which the presenter found amusing.</li> <li>The presentation ended on a positive note, highlighting the FBI's sense of humor.</li> </ul>"},{"location":"goto_best_of_v1/#plain-text-dylan-beattie-goto-2023","title":"Plain Text \u2022 Dylan Beattie \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=4mRxIgu9R70</p> <ul> <li>Pike Matchbox is a text encoding tool that optimizes plain text files for different cultural and linguistic contexts.</li> <li>It supports several encodings, such as ASCII, UTF-8, and UTF-16.</li> <li>It also considers language-specific features, such as Danish spelling reform, Norwegian orthography, Finnish alphabet, Swedish alphabet, and big and little endian conventions.</li> <li>The tool can be used in different operating systems and text editors.</li> <li>Pike Matchbox was developed to address the issues of unpredictability in plain text files and to ensure that the text is displayed correctly across different platforms and devices.</li> <li>The history of teleprinters and their encoding conventions also played a role in shaping Pike Matchbox's design.</li> <li>The talk encourages developers to consider cultural and linguistic contexts when working with plain text files and to use tools like Pike Matchbox to optimize them for their intended audience.</li> </ul>"},{"location":"goto_best_of_v1/#hot-deploying-low-latency-services-for-247-operation-martin-thompson-yow-2022","title":"Hot Deploying Low-Latency Services for 24/7 Operation \u2022 Martin Thompson \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=_KvFapRkR9I</p> <ul> <li>Real-time systems require coordination between different components</li> <li>Aeron is an open-source project for building clusters that can handle fault tolerance and low latency</li> <li>Coordination is done through messaging, where components send messages to each other to communicate</li> <li>Components must be versioned to keep track of conversations between them and ensure compatibility</li> <li>Background tasks are used to perform time-consuming computations without pausing the system</li> <li>Customers have driven the development of Aeron towards supporting 24/7 operation and hot deployment.</li> </ul>"},{"location":"goto_best_of_v1/#scaling-python-for-machine-learning-beyond-data-parallelism-holden-karau-goto-2023","title":"Scaling Python for Machine Learning: Beyond Data Parallelism \u2022 Holden Karau \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=IX3300umebg</p> <ul> <li>Dask is a flexible library for parallel computing in Python.</li> <li>It can be used to process large datasets that do not fit into memory by breaking them down into smaller chunks and processing them in parallel.</li> <li>It can also be used to parallelize existing code and scale up computations on multi-core machines or clusters of machines.</li> <li>Dask is designed to be used with Pandas, Numpy, and Scikit-learn, so it integrates well with existing scientific computing workflows in Python.</li> <li>It includes a number of built-in algorithms for common data processing tasks, such as sorting, filtering, and aggregating data.</li> <li>Dask can be used to parallelize machine learning models and perform distributed training.</li> <li>It is also useful for performing exploratory data analysis on large datasets by allowing users to write interactive code that scales up to handle larger datasets.</li> <li>Dask has a number of built-in visualization tools for monitoring the progress of computations and diagnosing performance issues.</li> <li>The speaker recommends using Dask with Jupyter notebooks for interactive data processing and exploration.</li> <li>Dask is not a replacement for existing parallel computing libraries such as MPI or Hadoop, but rather it is designed to be used alongside these libraries to provide additional functionality and flexibility.</li> </ul>"},{"location":"goto_best_of_v1/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>Started by showing a GraphQL API built using Prisma</li> <li>Showed how to run a query in the playground and explained what it does</li> <li>Added a new field <code>reviews</code> to the schema, which returns an array of reviews for a given post</li> <li>Explained that this requires making changes to both the schema and the resolver</li> <li>Modified the GraphQL schema by adding the <code>reviews</code> field to the <code>Post</code> type</li> <li>Updated the database model in Prisma's <code>schema.prisma</code> file to include a relation between posts and reviews</li> <li>Redeployed the API using <code>prisma deploy</code></li> <li>Showed how the new field can now be queried in the playground</li> <li>Added a mutation for creating new reviews</li> <li>Modified the <code>getPost</code> resolver function to make use of the new review data</li> <li>Explained that this required changing the contract of the <code>getPost</code> function to include review information</li> <li>Deployed changes and tested in the playground</li> </ul>"},{"location":"goto_best_of_v1/#why-is-my-app-slow-defining-reliability-in-platform-engineering-jez-humble-goto-2023","title":"Why Is My App SLOw? Defining Reliability in Platform Engineering \u2022 Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=es3DNd5Qipg</p> <ul> <li>The talk is about using statistical methods to model and predict system behavior in Site Reliability Engineering (SRE).</li> <li>The presenter, David Blank-Edelman, emphasizes the importance of understanding system behavior as a prerequisite for effective SRE.</li> <li>He introduces the concept of \"stationarity,\" which refers to the idea that certain characteristics of a system remain constant over time.</li> <li>By identifying and modeling these stationary characteristics, SREs can make more accurate predictions about system behavior and respond more effectively to incidents.</li> <li>Blank-Edelman also discusses a technique called \"time series analysis\" for analyzing stationary data and predicting future behavior.</li> <li>He then describes how Google has implemented this approach at scale using a tool called \"Borgmon,\" which can process large volumes of time series data in real time.</li> <li>The presenter emphasizes the importance of statistical modeling and prediction in SRE, and encourages practitioners to explore these techniques further.</li> <li>He also mentions that there are resources available on the sre.google website for those who want to learn more about this topic.</li> </ul>"},{"location":"goto_best_of_v1/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ul> <li>Flix is a functional, imperative, and logic programming language.</li> <li>It was developed by more than 50 people, including the speaker's research group.</li> <li>The language allows writing functions with some logic programming inside them.</li> <li>Flix has several unique features:<ul> <li>Strong typing</li> <li>Pattern matching</li> <li>Higher-order functions</li> <li>Type inference</li> <li>Logic programming</li> <li>Side effects (through monads)</li> </ul> </li> <li>Flix is designed for building scalable and efficient applications, particularly in the area of data analytics.</li> <li>The language has a visual studio code extension, documentation, and a playground available on its website.</li> <li>It is fully open source.</li> </ul>"},{"location":"goto_dt_ui_ux/","title":"Goto dt ui ux","text":""},{"location":"goto_dt_ui_ux/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ul> <li>Introduction to Playwright<ul> <li>Cross-browser testing (Chrome, Firefox, Safari)</li> <li>Visual regression testing with Chromatic<ul> <li>Screenshots of UI changes</li> <li>Side-by-side comparison of old and new versions</li> <li>Review and feedback from co-workers and stakeholders</li> <li>Synchronization with GitHub, gitlab, bitbucket</li> <li>Blocking PRs from merging until reviews pass</li> </ul> </li> </ul> </li> <li>Documentation with Storybook<ul> <li>MDX2 support for mixing text content with rendered components</li> <li>Doc blocks to create documentation pages for components</li> <li>Auto DOCs to automatically generate documentation based on stories</li> <li>Figma Integrations<ul> <li>Add-on designs package for Storybook</li> <li>Figma add-on Plugin for live implementation of a story</li> <li>Chromatic integration with Figma, showing screenshot, live view, and Figma design on the same page</li> </ul> </li> </ul> </li> <li>Improving the ecosystem around Storybook<ul> <li>Tool sets for community-built Storybook Integrations</li> <li>Ecosystem CI to test compatibility with different libraries and frameworks</li> <li>Automated code mods to upgrade existing Storybooks to new versions</li> </ul> </li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ul> <li>Stephanie Stimac is a designer, front-end developer, and product manager with experience at Microsoft</li> <li>She has written a book called \"Design for Developers,\" which covers the basics of design principles and how they apply to the web</li> <li>The book is aimed at people who are new to design or want to learn more about it, and covers topics such as typography, color, layout, and user experience</li> <li>Stephanie emphasizes the importance of understanding the basics of design in order to create effective and accessible websites</li> <li>She also discusses the role of empathy in design, and how considering the needs and perspectives of users can lead to better outcomes</li> <li>In her career, Stephanie has found that having a broad range of skills and knowledge has been beneficial, as it allows her to understand and communicate with different teams and stakeholders</li> <li>She encourages people to continue learning and expanding their skillsets, as this can open up new opportunities and make them more valuable assets in the workplace</li> <li>The book is available for purchase online, and Stephanie is available for consulting work through her website.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=i2_lVtZZdbE</p> <ul> <li>The digital world is constantly evolving and growing</li> <li>There are currently 5.2 billion unique mobile users worldwide, with 3.8 billion of them using social media</li> <li>By 2025, there will be 75 billion connected devices</li> <li>The average person spends around 145 minutes per day on social media</li> <li>The internet minute in 2021:<ul> <li>197 million emails are sent</li> <li>4.62 million videos are streamed on Netflix</li> <li>500 hours of video are uploaded to YouTube</li> <li>347,222 stories are shared on Instagram</li> <li>500 hours of content are consumed on TikTok</li> </ul> </li> <li>The digital world can be overwhelming and it's important to be mindful of our consumption</li> <li>It's easy to get lost in the digital world and forget about the real world</li> <li>There is a trend towards digital minimalism and taking breaks from technology</li> <li>It's important to find a balance between the digital and physical worlds</li> <li>The key is to use technology as a tool, not let it consume our lives</li> <li>We need to be aware of how much time we are spending online and make conscious decisions about our usage</li> <li>There is a growing movement towards creating more ethical and responsible technology</li> <li>Companies are starting to realize the importance of designing products that are good for society, not just their bottom line</li> <li>The future of technology is about enhancing humanity, not replacing it.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022_1","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ul> <li>The future of technology is about merging hardware and infotech to create something that is good for people</li> <li>There is a way to use technology to help people, rather than hijack their attention and time</li> <li>Now Watch is an example of this - it measures stress levels through sweat and helps users become more aware of their inner world</li> <li>The Humane Tech organization (formerly Time Well Spent) aims to create technology that enhances the world outside the device</li> <li>Architects of our digital world have the power to add value and enhance humanity, rather than just keep people's attention for as long as possible.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ul> <li>The speaker is discussing the importance of user-centered design in government services.</li> <li>They mention that their team had to quickly respond to new regulations due to the COVID-19 pandemic, and how having a design system in place allowed them to move quickly.</li> <li>The speaker emphasizes the importance of having a budget for user-centered design and having a government that believes in funding digital services.</li> <li>They also mention the role of representatives in making these decisions, and encourage the audience to vote.</li> <li>The speaker discusses the importance of privacy protection and having organizations like Data Inspectorate in place to protect it.</li> <li>They mention the need for diverse teams and output in design, and encourage the audience to notice if they find themselves in \"learned helplessness\" and to rehearse things that they believe to be good.</li> <li>The speaker also encourages the audience to refuse to engage in arguments with people who don't act for them when they should, and to act for the utopia they want.</li> </ul> <p>Additional notes:</p> <ul> <li>The speaker mentions Keanu Reeves and Greta Thunberg as examples of people who inspire them.</li> <li>They also mention the importance of having laptops and other technology in place for remote work, which allowed their team to continue working during the pandemic.</li> <li>The speaker encourages the audience to use white hat bad actors to simulate potential misuse of products and to think more actively rather than reactively.</li> <li>They also mention the need to specify \"should not\" in products and to be mindful of what we are teaching AI.</li> </ul>"},{"location":"goto_dt_ui_ux/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <ul> <li>Attention is a limited resource and can be easily distracted</li> <li>Visual attention has three dimensions: what, where, and when</li> <li>The \"gutenberg diagram\" describes how people read text on a page, with the primary optical area (POA) being the most important</li> <li>People spend 80% of their time looking at the left half of the screen and 20% on the right</li> <li>F-shaped pattern is common in web reading where users scan in an F shape, focusing on headlines and subheadings</li> <li>Attention jacking is a technique used to grab user's attention by interrupting their flow with something unexpected or interesting</li> <li>Images are processed faster than text and can be used to guide user's attention</li> <li>Visual hierarchy is important for guiding user's attention, with larger and bolder elements being more noticeable</li> <li>Attention is not just visual, but also auditory, and can be easily distracted by sounds</li> <li>Screen reader users have a linear flow of attention and cannot skip around like sighted users</li> <li>Tips for designing for screen readers include getting to the point, prioritizing content carefully, and not auto-playing media</li> <li>Howie experience website is an example of bad design that fails to consider user's attention.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-experience-centric-organization-simon-clatworthy-goto-2021","title":"The Experience-Centric Organization \u2022 Simon Clatworthy \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=P9hobIfPw_0</p> <ul> <li>Experiential design is a holistic approach that considers all aspects of a service, from the customer's perspective</li> <li>It is important to understand the characteristics of your project and find the right mix of functional, usable, emotional, social, idealistic, and self-promoting elements</li> <li>The journey of the customer should be considered, including before, during, and after using the service</li> <li>A personality should be defined for the service, based on the organization's values and tone of voice</li> <li>Experiential design relates to the entire organization, including technology, platforms, routines, hierarchies, and kpis</li> <li>It is important to plan your maturity model and make experience a core part of your strategy</li> </ul> <p>Notes from transcript:</p> <ul> <li>Experiential design is a holistic approach that considers all aspects of a service from the customer's perspective (0:25)</li> <li>It is important to understand the characteristics of your project and find the right mix of functional, usable, emotional, social, idealistic, and self-promoting elements (3:14)</li> <li>The journey of the customer should be considered, including before, during, and after using the service (5:07)</li> <li>A personality should be defined for the service, based on the organization's values and tone of voice (6:32)</li> <li>Experiential design relates to the entire organization, including technology, platforms, routines, hierarchies, and kpis (14:58)</li> <li>It is important to plan your maturity model and make experience a core part of your strategy (17:06)</li> </ul> <p>Additional notes:</p> <ul> <li>The customer's perspective is key in experiential design (0:25)</li> <li>Finding the right mix of elements is important for a successful project (3:14)</li> <li>Considering the entire journey of the customer, including before and after using the service, is important (5:07)</li> <li>Defining a personality for the service that aligns with the organization's values and tone of voice is important (6:32)</li> <li>Experiential design relates to the entire organization and should be considered in all aspects (14:58)</li> <li>Planning your maturity model and making experience a core part of your strategy will help ensure success (17:06)</li> </ul>"},{"location":"goto_dt_ui_ux/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>The speaker, Stefan Judis, discusses the complexity of modern web development and the impact it has on user experience.</li> <li>He mentions that when he first started doing web development in 2010, a \"hello world\" website was only 10 kilobytes, but now it is 40 kilobytes.</li> <li>The speaker also mentions that setting up a simple site project now requires knowledge of frameworks and bundlers such as webpack, which can be difficult to debug and understand for new developers.</li> <li>He brings up the example of tinyhelpers.dev, a website he built where users can add their own tools in the form of JSON files. However, to do so, they have to download 700 megabytes worth of javascript pipeline, which is excessive.</li> <li>The speaker also mentions that there seems to be a divide in front-end development between those who focus on javascript driven frameworks and those who care about UX and CSS architecture.</li> <li>He argues that developers are prioritizing their own job satisfaction over the needs of users, by using the latest and greatest technologies instead of focusing on user experience.</li> <li>The speaker then talks about his own journey in web development, starting with a cutting edge javascript framework for three years, then moving to a pure approach, reducing page weight by 64% and build time by four minutes.</li> <li>He mentions that he no longer has a javascript pipeline and if he needs javascript he puts in custom elements from github or elsewhere.</li> <li>The speaker also mentions that after rebuilding his site using a pure approach, he has an entire green lighthouse score because he didn't add anything that makes it slow.</li> <li>He concludes by saying \"use whatever makes you happy\" but to consider the trade-offs that come with certain technology choices and to focus on building sites that just work instead of worrying about the technology powering them.</li> </ul> <p>[Note: The speaker does not provide any context for his talk, it is assumed that he is speaking from his own experience and knowledge in web development.]</p>"},{"location":"goto_dt_ui_ux/#how-technology-influences-our-decisions-chris-atherton-fabio-pereira-goto-2019","title":"How Technology Influences Our Decisions \u2022 Chris Atherton &amp; Fabio Pereira \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Jya6WTAB9io</p> <ul> <li>The internet has changed the way we communicate and access information, but it also has its downsides such as addiction and misinformation.</li> <li>Social media platforms can be addictive due to their variable reward systems, which activate the brain's dopamine pathways.</li> <li>Social media algorithms prioritize engagement over accuracy, leading to the spread of misinformation and fake news.</li> <li>The internet has also led to a decline in face-to-face communication, which is important for building trust and empathy.</li> <li>To combat addiction and misinformation, we need to be more conscious about how we use technology and prioritize real-life connections over digital ones.</li> <li>Designers have a responsibility to create technology that is ethical and promotes well-being.</li> <li>We should also be critical of the information we consume online and verify it through multiple sources.</li> <li>Social media platforms can be used for positive change, such as raising awareness about social issues and mobilizing communities.</li> <li>The internet has made it easier to connect with people from different cultures and backgrounds, but it has also led to a decline in empathy and understanding.</li> <li>We need to find a balance between using technology and prioritizing real-life connections.</li> <li>Freezing time in 1993, when the internet was still text-based and slower-paced, would be ideal for some.</li> <li>Reconnecting with nature and prioritizing real-life connections are important elements to bring from the past to the present and future.</li> </ul>"},{"location":"goto_dt_ui_ux/#build-agility-with-design-sprints-gary-crawford-goto-2020","title":"Build Agility with Design Sprints \u2022 Gary Crawford \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=oRjY5_VACts</p> <ul> <li>Design sprints are a way to quickly test and validate ideas in a short amount of time</li> <li>They consist of five phases: Understand, Diverge, Decide, Prototype, and Test</li> <li>The goal is to get customer feedback as soon as possible to determine if an idea is worth pursuing</li> <li>Design sprints can be used for any type of product or service, including physical products</li> <li>They are a collaborative process that involves cross-functional teams and customers from the beginning</li> <li>Design sprints can help build agility within an organization by encouraging rapid experimentation and learning</li> <li>The tools and methods used in design sprints can be applied to any type of project or problem</li> <li>To run a design sprint, you will need a diverse team, a facilitator, and a dedicated space</li> <li>It's important to have clear goals and objectives for the sprint, as well as a defined target customer</li> <li>The Understand phase involves researching the problem and gathering insights about the customer</li> <li>The Diverge phase is about generating a wide range of ideas and solutions</li> <li>The Decide phase is about narrowing down the options and making a decision about which idea to pursue</li> <li>The Prototype phase is about creating a simple, tangible representation of the idea</li> <li>The Test phase involves getting feedback from customers on the prototype</li> <li>Design sprints can be used to test out different variations of a product or service</li> <li>They can also be used to validate assumptions and hypotheses</li> <li>It's important to remember that design sprints are not about building a final product, but rather about testing and learning</li> <li>The goal is to get customer feedback as soon as possible to determine if an idea is worth pursuing</li> <li>Design sprints can help build agility within an organization by encouraging rapid experimentation and learning.</li> </ul>"},{"location":"goto_dt_ui_ux/#server-driven-ui-on-mobile-jj-qi-goto-2020","title":"Server Driven UI on Mobile \u2022 JJ Qi \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=CtSfG8tYRdg</p> <ul> <li>Server-driven UI allows for dynamic and customizable user interfaces by specifying templates on the backend that are then rendered on the frontend.</li> <li>This approach can be useful for A/B testing, dynamic messaging, and customized user setups.</li> <li>To implement server-driven UI, it is helpful to start with a specific use case and define a template for that use case.</li> <li>It can be beneficial to begin with a static JSON contract and gradually build out the backend implementation as needed.</li> <li>Some considerations when implementing server-driven UI include determining whether it is always worth the effort to convert a feature to be server-driven, and deciding on the best ways to test the UI.</li> </ul>"},{"location":"goto_dt_ui_ux/#building-an-accessibility-culture-ayesha-mazumdar-goto-2020","title":"Building an Accessibility Culture \u2022 Ayesha Mazumdar \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Lf3YVI-9lA0</p> <ul> <li>Ayesha Kemas, Director of Product Design at Optimizely, gave a talk on building an accessibility culture in product design</li> <li>Accessibility is often overlooked in the planning and development phases of product design</li> <li>Building an accessibility culture involves creating awareness, encouraging action, scaling changes, and refining the product</li> <li>To create awareness, Ayesha and her team presented on accessibility, shared articles, and held discussions</li> <li>Encouraging action involved making small improvements to the product, such as fixing line graphs and focus states</li> <li>Scaling changes will involve propagating these fixes throughout the entire legacy codebase</li> <li>Refining the product involves making it not just usable but also enjoyable for all users</li> <li>Resources for building an accessibility culture include Fable and Access Works for usability testing, The A11Y Project for checklists and introductory articles, and the Web Content Accessibility Guidelines for technical information</li> <li>Ayesha recommends reaching out to her on Twitter or LinkedIn for further discussion.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2019","title":"Design For The Utopia You Want, Not The Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=pUn8Ox7ai6I</p> <ul> <li>Social media platforms have a responsibility to design for how people are, not how they want people to be</li> <li>The attention economy is real and it's impacting our brains in negative ways</li> <li>We need to be more mindful of the time we spend on social media and the actions we take while using these platforms</li> <li>Designers should use behavioral mechanics for good, not to manipulate users into addictive behaviors</li> <li>Transparency is important in design, especially when it comes to data privacy</li> <li>Self-care is crucial for designers and users alike, including taking breaks from social media and practicing good digital hygiene</li> <li>State dependent learning teaches us that the state we are in when we learn something is the best state for retrieving that information later, so it's important to practice self-care in order to retain information.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ul> <li>Accessibility is important for all users, not just those with disabilities</li> <li>Consider the diversity of your audience when designing for accessibility</li> <li>Use clear language and provide alternatives to complex information</li> <li>Make sure interactive elements are easy to use and understand</li> <li>Animation can enhance usability by providing feedback, steering attention, and creating a sense of physicality</li> <li>Follow Disney's animation principles for smooth and effective animations</li> <li>Consider the potential impact on your audience when deciding whether or not to include certain features</li> </ul> <p>No context:</p> <ul> <li>\"Accessibility is about making things accessible to all people\"</li> <li>\"It's about designing for diversity\"</li> <li>\"Complex information can be overwhelming\"</li> <li>\"Interactive elements should be easy to use and understand\"</li> <li>\"Animation can enhance usability\"</li> <li>\"Disney has great principles for animation\"</li> <li>\"Consider the potential impact on your audience\"</li> </ul>"},{"location":"goto_dt_ui_ux/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ul> <li>The speaker is discussing the importance of fostering a DevUX culture within teams.</li> <li>DevUX stands for developer user experience and refers to the practice of involving developers in the design process to create better user experiences.</li> <li>The speaker emphasizes that trust is the foundation of any successful team, and it is essential to build this trust in order to grow and improve as a team.</li> <li>To build trust, the speaker suggests starting by breaking the ice with designers and sharing vulnerabilities. This can help create empathy and understanding between developers and designers.</li> <li>The speaker also recommends organizing regular DevUX drinks or other social events where developers and designers can get to know each other and share their experiences.</li> <li>By building trust and fostering a culture of collaboration, teams can create better user experiences and improve their overall productivity and success.</li> <li>The speaker mentions the Five Dysfunctions of a Team by Patrick Lencioni as a useful resource for understanding how to build trust and improve team dynamics.</li> <li>The speaker also recommends checking out the DevUX culture website and joining the DevUX slack community to connect with other professionals and share experiences.</li> </ul>"},{"location":"goto_dt_ui_ux/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ul> <li>Persuasive design is the practice of designing interfaces and experiences to influence user behavior</li> <li>There are two types of motivation: intrinsic and extrinsic<ul> <li>Extrinsic motivation comes from external factors such as points, levels, badges, and scoreboards</li> <li>Intrinsic motivation is driven by internal factors such as curiosity, mastery, and getting feedback on work</li> </ul> </li> <li>Intrinsic motivation is more sustainable and leads to long-term engagement, while extrinsic motivation is more short-lived</li> <li>To design for intrinsic motivation, it's important to understand user goals and align them with business goals</li> <li>One way to facilitate intrinsic motivation is through appropriate challenges, which can be achieved by using the flow channel concept from Mihaly Csikszentmihalyi<ul> <li>The flow channel is a balance between skill level and challenge, where the challenge is just enough to keep the user engaged without causing anxiety or boredom</li> </ul> </li> <li>Persuasive design can be used to seduce users to sign up, get them to start using a product, and facilitate ongoing engagement</li> <li>It's important to use persuasive design in an ethical way, by focusing on facilitating intrinsic motivation rather than manipulating or coercing users</li> <li>The persuasive continuum is a tool for determining the level of influence a design has, ranging from coercion to seduction to facilitation.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-balance-tech-content-location-for-the-ultimate-ux-in-mixed-reality-jason-yim-goto-2017","title":"How to Balance Tech, Content &amp; Location for the Ultimate UX in Mixed Reality \u2022 Jason Yim \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=qTVqkCV56gk</p> <ul> <li>AR/VR technology is becoming more prevalent in various industries</li> <li>Companies are using AR/VR to create unique and engaging experiences for users</li> <li>Challenges in developing AR/VR experiences include hardware limitations, user fatigue, and calibration issues</li> <li>It's important to consider the user experience and make sure the content is worth downloading and can be enjoyed in the first minute, hour, and week</li> <li>Depth of content and experience is key to keep users engaged</li> <li>Fish Designer at Lego House is an example of a successful AR experience that is fun and engaging for users</li> <li>Compass calibration can be a challenge in AR experiences, it's better to work around it or build it into the experience itself</li> <li>Magic Leap is a mixed reality company that uses light-filled technology, but it's still not released and facing some technical challenges.</li> </ul>"},{"location":"goto_dt_ui_ux/#using-lean-concepts-that-help-the-design-transformation-at-nordstrom-jyoti-shukla-goto-2017","title":"Using Lean Concepts that Help the Design Transformation at Nordstrom \u2022 Jyoti Shukla \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=2yQvwgRJSbc</p> <ul> <li>Lean UX is a practice that emphasizes collaboration, customer feedback, and rapid iteration.</li> <li>Nordstrom has been using lean UX for about two years.</li> <li>The company started by incorporating developers into the design process from the beginning.</li> <li>Developers are involved in usability sketching, bringing products to life, attending usability sessions, and looking at software with customers.</li> <li>Lean UX has helped Nordstrom become more data-driven and make better decisions about what to build.</li> <li>The practice has also helped the company move faster and be more agile.</li> <li>It took about six to nine months for leadership to fully understand and support lean UX.</li> <li>Design sprints have been used at Nordstrom to quickly gather information and create MVPs.</li> <li>The next step after paper prototyping depends on the project, but generally it's best to move to a wireframe or interaction design as quickly as possible.</li> <li>There are many tools available to help with rapid prototyping.</li> <li>Lean UX is not a perfect science and requires experimentation and iteration.</li> <li>It's important to involve developers in the design process from the beginning.</li> <li>Customer feedback is crucial for making informed decisions about what to build.</li> <li>Lean UX can help companies become more data-driven, agile, and customer-focused.</li> </ul>"},{"location":"goto_dt_ui_ux/#lean-design-thinking-michael-mckay-goto-2017","title":"Lean Design Thinking \u2022 Michael McKay \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=w1qrVpeYSYo</p> <p>Error</p>"},{"location":"goto_dt_ui_ux/#smoke-mirrors-the-magic-behind-wonderful-ui-in-android-israel-ferrer-camacho-goto-2016","title":"Smoke &amp; Mirrors the Magic behind Wonderful UI in Android \u2022 Israel Ferrer Camacho \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=912hbLVdIQE</p> <ul> <li>ClipPadding and ClipChildren can be used to draw over parents and paddings</li> <li>ViewOverlay is a best friend for animations, allowing you to draw over the whole layer hierarchy</li> <li>Shared element transition doesn't allow user control without events, but can be achieved with single activity and creating your own navigation</li> <li>Fast animations can hide any problem with implementation</li> <li>Repo with code is available for reference</li> <li>Nick Butcher's Plaid application has more examples of smoke and mirrors techniques.</li> </ul>"},{"location":"goto_dt_ui_ux/#emergent-design-neal-ford-goto-2013","title":"Emergent Design \u2022 Neal Ford \u2022 GOTO 2013","text":"<p>URL: https://www.youtube.com/watch?v=tqmiUJtxaF4</p> <ul> <li>Evolutionary architecture and emergent design require good engineering practices</li> <li>TDD codebase makes it easier to do exercises for refactoring</li> <li>Predicting the future leads to over-engineering, which is a bad thing</li> <li>Prefer being proactive about things that are known to happen in the future and instantly reactive as things happen in the code base</li> <li>Combination of proactive and reactive works better than trying to get better at predicting the future</li> <li>Good engineering practices include:<ul> <li>Automated testing</li> <li>Continuous integration</li> <li>Code reviews</li> <li>Version control</li> <li>Refactoring</li> <li>Short iterations</li> <li>Regular releases</li> <li>Simple design</li> <li>Small teams</li> <li>Collocation</li> <li>Face-to-face communication</li> </ul> </li> <li>Anti-patterns:<ul> <li>Analysis paralysis - overthinking and not taking action</li> <li>Gold plating - adding unnecessary features or functionality</li> <li>Over-engineering - making something more complex than it needs to be</li> <li>Premature optimization - optimizing before it's necessary</li> <li>Cargo culting - following practices without understanding why they are being used</li> </ul> </li> <li>Last responsible moment - the point at which a decision must be made, but not before</li> <li>Inflection points in complexity over time on a project indicate that a component may have taken on too many responsibilities</li> <li>Spikes - experimental coding exercises to determine to get rid of uncertainty for things like estimates</li> <li>Give me estimates now anti-pattern - speculating about how long something will take without enough information leads to ironclad contracts and risking lives to meet deadlines</li> <li>Agile architects need a better awareness of current events in the code base to make determinations about last responsible moments and inflection points</li> <li>Evolutionary architecture and emergent design are about finding and harvesting idiomatic patterns, taking a design that is too complicated to build with the tools available and flipping it over backwards to build something simpler</li> <li>Pac-man example of anti object approach - all intelligence built into the maze, not the individual pac-man guy, using pac-man smell and decaying quickly to determine ghost movement</li> <li>Objects should do the opposite of what you think they should be doing as a way of modeling something that's simpler</li> <li>Anti objects are inspired by the real world but go too far in creating objects that mimic reality</li> <li>Simple design is key - \"the art of maximizing the amount of work not done\" - Agile Manifesto</li> <li>Small teams, collocation, and face-to-face communication are important for good engineering practices</li> <li>Version control, automated testing, continuous integration, code reviews, refactoring, short iterations, regular releases, simple design, and keeping things as small as possible are all part of good engineering practices.</li> </ul>"},{"location":"goto_dt_ui_ux/#why-ux-is-not-only-the-responsibility-of-the-uxer-janne-jul-jensen-goto-2015","title":"Why UX is not only the Responsibility of the UX'er \u2022 Janne Jul Jensen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Tbu6G08n_Gw</p> <ul> <li>UX is about designing software that meets user needs and expectations</li> <li>Good UX can increase user satisfaction, reduce errors, and improve productivity</li> <li>Key principles of good UX design include simplicity, consistency, feedback, flexibility, and error prevention</li> <li>To evaluate the UX of a product, consider its usability, accessibility, desirability, and value</li> <li>Usability testing is an important part of evaluating UX, and can be done at any stage of development</li> <li>Remote usability testing is a cost-effective way to test UX with real users</li> <li>Legal terms and conditions can be presented in a less intrusive way that doesn't interfere with the user experience</li> <li>Developers who care about UX but are facing time pressure should try to raise awareness of the importance of UX among their colleagues and management</li> <li>If raising awareness is not effective, consider looking for a job at a company that values good UX design.</li> </ul>"},{"location":"goto_dt_ui_ux/#adaptive-ui-sam-davies-goto-2015","title":"Adaptive UI \u2022 Sam Davies \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Z8QA9IYB67o</p> <ul> <li>Adaptive Layout is a way to create layouts that work on different screen sizes and orientations</li> <li>Auto Layout is a tool used to create Adaptive Layout</li> <li>Use the \"Vary for Traits\" button in Interface Builder to create size class overrides</li> <li>Start with a base layout and override for specific size classes</li> <li>Use stack views to make layout easier, they work well with adaptivity</li> <li>Tips for using Adaptive Layout:<ul> <li>Get to know Auto Layout</li> <li>Use Adaptive Layout for broad strokes layouts</li> <li>Always start with a base layout and override</li> <li>Life is easier with stack views</li> <li>Now is the time to get Adaptive</li> </ul> </li> <li>Questions:<ul> <li>How do you deal with assignments that want everything pixel perfect?<ul> <li>It's a challenge, but it's important to educate designers that pixel perfect designs are not always possible or practical for multiple screen sizes and orientations. Content is the most important thing, and the layout should be designed to best present that content in different situations.</li> </ul> </li> </ul> </li> </ul>"},{"location":"goto_dt_ui_ux/#designing-the-right-product-michele-ide-smith-goto-2014","title":"Designing the Right Product \u2022 Michele Ide-Smith \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=ZuDD5s_EOeQ</p> <ul> <li>Designing digital products</li> <li>Lean UX approach</li> <li>Treat requirements as assumptions</li> <li>Get out of the building - conduct user research</li> <li>Build a shared understanding within the team</li> <li>Rapid cycles - learn and validate quickly</li> <li>Efficiency vs. effectiveness</li> </ul> <p>Lean UX Approach</p> <ul> <li>Based on Lean Startup principles</li> <li>Validate ideas before investing in development</li> <li>Involve the whole team in the user experience design process</li> <li>Make data-driven decisions</li> </ul> <p>Treat Requirements as Assumptions</p> <ul> <li>Test assumptions with real users</li> <li>Use rapid cycles to learn and validate quickly</li> <li>Don't get attached to your ideas, be willing to pivot based on feedback</li> </ul> <p>Get Out of the Building - Conduct User Research</p> <ul> <li>Observe users in their natural environment</li> <li>Interview users to understand their needs and pain points</li> <li>Use usability testing, A/B testing, click tests, and analytics to validate designs</li> </ul> <p>Build a Shared Understanding Within the Team</p> <ul> <li>Everyone on the team should have a deep understanding of the user's needs and pain points</li> <li>Encourage collaboration and open communication</li> <li>Make sure everyone is aligned on the goals and objectives of the product</li> </ul> <p>Rapid Cycles - Learn and Validate Quickly</p> <ul> <li>Go through multiple iterations to refine the product</li> <li>Use rapid cycles to learn and validate quickly</li> <li>Don't get attached to your ideas, be willing to pivot based on feedback</li> </ul> <p>Efficiency vs. Effectiveness</p> <ul> <li>Efficiency is about doing things right</li> <li>Effectiveness is about doing the right thing</li> <li>Focus on creating a product that solves real user problems and meets their needs</li> </ul> <p>Additional Tips</p> <ul> <li>Don't get lazy - continue to conduct user research throughout the development process</li> <li>Get the whole team to own the user experience of the product</li> <li>Don't compromise quality - create a minimum viable product (MVP) that is high-quality and meets user needs.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-for-mobile-chris-atherton-goto-2014","title":"UX for Mobile \u2022 Chris Atherton \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=R5ByPrFldN8</p> <ul> <li>Attention is a limited resource</li> <li>We can only attend to a small portion of our visual field at once, and we tend to focus on the center of our vision</li> <li>The order in which information is presented affects how we perceive it</li> <li>Context matters - people need help remembering where they are and what they're doing, especially if there are big changes to the interface</li> <li>Mobile first design can be beneficial even for non-mobile applications because it forces designers to focus on what's truly important</li> <li>Toggle buttons can be confusing because it's unclear whether they show an action or a state</li> <li>Using cheap attentional tricks like making something flash or blink can help draw people's attention to where you want it to go</li> <li>There may be some things that are too complex to be shown on a small screen, but breaking down complex tasks into smaller screens can help</li> <li>Sound and touch follow similar attentional rules as vision, but smell is less filtered and can remind us of past experiences.</li> </ul>"},{"location":"goto_dt_ui_ux/#mixing-lean-ux-agile-development-courtney-hemphill-goto-2014","title":"Mixing Lean UX &amp; Agile Development \u2022 Courtney Hemphill \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NoVTpeY3vOg</p> <ul> <li>Agile development process</li> <li>Two-week sprints</li> <li>Standups every morning to discuss what was done the previous day and what will be worked on that day</li> <li>Planning poker to estimate story points for each task</li> <li>Stories are broken down into tasks, which are then assigned point values based on complexity and effort required</li> <li>Velocity is calculated by adding up the total points of completed stories in a sprint</li> <li>Retrospectives are held at the end of each sprint to discuss what went well and what could be improved</li> <li>Code reviews are done before code is merged into the main branch</li> <li>QA testing is done throughout the sprint, not just at the end</li> <li>Design and user experience are considered from the beginning of the project</li> <li>Collaboration between developers, designers, and product managers is encouraged</li> <li>Weekly check-ins with clients to ensure alignment with their goals and expectations</li> <li>Flexibility to adjust the plan as needed based on new information or changes in priorities</li> <li>Focus on delivering value to the end user</li> <li>Education process for clients to help them understand what features will provide the most value for the product</li> <li>Velocity is used to estimate when features will be completed</li> <li>Refactoring and bug fixing are done throughout the project, not just at the end</li> <li>Standups, planning poker, retrospectives, and check-ins with clients are all important aspects of the agile development process.</li> <li>Stories are broken down into tasks and assigned point values based on complexity and effort required.</li> <li>Velocity is calculated by adding up the total points of completed stories in a sprint.</li> <li>Retrospectives are held at the end of each sprint to discuss what went well and what could be improved.</li> <li>Code reviews, QA testing, and collaboration between developers, designers, and product managers are all important for delivering high-quality products.</li> <li>Weekly check-ins with clients ensure alignment with their goals and expectations.</li> <li>Flexibility to adjust the plan as needed based on new information or changes in priorities is crucial.</li> <li>Focus on delivering value to the end user.</li> <li>Education process for clients to help them understand what features will provide the most value for the product.</li> <li>Velocity is used to estimate when features will be completed.</li> <li>Refactoring and bug fixing are done throughout the project, not just at the end.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-in-an-agile-process-janne-jul-jensen-goto-2014","title":"UX in an Agile Process \u2022 Janne Jul Jensen \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NdqtTlCi4cE</p> <ul> <li>Danske Bank's mobile app development process was not a textbook one</li> <li>The initial goal of the project was to create an iPhone and Android app for basic banking services, such as transfers between own accounts, transfers within the bank, transfers to other banks, and payments</li> <li>The team consisted of 7-8 people and the development period was from May to September</li> <li>Danske Bank already had a backend infrastructure in place which helped speed up the development process</li> <li>The app was developed using an agile approach with two week sprints</li> <li>The team used a middleware development to piggyback on the bank's existing backend infrastructure</li> <li>In addition to internal testing, the team also did user testing once the NDA expired</li> <li>The team tested the app on multiple devices and operating systems using Less Painful, a spin-off company that created a test procedure for hooking in multiple phones and running test scenarios</li> <li>Users' expectations have changed over the years and they have become increasingly demanding as they see more and more apps and move more of their digital world onto mobile phones</li> <li>Danske Bank now has more users on their app than they do on their mobile website</li> <li>The app has been successful in Denmark with 5.5 million people, 1.5 million of whom have downloaded the app</li> <li>The app has also been successful in other countries such as Sweden, Norway, Finland, Ireland and England</li> <li>The app has received positive press and high ratings on both iPhone and Android platforms</li> <li>The original team that developed the app consisted of developers, UX, and graphic designers who all tested the app continuously using standardized test cases</li> <li>Danske Bank now has 50 internal testers who test the app on an ongoing basis.</li> </ul>"},{"location":"goto_dt_ui_ux/#user-interface-ux-techniques-janne-jul-jensen-goto-2012","title":"User Interface (UX) Techniques \u2022 Janne Jul Jensen \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=7OSkB4BCx00</p> <ul> <li>The speaker is discussing user-centered design methods.</li> <li>User-centered design is about understanding the user and their needs, and designing with those in mind.</li> <li>It's important to involve users in the design process as early as possible.</li> <li>One method for doing this is through paper prototyping tests, where you create a rough version of your design on paper and test it with users.</li> <li>This allows you to get feedback on your design before investing too much time and resources into it.</li> <li>Another method is through use cases and user stories, which help you understand how users will interact with your system.</li> <li>It's important to involve stakeholders in the design process as well, to ensure that their needs are also being met.</li> <li>One way to do this is by creating a sitemap or workflow of what you want on your website or app, and getting input from stakeholders on what should be included.</li> <li>The speaker emphasizes the importance of testing early and often in the design process.</li> <li>They also mention that it's important to involve users and stakeholders in the design process as much as possible.</li> <li>The speaker encourages using a variety of user-centered design methods, including paper prototyping tests, use cases and user stories, and sitemaps or workflows.</li> <li>They also suggest looking at competitors and related fields for inspiration.</li> <li>It's important to remember that the goal is not necessarily to come up with something completely new, but to create something that works well for your users and stakeholders.</li> </ul> <p>No context:</p> <ul> <li>User-centered design methods are discussed.</li> <li>Involving users and stakeholders in the design process is emphasized.</li> <li>Testing early and often is encouraged.</li> <li>A variety of user-centered design methods are suggested, including paper prototyping tests, use cases and user stories, and sitemaps or workflows.</li> <li>Competitors and related fields can be a source of inspiration for design ideas.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-design-linda-rising-goto-2012","title":"How to Design \u2022 Linda Rising \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=tbemtSmVoBY</p> <p>Here are the notes from the video transcript in bullet point form, written as if I am a student attending the conference:</p> <ul> <li>The speaker has a lot of experience in the field and has worked in various roles such as industry, academia, and research.</li> <li>They have always struggled with making difficult topics easy to understand for students who don't have any industrial experience.</li> <li>Their main interest is in design, which was also their PhD research topic.</li> <li>The speaker shares a scenario about teaching a difficult design concept in their data structures class.</li> <li>A student named Chris comes to the speaker's office to show them his code for a program he has been working on.</li> <li>The speaker admits that they can't guess what the code does and asks Chris to explain it to them.</li> <li>Chris struggles to explain the code, so the speaker uses an analogy of a younger sister named Stephanie who is learning how to program.</li> <li>They ask Chris if he thinks Stephanie could read and understand his code, implying that it's too difficult for someone without much experience.</li> <li>The speaker then asks Chris to imagine a scenario where both he and Stephanie work at the same company in the future, and she is asked to maintain this complex code.</li> <li>They emphasize the importance of writing code that can be understood by others, including oneself in the future.</li> <li>The speaker suggests that when writing code, one should write it as if a smart programmer will look at it and appreciate its elegance and beauty.</li> <li>They challenge Chris to rewrite his code in a beautiful way, like a song that sings.</li> <li>The speaker implies that they might start grading on the beauty of code.</li> <li>Chris gets the point and leaves to make the world a better place.</li> </ul> <p>Overall, the speaker emphasizes the importance of making complex concepts accessible to students with no industrial experience, using design as an example. They also stress the significance of writing clear, elegant, and beautiful code that can be understood by others. The use of analogies and scenarios helps make their point more relatable and engaging for the audience.</p>"},{"location":"goto_dt_ui_ux/#multi-touch-ui-a-touchy-subject-alan-boykiw-goto-2012","title":"Multi-touch UI: A Touchy Subject \u2022 Alan Boykiw \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=mEXudZ3bH_k</p> <ul> <li>Anoto's technology is based on digital pens and paper</li> <li>The company has been around for 15 years, started as a spin-off from Ericsson</li> <li>Anoto's technology uses microdots to track the position of the pen on the paper</li> <li>The dots are printed in a pattern that covers the entire surface of the paper</li> <li>The pens have a small camera that reads the pattern and sends the data to a computer or mobile device via Bluetooth</li> <li>The company has sold over 20 million pens and has partnerships with major companies such as Nike, Adidas, and Hallmark</li> <li>Anoto's technology is used in various industries such as healthcare, education, and retail</li> <li>The company is currently working on new products and exploring new markets</li> <li>One of the challenges for Anoto is the emergence of capacitive touch technology which is becoming cheaper</li> <li>Another challenge is the ergonomic issues with off-screen gestures, as they are not natural or intuitive</li> <li>Anoto's new product is a multi-user interactive whiteboard that uses object recognition to track multiple pens at once</li> <li>The whiteboard can recognize different objects such as pens, erasers and fingers</li> <li>It has a 60 inch screen and can be used for collaboration, brainstorming and presentations</li> <li>Anoto's technology is also being used in the disability space, allowing people with disabilities to write using their elbows or other body parts</li> <li>The company is not actively working on standardizing gestures but sees the value in it.</li> </ul>"},{"location":"goto_programming_lang/","title":"Goto programming lang","text":""},{"location":"goto_programming_lang/#composing-all-the-things-with-kotlin-multiplatform-garth-gilmour-goto-2023","title":"Composing All The Things with Kotlin Multiplatform \u2022 Garth Gilmour \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iq2tTtG3zs4</p> <ol> <li>SC Gilmore, a developer advocate at JetBrains, discusses Compose Multiplatform.</li> <li>A framework for creating awesome user interfaces across multiple platforms, built on Kotlin Multiplatform and powered by Google's Jetpack Compose.</li> <li>Supports sharing code across different platforms, simplifying cross-platform projects.</li> <li>iOS support is in Alpha stage with an example using the ImageViewer application.</li> <li>Demos showcasing Compose Multiplatform usage for various tasks.</li> <li>Cotland Multiplatform: A framework with multiple compilers for different platforms.</li> <li>Composed Multiplatform: Built on top of Cotland, allows sharing code across platforms.</li> <li>Ecosystem of libraries for various tasks.</li> <li>Creating UI in Compose using a declarative approach with composable functions.</li> <li>Demos showcasing basic button counter, performance optimization, text input, and microservice integration.</li> <li>Composable functions allow efficient UI rendering by avoiding unnecessary recomposition.</li> <li>View models separate state and event handlers from the UI.</li> <li>State can be derived in composable functions using other states.</li> <li>Private observable state can be modified within event handlers.</li> <li>Composable UI can be used on Android, iOS, and desktop with minimal changes.</li> <li>Multiplatform libraries handle networking, marshalling, and concurrency.</li> <li>Co-routines manage jobs of work and cancel them when needed.</li> <li>State management is done using a single state object for the UI.</li> <li>Compos offers incremental learning, supports multiple platforms, and leverages Kotlin ecosystem.</li> <li>Allows developers to choose their approach based on specific needs.</li> <li>Offers concurrency via co-routines, making it easier to handle user interface events.</li> <li>State management is done using a single state object for the UI.</li> </ol>"},{"location":"goto_programming_lang/#the-reflex-architecture-ben-kolera-yow-2019","title":"The Reflex Architecture \u2022 Ben Kolera \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5ACqm2ee-XI</p> <ul> <li>Reflex is an FP library with Dom framework, Platform, and Obelis.</li> <li>Functional Programming (FP) focuses on dynamic values based on events.</li> <li>Dynamic values change over time in response to events.</li> <li>Reducer functions handle event and state for new states.</li> <li>Reflex uses fold D to manage dynamic values.</li> <li>Event Rider is an analog of dispatchers, allowing reusable widgets.</li> <li>Widgets are components with specific constraints, building DOM elements and emitting events.</li> <li>Reflex centralizes state and simplifies UI development.</li> <li>Monad Reader adds time-varying values to context for complex UI behavior.</li> <li>Reflex focuses on composable and reusable widgets without a magic store like Redux or Relay.</li> <li>Conduit app demonstrates real-world usage of Reflex.</li> <li>A functioning Nyx Obelisk environment is required for the workshop.</li> <li>Virtual Box setup instructions are provided in the program.</li> </ul>"},{"location":"goto_programming_lang/#scodec-for-scala-3-michael-pilquist-yow-2020","title":"Scodec for Scala 3 \u2022 Michael Pilquist \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=Uo9S4iKw8NA</p> <ol> <li>Sodc is a library for binary processing.</li> <li>Scala 3 macro system revamp: less powerful but more stable.</li> <li>Macro implementation example: hex string literal interpolation.</li> <li>Inline keyword in Scala 3: code gets inlined at call site.</li> <li>Extension method syntax used to support hex followed by a string.</li> <li>Compile time validation via unlift operation.</li> <li>Sodc library transition from Scala 2 to Scala 3 focuses on source and binary compatibility, simplifying established libraries.</li> <li>Introducing the Scy 2 macro system and its impact on library authors.</li> <li>Using Scala 3's inline keyword for compile time execution.</li> <li>Implementing a hex string literal support using custom numeric literals.</li> <li>Sodec at core project: building codecs with simple algebra and combinators.</li> <li>Comparison of three methods to generate nested tuples in Sodec for Scala 2.</li> <li>Using heterogeneous lists from Shapeless directly in the API of the library.</li> <li>Scola 3 introduces new ways to handle codecs and tuples.</li> <li>Tuple arity can be abstracted, allowing generic code that preserves tuple size.</li> <li>Cons operator is right associative in Scala 3.</li> <li>Two generic operations are needed: one for consing a codec of A onto B (Tuple) and another for consing any two arbitrary codics.</li> <li>Extension methods are used to implement these operations, ensuring they're always in implicit scope.</li> <li>Implementation of codic operations in Scola 3 using extension methods.</li> <li>Extension methods for consing two arbitrary types A and B, ensuring right associativity.</li> <li>Simple extensions not used due to issues with eraser and implicit scope.</li> <li>Drop units operation removes unit values from a codec, returning a smaller tupal or the same tupal if no units were present.</li> <li>Match type feature in Scola 3 allows defining type functions at the type level.</li> <li>Implementation: Recursive pattern matching on Tuple structure, removing unit values from the head or tail.</li> <li>Inline definitions: Used to perform these operations at compilation time.</li> <li>Converting codecs: Mapping between Tuple and case class structures using Scala 3's syntax and implicit functions.</li> <li>Compile-time meta programming: Using Scholar.deriving package for reflection and generic programming against product and sum types.</li> <li>Scala 3's type class derivation allows generating coherent codec instances.</li> <li>Derives keyword can be used to derive a single canonical instance for a given type class.</li> <li>Implement derived method in the companion object of the target type class.</li> <li>Require compiler to give a mirror of whatever is being derived.</li> <li>Three abstract methods need implementation: encode, decode, and codecError.</li> <li>Use Scala 3's new syntax for enumerations and adts.</li> <li>Introducing a codec for enumerations in Scala 3.</li> <li>Deriving a codec for ADTs with arbitrary complexity.</li> <li>SizeBound method implementation: Product case - Sum the binary sizes of each element type; Sum case - Use an unsigned 8bit integer to select the Su type member and encode it, followed by the encoded data.</li> <li>Scola 3 compatibility with Scala 2 libraries (no macros).</li> <li>Cats Effect 3 and FS2 support for Dy.</li> <li>Simplified implementation and use of Scala 3.</li> <li>Easier maintenance, less dependencies, and better readability compared to previous approaches.</li> <li>Improving compatibility between Scala 2 and Scala 3.</li> <li>Bidirectional cross-compatibility with no macro usage in Scala 2.</li> <li>Open source ecosystem porting libraries for Scala 3.</li> <li>Encouragement to try Scala 3 and seek help from the community.</li> </ol>"},{"location":"goto_programming_lang/#jakarta-ee-10-modern-lightweight-cloud-application-development-ivar-grimstad-goto-2023","title":"Jakarta EE 10: Modern &amp; Lightweight Cloud Application Development \u2022 Ivar Grimstad \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2749IF7gAbI</p> <ol> <li>Jakar E10 is a comprehensive platform with various specifications and APIs.</li> <li>New core profile targets microservices or headless services, similar to the web profile for traditional web applications.</li> <li>Security updates include standardized OpenID Connect support in Jakar applications.</li> <li>Persistence minor update adds UIDs as basic Java types, simplifying usage.</li> <li>Jakar Restful API 3.1 allows Java SE bootstrapping without an application server.</li> <li>Demonstration of a Jakarta application using S bootstrap for simple web services.</li> <li>Core profile aims to improve runtime performance and compatibility with smaller runtimes.</li> <li>CDI light is designed for restricted environments, resolving dynamic features at build time.</li> <li>Migration from Java EE to Jakarta: Transformation tools can automatically update code without touching it.</li> <li>Demo application showcases a complete Duke application with database, repository, business service layer, and REST API using JSON binding.</li> <li>Upgrade to Jakarta EE by using migration tools like Apache TomEE and Eclipse Transformer.</li> <li>Fix Imports, XML schema namespaces, and property files with changes from Java X to Jakarta.</li> <li>Check for any other Java X dependencies and update them accordingly.</li> <li>Ensure proper bootstrapping files are renamed if needed (e.g., Java X Enterprise Inject SBI extension).</li> <li>Test the updated application and fix any issues that arise.</li> <li>Update XML configurations to persistent XML.</li> <li>Change properties files for Java X to Jakarta.</li> <li>Check for CDI extensions and rename bootstrapping files.</li> <li>Verify dynamic data in applications and update if needed.</li> <li>Upgrade application versions by changing version numbers and fixing compilation errors.</li> <li>Use a trick to make JSON binding work with records.</li> <li>In 10, the issue with getters and setters is fixed, so no coding changes are required for this specific case.</li> <li>Demonstrated a system where a B XML file is required for CDI activation in Spring.</li> <li>Showcased a simple Spring application with dependencies and validation.</li> <li>Upgraded the application to Spring 3, resulting in compilation issues due to missing symbols.</li> <li>Updated the JPA persistence API and Jakar validation versions to fix the issue.</li> <li>Compiled the Spring Boot application successfully after dependency version updates.</li> <li>Upgrade to newer versions of dependencies and frameworks for better compatibility.</li> <li>Use Eclipse Transformer to update libraries with new Jakarta namespace.</li> <li>Publish updated libraries in Maven repository for use in projects.</li> <li>Follow a two-year release cadence for Jakarta, with Java SE LTS version as the base.</li> <li>Discussions on MVC and NoSQL integration are ongoing; contribute if interested.</li> <li>RPC is not likely to be included in Jakarta.</li> <li>Oracle contributes code to RPC project but needs more contributors to move forward.</li> <li>Hope for Jakarta Data, even without NoSQL, to provide data management capabilities.</li> <li>Jakarta release cadence: 6 months after Java SE LTS version</li> <li>Jakarta 11 based on Java 17 or 21 (depending on APIs)</li> <li>Jakarta 11 runtime will be Java SE 21</li> <li>MVC and NoSQL for discussion, but not confirmed for inclusion in Jakarta EE</li> <li>Jakarta RPC not included, join the project if interested</li> <li>Jakarta Data hoped to be included, input needed on repository pattern vs active record</li> <li>Jakarta 9 focused on namespace, 10 added new specifications and bridged 11 and 17</li> <li>Resources: Jakarta website, starter, LinkedIn course (with QR code)</li> </ol>"},{"location":"goto_programming_lang/#concurrency-abstractions-for-application-security-bram-verburg-goto-2023","title":"Concurrency Abstractions for Application Security \u2022 Bram Verburg \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=snCylAGgcxw</p> <ul> <li>Memory management evolution: From explicit allocation to automatic memory management with garbage collection.</li> <li>Concurrency: Dealing with parallelism and asynchronous interactions within an application.</li> <li>Automatic concurrency management: Pushing responsibilities into the runtime, providing abstractions for developers.</li> <li>Language impact: Functional programming languages often have immutable data structures and pattern matching for message handling.</li> <li>Runtime support: Green threads, schedulers, isolated processes with no shared state.</li> <li>Automatic concurrency management aims to simplify development by providing abstractions and runtime support.</li> <li>Immutable data, isolated processes, and resilience can lead to better security through integrity, confidentiality, and availability.</li> <li>The actor model with lightweight green threads helps ensure integrity by making state changes explicit and transactional.</li> <li>Confidentiality is improved by shortlived processes with dedicated scopes that limit access to relevant data.</li> <li>Resilience provides fault tolerance by allowing for process monitoring and recovery from failures.</li> <li>Clarity: Focus on the happy path and avoid handling errors that shouldn't occur.</li> <li>Simplicity: Keep code simple to minimize risk of bugs and make it easier for future developers.</li> <li>Functional programming: Consider using pure functions for testing purposes as they are easy to test due to their predictable behavior.</li> <li>Separate runtime or language for full benefits of concurrency abstractions.</li> <li>Airong (Elixir, Erlang) has actor model, lightweight threads, non-blocking IO, and OTP principles.</li> <li>Security features like isolation, access controls, code signing, static typing can be improved.</li> <li>Other languages like Go have some of the features but not all.</li> <li>Discusses the need for better security, integrity, and isolation in applications.</li> <li>Mentions various languages and frameworks that address some of these issues but lack complete solutions.</li> <li>Encourages awareness and collaboration among developers to improve concurrency and security.</li> </ul>"},{"location":"goto_programming_lang/#genetic-algorithms-in-elixir-sean-moriarity-bruce-tate-goto-2023","title":"Genetic Algorithms in Elixir \u2022 Sean Moriarity &amp; Bruce Tate \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vS1_Z4xaeqQ</p> <ol> <li>Bruce Tate interviews Sean Moriarity, creator of Axon and co-creator of Nx projects.</li> <li>Axon focuses on machine learning in Elixir with competitive performance to Python ecosystem.</li> <li>Nx (Numerical Elixir) is the foundation for the Elixir machine learning ecosystem, providing numerical routines and automatic differentiation.</li> <li>Defn allows for numerical functions in Elixir, similar to JAX's just-in-time compilation behavior.</li> <li>Axon is an Elixir library for creating and training neural networks, inspired by Keras, TensorFlow, and PyTorch.</li> <li>The Elixir ecosystem benefits from the slow and careful approach of building these libraries on top of functional programming languages.</li> <li>Nx and Axon aim to make machine learning more accessible and maintainable while leveraging the strengths of their underlying language.</li> <li>Nx Serving provides an efficient serving abstraction that supports distribution, fault tolerance, and good concurrency.</li> <li>The combination of Elixir's strengths with machine learning capabilities creates exciting opportunities in the ecosystem.</li> <li>Bumblebee library interoperates with Python ecosystem, allowing use of pre-trained models in Elixir applications.</li> <li>ONNX support enables running ONNX models with Nx abstractions.</li> <li>Low code requirements make machine learning accessible to non-experts.</li> <li>Elixir's concurrency and robustness make it potentially better for machine learning than other languages.</li> <li>Elixir ecosystem lacks machine learning experience, but Bumblebee provides easy access.</li> <li>Abstractions in the Elixir ecosystem are good for building robust and concurrent applications.</li> <li>Immutability helps with reasoning about complex data pipelines.</li> <li>Nx's JIT compilation overcomes immutability issues.</li> <li>Initial challenges included GPU compilation, autograd implementation, and numerical correctness issues.</li> <li>Elixir's versatility makes it ideal for machine learning startups as it handles the entire pipeline from application development to model training and deployment.</li> <li>A new book, \"Machine Learning in Elixir,\" teaches the fundamentals of the ML ecosystem in Elixir. The speaker encourages listeners to check out the book and report any issues found during beta testing.</li> </ol>"},{"location":"goto_programming_lang/#problem-solving-with-erlang-the-beam-robert-virding-francesco-cesarini-goto-2023","title":"Problem Solving with Erlang &amp; the BEAM \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=I7A5Y5wHDHI</p> <ol> <li>Erlang, a programming language and ecosystem, was developed for telecom applications.</li> <li>Ericsson used Erlang in their products starting from 1994.</li> <li>The language became open-source in 1998, leading to more companies using it.</li> <li>Bluetail was the first company outside of Ericsson to use Erlang in a product.</li> <li>Erlang's success is attributed to its ability to adapt and evolve with new technologies.</li> <li>Mnesia, an early distributed database, provided key-value storage and fault tolerance but lacked strong consistency for transactional use cases.</li> <li>The Erlang ecosystem has spread across various industries such as telecom, banking, and web servers.</li> <li>Elixir emerged as a significant addition to the ecosystem, bringing new tools and frameworks for web development.</li> <li>Nerves is making embedded systems more accessible in production.</li> <li>Phoenix framework is similar to Ruby on Rails but focused on web development.</li> <li>Jose Valim aims to bring Erlang's power to a wide range of communities through Elixir and Phoenix.</li> <li>Nerves is making progress in production and real-world use cases for embedded systems.</li> <li>More languages are expected to emerge in the ecosystem, with statically typed languages gaining traction.</li> <li>The Erlang ecosystem's versatility allows new ideas to be built on top of it.</li> <li>Continuous evolution of the Erlang language, virtual machine (BEAM), and new features contribute to its longevity.</li> <li>Recent changes include the addition of a JIT compiler for performance gains.</li> <li>New languages and packages are being developed on top of existing systems.</li> <li>The system's focus on concurrency, parallelism, and ease of use is appreciated by users.</li> <li>Adaptation to change is necessary for continued growth and improvement.</li> </ol>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=wFlyUzUVFhw</p> <ol> <li>Different ways to obtain software: upstream binary distribution, system package manager (e.g., apt, yum), and obtaining from source code.</li> <li>Importance of the configure phase in building software from source.</li> <li>Understand available options and choices during configuration.</li> <li>Respecting the configure phase avoids issues while building software.</li> <li>Choose a prefix for installation within your home directory, maintain consistency across operating systems (if cross-platform), or cater to audience preferences on Windows.</li> <li>During build phase, use make with proper CPU usage and install without sudo if in home directory.</li> <li>Pick stable release versions when building from source.</li> <li>Avoid using Docker or virtual machines for basic tasks; follow normal processes and report issues clearly.</li> <li>Learn basics before attempting advanced techniques.</li> <li>Dependencies are crucial, either build them separately or use prebuilt packages.</li> <li>Troubleshooting tips: check dependencies, test on different OS/compilers, and fix caching issues.</li> <li>Use proper tools for your project's language (e.g., CMake for C++).</li> <li>New build system: Zig Build System - portable, easy installation with binary distribution, compiles C/C++ code without additional tools, uses clang for compilation, parallelism and efficient resource usage, solves caching problems with a hash-based system, improved M time granularity by checking file changes.</li> <li>The Zig build system is featured in the next release of Zig.</li> <li>Donations are encouraged for Zig Software Foundation, a non-profit organization.</li> </ol>"},{"location":"goto_programming_lang/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ol> <li>Low-level programming skills can be learned by anyone interested in them.</li> <li>Rust is suitable for embedded software development due to its type system, focus on compiler error messages, and well-designed libraries.</li> <li>Learning unfamiliar data structures and algorithms is essential for personal growth.</li> <li>Fashion is a form of communication that impacts how others perceive us; it can be seen as a language constantly evolving.</li> <li>Steve Jobs' fashion choices were deliberate, focusing on meaningful creative decisions in his work.</li> <li>Tech industry fashion can convey opinions about people without conscious awareness.</li> <li>BBC micro:bit is recommended for learning embedded systems.</li> <li>Rust has a cortex M runtime library and high-level APIs for easier development.</li> <li>Cargo embed tool helps build programs and upload code to devices.</li> <li>Low-level programming involves configuring GPIOs, using volatile instructions, and working with hardware.</li> <li>Embedded programming has different levels of abstraction, from high-level APIs to low-level details like pin concepts.</li> <li>Cross compiling is used for compiling code for various architectures.</li> <li>Flash memory and flashing are essential in embedded systems; consider memory usage.</li> <li>Serial ports are an older I/O interface found in various devices.</li> <li>Semi-hosting should be avoided due to timing issues.</li> <li>Pin concept: Memory location for performing actions on a device.</li> <li>Learn through projects, documentation, debugging errors, and successes.</li> <li>i2C protocol is used in embedded systems; master and slave communication via clock and data lines.</li> <li>Interrupts are asynchronous events in hardware, similar to callbacks in JavaScript.</li> <li>Debuggers play a crucial role in embedded development for examining system state while it's running.</li> <li>Embedded documentation is extensive but can have errors like any other documentation.</li> <li>Test-driven development (TDD) is less common in embedded programming, but tools like Rust's CI integration can help.</li> <li>Useful resources for learning embedded programming include The Embedded Rust book, Comprehensive Rust, and various rust books.</li> <li>Digikey and Mouser are popular websites for buying hardware and finding documentation.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-yow-2022","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A-f7md5exaE</p> <ol> <li>Francesco and Robert are founders of Ireland Solutions, focusing on language expertise.</li> <li>Concurrency-oriented programming (COP) was introduced by Joe Armstrong in 2002, emphasizing concurrent processes, data sharing, and communication through message passing.</li> <li>Erlang was developed to solve Telecom system problems with a focus on fault tolerance and scalability, using processes as its main building block.</li> <li>Beam VM enables fast process creation with minimal memory allocation.</li> <li>Elixir's process-based ecosystem decouples concurrency from the underlying operating system, similar to Erlang.</li> <li>Processes communicate via asynchronous message passing without guarantees on receiving messages.</li> <li>Failure detection in Airline uses two linked processes for crash detection and appropriate actions.</li> <li>The \"let it crash\" principle allows for a reliable system by detecting issues and handling them efficiently.</li> <li>Co-inventors of the first mobile phone systems focused on reliability, leading to human monitoring and redundancy in processes.</li> <li>Erlang's concurrency model based on no shared memory and message passing enables distribution, scalability, and reliability.</li> <li>Concurrency and parallelism are different concepts: concurrency is about doing things at the same time while parallelism is about executing tasks simultaneously.</li> <li>Erlang focuses on concurrency with no shared memory, making it suitable for distributed systems and scalability.</li> <li>JVM prioritizes speed and parallelism but can achieve concurrency through frameworks like Akka.</li> <li>WhatsApp used concurrency to reduce operational overhead and hardware costs by handling a large number of users simultaneously.</li> <li>Phoenix (Elixir) enabled 2 million socket connections in a stable way, showcasing the language's potential.</li> <li>Elixir's popularity is due to its concurrency features and ease of adoption for new communities.</li> <li>The goal is to solve problems related to running massive things simultaneously without crashing servers.</li> <li>Erlang's web server benchmarks outperformed Apache in 2001 but wasn't packaged as a standalone application.</li> <li>Web servers are examples of similar problems, handling massive connections without crashing.</li> <li>Elixir's syntax is inspired by Ruby for familiarity and reduced psychological barriers.</li> <li>Challenges in orchestration and distribution, containerization, and Kubernetes.</li> <li>Importance of considering concurrency from the start when designing languages.</li> <li>Airline philosophy on handling errors: let processes crash without affecting the whole system.</li> <li>Consistent error handling across programs for various scenarios.</li> <li>Focus on dealing with small chunks of the system, ensuring it keeps running and restarts when necessary.</li> <li>Letting a process crash is about managing software errors in a standardized way across programs.</li> <li>Handling machine crashes is difficult but having two machines can help create a fault-tolerant system.</li> </ol>"},{"location":"goto_programming_lang/#scala-implicits-revisited-martin-odersky-yow-2020","title":"Scala Implicits Revisited \u2022 Martin Odersky \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=dr0PUXQhg3M</p> <ol> <li>Implicits are a key feature in Scala, used in 98% of projects.</li> <li>Implicit conversions led to issues, and later, implicit parameters were introduced with limitations.</li> <li>Contextual implicit resolution caused problems, leading to coherence and locality rules for clarity.</li> <li>Scala 3 aims to improve implicit design decisions by focusing on term inference and introducing given instances (Givens).</li> <li>Givens are synthesized values for specific types, abstracting from how they're produced.</li> <li>Future improvements include better error messages, more explicitness, clearer rules, and support for Scala 3.0 with implicit conversions.</li> <li>Scala 3 introduces improvements in indentation, optional braces, cross-compilation, and uniform syntax.</li> <li>Tools like editors help maintain code reliability through meta properties of indentation.</li> <li>House Color 3 experience shows positive results, including shorter programs with better writing flow.</li> <li>No downsides found for refactoring or large settings.</li> </ol>"},{"location":"goto_programming_lang/#calling-functions-across-languages-richard-feldman-goto-2023","title":"Calling Functions Across Languages \u2022 Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ZOvxa9aKCCg</p> <ol> <li>Calling functions across languages can be achieved using different methods, such as HTTP requests and responses or direct communication between processes.</li> <li>Optimizing the process involves removing HTTP boilerplate, focusing on data transfer, and using localhost and binary encoding instead of JSON.</li> <li>Inter-process communication (IPC) like Unix sockets can further reduce overhead.</li> <li>The goal is to call a Ruby function from JavaScript within a single process with minimal overhead.</li> <li>To achieve this, opcode manipulation is used to combine JavaScript and Ruby in one process by jumping between their instructions.</li> <li>This approach has risks like type mismatches due to lack of type information.</li> <li>C can be used as an intermediate representation between JavaScript and Ruby via Node.js for direct function calling.</li> <li>Ruby linear algebra can be imported into Node.js without inter-process communication or network overhead.</li> <li>CFFI (C Foreign Function Interface) is a tool that can be used in other languages like Python to call functions across different languages.</li> <li>Overhead occurs due to conversions between different number representations, and a Gnome2js library could eliminate the need for C intermediary.</li> <li>Type checking can be challenging with C bindings as they don't support type definitions; Rust has Russ bindgen for this purpose.</li> <li>The programming language Rock aims to make it easy to embed in other languages, focusing on being nice to call from them.</li> <li>Rock Glue generates Rust types and bindings from Rock code, making it easy to call Rock functions from Rust.</li> <li>This approach can be applied to other languages like Node.js for interoperability.</li> <li>The goal is to provide a consistent user experience regardless of the target language.</li> <li>Each approach has trade-offs: network communication offers distribution across multiple machines, while same process ensures minimal overhead and stateful runtime guarantees.</li> <li>Language server protocol uses inter-process communication for editor extensions without affecting the entire editor.</li> <li>WebAssembly provides more control over memory management but doesn't automatically protect against segmentation faults or memory corruption.</li> </ol>"},{"location":"goto_programming_lang/#effective-programming-in-ocaml-kc-sivaramakrishnan-yow-2021","title":"Effective Programming in OCaml \u2022 KC Sivaramakrishnan \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=X28PFYvZ_V8</p> <ol> <li>Multicolor Camel is a project that adds native support for concurrency and parallelism to OCaml through effect handlers and domains.</li> <li>Effect handlers provide composability, well-behaved libraries, and first-class restartable exceptions using exception handling syntax.</li> <li>The language extension implements lightweight threading with fork and yield effects, managed by a scheduler.</li> <li>Effects are hidden behind signatures, making it look like sequential code for users.</li> <li>Multicolor Camel demonstrates handling continuations and concurrency in a language, including generators for non-continuous traversals.</li> <li>The project maintains backwards compatibility while transforming synchronous code into asynchronous using FX (effects) for handling IO operations.</li> <li>It introduces defensive programming for exceptional behavior, making synchronous code asynchronous with a scheduler queue and discontinue primitive.</li> <li>Performance overhead measurements include stack switching, generators, and web server implementation with effect handlers.</li> <li>OCaml Multi-Core is an open source project that allows users to install and use the techniques discussed.</li> <li>The approach based on effect handlers is comparable in performance to Go and LWT, without relying on monads or sacrificing program pausing capabilities.</li> </ol>"},{"location":"goto_programming_lang/#hashing-modulo-alpha-equivalence-simon-peyton-jones-yow-2021","title":"Hashing Modulo Alpha Equivalence \u2022 Simon Peyton Jones \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=PltixgJiRrw</p> <ul> <li>The problem is finding equivalent sub-expressions in a program and making small rewrites.</li> <li>Hashconzing can be used for incremental analysis but doesn't work well with lambdas due to false positives and negatives.</li> <li>Using Divine notation removes names from lambdas, but introduces new issues: overheads in the compiler and both false positives and negatives.</li> <li>The speaker didn't find a perfect solution for this problem during their talk.</li> <li>Dubai notation has issues with false positives and negatives.</li> <li>E-summary is a solution to find Alpha equivalent subexpressions.</li> <li>E-summary consists of structure and free variable map.</li> <li>Hash codes are extracted from e-summaries for efficient comparison.</li> <li>Collisions can occur, but should be infrequent.</li> <li>The approach focuses on Isamu first, then extracts hash codes and uses a table to save nodes with the same hash code.</li> <li>Introducing e-summaries: A pair of a structure and a free variable map.</li> <li>Structure: Describes the shape of an expression without mentioning identities or locations of variables.</li> <li>Variable Map: Maps variables to their positions in the structure.</li> <li>E-summary for single variable: Structure is svar, variable map maps variable to P here.</li> <li>Lambdas: Recursively call summarize and extract structure and variable map from summary.</li> <li>Application nodes: Use e-summaries of children expressions to create e-summary of application node.</li> <li>No two position trees point to the same location.</li> <li>E7 concept: Structure and free verbal map.</li> <li>S-dam container (Repository) vs. Pository.</li> <li>Summarize function: Takes an expression, delivers e-summary.</li> <li>Hash summaries: Replace structures with structure hashes, positives with pository hashes for more efficient reconstruction.</li> <li>Handling shadowing in e-summaries: No issues as they're anonymous and don't have names.</li> <li>Next step: Discussing app nodes.</li> <li>E summaries deal with shadowing by treating them as anonymous variables.</li> <li>Hash summaries use structure hashes and pository hashes for more efficient reconstruction.</li> <li>App nodes require attention to every element of both VAR Maps, leading to O(n^2) work in unbalanced trees.</li> <li>Solution: Only adjust items in smaller map, recording depth and bigger map flag in structures.</li> <li>This approach allows efficient rebuilding while maintaining perfect inversion.</li> <li>Discussed the process of combining and splitting variable maps in a tree structure.</li> <li>The complexity is O(n log n) due to work done on smaller trees.</li> <li>Considered using hashes for variable maps, but deleting elements from them was problematic.</li> <li>Introduced exclusive or (XOR) as a solution: hash of a variable map is the XOR of its key value pairs' hashes.</li> <li>Deletion can be achieved by XORing the hash of the deleted element with the available map hash.</li> <li>Synthetic benchmarks and real-world tests show that the proposed method outperforms other correct algorithms.</li> <li>Synthetic test cases show balanced and unbalanced expressions.</li> <li>Green circles algorithm is the best, with faster performance than locally nameless.</li> <li>Locally nameless is correct but has worse complexity.</li> <li>The speaker found it surprising that there was a gap in literature regarding this issue.</li> <li>Algorithm is simple yet efficient, requiring mathematical and formal reasoning for improvements.</li> </ul>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023_1","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vKKTMBoxpS8</p> <ol> <li>Obtain software through various methods: upstream binary distribution, system package manager (e.g., apt, yum), and source code compilation.</li> <li>Understand the importance of the configure phase in building software from source.</li> <li>Focus on using a custom prefix during configuration to simplify uninstallation and avoid conflicts with other software.</li> <li>For Windows, consider catering to its specific needs while maintaining consistency across platforms.</li> <li>When building from source, use release versions and stick to the system toolchain.</li> <li>Avoid using Docker or virtual machines unless necessary; focus on learning how to build from source.</li> <li>Don't modify header files or perform weird workarounds during the build process.</li> <li>Learn the basics before attempting advanced techniques.</li> <li>Dependencies are crucial for building software from source, so ensure they're installed correctly.</li> <li>Troubleshooting tips: check dependencies, test on different OS/compilers, and fix broken caching issues.</li> <li>Use alternative build systems like Ninja instead of Make to avoid caching problems.</li> <li>Introduce the Zig Build System for efficient and portable compilation.</li> <li>Parallelism is achieved by constructing a build graph in the script.</li> <li>Implement a cache system for better resource usage and avoiding false positives.</li> <li>Create a package manager with manifest files for dependency management.</li> <li>Rebuild Groove Basin music player using Zig.</li> <li>The Zig build system is easy to use, allowing contributors to run it without complex instructions.</li> <li>Support the non-profit Zig Software Foundation through donations.</li> </ol>"},{"location":"goto_programming_lang/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ol> <li>Flix is a functional programming language with effect systems, which help in understanding programs better and enable optimizations.</li> <li>Type and effect systems characterize values and computational effects respectively.</li> <li>Effect systems allow capturing purity or impurity of functions through effect polymorphism.</li> <li>Libraries can benefit from effect systems by enabling parallel execution without race conditions or deadlocks.</li> <li>Flix forces equals and hash functions to be pure for trustworthy implementations.</li> <li>Region-based memory management allows pure functions to use mutable data structures temporarily within a lexical block.</li> <li>Iterators are efficient ways to iterate through collections, with terminal and non-terminal operations managing suspended effects.</li> <li>Effect systems clarify how code works by managing suspended effects and mutable memory for iterators.</li> <li>Pure functions in languages with type and effect systems are easier to understand and optimize for parallelism.</li> <li>Library authors can use reflection on function purity to enable parallel evaluation safely when needed.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-goto-2023","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=AvA97AB8cAA</p> <ol> <li>Francesco and Robert, co-inventors of Erlang, discussed their experiences in building a programming language for telecom applications with concurrency, fault tolerance, and upgradability while running.</li> <li>They demonstrated the concept using an electric train simulation at a conference, focusing on concurrency and processes.</li> <li>Key ideas behind Erlang include concepts like concurrent systems, data isolation, and asynchronous communication.</li> <li>Processes in Erlang are lightweight and efficient, allowing millions to interact simultaneously. When a process ends normally or crashes, the memory is freed immediately.</li> <li>Communication between processes happens through messages with PIDs (process identifiers).</li> <li>Asynchronous communication can lead to lost messages, so acknowledgments are used for confirmation. Failure detection is achieved by monitoring processes and linking them together.</li> <li>Early mobile telephony systems had manual error handling, but Erlang's approach allows processes to monitor and link to each other, sending exit signals when a linked process crashes.</li> <li>Trap exits enable processes to handle errors in a custom way, while supervisors monitor other processes and take appropriate actions (restart, terminate).</li> <li>Concurrency models based on notion memory and message passing provide distribution, scalability, and reliability.</li> <li>Three pioneers in concurrency research developed similar solutions for different problems: Carl Hewitt, Tony Hoare, and Joe Armstrong.</li> <li>Concurrency is a property of the problem being solved while parallelism is a property of the underlying system. These models allow efficient distribution and scalability without worrying about hardware architecture.</li> <li>Beam and JVM have differences in focus: Beam emphasizes scalability and resilience, while JVM focuses on speed/parallelism.</li> <li>Concurrency model in Java was implemented through Akka by Jonas Bon\u00e9r, inspired by Erlang's OTP systems.</li> <li>WhatsApp used Airline for their backend servers with 2 million TCP connections on one machine.</li> <li>Elixir is an ecosystem of languages built on top of the Airline and Beam virtual machine, aiming to bring the power of Airline to new programming communities.</li> <li>Alexa became a first-class citizen in the Airline ecosystem, showcasing its potential as an ecosystem.</li> <li>Statically typed languages like Elixir are important for device security.</li> <li>Jose Valim created Elixir to bring Erlang's power to new programming communities, focusing on runtime and language principles for effective concurrency implementation.</li> </ol>"},{"location":"goto_programming_lang/#why-static-typing-came-back-richard-feldman-goto-2022","title":"Why Static Typing Came Back \u2022 Richard Feldman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Tml94je2edk</p> <ol> <li>In the 1950s to 1990s, statically typed languages were more prevalent than dynamically typed ones.</li> <li>The 1990s saw a boom in dynamic languages due to web growth and fast feedback loops.</li> <li>Popular dynamic languages include JavaScript, Ruby, PHP, Python, and R.</li> <li>Statically typed languages had advantages like runtime performance but were less relevant in the 1990s context.</li> <li>Gradual typing systems emerged for dynamic languages, leading to more popularity for statically typed ones.</li> <li>In the 1990s, dynamic languages dominated web use cases due to their fast feedback loops and concise syntax.</li> <li>The LAMP stack became popular for early web needs.</li> <li>Two dynamic languages made the top 20 most popular programming languages: PowerShell and CoffeeScript.</li> <li>Statically typed languages like C#, ActionScript, Go, Rust, Dart, Kotlin, TypeScript, and Swift have gained popularity in recent years.</li> <li>Modern JavaScript has less ceremony than older versions.</li> <li>TypeScript adds minimal static typing without much ceremony.</li> <li>The speaker's view of static typing has evolved over time.</li> <li>Minimal ceremony in JavaScript leads to success.</li> <li>Upgrading to Modern JavaScript involves minor changes.</li> <li>Static typing in TypeScript adds minimal extra code compared to Java's static typing.</li> <li>Advantages of Java implementation include better equals and hashcode implementations, early JSON validation, and useful Getters/Setters.</li> <li>Rock programming language uses type inference for early JSON validation without explicit type annotations.</li> <li>Concise code can be achieved with proper language design and features.</li> <li>Null pointer exceptions are not innate to static typing; some languages have null-aware type checkers.</li> <li>Elm and Haskell have sound type systems, leading to fewer runtime errors.</li> <li>Error messages in modern languages are improving, becoming clearer and more helpful.</li> <li>IDEs can be laggy but performance has improved with multi-core processors.</li> <li>Static typing has improved over time, with better error messages and IDE performance.</li> <li>Feedback loops have also become faster in statically typed languages like Haskell.</li> <li>The main benefit of static typing for many people is the red squiggle (syntax errors) in their IDEs, which helps them catch issues earlier than runtime crashes.</li> <li>Static typing has become more popular with languages like TypeScript and Elm, showing that it can be enjoyable to use.</li> <li>In the past, static typing was seen as slow with feedback loops.</li> <li>Modern languages have improved this by offering faster feedback and non-blocking errors.</li> <li>Three hypothetical futures: 1) Dynamic typing returns, 2) Gradual typing becomes popular, or 3) Static typing without gradual typing grows.</li> <li>The pendulum swinging back to dynamic typing is less likely as statically typed languages can offer the same benefits.</li> <li>Future of static and dynamic typing will depend on how well they adapt to new technologies and user needs.</li> <li>Gradual typing has become more popular by adding static type checking to existing dynamically typed ones.</li> <li>ActionScript and Dart were the only gradually typed languages from the start, but Dart later switched to full static typing.</li> <li>Static typing has a simpler design space compared to gradual typing, which needs to model all dynamic behavior.</li> <li>Gradual typing introduces runtime overhead due to checking types at both compile time and runtime.</li> <li>Historical evidence doesn't support the claim that gradually typed languages will become mainstream in the future.</li> <li>Static typing has become more popular due to improvements in statically typed languages that adopt benefits of dynamically typed ones.</li> <li>Gradual typing is not the best solution as it comes with unavoidable downsides, such as runtime overhead and complexity.</li> <li>Rock language aims for simplicity, performance, and ease of use without sacrificing benefits of statically typed languages.</li> <li>Prediction: Among the next five popular programming languages, most or all will be statically but not gradually typed.</li> </ol>"},{"location":"goto_programming_lang/#the-java-agent-modifying-bytecode-at-runtime-to-protect-against-log4j-joe-beeton-goto-2022","title":"The Java Agent: Modifying Bytecode at Runtime to Protect Against Log4J \u2022 Joe Beeton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=ZrGOv44iTC8</p> <ol> <li>Java instrumentation API enables dynamic and static analysis of running Java applications.</li> <li>Dynamic attachment involves creating a Unix socket, loading the agent jar file, and calling its main method with arguments.</li> <li>Manifest files in agent jars contain pre-main, agent class, native prefix, and permissions for modifying bytecode.</li> <li>JBomb creates a bill of materials for running Java applications by attaching to them at runtime.</li> <li>Static attachment is simpler; add the Java agent flag with jar location on startup.</li> <li>Protect is a tool that detects and blocks potential vulnerabilities like SQL injection or remote code execution.</li> <li>Log4Shell allows remote code execution through specific strings in log files, which can be blocked using tools like Protect.</li> <li>JNDI lookup can lead to remote code execution if an attacker controls the JNDI server.</li> <li>Oracle disabled default remote class loading in Java updates after October 2018.</li> <li>Other ways of exploiting Log4j include Spring Boot Tomcat's Apache Bean Factory and JavaScript engine removal in Java 15.</li> <li>A malicious JNDI server can return a payload that executes commands on the application.</li> <li>Demonstrated a JNDI vulnerability in Spring Boot Tomcat using Apache Bean Factory.</li> <li>Showed how to modify the JNDI lookup class to block the vulnerability using ASM and Java agent.</li> <li>Discussed other security issues and resources available for developers.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-zig-programming-language-linters-andrew-kelley-jeroen-engels-goto-2022","title":"Expert Talk: Zig Programming Language &amp; Linters \u2022 Andrew Kelley &amp; Jeroen Engels \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=zKmZmiOU6qE</p> <ol> <li>Jeroen and Andrew discuss their experiences with linters, focusing on Elm and Zig languages.</li> <li>They mention the lack of powerful refactoring tools in Elm compared to other languages like Java.</li> <li>Conditional compilation is important for future language development.</li> <li>Code smells can be false positives in linter rules; examples from different languages are provided.</li> <li>Assertions may help reduce false positives, but they might not be possible if type information is missing.</li> <li>Linting fixes can simplify developers' lives, but they need to be trustworthy and provide details about the changes made.</li> <li>Elm-review uses prompts for every error with a suggested fix, allowing users to build trust in the tool.</li> <li>The tradeoff between linting errors and compilation is separating the steps, ensuring code quality while still allowing flexibility in development.</li> <li>In pull requests with green tests, there's a guarantee that all used code has been checked by the linter.</li> <li>Context matters when evaluating the usefulness of linting in different scenarios.</li> <li>Continuous integration is related to linting, as it enforces rules during development.</li> <li>Some projects may not have a separate integration phase or focus on guarantees.</li> <li>Nim language focuses more on flexibility and power rather than guarantees.</li> <li>Zig prioritizes readability and maintainability over other aspects.</li> <li>Elm has referential transparency due to functional programming, ensuring the same input yields the same output.</li> <li>Guarantees can simplify code and make refactoring easier.</li> <li>Referential transparency is an essential aspect of purely functional languages, where the same inputs always result in the same outputs.</li> </ol>"},{"location":"goto_programming_lang/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ol> <li>The speaker emphasizes the significance of JavaScript in modern software development.</li> <li>He presents an ideal stack consisting of a universal scripting language, serverless architecture, and optimized infrastructure.</li> <li>Dino is introduced as a framework that implements this stack, focusing on simplicity, security, and optimization.</li> <li>Features include TypeScript integration, browser compatibility, and easy dependency management through npm.</li> <li>Dino Deploy builds serverless systems using Dino, hosting at the edge in 34 data centers worldwide with GitHub integration for code deployment.</li> <li>Dino is a local development runtime similar to Node, focusing on serverless systems for JavaScript.</li> <li>Dino Deploy provides a white label serverless system for websites like Netlify Edge functions and Super based Edge functions.</li> <li>A fresh web framework is built for speed, rendering everything just in time on the server, automatically inlines CSS, uses Tailwind, and has TypeScript out of the box with no configuration.</li> <li>Comparison between a fresh app (84KB) and a create react app (339MB) shows significant optimization potential in server-side JavaScript.</li> <li>Efforts are being made to improve frameworks and cloud deployment for better optimization.</li> </ol>"},{"location":"goto_programming_lang/#beam-concurrency-in-action-sasa-juric-yow-2022","title":"BEAM Concurrency in Action \u2022 Sasa Juric \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A4x6IfceJCM</p> <ol> <li>Beam concurrency revolves around processes, which are sequential programs that can spawn other processes and communicate through messages.</li> <li>Message passing is the primary way for processes to coordinate or cooperate; each process has a mailbox for received messages.</li> <li>Beam runtime starts with an OS process containing all the processes, encouraging lightweight, independent processes in abundance.</li> <li>Concurrency is essential even for small systems as it allows multiple capabilities and vertical scalability.</li> <li>In the example given, an analyst process handles requests and spawns a query process to run long-running tasks separately, decoupling execution flows.</li> <li>Beam is a framework for concurrent programming using event-driven, reactive style with lightweight processes.</li> <li>Data processing pipelines can be implemented using Beam, making it suitable for event-driven microservices and handling data streams.</li> <li>Concurrent thinking in Beam: Split processes to separate execution flows and failures.</li> <li>Registry pattern maps logical roles to physical addresses for service discovery.</li> <li>Managing load in the pipeline involves batching efficiently to handle high loads without falling behind reality.</li> <li>Cancellation is crucial in concurrency technology, often overlooked; it can involve stopping processes with reasons and cleaning up resources before stopping.</li> <li>Elixir's process hierarchy allows concurrent execution of builds with custom termination for each process in a tree structure.</li> <li>Observability and metrics are essential for understanding distributed systems.</li> <li>Erlang and Elixir have flexible, in-memory standard libraries that aid debugging multi-process Beam programs.</li> <li>Dealing with side effects before process cancellation requires custom termination, such as cleaning up caches or draining commands.</li> <li>Transactions can be handled by closing sockets or using saga patterns for distributed messaging systems.</li> </ol>"},{"location":"goto_programming_lang/#rust-in-action-tim-mcnamara-richard-feldman-goto-2023","title":"Rust in Action \u2022 Tim McNamara &amp; Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iYJ6bLITZsI</p> <ol> <li>Tim McNamara, author of \"Rust in Action\", shares his background as a Python developer and transition to Rust.</li> <li>The book aims to teach Rust while incorporating concepts from systems programming for people with dynamic or Java backgrounds.</li> <li>Rust offers a different experience compared to languages like C++, with fewer segmentation faults and more developer happiness.</li> <li>\"Rust in Action\" provides extra context on low-level computer concepts while learning Rust.</li> <li>The Rust community is welcoming and interested in preventing people from feeling excluded, making it more accessible for new entrants.</li> <li>Teaching Rust effectively to beginners can be challenging, with strings being one of the hardest concepts due to its unique handling.</li> <li>Lifetime annotations help manage data access validity in Rust programs.</li> <li>The borrow checker ensures every data access is valid and can never be invalidated.</li> <li>Unsafe code in Rust is intentional and used for low-level tasks, but it's essential to understand its purpose.</li> <li>Atomic clocks and network time protocols help synchronize time across distributed systems, with monotonic ordering crucial for logs or messages to be roughly in order.</li> </ol>"},{"location":"goto_programming_lang/#intro-to-the-zig-programming-language-andrew-kelley-goto-2022","title":"Intro to the Zig Programming Language \u2022 Andrew Kelley \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=YXrb-DqsBNU</p> <ol> <li>Zig is a general-purpose programming language and toolchain for creating robust, optimal, and reusable software.</li> <li>The project aims to enhance technology by incrementally improving the commons.</li> <li>Zig CC is a drop-in C++ compiler with better defaults, enabling hermetic builds and undefined behavior sanitizer.</li> <li>Real-world applications are using Zig CC, finding bugs, and fixing them.</li> <li>The project focuses on raising standards of software as a craft through tooling, open source libraries, and student education.</li> <li>Use Zig CC for better defaults, cross compilation, and simplified installation.</li> <li>Leverage the Zig build system to create a unified build process for C/C++ projects.</li> <li>Write components in Zig for improved dependency management across different operating systems.</li> <li>Compiler with Zig build system; Level 2: Exploiting C dependencies in Zig build system; Level 3: Integrating Zig code into projects; Mixing C and Zig code seamlessly.</li> <li>Non-profits vs. for-profit companies; Timeline of a typical VC-backed startup: unsustainable product, tight grip on resources, acquisition or failure.</li> <li>Examples of companies with varying fates: Wikipedia, Google, Fitbit, Progressive Roofing, Rad Game Tools, SQLite.</li> <li>Zig Software Foundation's stable and mission-focused approach.</li> <li>Zig language's versatility in various applications: low-level infrastructure (river Window Manager), high-performance applications, resource-constrained environments, webassembly.</li> <li>Arraylist implementation in Zig is simple and easy to understand; Inline loops allow printing any value without complex code; Hash maps from the standard library provide efficient data storage.</li> <li>Zig language focuses on application understanding, not esoteric rules; Inline loops and reflection for convenience; Hash maps with auto array functionality; Multi-array lists for data oriented design.</li> <li>C integration through demos like a roguelike deck builder.</li> <li>Zig is a CT plus compiler toolchain and build system for simplifying maintenance of existing projects, but can be used without the language.</li> <li>The software foundation aims to improve software engineering craft throughout the industry; Cross compilation and C integration are supported, allowing for easier maintenance of existing projects.</li> <li>Sponsorship is encouraged for those who like what they do.</li> </ol>"},{"location":"goto_programming_lang/#the-perfect-language-bodil-stokke-yow-2017","title":"The Perfect Language \u2022 Bodil Stokke \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=vnv8MGIN7A8</p> <ol> <li>A perfect language doesn't exist as they are designed for specific purposes.</li> <li>Popular programming languages include JavaScript, Rust, and Esperanto based on GitHub metrics.</li> <li>JavaScript features functional aspects and type handling in Rust.</li> <li>Rust emphasizes ownership and borrowing concepts to avoid memory issues.</li> <li>Consider improving existing languages instead of creating new ones.</li> <li>Ideal language should focus on abstraction, simplicity, garbage collection, immutability, higher-order programming, and FFI for interoperability.</li> <li>Scarlet combines functional programming ideas with familiar syntax.</li> <li>Modular 2 aims to make JavaScript programmers more comfortable with Haskell concepts.</li> <li>Design a language that combines the simplicity of JavaScript with the power of functional programming.</li> <li>Focus on tooling, community, and documentation for language adoption.</li> <li>Explore ideas like transpilers, bridging gaps between existing languages, and dependent types.</li> <li>Build a universal package manager for any language to facilitate code sharing.</li> <li>Consider building a language that combines aspects of PureScript and TypeScript or use a subset of JavaScript for server-side development.</li> <li>Explore dependent types in languages like Idris to make them more accessible.</li> <li>Keep learning new programming languages and tools to improve skills.</li> <li>If you find an interesting idea, consider building your own niche language.</li> </ol>"},{"location":"goto_programming_lang/#typescript-vs-kotlinjs-eamonn-boyle-garth-gilmour-goto-2022","title":"TypeScript vs KotlinJS \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=GlU8ZyJNI7Q</p> <ol> <li>Both Typescript and Kotlin are loved by developers, but Kotlin is more versatile.</li> <li>Creating a Kotlin JS project with IntelliJ wizard and using Gradle for build system integration.</li> <li>Documentation provides clear information on library availability in Kotlin JS.</li> <li>Dependencies can be managed through npm or pre-built wrappers.</li> <li>Kotlin JS projects follow a similar structure to JavaScript, with main() and app creation.</li> <li>Kotlin JS uses low-level DOM API for browser rendering.</li> <li>Kotlin.js allows using existing libraries and integrates with Gradle.</li> <li>Typescript is more popular than Kotlin.js, making it easier to reuse JavaScript assets.</li> <li>Kotlin's community is growing but needs to catch up in comparison.</li> <li>Interoperability with JavaScript is possible through wrappers or automatic generation tools like CAT.</li> <li>Kotlin offers escape hatches for working with untyped objects, similar to JavaScript.</li> <li>Typescript has a larger community and better compatibility with JavaScript.</li> <li>Kotlin's new DSL is nicer but needs updated documentation.</li> <li>Typescript has powerful type systems with features like unions and intersections.</li> <li>Kotlin lacks overloads, a feature that allows multiple functions with the same name to accept different arguments.</li> <li>Typescript has powerful type system with features like unions and intersections.</li> <li>Kotlin has suspending functions for asynchronous tasks.</li> <li>Transitioning from JavaScript to Kotlin requires extra work in some cases.</li> <li>JSX is purpose-built for HTML and easier for designers.</li> <li>Suspending functions can be used for lazy evaluation and have various use cases.</li> <li>Both languages are good, but Typescript might be preferred for stable engineering due to its larger community, bug fixes, and documentation.</li> <li>For building on the JavaScript ecosystem, Typescript solves problems that Kotlin doesn't address.</li> <li>Consider other languages like Kotlin for specific use cases outside of web development.</li> <li>Learning JavaScript/TypeScript is inevitable for developers working in web development.</li> <li>If you have no context, write 'no context'.</li> </ol>"},{"location":"goto_programming_lang/#simplifying-systems-with-elixir-sasa-juric-yow-2020","title":"Simplifying Systems with Elixir \u2022 Sasa Juric \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=EDfm2fVS4Bo</p> <ul> <li>Elixir, a programming language with Erlang runtime (BEAM) benefits, offers embedded support for microservices, multi-core capabilities, and concurrency.</li> <li>The Earlangelist is an example of a simple system written in Elixir, organized as independent processes internally but presented as a monolithic project.</li> <li>Erlangelist is another example, a blog site built with Elixir showcasing microservices.</li> <li>Phoenix web framework provides process organization for multi-core capability, vertical scalability, separation of failures and latencies.</li> <li>No need for additional components like nginx, simplifying implementation.</li> <li>A custom lightweight database eliminates external dependencies, while a stats collector handles concurrent requests efficiently.</li> <li>Separation of failures and latencies through independent processes.</li> <li>Periodic jobs are handled by two processes: scheduler and task performer, improving testability compared to third-party components like Cron jobs.</li> <li>Serving HTTPS traffic with Let's Encrypt for added security and privacy.</li> <li>Certifier process handles certificate renewal without additional dependencies or external tools.</li> <li>A dashboard provides insights into the system's usage and state.</li> <li>Tests verify various aspects of the system, including HTTP redirects to HTTPS, endpoint certifications, and other features.</li> <li>Elixir and Erlang provide a simple, monolithic approach to development.</li> <li>Docker simplifies operation by allowing self-contained releases.</li> <li>A programmable API allows for user-friendly interfaces on top of the core functionality.</li> <li>Start with a single language and expand as needed, reducing technical complexity.</li> <li>Utilize databases for proper data persistence.</li> <li>Explore other technologies when necessary.</li> <li>Benefits include reduced complexity, easier testing, and increased confidence in the system.</li> <li>The speaker is a huge fan of Elixir and BEAM languages.</li> </ul>"},{"location":"goto_programming_lang/#streamlining-large-scale-java-development-using-error-prone-sander-mak-goto-2022","title":"Streamlining Large-Scale Java Development Using Error Prone \u2022 Sander Mak \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=C5MBsKZHqrY</p> <ol> <li>Error Prone is an open-source tool by Google, automating Java code improvements through a compiler plugin.</li> <li>Supports various Java versions and offers built-in checks for uniformity and development process improvement.</li> <li>Demonstrated with examples of unused methods and incorrect exception handling.</li> <li>Customizable via enabling/disabling specific checks or suppressing warnings.</li> <li>Can use the far check feature to assume local variables and parameters as final, requiring explicit annotations for mutable ones.</li> <li>Error Prone can be customized by creating your own book Checker implementations to find specific patterns in code.</li> <li>Auto Service from Google simplifies making classes service loadable, used by Error Prone.</li> <li>Refactor is a solution that expresses patterns in concrete Java syntax for ErrorProne to rewrite automatically.</li> <li>Create refaster templates with before and after templates for matching and rewriting code.</li> <li>Use ErrorProne to apply generated rules to the code base, making it easier to migrate between APIs or libraries.</li> </ol>"},{"location":"goto_programming_lang/#interview-with-louis-pilfold-on-elixir-gleam-yow-2022","title":"Interview with Louis Pilfold on Elixir Gleam \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=kDfa7AVeugw</p> <ol> <li>Gleam is a new functional programming language that combines strengths of Beam and typed functional languages.</li> <li>It offers features like actor model for concurrency, type system, and editor tooling.</li> <li>Inspired by Rust, Go, and Elixir, the goal is to make Gleam accessible for businesses and various applications.</li> <li>Gleam's syntax draws inspiration from Rust and Go, focusing on simplicity with a small set of useful features and an easy learning curve.</li> <li>The weirdness budget concept helps in designing language features.</li> <li>Gleam aims to be used by businesses for diverse tasks.</li> <li>No plans for traits or ad hoc polymorphism due to readability concerns.</li> <li>Gleam is compatible with other Beam languages, ensuring interoperability and access to existing libraries.</li> <li>JavaScript compatibility is slightly more challenging due to differences between both languages.</li> <li>Compiled code maintains human-readable appearance in Erlang and JavaScript runtimes.</li> <li>Gloom is a language that uses immutable data structures and doesn't mutate, with its own mutable list library for use with JavaScript.</li> <li>Gleam's standard library is modular, allowing users to choose which version they want.</li> <li>The latest release focuses on implementing the Language Server Protocol for IDE integration.</li> <li>Future releases will add auto completion, type-directed refactorings, and more features.</li> <li>Community growth is essential, with plans to improve the onboarding process, make it easier to try Gleam in a browser, and foster a welcoming environment through a Discord server for discussion and community.</li> </ol>"},{"location":"goto_programming_lang/#full-stack-haskell-from-prototype-to-production-ryan-trinkle-yow-2018","title":"Full-Stack Haskell: From Prototype to Production \u2022 Ryan Trinkle \u2022 YOW! 2018","text":"<p>URL: https://www.youtube.com/watch?v=guhrVxY63tg</p> <ol> <li>Speaker shares experience of using functional programming in a full stack web and mobile app development company.</li> <li>Benefits include improved focus, collaboration, reduced latency, and fun work environment.</li> <li>Functional programming is better at full stack development due to its strong typing and pure functions.</li> <li>Code reusability increases as Haskell forces explicit dependency declaration.</li> <li>Contributing fixes upstream became a habit for the speaker's company, making it easier to maintain dependencies.</li> <li>Haskell makes code more reusable, allowing for different compilation methods.</li> <li>Contributing fixes upstream is easier with functional programming and strong typing.</li> <li>NYX provides a consistent development environment for packages.</li> <li>Fixing bugs upstream saves money and improves teamwork.</li> <li>Obsidian doesn't believe in prototypes, preferring refactoring instead.</li> <li>Haskell's compiler feedback makes writing code easier and more predictable.</li> <li>Avoid prototyping and focus on refactoring, as Haskell code can be easily improved.</li> <li>Recognize the cost-benefit of perfectionism in Haskell, knowing when to stop proving things with types.</li> <li>Use end-to-end solutions instead of breaking down projects into components.</li> <li>Be cautious about using new language extensions and libraries, as they can have a high cognitive overhead.</li> <li>Remember that great software can be built without advanced features like type classes or Singletons.</li> <li>Refactoring is important but can be challenging with new language extensions and libraries.</li> <li>Obelisk helps build a sensible default for web and mobile app development, making it easier to learn and work in the ecosystem.</li> <li>It provides tools for setting up projects, development, and deployment.</li> <li>Demo shows how to use Obelisk to create a simple website and deploy it to production.</li> <li>Plans for improving documentation, support for ghcjs 8.2 and 8.4, and community contributions.</li> <li>Recognition of the Haskell ecosystem's impact on software development.</li> <li>Aiming to move from prototype mentality to production mentality in Haskell.</li> </ol>"},{"location":"goto_programming_lang/#building-your-own-compiler-the-slightly-easier-way-with-llvm-erik-corry-yow-2016","title":"Building Your Own Compiler The Slightly Easier Way With LLVM \u2022 Erik Corry \u2022 YOW! 2016","text":"<p>URL: https://www.youtube.com/watch?v=_XbOTRunqHk</p> <ol> <li>Speaker discusses creating a language and mentions LVM, an open source compiler framework.</li> <li>Demonstrates building a simple regular expression parser in a new language.</li> <li>Explains the need for data structures to represent abstract syntax trees (AST) in regular expressions.</li> <li>Introduces classes for literal characters, alternatives, disjunctions, and empty alternatives as AST nodes.</li> <li>Shares the importance of passing up the AST to the compiler.</li> <li>Design a recursive descent parser for a simple regular expression language.</li> <li>Create an AST class and data structures for the abstract syntax tree.</li> <li>Use graphviz to visualize the tree by adding unique names for each node.</li> <li>Add dump methods to every class to print ASCII representation of nodes.</li> <li>Include test string methods for regular expressions.</li> <li>Create a makefile with commands to run the program and generate output.</li> <li>Upside down jokes and tree visualization: AST node naming convention (F0, F1), dumping nodes into ASCII file for printing, using visitor pattern for recursive dumping, generating C code with llvm to represent AST nodes, optimizing generated functions using llvm, abstract class and methods for matching input characters.</li> <li>Generated a regular expression parser in C++ using LLVM.</li> <li>Created a driver to test the parser on input lines.</li> <li>Compiled the code into an executable named 'grit'.</li> <li>Tested the program with a sample input, showing efficiency and performance.</li> <li>Generating llvm intermediate code from Dart.</li> <li>Compiling down to assembler using clang.</li> <li>Efficient regular expression language.</li> <li>Comparing grep performance with the generated code.</li> <li>Inlining optimizations in llvm.</li> <li>Code quality of LVM is good, but Dragon book may not be suitable for compiler study.</li> </ol>"},{"location":"goto_programming_lang/#idioms-for-building-fault-tolerant-applications-with-elixir-jose-valim-yow-2021","title":"Idioms for Building Fault-tolerant Applications with Elixir \u2022 Jos\u00e9 Valim \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=mkGq1WoEvI4</p> <ol> <li>Elixir, a functional programming language, combines functional principles with the Erlang VM (BEAM) for efficient distributed applications.</li> <li>Functional programming helps by making state explicit and immutable, improving code clarity and reducing issues with concurrency.</li> <li>BEAM was designed to solve specific use cases like telecommunication systems, enabling high concurrency.</li> <li>Elixir uses lightweight processes that are isolated by default for efficient concurrent applications.</li> <li>Processes communicate through message passing, ensuring fault tolerance as failure in one process doesn't affect others.</li> <li>Phoenix is an Elixir web framework built on these principles, using processes and supervision trees to manage applications.</li> <li>Elixir's accessibility allows libraries like Acto for database interaction and NX for numerical computing on GPUs.</li> <li>Focus on productivity through first-class documentation, tooling, and community support.</li> <li>Hex package manager provides access to various libraries and frameworks like Phoenix for web applications and Nerves for embedded software.</li> <li>Pinterest case study: reduced servers by 95%, improved performance and reliability, saving $2 million annually in server costs.</li> </ol>"},{"location":"goto_programming_lang/#a-tour-of-the-modern-java-platform-james-ward-ryan-knight-goto-2022","title":"A Tour of the Modern Java Platform \u2022 James Ward &amp; Ryan Knight \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=BU_zIpQI5Dg</p> <ol> <li>Modern Java includes features like algebraic data types, product types (represented by records), and sum types with sealed interfaces for improved type safety and handling complexity.</li> <li>Testing for records in Java 17 is discussed as an improvement.</li> <li>Algebraic data types (ADTs) and sum types are introduced with sealed interfaces, enabling exhaustive pattern matching.</li> <li>Kotlin handles null values better with explicit nullability and forcing developers to handle null cases.</li> <li>Option types in Scala and Kotlin provide some (value exists) or none (no value).</li> <li>Test containers automatically manage service dependencies for different services like PostgreSQL, providing consistency across environments.</li> <li>R2DBC and Spring support non-blocking database connections with reactive databases like PostgreSQL.</li> <li>Kotlin co-routines allow efficient resource usage by avoiding thread blocking.</li> <li>Reactor Crud repository provides a reactive interface to non-blocking database access.</li> <li>Test containers can be used for local development and integration testing, ensuring consistency across environments.</li> <li>Spring Boot uses build packs to containerize applications for easy deployment on platforms like Kubernetes.</li> <li>Container images are created with layers for operating system, JVM, dependencies, and application.</li> <li>Cloud Native Build Packs can be used to turn any Java application into a container image.</li> <li>Docker is used to run the application and check its performance.</li> <li>GraalVM native image allows ahead of time compilation, reducing memory usage and startup times.</li> <li>Spring Native addresses challenges with reflection in AOT compiling.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-f-50-beyond-don-syme-yow-2021","title":"What\u2019s New in F# 5.0 &amp; Beyond \u2022 Don Syme \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=1cqvmiaj6SI</p> <ol> <li>F# is a functional programming language designed for the .NET ecosystem, bringing benefits to both object-oriented and functional communities.</li> <li>The history of programming languages includes the object-oriented tidal wave, impacting Microsoft and functional programming communities.</li> <li>Reactions to this wave include developing object calculi, integrating functional features into OOP languages, and creating multi-language runtimes.</li> <li>F#'s core remains consistent throughout its evolution, focusing on functional programming experiences for the .NET ecosystem.</li> <li>Object-oriented programming (OOP) has influenced the industry with languages like C++ and Java, while functional programming led to languages like F#, Scala, and C# incorporating functional features.</li> <li>F# is an open source, cross-platform language suitable for JavaScript development using tools like Fable. It offers high performance due to its integration with ASP.NET Core.</li> <li>Functional programming has become more practical, interoperable, reusable, and tooled over time.</li> <li>F# is available on Linux as an open source, cross-platform tool chain with a functional first approach, high performance, and interoperability.</li> <li>Fable allows using F# in the Node.js ecosystem. Functional programming leads to safer languages like F#.</li> <li>The language design process is open for contributions from various communities.</li> <li>F# 4.1 introduced unboxed tuples, records, and union types for better performance. F# 5.0 added span of T, a low-level feature for high-performance code. Tooling updates focused on improving async debugging.</li> <li>F# 4.6 improved record types with anonymous support, while F# 4.7 enhanced computational expressions and syntax for whitespace.</li> <li>F# history focuses on functional programming, interoperability, and performance, combining static typing, succinctness, scalability, explorative libraries, and efficiency.</li> <li>Domain modeling in F# is relevant to areas like theorem proving, with a focus on domain data structures and metalanguage for programming over them.</li> <li>The F# Advent calendar showcases various uses of the language. Functional programming is relevant to user interface development, especially with languages like Elm.</li> <li>Not all functional code is good; Curry and uncurrying can lead to confusing code. Focus on writing clear, debuggable code instead of using advanced functional features.</li> <li>Embrace object programming over full object orientation in F#. Introduce computation expressions for powerful and intuitive code. Prioritize clear, readable, and practical functional code. Learn from the Udemy course to learn F# effectively.</li> </ol>"},{"location":"goto_programming_lang/#spring-boot-up-running-mark-heckler-thomas-vitale-goto-2022","title":"Spring Boot: Up &amp; Running \u2022 Mark Heckler &amp; Thomas Vitale \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=F0BJiE2LnpQ</p> <ol> <li>Mark Heckler, a Principal Engineer at Microsoft, shares his passion for aviation and its relation to software development.</li> <li>The importance of trusting software in critical domains like aviation is discussed, emphasizing the need for reliable and resilient data, hardware, and software.</li> <li>Mark wrote \"Spring Boot: Up and Running,\" a book covering Spring Boot fundamentals and best practices. It serves as a comprehensive guide for developers learning about the framework while also being a reference for experienced users.</li> <li>The challenges of writing a technical book are mentioned, including balancing workload and perspective.</li> <li>Spring Boot is considered a game changer in the Java ecosystem by simplifying development and focusing on business logic.</li> <li>Mark's experience with Spring Boot highlights the importance of perspective when evaluating code and features.</li> <li>Spring Boot was a game changer for developers, allowing them to focus on business logic instead of infrastructure.</li> <li>The transition from Java EE to Spring can be disconcerting initially due to reduced boilerplate code.</li> <li>Spring framework and Spring Boot provide opinionated ways of doing things while still being flexible.</li> <li>Learning about Spring Boot's features, such as dependency management, auto-configuration, and data integration, helps newcomers understand how it works.</li> <li>Technology is the foundation of Spring, a rigorous framework. The book focuses on Spring Boot fundamentals and data integration with various databases.</li> <li>Aviation domain is used for live data examples in the book. Reactive programming is covered, allowing developers to build scalable, resilient, and cost-efficient applications using the same programming model as imperative.</li> <li>Benefits of reactive programming are discussed, including its potential to be more natural for some developers.</li> <li>Spring security is another important topic covered in the book, focusing on abstractions used by the framework. It covers forms-based authentication, OpenID, OAuth2, and authorization concepts.</li> <li>The importance of understanding nonfunctional requirements like security is emphasized.</li> <li>Spring Boot simplifies building production-ready applications with embedded servers and executable standalone Java apps. Native compilation is an important part of the story but not all workloads will go native.</li> <li>Spring Boot offers various deployment options, including executable JARs, container-based applications, and native images in containers. Upgrading to newer versions of Spring framework improves performance even without using native code.</li> <li>Testing is crucial for development life cycle, but balancing testing coverage with the topic being covered can be challenging.</li> <li>Configuration options for Spring Boot applications are discussed. Mark Heckler recommends his book \"Spring Boot: Up and Running\" as a valuable resource for learning about Spring Boot.</li> <li>Twitter is the best way to reach Mark Heckler online. The conference speakers thank each other and look forward to future discussions.</li> </ol>"},{"location":"goto_programming_lang/#the-quick-python-book-naomi-ceder-luciano-ramalho-goto-2022","title":"The Quick Python Book \u2022 Naomi Ceder &amp; Luciano Ramalho \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7CwmUmQjvYg</p> <ol> <li>Naomi Sidder's \"The Quick Python Book\" covers various aspects of data processing and handling, including ETL, FTP servers, APIs, databases, and data science tools like Pandas and Jupyter.</li> <li>The book is a great starting point for learning Python, with many readers finding success in their careers after using it.</li> <li>The third edition includes an extensive case study involving parsing data.</li> <li>Discussions on the use of functions and classes in programming: Functions are basic concepts, while classes are advanced. Overemphasizing classes can be problematic for beginners.</li> <li>Static typing is not covered in depth in some Python books but is an evolving area within the language.</li> <li>The community's diversity makes it difficult to determine the best approach for everyone; static typing may not be essential for all users.</li> <li>For those who don't need static typing, learning other relevant skills could be more beneficial.</li> <li>Python's success is due to its focus on aesthetics, readability, and community, with a diverse library ecosystem similar to CPAN in the past.</li> <li>Syntactic macros (PEP 638) are an idea that allows easier experimentation with language features without rewriting code; they could be used for implementing new features like sync awaits and match case statements as library keywords instead of deep interpreter changes.</li> </ol>"},{"location":"goto_programming_lang/#growing-together-with-the-beam-stavros-aronis-hans-nahringbauer-code-beam-2022","title":"Growing Together with the BEAM \u2022 Stavros Aronis &amp; Hans Nahringbauer \u2022 Code BEAM 2022","text":"<p>URL: https://www.youtube.com/watch?v=OXlC6f8indM</p> <ol> <li>Telaes is a Nordic contact center solution provider that uses Erlang for its robustness, cost efficiency, and scalability.</li> <li>Ace has over 96,000 users and handles millions of interactions annually with the help of Erlang-based systems.</li> <li>The company has been using Erlang since 1997 and continues to build new solutions on it.</li> <li>Telaes utilizes natural language understanding and other technologies for their solutions.</li> <li>First system created for Destination Gotland with 70 agents, using Alan on Windows Server and now running in the cloud.</li> <li>Convinced sponsors to use Alan due to lower cost and robustness.</li> <li>Rewrote code in 2000, used Angelo for routing calls and managing states.</li> <li>Introduced virtualization with VMware for better redundancy.</li> <li>Created Ace Clusterware for handling web clients and scaling.</li> <li>Adopted JavaScript and Angular for client structure.</li> <li>Clusterware maintains state, synchronizes, and communicates with existing systems.</li> <li>Telia's journey involved building a new recording solution and IVR system using AWS cloud services.</li> <li>Clusterware remains in the middle, handling routing and connecting to telco systems.</li> <li>Telia's cloud migration involves AWS and integrating with Microsoft Teams.</li> <li>There's a movement back to on-premise data centers due to regulatory issues.</li> <li>Telia is building new modules for IVR and recording, using partners like Avasa.</li> <li>Google Cloud AI Platform (CCAI) helps virtual agents solve customer problems.</li> <li>Agent Assist will coach live agents during calls or chats.</li> <li>Insights feature uses interaction analytics to understand conversations.</li> <li>Global uses Google CCAI platform for natural language processing.</li> <li>Virtual agents empowered by the Google CCAI engine help customers solve issues and transfer to live agents if needed.</li> <li>Agent Assist is added to coach or help agents during interactions.</li> <li>Insights feature provides interaction analytics to improve entire companies' workings in real time.</li> <li>Erlang played a crucial role in the success of their cloud service.</li> <li>Global has offices worldwide, with around 250 employees and 80 developers working on development.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-whats-next-for-net-hannes-lowette-martin-thwaites-goto-2022","title":"Expert Talk: What\u2019s Next For .NET? \u2022 Hannes Lowette &amp; Martin Thwaites \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzywu1ol-b8</p> <ol> <li>Over the past two decades, .NET has evolved significantly, with notable changes in compatibility and technology.</li> <li>The transition from .NET 1.1 to 2.0 introduced challenges due to compatibility issues.</li> <li>Documentation improvements have made learning easier for newcomers.</li> <li>WebForms had its challenges but helped bridge the gap between desktop developers and web development.</li> <li>MVC and other frameworks simplified workflows, lowering barriers for smaller applications.</li> <li>.NET Core focuses on performance and web development, with a strong emphasis on cross-platform support.</li> <li>Dependency injection is now a first-class citizen in the ecosystem.</li> <li>Minimal APIs make it easier for new developers while still allowing traditional approaches.</li> <li>The language specification remains unchanged throughout .NET's evolution.</li> <li>Maintaining backward compatibility with older frameworks and technologies like Core WCF is crucial.</li> <li>Focusing on the future, leaving past issues behind, is essential for continued growth.</li> <li>MVC's approach with extensibility and dependency injection benefits developers.</li> <li>WCF was overengineered but still useful due to its powerful tools.</li> <li>Core WCF aims to maintain backward compatibility for those who prefer older technologies.</li> <li>Converting from WCF to gRPC can be challenging, requiring significant codebase changes.</li> <li>.NET Core focuses on making the right thing easier and more accessible.</li> <li>Logging frameworks like ILogger are now standardized, reducing custom solutions' need.</li> <li>Containerization has changed how applications are deployed and monitored.</li> <li>Application Insights offers visibility into production code but requires manual instrumentation for better insights.</li> <li>New Relic and similar tools provide out-of-the-box visibility on performance numbers and metrics without log statements.</li> <li>The DevOps movement has pushed developers to care about their production environment and system outputs.</li> <li>Observability is crucial for understanding system performance and debugging issues in complex distributed systems.</li> <li>Instrumentation can help identify problems by monitoring code execution instead of logging everything.</li> <li>Overengineering may occur due to software complexity, but keeping it simple is recommended.</li> <li>OpenTelemetry could revolutionize how we look at code in production with standardized ways of collecting and analyzing data.</li> <li>The .NET ecosystem's rapid evolution makes it an exciting time for developers.</li> </ol>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2021","title":"Life After Business Objects: Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Q2p_iqjfekI</p> <ol> <li>Object-oriented languages may have insufficient default implementations, causing issues for new developers.</li> <li>Functional programming offers cleaner code and clear intentions, with immutable data structures making concurrency easier.</li> <li>Learning from others' mistakes is crucial for improving code quality; metrics show the importance of considering future developers and readability.</li> <li>Separating data and operations in business objects can solve visibility issues; focus on them as different entities.</li> <li>Real-world examples highlight the need for subjective decisions regarding method placement.</li> <li>Discussions cover handling order processing, organizing classes/data types, and the importance of algebraic data types (ADTs) in functional programming languages like F#.</li> <li>Caution against using optional values in domain models; hybrid approaches combining object-oriented and functional programming are possible, but F# offers a better full functional experience.</li> <li>Consider mutability when choosing a language for specific needs; compare OOP and actor models, highlighting the advantages of the latter.</li> <li>Use types to keep domain models tight, compact, and easy to understand; avoid nulls and options with the principle of making illegal states unrepresentable.</li> <li>Utilize modules for better visibility of operations and avoid exposing unsafe ones; adopt functional programming communication between actor model objects using Akka.net.</li> <li>Observe responsiveness to quick changes, compact code, and strong type checking in F#.</li> <li>Use communication channels to contact the speaker or vote for their session on a conference app.</li> </ol>"},{"location":"goto_programming_lang/#ready-for-rust-erik-doernenburg-goto-2021","title":"Ready for Rust \u2022 Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=WgLlwjZNEtY</p> <ol> <li>Rust is a modern programming language gaining popularity due to its safety and efficiency, attracting interest from companies like Microsoft.</li> <li>Apple, Google, and Mozilla created their own alternatives to C: Swift, Go, and Rust respectively.</li> <li>Companies struggle with writing secure C code due to memory management issues, leading them to consider languages like Rust for its safety and interoperability.</li> <li>Rust's toolchain installation is simple, and cargo is an effective package manager.</li> <li>The language focuses on keeping dependencies small for security and performance.</li> <li>Rust supports multiple editions to target older versions of the language.</li> <li>A genetic programming simulator was used as a real-world example to demonstrate building something in Rust.</li> <li>Rust is ideal for long-lived, large code bases that require a more complex programming language.</li> <li>The language supports object-oriented and functional programming styles.</li> <li>Macros allow extending the language's functionality.</li> <li>Memory management uses automatic reference counting to avoid memory leaks.</li> <li>Passing references to functions avoids ownership issues.</li> <li>Immutable and mutable references are allowed, preventing data races.</li> <li>Dangling pointers are not allowed in Rust.</li> <li>Functions can be passed as parameters for abstraction.</li> <li>Rust's borrow checker ensures data race avoidance and semantic correctness.</li> <li>Parallelism is easier in Rust compared to other languages due to explicit multi-threading and memory management.</li> <li>The language was used to improve performance of a simulation application, achieving 25 million cycles per second with an optimized build.</li> </ol>"},{"location":"goto_programming_lang/#fail-kevlin-henney-goto-2021","title":"#FAIL \u2022 Kevlin Henney \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Lc13xKEJZTc</p> <ul> <li>Software development involves time travel, allowing undoing actions and exploring different timelines.</li> <li>Facebook's use of user feedback led to political interference.</li> <li>C library's time function can cause systems to default to January 1st, 1970, due to generating value zero.</li> <li>Nan (not a number) is a feature of IEEE 754 from the '80s; it can be generated by various languages.</li> <li>Prototype code vs production-ready code: When to consider it ready for use.</li> <li>Failure of state modeling in software development.</li> <li>Defect-driven testing (DDT) helps fix bugs and increase traceability.</li> <li>Importance of understanding and learning from past successes in software development.</li> <li>Testing is crucial for preventing failures, even if not detecting everything in advance.</li> <li>DDT helps increase knowledge and traceability.</li> <li>Validate data and check it as it comes in to avoid issues like buffer overruns.</li> <li>Keep code simple for correctness; focus on attention management during development.</li> <li>Importance of clear code and attention management in programming.</li> <li>Binary search algorithm issue discovered in 2006, present since 1983.</li> <li>Muffet's law: Correcting others' work often leads to errors.</li> <li>Avoid being too clever with code; let the compiler optimize.</li> <li>Humility is key when writing code.</li> <li>Understand the context of your code and how it interacts with other systems.</li> <li>Collective intelligence is crucial for software development.</li> <li>Consider safety critical aspects when designing systems.</li> <li>Review code from different perspectives and learn from past failures.</li> <li>1996 Ariane 5 launch failure due to hardcoded values in code.</li> <li>Code reuse from Ariane 4 led to dead code in Ariane 5, causing issues.</li> <li>Assumptions are crucial but difficult to identify until contradicted.</li> <li>Dead code can lead to significant losses.</li> <li>Configuration errors can be latent and go undetected for long periods.</li> <li>Configuration is often considered separate from source code, but it's part of the system.</li> <li>Flight control system issue due to incorrect settings for mission originating from a new launch site.</li> <li>Configuration errors are often not detected until late, and people tend to downplay their significance.</li> <li>Spreadsheets can be considered functional programming systems with issues in type systems that invite errors.</li> <li>Excel now supports Turing completeness with lambda functions.</li> <li>Gene name conversions in scientific literature have caused problems due to automatic conversion by excel.</li> <li>Earth's temperature averages are defined using the arithmetic mean, and choosing different methods can lead to varying results.</li> <li>Scientific literature has seen issues with gene name conversions in Excel.</li> <li>Errors in Excel can lead to significant changes in scientific practices.</li> <li>Earth's temperature averages are crucial for understanding climate change.</li> <li>A critique of climate deniers showed how incorrect calculations led to misleading results.</li> <li>Spreadsheet errors can have major consequences, such as austerity economics and potential deaths due to health budget cuts.</li> <li>Learning from past mistakes requires conscious effort and acknowledging the importance of practices.</li> </ul>"},{"location":"goto_programming_lang/#expert-talk-grpc-kubernetes-net-mark-rendle-matt-turner-goto-2022","title":"Expert Talk: gRPC, Kubernetes &amp; .NET \u2022 Mark Rendle &amp; Matt Turner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzqzLSJWo3k</p> <ol> <li>Matt shares his recent experience at QCon, focusing on API gateways, service meshes, and shift left tooling for API development.</li> <li>The importance of defining APIs upfront is discussed, along with tools like Swashbuckle and Nswag for generating documentation and client libraries.</li> <li>Matt highlights gRPC as a powerful option in .NET, offering fast implementation and virtual method overriding features.</li> <li>Challenges of load balancing in HTTPClient are mentioned, with potential improvements in future versions of .NET.</li> <li>gRPC implementation in C# offers a base class for service inheritance and virtual methods.</li> <li>Service mesh like Istio provides additional features but can be complicated to set up; Linkerd is more opinionated and easier for most cases.</li> <li>gRPC combines transport, encoding, and HTTP 2 multiplexing with generated stubs for messaging.</li> <li>API built on top of gRPC can be RPC or REST/CRUD style.</li> <li>Discussed the benefits of gRPC, Istio, and Linkerd, along with monitoring and observability tools like Open Telemetry.</li> <li>Tracing is highlighted for visibility into network calls and application performance.</li> <li>The evolution of computing technology from mainframes to cloud services is discussed, including platforms like Kubernetes.</li> <li>Terraform's declarative approach is praised, while Pulumi's logic-based API calls are criticized. Crossplane is introduced as a potential solution for managing cloud resources with reconciliation loops.</li> <li>PolyScale is described as a startup providing cloud database services as a proxy/cache in front of databases to reduce load and improve performance.</li> <li>Kubernetes' evolution from mainframe scheduling systems is mentioned, offering distributed computing capabilities.</li> <li>Different implementations of Kubernetes are discussed, including micro k8s, k3s, k0s, minikube, OpenShift, etc., all based on the same code and API standard.</li> <li>The complexity of Kubernetes can be challenging for some users but provides a wide range of possibilities for various applications.</li> <li>Updating software in a cluster is addressed, with Kubernetes handling complexity well. Smaller distributions like CoreOS or Flatcar are mentioned as alternatives for rolling updates.</li> <li>Microsoft's implementation of gRPC in .NET 7 allows browsers to talk to gRPC services.</li> <li>Discussion on middleware standards in .NET and how it evolved over time, along with comparisons of different languages like Kotlin and Rust.</li> <li>Challenges with Rust's lifetime feature are mentioned. Appreciation for modern compilers providing more helpful error messages is expressed.</li> <li>Discussions on coding standards, syntax highlighting, and IDEs are touched upon.</li> <li>Comparison of different programming languages and their evolution is addressed.</li> <li>DOS's abort, retry, ignore, and cancel options are mentioned.</li> <li>A new comedy project on programming's greatest mistakes is introduced.</li> </ol>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ol> <li>The speaker's journey in web development over the years has seen the emergence of frameworks like Angular 1 and React.</li> <li>A personal blog example highlights the importance of performance, with a high Lighthouse score but slow page load time.</li> <li>Mistakes made by the speaker include shipping too many JavaScript files, large index HTML file, and not considering lazy loading.</li> <li>Lighthouse performance score is calculated based on speed index, accessibility, SEO, and best practices.</li> <li>Optimizing websites for better user experience and search engine ranking is crucial.</li> <li>JavaScript's importance to Google lies in its impact on user experience and website speed.</li> <li>Aim for a simple, pure approach in web development for better performance.</li> <li>Universal Javascript apps can be optimized through code splitting and lazy loading.</li> <li>Static site generators like 11ty help create websites with high Lighthouse scores.</li> <li>Focus on user benefits rather than adding unnecessary features to a website.</li> <li>Complex universal JavaScript apps for content sites can slow down user experience.</li> <li>Progressive enhancement ensures basic functionality works without JavaScript.</li> <li>React's redesign and rebuild may not significantly improve user experience.</li> <li>Sending more data for the same experience can harm user experience in regions with limited mobile contracts.</li> <li>A website called \"What does my site cost?\" shows how much loading a specific site costs in different parts of the world.</li> <li>Excessive JavaScript usage can harm user experience.</li> <li>Gmail is an example of a site with high JS usage but good experience.</li> <li>Client-side navigation breaks accessibility for assistive technology.</li> <li>New proposals like document transition aim to improve the situation.</li> <li>Astro and Svelte are frameworks that focus on reducing JavaScript usage.</li> <li>React teams are working on improving server-side components.</li> <li>A great site should just work, focusing on HTML, CSS, and JavaScript foundations.</li> <li>Challenges of modern web development include complexity, accessibility, security, and simplicity.</li> <li>Understanding HTML basics and avoiding unnecessary frameworks is crucial.</li> <li>Use tools like Netlify, Vercel, and serverless functions to simplify development.</li> <li>Focus on building sites that just work rather than worrying about the technology powering them.</li> <li>There's a divide between front-end developers who focus on JavaScript frameworks and those who prioritize UX and CSS architecture.</li> <li>Developers should consider the trade-offs of technology choices before using them.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-native-vs-cross-platform-sebastiano-poggi-carl-gustaf-harroch-goto-2022","title":"Expert Talk: Native vs Cross-Platform \u2022 Sebastiano Poggi &amp; Carl-Gustaf Harroch \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=cNXDpl-rfrM</p> <ol> <li>Choosing between native or cross-platform apps depends on factors like product needs, company capabilities, and organizational structure.</li> <li>Native apps may be better for complex features tied to specific platforms, while cross-platform frameworks can save time and resources.</li> <li>Organizational dysfunction can lead to problems in mobile app development, such as misaligned priorities between tech and product teams.</li> <li>Back-end APIs might not consider mobile app needs, leading to issues like lack of offline support or inefficient data usage.</li> <li>Mobile apps are proactive and event-driven, requiring different API design compared to web applications.</li> <li>Collaboration between teams from the start is crucial to avoid mismatched expectations.</li> <li>Vertical teams that work closely together can help prevent issues caused by disconnected teams.</li> <li>Different approaches to team structure have been tried, with varying success.</li> <li>Vertical teams that work closely together can be more effective than separate back-end and front-end teams.</li> <li>Communication is key for successful collaboration between different teams.</li> <li>Cross-functional teams may not always work well due to individual preferences and skillsets.</li> <li>Microservices can help create structure within cross-functional teams, but they can also lead to fragmentation over time.</li> <li>Teams working together on Android and iOS platforms are possible with constructive collaboration and shared goals.</li> <li>Business models can complicate matters when revenue is involved, as each platform may have different performance metrics.</li> <li>Discussing the challenges of native app development between iOS and Android platforms.</li> <li>Importance of understanding target audience for each platform.</li> <li>Suggestions to improve collaboration include code reviews, shared language, and cross-platform thinking.</li> <li>Cross-platform frameworks allow a single team to target both platforms using a single language and build tools.</li> <li>Flutter is an example of a successful cross-platform framework, with growing usage in the mobile industry.</li> <li>React Native and Xamarin are also mentioned but have different communities and focuses.</li> <li>Declarative UIs are becoming a big trend in native mobile development.</li> <li>Kotlin and Swift UI may bring Android and iOS closer in terms of UI development.</li> <li>It's unlikely for Google to adopt Swift or Apple to adopt Kotlin, but their mindsets could become more similar.</li> </ol>"},{"location":"goto_programming_lang/#programming-language-stereotypes-pj-hagerty-goto-2021","title":"Programming Language Stereotypes \u2022 PJ Hagerty \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3o_nCe67wA4</p> <ul> <li>Misconceptions about programming languages and identities.</li> <li>Ruby is beautiful, not synonymous with Rails; it's used by big companies like Netflix, Zendesk, IBM, etc.</li> <li>Perception of open source developers as building trivial apps.</li> <li>Ruby on Rails is a framework, not the language itself.</li> <li>PHP powers about 70% of the internet despite misconceptions around its speed and security.</li> <li>Java remains popular despite being considered dead by some young developers.</li> <li>Python has uses beyond academia and analytics.</li> <li>Linux has commercial applications and is enterprise ready.</li> <li>Pearl's perception of being dead might be due to lack of updates, but it still exists with version 6 released in 2014.</li> <li>Don't limit yourself to one programming language; explore various options.</li> <li>Importance of communities in tech industry: break out of silos, learn from others, attend meetups, conferences, and online events outside your usual community.</li> <li>Understand other developers' needs and incorporate their ideas into your work.</li> <li>Build a greater tech community through collaboration.</li> <li>Importance of cross-pollination between different tech communities: open source and enterprise developers can learn from each other.</li> <li>Recognize and eliminate biases to improve collaboration.</li> <li>Focus on teaching, mentoring, and sharing knowledge with others.</li> <li>Encourage diversity in hiring and team building.</li> <li>Discusses the use of unrealistic job titles like \"rock star wizard ninja\": focus on work, not myths or legends.</li> <li>Mentor people from diverse backgrounds to improve diversity.</li> <li>Inclusion of diverse perspectives leads to better products and a more inclusive workplace.</li> </ul>"},{"location":"goto_programming_lang/#expert-talk-functional-programming-russ-olsen-christian-romney-goto-2022","title":"Expert Talk: Functional Programming \u2022 Russ Olsen &amp; Christian Romney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=AbCWHZljhkM</p> <ol> <li>Functional programming is a different approach to building programs, making them simpler and easier to understand.</li> <li>Pure functions are the foundation of functional programming; they don't have side effects or depend on external state.</li> <li>The goal is to minimize side effects in a program while achieving desired results.</li> <li>Misconceptions about functional programming include it being overly complex and requiring extensive study before understanding.</li> <li>Functional programming is about producing side effects but using them as little as possible.</li> <li>Misconceptions include the idea that functional programming is complex and requires deep understanding of terminologies from mathematics.</li> <li>To understand functional programming, you only need pure functions, immutable data structures, and efficient ways to handle these concepts.</li> <li>Category theory isn't necessary for understanding functional programming; it may be more relevant in languages with strong typing.</li> <li>The speaker started as a mechanical engineer but found programming more enjoyable and began exploring how programming languages work.</li> <li>Transitioning from object-oriented to functional programming can be liberating, simplifying the process.</li> <li>A disastrous project example: Rewriting a C++ program into a functional style could have made it easier to understand and work with.</li> <li>Functional programming helps avoid getting lost in tools and infrastructure of programs.</li> <li>Functional programming can help avoid certain bugs and simplify code changes.</li> <li>Immutable data structures and pure functions make code more predictable.</li> <li>For new functional programmers, start with a familiar problem and learn by solving it in a functional way.</li> <li>Find an interesting, medium-sized problem and write a functional program to solve it.</li> <li>Understand the details of the problem and focus on solving it in a different way.</li> <li>Learning a new programming style helps in understanding a new language.</li> </ol>"},{"location":"goto_programming_lang/#live-coding-a-dashboard-with-ksql-python-javascript-kris-jenkins-goto-2021","title":"Live-Coding a Dashboard with KSQL, Python &amp; JavaScript \u2022 Kris Jenkins \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=8bPDiuJGGh0</p> <ol> <li>The speaker is building a live dashboard for streaming sales data using various technologies.</li> <li>He connects to a Kafka database, which acts as an event stream and can be summarized into a static table.</li> <li>A one-row summary table is created from the Kafka database, showing real-time updates.</li> <li>The speaker writes a Python websocket server to connect to the Kafka database and stream data.</li> <li>He uses packages like websockets, simplejson, and confluent kafka drivers for development.</li> <li>The speaker plans to expand the connection handler function to handle more complex tasks.</li> <li>Key features include creating a Python websocket server using the websockets library, connecting to Kafka database, handling different message types, configuring consumer settings, deserializing data with schema registry, and broadcasting updates to clients.</li> <li>The speaker also addresses issues like race conditions, connection messages, and frontend development.</li> <li>He connects the web app to the websocket server, parses JSON data for display on the dashboard, and emphasizes the importance of quick internal tools for easy data access.</li> <li>Suggestions include considering Kafka for real-time data streaming in systems.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>Lars introduces Stefan and Kevlin, who discuss the current state of web development.</li> <li>Stefan highlights the increase in complexity and performance issues due to JavaScript dominance.</li> <li>Google's Lighthouse is pushing for better performance, leading to a potential shift towards simpler solutions.</li> <li>Kevlin emphasizes understanding dependencies and their consequences on security, performance, and software agility.</li> <li>Complexity in software development leads to issues like performance, security vulnerabilities, and reduced agility.</li> <li>Dependency management is crucial, but responsibility lies with everyone involved: developers, tool vendors, site providers, etc.</li> <li>Cultural shifts within companies can help improve practices such as reducing dependencies, updating them regularly, and prioritizing good user experiences.</li> <li>Numbers and data are essential for understanding the impact of these issues and driving change.</li> <li>Importance of responsibility in data and software engineering.</li> <li>Need for collective understanding and culture within teams.</li> <li>Learning from past incidents like the Left Pad event.</li> <li>Striving for self-containment and awareness of dependencies.</li> <li>Desire for frameworks to offer simpler solutions for less experienced developers.</li> <li>Maintain simplicity in code and consider trade-offs.</li> <li>Don't always go for the latest technology.</li> <li>Be aware of changing needs over time.</li> <li>Legacy code can be good, but the world around it may change.</li> <li>Slow down and evaluate decisions carefully.</li> <li>Importance of slowing down and being aware when making decisions.</li> <li>Trade-offs change over time, what was good before may not be now.</li> <li>Awareness is key to understanding the context and relevancy of decisions.</li> <li>Responsibility comes with adopting dependencies in code.</li> <li>Balancing between duplication and dependency avoidance.</li> <li>JavaScript ecosystem has evolved rapidly, leading to duplication and reinventing patterns.</li> <li>People tend to copy code from others when learning, which can lead to duplication.</li> <li>Tooling can help with awareness and identifying duplicate code.</li> <li>Communication and group intelligence are crucial for addressing duplication issues.</li> <li>There's no one-size-fits-all solution; it depends on the context and team dynamics.</li> <li>Duplication is not always bad; it can help identify patterns and abstractions.</li> <li>Tools should extend human capabilities, not define the way of working.</li> <li>Learning from observations and iterations is crucial for understanding code.</li> <li>Keep an eye on potential issues without making premature decisions.</li> </ol>"},{"location":"goto_programming_lang/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>Ideal programming languages depend on the problem domain.</li> <li>Richard and Erik prefer functional programming, but appreciate the benefits of object-oriented programming.</li> <li>They value ergonomic type systems with helpful error messages, automatic memory management, and languages that allow both functional and object-oriented programming.</li> <li>Some people struggle to adapt to new languages due to familiarity with existing patterns.</li> <li>Functional programming can be useful for transforming data between different systems.</li> <li>Humans enjoy classification, but it may not always benefit code productivity.</li> <li>Premature abstraction and overuse of inheritance can lead to inefficiencies.</li> <li>Testability should be considered during language design.</li> <li>Rust's approach to package manager and unit testing integration is an inspiration for other languages.</li> <li>Discussions on language design, focusing on testability and memory management.</li> <li>Rust's package manager and unit testing integration are seen as positive examples.</li> <li>Automatic reference counting (ARC) is considered less appealing than tracing garbage collection due to GC pauses.</li> <li>Compiler time ARC detection in languages like Roc is being explored.</li> <li>Apple's focus on automatic reference counting for Swift, potentially influencing hardware optimization.</li> <li>Cyclical dependencies and their impact on memory management are discussed.</li> <li>Apple's hardware-level optimizations for automatic reference counting could influence other processor makers.</li> <li>Elixir and Erlang have a powerful concurrency model, suitable for distributed systems.</li> <li>SIMD (Single Instruction Multiple Data) is an efficient low-level data parallelism technique used in some languages like SIMD JSON.</li> <li>Rust, Roc, and Zig are upcoming languages with different approaches to solving similar problems.</li> <li>Discussed parallelism, specifically low-level data parallelism on CPUs using SIMD.</li> <li>Zig and Roc languages mentioned as up-and-coming alternatives to Rust for specific niches like game development.</li> <li>WebAssembly's potential impact on web application programming languages is being watched closely.</li> <li>Elm and Roc can compile to WebAssembly, with Roc already doing so.</li> <li>Predictions suggest WebAssembly might mainly affect games in the near future.</li> <li>Discussion on programming languages and web development.</li> <li>WebAssembly is seen as a promising step towards using any language in the browser, but not necessarily improving performance.</li> <li>JavaScript, CoffeeScript, and TypeScript have strong cultural momentum.</li> <li>In-house applications may benefit from WebAssembly and alternative languages like C# (Blazor).</li> <li>Performance is important for web browsers but not the main factor driving change.</li> <li>Large organizations with in-house apps could be more open to new technologies.</li> </ol>"},{"location":"goto_programming_lang/#programming-now-then-eamonn-boyle-garth-gilmour-goto-2021","title":"Programming: Now &amp; Then \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=52jnUWrO9i8</p> <ol> <li>Three old men discuss changes in the industry over time.</li> <li>Access to open source and community editions has allowed self-education at home, making learning more accessible.</li> <li>Work-life balance varies for individuals; some prefer socializing with colleagues while others enjoy working from home.</li> <li>Learning resources were limited in the late '90s compared to today's online tutorials and community editions.</li> <li>Self-education using open source and community editions is seen as a positive change.</li> <li>The transition from physical documentation to online resources has made self-education easier.</li> <li>Companies value capabilities over paper credentials, with certifications still holding some monetary value.</li> <li>Cloud computing may lead to a shift in learning paradigms, potentially requiring on-site training for serverless learning.</li> <li>Product management becomes increasingly important as users expect quality features and interactivity.</li> <li>Energy consumption could influence future programming languages and platforms.</li> <li>Serverless architecture offers scalability and better resource utilization but may lead to less efficient code execution.</li> <li>Discussions about early programming experiences with different machines and their limitations.</li> <li>Comparison of modern programming languages to older ones, highlighting the importance of understanding memory management for efficiency in certain professions.</li> <li>Nostalgia for the past and appreciation for current advancements in technology.</li> <li>Discussions on the evolution of computer science and industry needs.</li> <li>The importance of understanding memory, algorithms, and mathematics in computer science education.</li> <li>The need for segmentation within the IT industry to cater to different subgroups.</li> <li>Comparison between current programming and early computing methods.</li> <li>How each generation faces different challenges and problems.</li> <li>Discussions on how technology has evolved and the impact it has had on different generations.</li> <li>The importance of being grateful for the privileges in the IT industry, while acknowledging the stresses involved.</li> <li>Philosophy's role in IT as people gain more experience and refine their understanding of fundamental principles.</li> </ol>"},{"location":"goto_programming_lang/#erlang-the-hidden-gem-solving-problems-at-scale-for-30-years-francesco-cesarini-goto-2021","title":"Erlang, the Hidden Gem: Solving Problems at Scale for 30+ Years \u2022 Francesco Cesarini \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-m31ag9z4VY</p> <ul> <li>Erlang Solutions' Francesco Cesarini discusses the history and features of Erlang.</li> <li>BEAM virtual machine is highly optimized for large-scale concurrency, featuring a JIT compiler.</li> <li>OTP abstracts from concurrency models, increasing productivity and ensuring resilience by default.</li> <li>Elixir runs on the same VM as Erlang, expanding its reach to more developers.</li> <li>Fault tolerance in OTP is achieved through processes not sharing state or memory, allowing termination of faulty processes without affecting others.</li> <li>The inventor of Erlang aimed to make it accessible for a wider range of programmers, initially focusing on web developers.</li> <li>Attempts to bring Erlang to the web failed due to different requirements and toolings needed for telecom and web development.</li> <li>Akka framework was inspired by OTP but lacks full emulation of BEAM semantics.</li> <li>BEAM runs a scheduler for every core on a machine, ensuring fair distribution of processes across threads and migration between them.</li> <li>Lua framework allowed running Erlang on iPhones but didn't make it into production.</li> <li>Elixir is making its way into embedded spaces like IoT devices and cars due to performance improvements in JIT compiler and numerical capabilities.</li> <li>The original Erlang language evolves very little, with most changes happening around libraries, frameworks, and the BEAM virtual machine.</li> </ul>"},{"location":"goto_programming_lang/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Functional programming is a style that avoids mutation and side effects, focusing on immutability, pure functions, and functional languages.</li> <li>Pure functional languages support only pure functions, which ensure predictable behavior and enable caching techniques like memoization.</li> <li>Performance advantages of functional programming include caching, pre-computing, and parallelization; disadvantages include increased memory usage due to immutability and potential performance issues with recursion.</li> <li>Functional languages focus on immutability, pure functions, and functional programming concepts.</li> <li>Caching strategies include memoization, which is easier to implement with pure functions. Precomputing can be done at build time for known constants or function calls, reducing runtime costs.</li> <li>Parallelization can speed up functional programs but requires thread safety inherent in pure functions.</li> <li>Managed effects offer an alternative to side effects by creating tasks instead of immediately executing actions like promises; this approach improves performance and simplifies code.</li> <li>Pure functional programming offers benefits for development, such as fewer flaky tests due to minimized effects, no need for mocking, and the ability to test effects through simulation.</li> <li>Rearranging code in functional languages is possible without affecting the result. Global mutable variables create implicit dependencies and make debugging difficult; pure functions have explicit dependencies and are easier to debug.</li> <li>Side effects introduce implicit dependencies, increasing search space for bugs. In pure functional programming, explicit dependencies make debugging simpler.</li> <li>Functional programming offers benefits like caching, parallelization, testing, code revision, debugging, and ecosystem advantages. Pure functional languages provide a more reliable experience compared to imperative ones.</li> </ol>"},{"location":"goto_programming_lang/#modernizing-enterprise-java-markus-eisele-natale-vinto-ana-maria-mihalceanu-goto-2021","title":"Modernizing Enterprise Java \u2022 Markus Eisele, Natale Vinto &amp; Ana-Maria Mihalceanu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=tSjCFMSp9oY</p> <ul> <li>Key points for migrating from monolithic to cloud-native applications:</li> <li>Understand business and non-functional requirements.</li> <li>Choose the right approach (refactoring is optimal).</li> <li>Use modern Java frameworks for cloud-native apps.</li> <li>Monolithic apps can still be useful with well-architected designs.</li> <li>Pros and cons of monolithic vs microservices architecture discussed.</li> <li>Kubernetes as a popular operational platform for various workloads, including stateful applications.</li> <li>Importance of understanding how components work together in cloud native environments.</li> <li>\"Concise Cloud Native Guide\" provides practical examples and guidance on migrating Java projects to the cloud.</li> <li>Readers can choose theory or hands-on experience with examples.</li> <li>Book focuses on Java migration, rehosting, re-platforming, or complete rewrite decisions.</li> <li>Challenges in migrating traditional applications include poor architecture, technical limitations, and lack of documentation.</li> <li>Three approaches to modernization: refactoring, lift and shift, and hybrid (split complexity).</li> <li>OSGI framework helps build modular monoliths with loose coupling.</li> <li>Container technology speeds up development and deployment by standardizing application packaging and simplifying infrastructure management.</li> <li>Three approaches for modernizing applications: refactoring, lift and shift in containers, or hybrid approach.</li> <li>Container technology brings standardization and portability to application development and deployment.</li> <li>Challenges in developer productivity with containerized systems.</li> <li>Improving Java productivity through runtime ecosystems like GraalVM for serverless workloads.</li> <li>Building and orchestrating apps in containers is a challenge.</li> <li>The book focuses on being agnostic and open source, improving Java productivity for developers.</li> <li>GraalVM has advantages for serverless workloads.</li> <li>Optimization and frameworks are important for Java development.</li> <li>Containers help with universality and best practices.</li> <li>Quarkus conserves existing knowledge while scaling.</li> <li>The book addresses cloud native concepts, focusing on practical aspects rather than theoretical ones.</li> <li>Authors prefer calling it \"Kubernetes native\" due to its specific execution environment.</li> <li>Book aims to provide practical guidance for Java developers in the new era of technology.</li> <li>Covers various frameworks and technologies while not delving too deeply into each one, offering pointers or links instead.</li> <li>Authors believe their book is a great starting point for modernizing existing applications and adopting Kubernetes native approaches.</li> </ul>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2021","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9p60bBBpG6A</p> <ol> <li>Evan Boyle and Garth Gilmore, both TypeScript and Kotlin enthusiasts, built a WebGL game in Kotlin JS to compare it with a similar project in TypeScript.</li> <li>IntelliJ provides good support for Kotlin JS development, while Gradle serves as the build system for multi-platform compilation.</li> <li>Dependencies can be managed through regular and npm methods.</li> <li>The speakers found Kotlin JS to be a viable alternative to TypeScript in certain situations.</li> <li>Kotlin's Domain Specific Language (KDSL) is more modern than Groovy, while multi-platform allows compiling common code for various platforms.</li> <li>Integrating with JavaScript libraries is easy using Gradle files and external declarations.</li> <li>TypeScript is popular due to its established nature, easy integration with JavaScript, and automatic generation tool (Ducat).</li> <li>Kotlin's popularity has grown quickly but still needs time to catch up with TypeScript.</li> <li>TypeScript is a superset of JavaScript, making it easier to use and interoperable.</li> <li>Kotlin offers good interop with JavaScript through Gradle files and external declaration files.</li> <li>Ducat tool helps in automatic generation for TypeScript declaration files.</li> <li>Kotlin supports dynamic typing (dynamic) and object creation similar to TypeScript.</li> <li>Kotlin's KDSL can be awkward, but it has a lambda with receiver feature for DSL support.</li> <li>Advanced features of TypeScript include union types, intersections, conditional types, generics, map types, and type inference with generics.</li> <li>Suspending functions in Kotlin make it more versatile than JavaScript for asynchronous programming.</li> <li>Kotlin's syntax is generally considered nicer due to its modern design.</li> <li>Destructuring in JavaScript and TypeScript is more flexible than Kotlin's approach.</li> <li>Both languages have their strengths and weaknesses; it depends on the context and preferences of the developer.</li> <li>Jetpack Compose is a game changer as it provides a single DSL for structuring UIs across different platforms (Android, Desktop, Web).</li> </ol>"},{"location":"goto_programming_lang/#how-to-read-complex-code-felienne-hermans-goto-2021","title":"How to Read Complex Code? \u2022 Felienne Hermans \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=az-MX_M11lg</p> <ol> <li>Many people learned programming through self-exploration, which has influenced how they teach children today.</li> <li>Books for kids often focus on the difficulty of programming and fun in making mistakes while overlooking syntax rules. This stereotype is prevalent among professionals who learned programming at a young age.</li> <li>Python's precision can be misleading, as it requires following rules and syntax. Telling children that programming is hard may discourage them from learning.</li> <li>Research shows that kids often learn programming skills but then flatline. Teaching reading code should be emphasized alongside exploration and experimentation.</li> <li>The Advent of Code focuses on writing small programs, which could be more effective for learning new languages. Reading code is crucial as it takes up 60% of programmers' time.</li> <li>Reading code models can apply natural language processing theories to programming. Short-term memory issues and short-term memory overload can cause confusion in code.</li> <li>Improving reading comprehension involves building mental models, learning programming fundamentals, and practicing reading code. Understanding programming languages and their syntax helps with code reading.</li> <li>Techniques for enhancing code reading include flashcards, state tables, reproducing code, summarizing it, and understanding the goal of a program. The \"Programmer's Brain\" book offers more insights into improving code reading skills.</li> <li>Starting a code reading club at work can help colleagues learn together. Benefits include team building, knowledge sharing, and deliberate practice.</li> <li>Resources for learning more: Felienne's website (flinders.com), Twitter (@sfelienne), Software Engineering podcast (se-radio.net). Free resources on code reading clubs are available at felina.com/club.</li> </ol>"},{"location":"goto_programming_lang/#java-security-the-java-ecosystem-nicolas-frankel-goto-2021","title":"Java Security &amp; the Java Ecosystem \u2022 Nicolas Frankel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uVob-4aXbxY</p> <ol> <li>Changing Java class types is no longer possible in recent JDKs, making it harder to manipulate bytecode for malicious purposes.</li> <li>Attaching a JVM to another can be used for both good and bad reasons; the security manager should apply to all dependencies.</li> <li>Auditing source code and building libraries yourself ensures trust in external dependencies. Untrusted code includes any library or dependency used in a project.</li> <li>Managing transitive dependencies is challenging, but restricting them is recommended.</li> <li>Discussion on security issues in the JVM ecosystem focuses on Java, with concerns about Oracle's approach to feedback and community involvement.</li> <li>Deprecation of the security manager in Java 17 raises concerns for companies relying on it.</li> <li>Stability has been a key factor in Java's success, but its current strategy may be causing issues.</li> <li>Concerns about the future of Java and JVM include community involvement decreasing, Java becoming more centralized affecting adoption, stability replaced by faster release cadence, fragmentation due to module system, and possible negative impact on Java adoption.</li> <li>Suggestions for a middle ground between stability and innovation are needed.</li> </ol>"},{"location":"goto_programming_lang/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Accessibility is the practice of designing products for everyone to use, regardless of their abilities.</li> <li>Web accessibility focuses on navigation, auditory, visual, sound, and motor capabilities.</li> <li>It's crucial for legal reasons and human aspects.</li> <li>This talk will focus on writing accessible JavaScript.</li> <li>Importance of accessibility: Understanding how people with disabilities use technology.</li> <li>JavaScript and accessibility: Interacting with content, communicating updates to screen readers, and handling navigation for keyboard users.</li> <li>Methods for accessible JavaScript: Using area hidden property, aria live attribute, and custom elements.</li> <li>Example of handling navigation: Creating focusable elements that can be reached through tabbing on a page.</li> <li>Demonstrate how to handle content updates for screen readers.</li> <li>Create custom elements with proper tab indexes and focus management.</li> <li>Use skip to main content links for better user experience.</li> <li>Ensure interaction with your site is accessible through both mouse and keyboard events.</li> <li>Handle handler events in JavaScript: Ensure equal keyboard and mouse events for custom elements.</li> <li>Testing accessibility: Use tools like lighthouse, wave, chromevox, ally.js, and accessibility checklists.</li> <li>Accessibility resources: Check out articles, presentations, and wai-aria authoring practices.</li> <li>Stay updated on accessibility: Join communities, attend conferences, and follow experts for the latest information.</li> </ol>"},{"location":"goto_programming_lang/#object-oriented-programming-vs-functional-programming-dave-farley-goto-2021","title":"Object Oriented Programming vs Functional Programming \u2022 Dave Farley \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-VADIcicpcg</p> <ul> <li>Programming paradigms have evolved from unstructured languages to structured, object-oriented (OO), and functional programming.</li> <li>Each paradigm imposes specific constraints on programming aspects such as flow control in structured programming or assignment in functional programming.</li> <li>Different paradigms can coexist within a language, with the choice depending on context and personal preference.</li> <li>The value of each paradigm lies in its imposed constraints that help programmers avoid mistakes and write better code.</li> <li>Functional programming offers advantages like abstraction, stability, and provability.</li> <li>Object-oriented programming (OOP) is more aligned with human thinking and easier to understand.</li> <li>Limiting side effects in code is beneficial.</li> <li>The speaker disagrees with Bob Martin about finding all programming paradigms.</li> <li>A new approach called \"reactive\" limits synchronous calls between modules, resulting in higher performance than functional or OOP designs.</li> </ul>"},{"location":"goto_programming_lang/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Explosive velocity in web development involves moving fast and safely with technologies like Next.js, Tailwind CSS, and Typescript.</li> <li>Next.js offers various rendering methods, handles routing, and optimizes code splitting.</li> <li>Tailwind CSS provides atomic classes, auto-completion, and efficient build processes.</li> <li>Typescript compiles ahead of time, offers auto-completion, and protects from errors.</li> <li>Combining these technologies enables fast web development with predictability.</li> <li>Create a project with dependencies for speed across the stack.</li> <li>Initialize tailwind and Next.js to build a simple web page.</li> <li>Transform the page into a basic to-do list app using React.</li> <li>Add input field, button, and handle adding new items.</li> <li>Use React's useState hook to manage state for to-do items.</li> <li>Demonstrate how opinions in frameworks help developers move fast.</li> <li>Create a to-do list app with React, add checkboxes, and manage state using hooks.</li> <li>Utilize Back4App for free backend services.</li> <li>Create a database table for to-do items, query and mutate data from the database.</li> <li>Connect the client to the database.</li> <li>Use GraphQL for efficient data fetching.</li> <li>Added mutation to database, auto-completion helps with parameterized to-do item creation.</li> <li>Fetched to-do items from the database and debugged issues with adding new to-dos.</li> <li>Integrated Tailwind CSS for better UI design.</li> <li>Scalability can be achieved through hosting options like AWS, GCP, and cloud providers.</li> <li>Predictability leads to velocity in development.</li> <li>Utilized tools like Hasura and Heroku for load management.</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-through-the-lens-of-a-philosopher-linguist-anjana-vakil-goto-2021","title":"Functional Programming Through the Lens of a Philosopher &amp; Linguist \u2022 Anjana Vakil \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=0kI-as3K4Zo</p> <ol> <li>Lars and Anjana discuss various topics, including functional programming, linguistics, philosophy, and readable code.</li> <li>Anjana's background in linguistics and philosophy led her to software development through computational linguistics.</li> <li>Programming languages are primarily for human communication with computers; focus on readability and maintainability.</li> <li>Human performance factor is crucial: consider time spent writing, updating, and maintaining code.</li> <li>Adam Tornhill's idea of using Git data to understand social aspects of codebases.</li> <li>Functional programming languages support pure functions, no state changes, and functional programming styles.</li> <li>Multi-paradigm languages can be considered functional if they have features that support functional programming.</li> <li>Pure functional languages constrain you to work in a functional paradigm; multi-paradigm languages allow for different programming styles.</li> <li>Having first-class functions and utilities like mapping and filtering makes functional programming easier.</li> <li>Some developers prefer pure functional languages due to their constraints, while others find it useful to have multiple paradigms in a language.</li> <li>Functional programming offers predictability, making testing and debugging easier.</li> <li>Pure functional languages can help with debugging, testing, maintaining, changing, and refactoring code.</li> <li>Functional programming is beneficial for scaling up systems and improving performance.</li> <li>Learning different paradigms helps appreciate the benefits of one's preferred language.</li> <li>Functional programming has been around since the 1930s but became more practical in recent decades.</li> <li>Gatekeeping in computer science can be a problem, but there's potential for more inclusivity and accessibility.</li> <li>Functional programming has the potential to become even more prevalent in the future.</li> <li>Challenges of understanding programming concepts and how they can be made more accessible.</li> <li>Importance of welcoming new people into the field, regardless of their backgrounds.</li> <li>Examples of functional programming languages: Elixir and Elm.</li> <li>Functional programming community should focus on improving communication and accessibility.</li> <li>Everyone can contribute to making learning easier by helping others understand complex topics.</li> <li>Attend conferences, events, and connect with others in the field.</li> <li>Speaker emphasizes explaining concepts to beginners for better understanding.</li> </ol>"},{"location":"goto_programming_lang/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Phoenix Live View is a real-time web framework built on Elixir, providing efficient communication between server and client via websockets.</li> <li>It sends only changed HTML markup, enabling features like form validation and file uploads in real time.</li> <li>Reusable components with their own state allow for live navigation without unnecessary markup.</li> <li>The framework is built on Elixir and Phoenix, highly recommended for web development.</li> <li>Demonstrated by converting a traditional controller-driven app to a real-time one using Phoenix Live View.</li> <li>In the example, they used Elixir and Phoenix for a real-time stock updates application, focusing on live views for interactive features.</li> <li>LiveView provides real-time updates without page refreshes.</li> <li>The speaker converted a Phoenix app to live view by following steps from readme and using generators for real-time communication.</li> <li>They created a fake database with a publish/subscribe mechanism for updating prices and companies.</li> <li>Subscribed to updates in the socket's connect function, achieving real-time communication between server and client.</li> <li>Added live chat functionality with fallback options for users without JavaScript enabled.</li> <li>Handled submitted comments and updated list of companies in real time.</li> <li>Implemented temporary assigns to handle large amounts of data efficiently.</li> <li>Used pattern matching to handle new comments and update socket connections.</li> <li>Demonstrated real-time chat with high update frequencies, showing the importance of diffing algorithms for efficient updates without reloading entire pages.</li> <li>A book called \"Phoenix in Action\" is mentioned, along with a discount code. Encouraged further exploration of the project's code on GitHub.</li> </ol>"},{"location":"goto_programming_lang/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Svelte is a compiler-based web framework with no dependencies and no virtual DOM.</li> <li>StealthKit extends Svelte, offering features like file-based page routing, rest services, layouts, code splitting, hot module reloading, static pages, tooling setup, and serverless functions.</li> <li>To start a project with StealthKit, run <code>npm init svelt</code> and configure settings.</li> <li>Development mode can be started using <code>npm run dev</code>, while deployment is done via <code>npm build</code>. Code checking and formatting are handled by <code>npm run lint</code>/<code>format</code>.</li> <li>A sample ToDo app demonstrates StealthKit's functionality, showcasing its components and features.</li> <li>Svelte offers unique benefits like compact code without the 'this' keyword, efficient rendering of to-do components, reactive declarations for updates, and built-in animations.</li> <li>State management is achieved through variables and reactive statements, while CSS is scoped by default with clear global placement.</li> <li>Svelte has a small bundle size and fast performance due to its efficient virtual DOM.</li> <li>Component state management can be done using stores for shared data access across components.</li> <li>Pros/cons of using Svelte include its less popular status but easy learning curve, different component splitting approach, and more open source libraries than SvelteKit.</li> <li>Related tools include VS Code extensions, testing libraries, mobile app development with Smelt Native, and resources like Rich Harris' talk on rethinking reactivity.</li> </ol>"},{"location":"goto_programming_lang/#command-line-the-underestimated-tool-bert-jan-schrijver-goto-2021","title":"Command-line, The Underestimated Tool \u2022 Bert Jan Schrijver \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=bWDuXAQJX8Y</p> <ol> <li>Command line tools are simple, powerful, and efficient for tasks like quick data manipulation and automation.</li> <li>Bash is a common shell that interprets commands and can handle built-in commands or external binaries.</li> <li>Utilities such as cut, grep, sed, and awk are useful for basic data manipulation tasks.</li> <li>Automating repetitive tasks saves time and increases productivity.</li> <li>Use standard utilities like cut, grep, sed, awk for cross-platform compatibility.</li> <li>On Windows, use WSL (Windows Subsystem for Linux) to access Linux commands.</li> <li>Improve skills by exploring commands and reading documentation.</li> <li>Command line proficiency can enhance productivity, troubleshooting, and understanding of applications.</li> </ol>"},{"location":"goto_programming_lang/#a-beginners-guide-to-ebpf-programming-with-go-liz-rice-goto-2021","title":"A Beginner's Guide to eBPF Programming with Go \u2022 Liz Rice \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uBqRv8bDroc</p> <ul> <li>EBPF (Extended Berkeley Packet Filter) is a powerful technology that enables running custom programs within the Linux kernel.</li> <li>BPF, originally known as Barclay Packet Filters, is now used interchangeably with ebpf; it involves writing C programs and converting them into bytecode instructions for execution in a bpf virtual machine.</li> <li>Maps facilitate data transfer between user space and the kernel, allowing programs to respond to various events.</li> <li>Events trigger EBPF programs, including system calls, function entries/exits, network packet arrivals, etc., using system calls like perf_event_open and ioctl.</li> <li>A library such as libbpf provides higher-level abstraction for interacting with these system calls, simplifying development.</li> <li>EBPF programs are compiled into object files that can be inserted into the kernel to run alongside other programs.</li> <li>User space code manages loading and attaching programs to events, ensuring they're triggered correctly.</li> </ul>"},{"location":"goto_programming_lang/#from-objective-c-to-swift-and-the-latest-innovations-at-apple-daniel-h-steinberg-goto-2019","title":"From Objective-C to Swift and the Latest Innovations at Apple \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=qynCRtJlV8I</p> <ul> <li>Daniel Steinberg, a key figure in iOS and Swift development, shares his journey.</li> <li>Early iPhone development used Objective-C as its language.</li> <li>Apple transitioned from Objective-C to Swift, responding to community feedback.</li> <li>Recent iOS and Swift updates include ABI Stability, Module Stability, SwiftUI, and Combine frameworks.</li> <li>Apple's swift move from Objective-C to Swift was faster than anticipated.</li> <li>ABI and Module Stability enhance app stability across versions.</li> <li>SwiftUI and Combine change how developers approach building apps.</li> <li>Apple's control over both hardware and software allows for rapid innovation.</li> <li>Indoor mapping is an example of their focus on improving existing technologies.</li> <li>Beacons were used for indoor navigation but had limitations; Apple improves with more precise sensors.</li> <li>Near Field Communication (NFC) enables content sharing without contact.</li> <li>Apple Pay customizes its features for different markets.</li> <li>Steinberg's book focuses on SwiftUI, teaching advanced concepts and differences from UIKit.</li> <li>Future updates will likely strengthen SwiftUI and improve AR and machine learning capabilities.</li> <li>HomeKit ecosystem could benefit from more support from Apple.</li> <li>Package Manager is expected to evolve further with resources and binaries.</li> <li>Steinberg frequently teaches private classes in various European countries.</li> </ul>"},{"location":"goto_programming_lang/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Jamstack is a web development approach focused on static sites, build processes, and deployment to edge servers/CDNs.</li> <li>It evolved from the initial focus on JavaScript, APIs, and markup.</li> <li>Key components include static site generators, CICD process, and deployment to CDN/edge servers.</li> <li>Complexity has increased with tools like serverless functions, incremental static regeneration, and distributed persistent rendering.</li> <li>The goal is to simplify the deployment process while still allowing for complex features locally.</li> <li>Jamstack has evolved from simple static sites to complex ones with features like distributed persistent rendering and incremental static regeneration.</li> <li>Managing complexity is a tradeoff, as some people prefer handling it locally rather than on production servers.</li> <li>As Jamstack gains mainstream adoption, it's becoming more versatile and can handle larger websites and complex use cases.</li> <li>Inline editing tools are emerging to make content management easier for non-technical users.</li> <li>While there were once clear limitations for static sites, they have become increasingly adaptable with the evolution of Jamstack.</li> <li>E-commerce is being supported by Jamstack.</li> <li>User-generated content can be managed using various methods in Jamstack.</li> <li>Favorite static site generators: Eleventy (Node.js) and Hugo (Go).</li> <li>Next.js is used for complex UI interactions.</li> <li>Challenges with framework-based solutions include understanding where variables are created and accessed.</li> <li>Debate within the community about broadening Jamstack definition to focus on edge deployments and tooling.</li> <li>Server-side rendering and pre-built routes will continue evolving.</li> <li>Jamstack could become the default way of building websites in the future.</li> <li>A book on Jamstack is available through Manning Early Access Program, with a physical version expected in fall.</li> </ol>"},{"location":"goto_programming_lang/#graphql-anywhere-our-journey-with-graphql-mesh-schema-stitching-uri-goldshtein-goto-2021","title":"GraphQL Anywhere - Our Journey With GraphQL Mesh &amp; Schema Stitching \u2022 Uri Goldshtein \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=2vwlkJnaV0Y</p> <ol> <li>GraphQL is a query language for data, allowing users to describe the data and its structure.</li> <li>Benefits include better organization of code, automation, and orchestration between teams and data sources.</li> <li>Start with an existing process and automate it when introducing GraphQL into a company.</li> <li>GraphQL is a powerful tool that can automate processes and improve developer experience.</li> <li>It can be used on the client, server, or between services for various benefits.</li> <li>GraphQL Mesh allows querying existing data sources as if they were graphical without requiring changes to those sources.</li> <li>Merging different graphical sources is possible using portal federation or schema stitching.</li> <li>Schema stitching can be a good option, even for those who previously used it and thought it was deprecated, as it provides benefits within the GraphQL ecosystem.</li> <li>GraphQL Mesh can generate gateways or SDKs for distributed execution.</li> <li>The Guild's product, GraphQL Hive, is a powerful registry for managing metadata.</li> <li>People are using GraphQL Hive even without actual GraphQL services due to its ease of use and developer tools.</li> </ol>"},{"location":"goto_programming_lang/#should-kotlin-be-your-go-to-language-garth-gilmour-eamonn-boyle-goto-2019","title":"Should Kotlin Be Your Go-To Language? \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=FcrkrsxYigM</p> <ul> <li>Both speakers have a background in retro computing, transitioning into professional tech careers.</li> <li>They've worked on various platforms like C++, telecoms, desktop applications, and mobile apps. One speaker also pursued philosophy and psychology before becoming a trainer.</li> <li>The journey from criminology to IT training is discussed, highlighting the importance of staying updated with new technologies.</li> <li>Kotlin is mentioned as their favorite programming language due to its expressiveness and modern design.</li> <li>Kotlin's convergence with other languages makes it attractive for developers.</li> <li>The speaker's company chose Kotlin for its simplicity and readability over options like Scala.</li> <li>Understanding hardware architecture is essential, but prioritize readability and maintainability in code writing.</li> <li>Performance testing is crucial to measure efficiency; find a balance between performance and simplicity for most developers.</li> </ul>"},{"location":"goto_programming_lang/#erlang-elixir-blockchain-serverless-what-ulf-wiger-sasa-juric-eric-johnson-goto-2019","title":"Erlang, Elixir, Blockchain &amp; Serverless\u2026 What?! \u2022 Ulf Wiger, Sasa Juric &amp; Eric Johnson \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=2QNA6uaBHY4</p> <ul> <li>GOTO conference with Eric Johnson, Sa\u0161a Juri\u0107, and Ulf Wiger discussing Erlang and Elixir.</li> <li>Erlang history: visible outside Ericsson in '92, Sa\u0161a started using it 10 years ago, Elixir released in 2014.</li> <li>Elixir is an evolution of Erlang with better ergonomics and UX focus.</li> <li>Differences between languages: Elixir more expressive and complex, while Erlang simpler and direct.</li> <li>Elixir attracts web developers seeking scalability, robust servers, and messaging durability.</li> <li>Both Erlang and Elixir are used for building software systems with 15+ languages built on Beam runtime.</li> <li>Erlang is simple and straightforward, while Elixir offers more expressiveness and complexity.</li> <li>Eternity blockchain uses Erlang due to its suitability for specific problems.</li> <li>The best language depends on programmer expertise and language fit for the domain.</li> <li>Erlang and Elixir are good for building rather than executing code in cloud environments.</li> <li>Serverless environments may not be ideal for these languages due to their distributed nature.</li> <li>A custom runtime allows using other languages with serverless environments.</li> <li>Lambda is stateless, while Erlang and Elixir focus on networking between processes.</li> <li>Blockchain's distributed nature fits well with the concurrency semantics of these languages.</li> <li>Custom runtime allows bringing own language, with examples for Elixir and Erlang.</li> <li>Erlang originated from controlling telephone switches but evolved into a general-purpose language.</li> <li>Sumo wrestling analogy: Both languages are lightweight and wouldn't compete due to their different purposes.</li> </ul>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ul> <li>10 years of web development journey</li> <li>Frontend performance best practices</li> <li>Building a personal blog with universal javascript framework</li> <li>Lighthouse scores and website performance comparison</li> <li>Difference in performance due to complexity, optimization, and resource usage</li> <li>Javascript's impact on browser performance: Importance of page speed and user experience</li> <li>Single-threaded browser environment can cause frustration for users</li> <li>Overly optimized websites may not be as fast as they seem, especially on low-end devices</li> <li>Universal Javascript apps might add unnecessary overhead for content sites</li> <li>Consider using tools like 11ty that focus on performance and don't add extra features by default</li> <li>Progressive enhancement is important for ensuring a good user experience regardless of JavaScript availability</li> <li>React documentation example shows that the JavaScript version is heavier without offering more functionality</li> <li>Average website page weight is 2 megabytes, which could be expensive in some countries</li> <li>App frameworks may not always be suitable for content sites</li> <li>Gmail offers a low data version with minimal JavaScript, providing a good user experience even on slow connections</li> <li>The web is complex and heavy, with varying costs across countries</li> <li>Javascript frameworks are popular but not necessarily the best for all scenarios</li> <li>HTML, CSS, and JS should be the foundation of building great sites</li> <li>Misuse of HTML leads to accessibility issues</li> <li>Only 6% of websites use Content Security Policy (CSP) for security</li> <li>The web is losing quality due to complexities in technology choices</li> <li>Web accessibility issues are common due to misuse of HTML</li> <li>Only 6% of websites use Content Security Policy (CSP) for security</li> <li>Vulnerable JavaScript libraries are used in 80% of websites</li> <li>The web is losing quality, but developers have become more productive</li> <li>Serverless functions allow easy API creation with minimal code</li> <li>Complexity in modern tech stacks can be overwhelming for newcomers</li> <li>Fundamentals like HTML, CSS, and JavaScript are essential for good user experiences</li> <li>Consider splitting frontend roles into javascript engineers and UX engineers</li> <li>Focus on delivering a good user experience regardless of the underlying technology</li> <li>Framework choices impact company's bottom line</li> <li>Web developers should focus on building good user experiences</li> <li>Consider using simpler tools and prioritize end-user experience over developer experience</li> <li>In 2020, front-end developers may need to be more versatile, focusing on different aspects of web development</li> <li>Strive for a complete green Lighthouse score and better user experience</li> <li>Use the right technology for each project instead of relying on a specific stack</li> </ul>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2020","title":"Life After Business Objects - Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=UBUYwpDl3-g</p> <ol> <li>The speaker shares their journey as a veteran of object-oriented programming (OOP) and emphasizes the importance of choosing the right programming paradigm based on individual needs and preferences.</li> <li>An example is given to compare modeling a point class in C#, which is not thread safe, with its functional programming equivalent in F#.</li> <li>Functional programming languages like F# provide safer defaults that prevent developers from making unconscious mistakes through features such as immutable state and types.</li> <li>Immutability makes concurrency management easier in functional programming.</li> <li>The speaker highlights the need to consider the right paradigm for each developer's needs, acknowledging that there is no one best solution.</li> <li>Functional programming languages with immutable state and types are beneficial for concurrency management.</li> <li>Access visibility in OOP can be limiting, as it doesn't solve the problem of exposing certain methods for specific scenarios. Separating logic into different models based on scenarios allows more control over accessibility.</li> <li>Mixing data and operations in OOP can lead to subjectivity and difficulty in defining where certain operations belong. Splitting business objects into multiple classes per scenario provides better clarity and separation of concerns.</li> <li>Object-oriented development can be subjective, as data and operations are mixed.</li> <li>Approaches to class design differ between languages like C# and Java.</li> <li>Functional programming uses algebraic data types for tight domain modeling.</li> <li>Adopting functional programming in traditional object-oriented languages is possible but not always ideal.</li> <li>Recommendations for using C++ include functional, persistent data structures, magnetic operations, and function composition.</li> <li>Rich Hickey's talk on the harm of optional values highlights differences between sets and slots.</li> <li>Adopting functional programming in object-oriented languages is possible but not always ideal.</li> <li>C# is evolving to include more FP features, but its core remains object-oriented with mutable data structures.</li> <li>F# offers algebraic types for better domain expression and immutable records.</li> <li>Functional programming has shortened development cycles, leading to quicker feature delivery and more compact code.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2020","title":"Upgrade Time: Choose Java 11+ or the \u201cOther\u201d One\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=BcVOvdrFaPY</p> <ol> <li>Migrating from Java to Kotlin:</li> <li>Improve interoperability with the Java ecosystem.</li> <li>Benefit from multi-platform support, readability, and safe programming.</li> <li> <p>Leverage a growing Kotlin ecosystem.</p> </li> <li> <p>Challenges in interoperability between Kotlin and Java:</p> </li> <li> <p>Address compatibility issues when mixing languages.</p> </li> <li> <p>Demo application:</p> </li> <li> <p>Board game rating service using Spring Boot 2.0, memory database, unit tests, and integration tests.</p> </li> <li> <p>Usage of Maven for the demo to showcase Kotlin with a standard build tool.</p> </li> <li> <p>Migrating Java application to Kotlin:</p> </li> <li>Set up dependencies for Kotlin and test libraries.</li> <li>Refactor plain Java objects into Kotlin classes, using data classes for immutability.</li> <li>Rewrite unit tests in Kotlin for better understanding of the language.</li> <li> <p>Attack core logic and refactor Spring configuration.</p> </li> <li> <p>Benefits of migrating to Kotlin:</p> </li> <li>Improved interoperability with Java ecosystem.</li> <li>Promotes new features like immutability, non-nullable types, and final classes.</li> <li> <p>Better code organization and readability.</p> </li> <li> <p>Migrate Java code to Kotlin for better interoperability and improved features:</p> </li> <li>Use data classes, Lombok, and coupling entities for safer and more efficient coding.</li> <li>Test Kotlin code with mocking frameworks like Mockito.</li> <li> <p>Add dependencies for kotlin reflect, coupling login framework, and Spring Data JPA.</p> </li> <li> <p>Migrated Java application to Kotlin:</p> </li> <li>Added dependencies for proper interoperability.</li> <li>Modified Spring configuration and classes.</li> <li>Tested the integration, ensuring everything worked as expected.</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-java-will-you-have-to-pay-for-it-trisha-gee-daniel-bryant-goto-2019","title":"The Future of Java: Will You Have to Pay For It? \u2022 Trisha Gee &amp; Daniel Bryant \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=W-_5AV2qZXs</p> <ul> <li>Java is a popular general-purpose programming language, used by 16% of developers.</li> <li>It offers good readability and library support for various technologies.</li> <li>The JVM platform enables multiple languages to work together.</li> <li>Java balances stability with innovation, but may not be the most cutting-edge language.</li> <li>Oracle's new licensing model for Java 11 requires understanding alternative JDK options.</li> <li>Java is versatile and preferred by some developers over other languages.</li> <li>Containers and cloud technologies evolve, with better tutorials and documentation available.</li> <li>Developers should focus on their strengths while learning new skills.</li> <li>Full stack development is becoming common, requiring knowledge of frontend, backend, and devops.</li> <li>Find companies that value your unique skill set.</li> </ul>"},{"location":"goto_programming_lang/#programming-kotlin-why-how-its-future-venkat-subramaniam-hadi-hariri-goto-2021","title":"Programming Kotlin: Why, How &amp; Its Future \u2022 Venkat Subramaniam &amp; Hadi Hariri \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=7J2ATE4NGZ8</p> <ol> <li>Cat, a busy individual who writes books while traveling, has authored 11 books, including one on DSL in Kotlin.</li> <li>The author chose to write the book because of the story behind it, not for marketing purposes.</li> <li>Cat found Kotlin intriguing due to its unique features and syntax compared to other languages he had used.</li> <li>Initially reluctant to write a book about Kotlin, the author later found excitement in understanding its unique features.</li> <li>Writing a book is challenging but rewarding, as it makes one smarter and helps them learn new things.</li> <li>Feedback from experts improves the final product, and one doesn't need to be an expert to write or speak about a topic.</li> <li>Kotlin was created by JetBrains for Android development, offering features like inline lambdas, multi-paradigm, and non-opinionated approach.</li> <li>Challenges in writing books include balancing depth and breadth of the rich language.</li> <li>Kotlin's appeal lies in treating developers as adults, allowing various coding styles.</li> <li>The author found writing the book a rewarding experience, learning more about the language in the process.</li> <li>The Kotlin team was open to feedback and constantly improving their work.</li> <li>The book aims to help readers understand the depth of Kotlin's features and appreciate its evolution.</li> <li>Kotlin offers advantages such as static typing, conciseness, expressiveness, and reduced errors.</li> <li>Kotlin is versatile for various environments like Android development, DSL creation, and multi-platform applications.</li> <li>Kotlin Native can compile to native platforms on Linux, Windows, Mac OS, attracting developers with C++ and Delphi backgrounds.</li> <li>Jetpack Compose could benefit from being compiled natively in the future for UIs on Android and desktop.</li> <li>The speaker looks forward to attending conferences like GoToConference in person.</li> </ol>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2020","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Si3z82PEB5o</p> <ol> <li>Evan and Garth discuss their love for TypeScript and Kotlin, exploring both languages through a Bash Out clone project.</li> <li>Kotlin JS is fully integrated into IntelliJ, offering built-in support for React and Redux.</li> <li>Both TypeScript and Kotlin are popular languages; while Kotlin focuses on the JVM, TypeScript is built on top of JavaScript.</li> <li>Kotlin adoption has a learning curve due to differences from JavaScript/TypeScript, but interoperability can be achieved using tools like Ducat.</li> <li>TypeScript offers advanced features such as structural typing and mapped types not yet available in Kotlin JS.</li> <li>React UI building with Kotlin JS is possible, though there's a learning curve due to differences from JavaScript/TypeScript.</li> <li>Kotlin JS has impressive core language features but lacks the type safety and flexibility found in TypeScript.</li> <li>TypeScript offers more flexibility with algebraic data types and programmatic creation of types. Ducat struggles with complexities, resulting in mixed results for union and intersection handling.</li> <li>Both languages have strong concurrency support: Typescript with async/await keywords and Kotlin with coroutines and the suspend keyword.</li> <li>Kotlin has a more elegant syntax, making code simpler and more symmetrical.</li> <li>Both languages offer destructuring capabilities, but it's more flexible in TypeScript.</li> <li>Conclusion: Both are excellent languages with different advantages; cautiousness may lead to choosing TypeScript due to community size and existing solutions. Future developments will be interesting for both languages.</li> </ol>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kQEu1VsrG44</p> <ol> <li>Memory efficiency is crucial for application performance, as memory churn rate affects garbage collector performance and runtime.</li> <li>Algorithmic issues can lead to excessive logging and hot allocating threads, causing slowdowns in other processes on the same chip.</li> <li>Optimizing memory usage and tuning applications improve overall performance; reducing allocation rates is significant for performance improvement.</li> <li>Inferring allocation frequency helps identify hotspots in code, which should be algorithmically optimized to reduce churn.</li> <li>Thread local allocation blocks minimize contention on the heap by allocating more memory per thread.</li> <li>High memory churn rates increase garbage collection activity, affecting application performance.</li> <li>The power curve shows that above 1 gigabyte per second, there's little gain; inferring allocation frequency is an approximation.</li> <li>Tuning the garbage collector can be costly and may not solve the problem; focus on finding hot allocators instead.</li> <li>Flight recorder helps identify issues but lacks information on where the hotspot is in code; it's still useful for certain aspects.</li> <li>Applications may have multiple allocation hotspots depending on their execution mode; analyzing code to find solutions can improve performance.</li> </ol>"},{"location":"goto_programming_lang/#97-things-every-java-programmer-should-know-trisha-gee-kevlin-henney-goto-2020","title":"97 Things Every [Java] Programmer Should Know \u2022 Trisha Gee &amp; Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=T47k2tHXmOA</p> <ul> <li>97 Things Every Java Programmer Should Know is a series of books with various contributors.</li> <li>The initial idea came from Richard Monson-Haefel's book about software architecture, and the number 97 was chosen for its properties and to fit within a standard book size.</li> <li>A broader reach was achieved by including more diverse voices in the Java edition.</li> <li>The book aims to represent different points of view, showing that there is no single right answer in software development.</li> <li>It discusses the complexity of software and various approaches for aspects like certifications and testing methods.</li> <li>The author highlights the need to focus on broader skills like community involvement and career growth.</li> <li>The book is applicable across programming languages due to its diverse content.</li> <li>Some parts of the book will age, but most technical pieces remain relevant.</li> <li>The book is valuable for software developers in general, not just Java programmers.</li> <li>Diversity should be considered when discussing the book's audience.</li> <li>Encourage diversity and inclusivity in tech communities. Lower barriers for participation, especially for women. Value individual voices and experiences. Aim for openness and collaboration in projects. Resist the urge to rewrite others' work to fit your style. Focus on statistical sampling with varied perspectives.</li> <li>The book is ordered alphabetically, making it easy to find specific topics or themes. It can be used for various purposes like learning, team discussions, or book clubs. Favorite pieces depend on recent conversations and personal interests. Editing process involved removing factually wrong or potentially damaging advice. Importance of being open-minded when reading the book. Short pieces allow for exploration and potential future application.</li> </ul>"},{"location":"goto_programming_lang/#secrets-of-the-shenandoah-garbage-collector-stephanie-crater-goto-2020","title":"Secrets of the Shenandoah Garbage Collector \u2022 Stephanie Crater \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=WcSqLvxwzbA</p> <ul> <li>Shenandoah, a newer Java garbage collector.</li> <li>Three main steps: find garbage, collect it, and update references.</li> <li>Shenandoah works mostly concurrently with the application running.</li> <li>Work stealing balances load between task queues.</li> <li>Task Q stats framework tracks task assignments, pops, slow pops, total steals, and attempts.</li> <li>Added more statistics for better diagnosis of work stealing issues.</li> <li>Included slow pop attempts, breakdown of steals and steel attempts by target queue.</li> <li>Used graphs for visual representation.</li> <li>Identified issues with unbalanced task allocation and work stealing performance.</li> <li>Discovered that cues were not trying to steal due to stop the world pauses during GC phases.</li> <li>Understood that adjusting worker usage depends on the phase of GC.</li> <li>Shenandoah's garbage collection uses queues, but doesn't consider which ones are active or inactive.</li> <li>Work stealing code randomly chooses a queue to steal from, leading to low success rate.</li> <li>A solution introduced that biases selection towards recently successful queues.</li> <li>This improves the success rate significantly and makes work stealing more efficient.</li> <li>Tiff in JDK 11 improves queue selection for stealing work.</li> <li>Bias towards last successful active queue pick.</li> <li>Code available on GitHub.</li> <li>Improved success rate from 75% to around 90%.</li> <li>Discussion about optimizing queues and context.</li> </ul>"},{"location":"goto_programming_lang/#gradually-adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Gradually Adopt GraphQL Without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=DWBL7GLMVsY</p> <ol> <li>GraphQL is a query language that enables clients to fetch specific data from various sources efficiently.</li> <li>It offers performance benefits such as reduced network traffic and server load, thanks to its ability to execute queries in parallel.</li> <li>Resolvers handle the logic behind fetching data, eliminating the need for writing code for individual fields.</li> <li>GraphQL can be implemented on both client and server sides, allowing gradual integration into existing systems.</li> <li>Placing GraphQL clients next to UI components simplifies managing changes in data structures and scaling UI teams.</li> <li>Benefits of using GraphQL on the client include less time spent on data handling, more time for UI development, and easier introduction into existing systems.</li> <li>Apollo Client with link architecture enables calling multiple REST or GraphQL servers, providing flexibility in integrating different data sources.</li> <li>Use existing schemas and servers to generate GraphQL schemas and endpoints without writing custom logic.</li> <li>GraphQL Server handles regular queries while REST API calls are made when annotations are present.</li> <li>Tools like GraphQL Mesh enable service-to-service communication, supporting various protocols such as Swagger, OpenAPI, gRPC, SOAP, and Microsoft's All Data.</li> </ol>"},{"location":"goto_programming_lang/#facts-you-may-not-know-about-kotlin-eugene-petrenko-goto-2020","title":"Facts You May Not Know About Kotlin \u2022 Eugene Petrenko \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=XwzStZaDpH0</p> <ol> <li>Kotlin's history: Originating as an internal language experiment for JetBrains, it was later named after the island of Kotlin near Saint Petersburg.</li> <li>Interoperability with Java and other languages is a key feature of Kotlin.</li> <li>Kotlin 1.4 introduced optional trailing commas in function calls.</li> <li>The language focuses on concise code, safety, and friendliness.</li> <li>Kotlin's website features an image from the island of Kotlin.</li> <li>Plus operator example: Combines two strings (one with a question mark for potential absence) and prints their combined string if one is 'now'.</li> <li>Kotlin has a special 'nothing' type, representing no value, which can stop execution in certain situations.</li> <li>Using nullable types and safe calls simplifies code.</li> <li>Generics are an advanced concept in Kotlin.</li> <li>Loading code with grey highlighting in IDEs is another feature.</li> <li>Using nullable types to shorten code using Kotlin's light bulb feature.</li> <li>Safe calls and functional programming in Kotlin.</li> <li>Understanding generics in Java and Kotlin, including refined inline functions.</li> <li>Type erasure and workarounds for casting issues.</li> <li>Non-blocking programming with Kotlin coroutines and concurrent features.</li> <li>Kotlin's versatility: used for concurrent programming, game development, mobile app development (KMM), and more.</li> <li>Kotlin's ecosystem: supports multiple platforms like JVM, iOS, Android, and JS.</li> <li>The fun aspect of Kotlin: makes coding enjoyable and leads to interesting ideas.</li> </ol>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020_1","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sE_dv7piOZg</p> <ol> <li>Memory churn is a significant performance issue in many applications, often invisible.</li> <li>Third-party products like Apache Spark can suffer from high memory churn.</li> <li>Reducing allocation rates leads to improved performance; a one gigabyte per second threshold indicates well-tuned applications.</li> <li>Profilers help identify allocation sites and optimize code for better efficiency.</li> <li>GC log shows excessive memory churn in an application, leading to performance issues.</li> <li>Reducing allocation rates can improve performance significantly.</li> <li>Visual VM and Java Flight Recorder are tools for analyzing allocations; however, Visual VM may sometimes lie due to its external profiling method.</li> <li>Java Flight Recorder records inside the JVM, providing more accurate results.</li> <li>Demonstration of Java Flight Recorder in Java Mission Control: Attach to JVM, start recording, and analyze memory allocation.</li> <li>Observing unexpected appearance of 'score' in the profile (potential regression) - potential issue.</li> <li>Performance improvement after optimizing application: runtime drops from 1 minute to 12 seconds.</li> </ol>"},{"location":"goto_programming_lang/#elixir-in-action-sasa-juric-erik-schoen-goto-2020","title":"Elixir in Action \u2022 Sasa Juric &amp; Erik Schoen \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=-bCkha6U70o</p> <ol> <li>Elixir is a programming language designed for software systems, focusing on high availability.</li> <li>The key ingredient of Elixir's support for high availability is the Erlang Virtual Machine (BEAM).</li> <li>BEAM allows running many small lightweight independent programs called processes within a single instance, providing fault tolerance.</li> <li>Elixir offers basic microservices features directly at the runtime level, simplifying building highly available systems.</li> <li>Go is great for tool development but less suitable for software systems due to shared memory and cooperative scheduling.</li> <li>BEAM languages are stable and proven in large systems like WhatsApp.</li> <li>Dark aims to reduce technical complexity by providing a single tool, similar to what beam languages offer.</li> <li>Static typing is seen as a deficiency in beam languages, but initiatives like Alpaca and Clean aim to bring proper static typing.</li> <li>Elixir offers better approachability and developer productivity compared to Erlang.</li> <li>The entire BEAM ecosystem benefits from each other's progress.</li> <li>Elixir has better tooling support than Erlang initially.</li> <li>\"Elixir in Action\" focuses on concurrency and is unique for its approach of teaching not only how but also why something should be done.</li> <li>The author's book approach: Teaching both how and why to do something, with a zigzag learning process.</li> <li>Feedback on the book: Surprised by its success, positive reviews, and organic growth.</li> <li>Importance of feedback: Rewarding when unsolicited, showing the book's impact on readers.</li> </ol>"},{"location":"goto_programming_lang/#next-generation-programming-rust-elm-richard-feldman-goto-2020","title":"Next-Generation Programming: Rust &amp; Elm \u2022 Richard Feldman \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=ukVqQGbxM9A</p> <ol> <li>Next generation programming languages: Rust and Elm</li> <li>Both languages are efficient, reliable, and have large communities with open development processes.</li> <li>Rust is broad in scope, has C interop, and shares similarities with Go. Elm focuses on web apps with a fast compiler.</li> <li>They both have static type checking, sound type systems, and no \"billion dollar mistake\" (null reference).</li> <li>Rust is mutable by opting-in while Elm has strict immutability.</li> <li>Rust has a large community with frequent compiler releases; Elm is smaller but less churn with infrequent updates.</li> <li>Both languages are memory safe and reliable, with negligible runtime exceptions for frontend development.</li> <li>Elm focuses on browser-based UIs, while Rust is more general purpose.</li> <li>Elm has a narrower focus, allowing higher guarantees in terms of performance and safety.</li> <li>Both languages offer free books and online resources to learn them.</li> </ol>"},{"location":"goto_programming_lang/#maximizing-java-application-performance-with-graalvm-oleg-selajev-goto-2020","title":"Maximizing Java Application Performance with GraalVM \u2022 Oleg \u0160elajev \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=PeMvksAZbdw</p> <ul> <li>Granville is a high-performance virtual machine supporting multiple languages.</li> <li>It offers two execution modes: normal JVM and ahead-of-time compilation.</li> <li>Benchmarking shows an average 30% performance boost for Granville compared to OpenJDK.</li> <li>Ahead of time compilation (AOT) improves performance by reducing startup speed, memory footprint, and packaging size.</li> <li>Native Image utility compiles Java code into platform-dependent binary for faster startup and lower memory consumption.</li> <li>Gravimoron's native image supports various frameworks like Spring Boot, providing similar performance to raw versions.</li> <li>AOT execution mode has lower CPU usage during startup and warm-up compared to JIT mode.</li> <li>283 utility reduces memory usage from 400MB to 60MB with its native image version.</li> <li>Native images improve startup times and reduce CPU consumption during warm-up.</li> <li>Graviton ecosystem supports languages like Java, JavaScript, Node.js, Python, etc.</li> <li>Companies like Twitter, Oracle, and Nvidia use native image technology in their projects.</li> <li>Participate in the Graviton ecosystem by engaging with its community.</li> </ul>"},{"location":"goto_programming_lang/#bootiful-graphql-with-kotlin-dariusz-kuc-goto-2020","title":"Bootiful GraphQL with Kotlin \u2022 Dariusz Kuc \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1siPT1pTXFU</p> <ul> <li>Demonstration of building a reactive GraphQL web server with Kotlin, Spring Boot, and other libraries.</li> <li>Uses reflection to generate schema from source code using the GraphQL Kotlin Spring Starter library.</li> <li>Includes a playground for testing queries and viewing documentation.</li> <li>Deprecation annotation for removing fields without breaking clients.</li> <li>Demonstrates polymorphism in GraphQL with interfaces and unions through a people example.</li> <li>Introduced Markdown syntax for formatting transcripts.</li> <li>Explained the difference between interfaces and unions in GraphQL.</li> <li>Shows how to add arguments to queries and improve performance by using functions instead of properties.</li> <li>Discussed benefits of asynchronous code with core teams in GraphQL.</li> </ul>"},{"location":"goto_programming_lang/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>Use HTML properly for better performance, accessibility, and responsiveness.</li> <li>Learn semantic HTML to improve accessibility and maintainability.</li> <li>Utilize new HTML5 tags like header, nav, main, article, and footer for better user experience.</li> <li>Semantic HTML elements enhance accessibility and search engine optimization.</li> <li>Accessibility benefits everyone, not just people with disabilities.</li> <li>Test websites for common issues like low contrast, missing alternate text, empty links, etc.</li> <li>Choose accessible component libraries like Reach UI, Tourment UI, and Lion.</li> <li>Reduce JavaScript usage to improve website performance and user experience.</li> <li>WebAIM found 98% of websites have accessibility errors.</li> <li>Test sites without JavaScript and enhance with JS.</li> <li>Choose libraries carefully; some are tested with assistive technologies while others aren't.</li> <li>Beware of bloated JavaScript files that slow down users on mobile devices.</li> <li>Internet accessibility is a global priority, as it can improve education and healthcare in developing countries.</li> <li>The web impacts people worldwide, not just those in developed nations.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-flows-and-channels-for-android-ryan-pierce-goto-2020","title":"Kotlin Flows and Channels for Android \u2022 Ryan Pierce \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=xch4aw7hNcY</p> <ol> <li>Kotlin's coroutines library uses flows and channels to tackle asynchrony issues in Android development.</li> <li>Flows are versatile abstractions for various streaming tools, offering a safer and easier way to handle different types of streams.</li> <li>Channels are non-blocking queues that enable safe communication between core routines.</li> <li>Kotlin's github issue 254 inspired the creation of flows as an efficient alternative to hot channels.</li> <li>Flows are a versatile and efficient streaming tool in Kotlin coroutines, being lazy, safe, and easy to use compared to channels.</li> <li>Modern Android apps follow recommended architecture with view, view model, repository, and use case layers. Data sources produce flows that are processed by repositories and use cases to generate live data objects in the view model layer.</li> <li>Use S Flow Operator for data flow management. Demonstrate creating a photo repository with names from a data source using operators like map, on each, and zip. Convert live data into a view model using LiveData or custom co-routine builders.</li> <li>Flows are reactive, allowing efficient handling of user input. Multiple ways to use flow in an application.</li> </ol>"},{"location":"goto_programming_lang/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ol> <li>Ray is a system for scaling applications from laptops to clusters, enabling parallelization of tasks.</li> <li>Demonstration using Monte Carlo Pi calculation shows how Ray speeds up work by leveraging distributed computing.</li> <li>Distributed state example uses parameter servers and actors for efficient cluster resource utilization in distributed computing.</li> <li>Actors are remote objects that handle requests, perform work, and save results within a cluster.</li> <li>Ray is a framework for scaling Python applications, optimizing hyperparameter tuning with Tune library for machine learning models.</li> <li>Solutions for microservices include managing instances across clusters and providing resilience.</li> <li>Drop-in replacements for multi-threading libraries are available in Ray, making it easy to scale applications.</li> </ol>"},{"location":"goto_programming_lang/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ol> <li>GraphQL is a powerful query language that simplifies data fetching and orchestration.</li> <li>Gradual adoption of GraphQL can be done through client-side usage, API integration with tools like Apollo Federation, or creating a GraphQL gateway for multiple data sources.</li> <li>Benefits include simplified UI development, reduced time spent on data fetching, and improved developer productivity.</li> <li>GraphQL reduces code for fetching and filtering data, allowing for better performance when introduced on the client side.</li> <li>Apollo clients have local query engines, enabling queries without affecting backend servers.</li> <li>GraphQL Mesh converts existing APIs into graphical schemas, making them queryable without changing the original source.</li> <li>It allows querying multiple sources as if they were one connected graph, even if not originally GraphQL.</li> <li>The library runs on both client and server sides, offering versatility for different use cases.</li> <li>Gradually integrating GraphQL Mesh into your stack can automate manual coding and improve efficiency.</li> </ol>"},{"location":"goto_programming_lang/#the-magic-of-music-matching-roy-van-rijn-goto-2020","title":"The Magic of Music Matching \u2022 Roy van Rijn \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=8Dj0rekeM7g</p> <ol> <li>Rosa shares her experience with music matching using Java audio system and data lines.</li> <li>Microphones record sound pressure through their smoke membrane, which is represented by data.</li> <li>Sample rate and sample size affect recording quality.</li> <li>Understanding the basics of sound helps create better music matching applications.</li> <li>A microphone works similarly to our ear in detecting sound pressure changes.</li> <li>Sample rate and sample size influence recording quality.</li> <li>Fourier transformation converts time domain signals into frequency domain.</li> <li>Windowing technique combines time and frequency information.</li> <li>Spectrum analyzer visualizes frequencies in a signal.</li> <li>Advanced spectrum analyzers can be used for music analysis with spectral images.</li> <li>A Java-based spectrum analyzer was created to analyze sound.</li> <li>Fingerprinting was done by processing mp3 files and storing their fingerprints as lists of Longs.</li> <li>The algorithm matches songs based on fingerprints, considering offsets for accuracy.</li> <li>A demo showed the system recognizing a song from Spotify's shuffled playlist.</li> <li>Proposed other applications: detect duplicate songs, align subtitles with audio, and copyright infringement detection.</li> <li>Recognized room for improvement and potential challenges with large libraries.</li> </ol>"},{"location":"goto_programming_lang/#making-mutants-work-for-you-henry-coles-goto-2019","title":"Making Mutants Work for You \u2022 Henry Coles \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=LoFJajoJQ2g</p> <ol> <li>Assessing test suite quality involves various methods like TDD, peer review, and code coverage.</li> <li>Code coverage is not always effective as it doesn't guarantee useful testing.</li> <li>Richard Lipton introduced fault diagnosis in 1971 for finding bugs in tested code.</li> <li>Mutation testing, developed in the '80s, gained popularity with Jesse in 2000 and is used for safety-critical projects and normal codes.</li> <li>The process involves creating mutants, compiling code, running tests, and identifying which mutants are killed by the test suite.</li> <li>Mutation testing offers a degree of confidence in the effectiveness of a test suite but isn't perfect.</li> <li>Open source community introduced mutation testing; traditional methods were slow and impractical. PIT (Parallel Instruction Testing) tool improved efficiency.</li> <li>Reduce test execution time by running tests in parallel, skipping compilation cycles, and optimizing test cases.</li> <li>Tessellation helps focus on relevant lines of code for mutant testing.</li> <li>Mutation testing is a powerful tool for providing feedback during development and improving code quality.</li> <li>Equivalent mutants can help improve code readability and intent; performance-related mutants may not be important in unit tests.</li> <li>Main purpose: find equivalent mutants, which are changes that don't affect functionality.</li> <li>Useful tools include Mutant (Java), Ferb (PHP), PITest (Java), Bytecode mutations for Scala and Kotlin, Cosmic Ray (Python), Copperhead (LLVM, Swift, C++), No-strike (JavaScript).</li> <li>New tools to consider: Professional (.NET), Shion (Rust).</li> </ol>"},{"location":"goto_programming_lang/#an-introduction-to-jvm-performance-rafael-winterhalter-goto-2020","title":"An Introduction to JVM Performance \u2022 Rafael Winterhalter \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=wgJWs14YcEs</p> <ol> <li>JVM performance talks focus on Java program execution and code optimization.</li> <li>The JVM is an adaptive platform with three levels of compilation: interpretation, C1 (static compilation), and C2 (just-in-time compilation).</li> <li>Call sites are crucial for method-level optimization in the JVM.</li> <li>Virtual calls allow overriding methods in languages like Java while maintaining performance despite numerous method calls.</li> <li>Java's method-based JIT (Just-In-Time) compilation focuses on improving methods.</li> <li>Virtual calls in Java are efficient due to vtables, which store method signatures and locations.</li> <li>Smalltalk used caches for performance improvement.</li> <li>The JVM uses linked call sites for faster execution by checking assertions and jumping directly to the code.</li> <li>Call sites can be monomorphic (direct link), biomorphic (conditional jump), or polymorphic (multiple direct links).</li> <li>Optimizations like inlining code are possible based on these types of call sites.</li> <li>JVM call sites can be monomorphic, biomorphic, or mega morphic.</li> <li>Monomorphic call sites are direct links to code positions.</li> <li>Biomorphic and mega morphic call sites use table lookups for dispatching.</li> <li>Ahead of time compilation optimizes static code but is less useful for long-running processes.</li> <li>Inlining code helps JIT compilers optimize further, making methods bigger targets.</li> <li>Maintaining small and simple classes helps with optimization.</li> <li>Double brace initialization can create new types, affecting call site morphism.</li> <li>Inlining code is important for optimization.</li> <li>Mega morphism can make inlining difficult, leading to slower programs.</li> <li>Monomorphic methods are easier to optimize and faster.</li> <li>JIT compilers use techniques like unrolling loops to improve performance.</li> <li>Type systems help processors understand data better for efficient prefetching.</li> <li>Branch prediction helps CPUs work more efficiently by speculating on code execution paths.</li> <li>Escape analysis can optimize memory usage by avoiding unnecessary object allocations.</li> <li>The JVM has improved escape analysis, but it still needs improvement.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-4-vs-scala-3-garth-gilmour-eamonn-boyle-goto-2020","title":"Kotlin 4 vs. Scala 3 \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sIL4mduqHe0</p> <ul> <li>Comparison of Kotlin and Scala 3</li> <li>Decline in Scala's popularity: novelty, radical changes, functional programming dominance</li> <li>Improvements in Scala 3: new compiler, simplified language, better features</li> <li>New features in Scala 3: top-level declarations, no need for 'new', extension methods</li> <li>Kotlin and Scala 4 comparison (not covered): additional features in both languages</li> <li>New Scala 3 features: top-level declarations, no need for new keyword, extension methods, improved enums, try (success/failure), richer data types with unions and intersections</li> <li>Union types combine different types in a single parameter; intersection types ensure an object must be of multiple types to be valid</li> <li>Literal types treat values as their own type, e.g., 2.3 is a type with only one instance (2.3)</li> <li>Nominal typing enforces type restrictions without overhead</li> <li>Scala 3 supports significant whitespace; indentation is important</li> <li>Export classes to reuse functionality without inheritance</li> <li>New Scala features: simplified conditional and iterative statements, exporting classes for avoiding inheritance issues, improved implicit handling, meta programming using TST syntax trees</li> <li>Kotlin's approach: pragmatic language focused on delivering solutions without adding unnecessary complexity</li> <li>Kotlin's popularity growth with use in various projects; 12 Days of Kotlin blog posts and conferences</li> <li>Comparison of Scala 3 and Kotlin: High quality in Scala, pragmatic language in Kotlin</li> <li>Kotlin features: Safety, succinctness, functional interfaces, multi-platform library</li> <li>Kotlin's future: Universal solution for all platforms, Android development focus</li> <li>Google's support for Kotlin: Kotlin first approach in new Jetpack API and features</li> <li>Kotlin's popularity for Android development due to simplicity and productivity</li> <li>JetBrains' focus on making Kotlin the universal solution for all platforms</li> <li>Different approaches lead to varying definitions of quality; Scala might be preferred for learning/experimentation, while Kotlin is better for enterprise environments with junior developers</li> </ul>"},{"location":"goto_programming_lang/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>Importance of web performance: Alex Russell emphasizes the need for better performance.</li> <li>First meaningful paint: A key metric to measure how quickly content appears on a page.</li> <li>Server-side rendering vs client-side: Serving less data doesn't necessarily improve performance; network issues and other factors can affect user experience.</li> <li>User experience is crucial: Focus on making websites load properly for all users regardless of their circumstances or device capabilities.</li> <li>The modern web is complex, difficult to use, build, and maintain.</li> <li>Frameworks and libraries provide benefits like component reuse, consistency, and engineering principles.</li> <li>However, they can lead to fatigue and frustration for developers.</li> <li>The goal should be a consistent great user experience with control over the entire process.</li> <li>Evolution of client-side frameworks: Introducing portals as a simple technology that allows navigating to another page within an iframe.</li> <li>Portals offer control over loading experiences without reimplementing them.</li> <li>A use case for portals is in web documentation pages where separate content can be loaded without losing scroll position.</li> <li>Demonstration of using portal for a web framework with two panes.</li> <li>Portal allows access to both pages simultaneously, unlike other methods.</li> <li>Progressive enhancement: Adding minimal JavaScript on top of plain HTML pages.</li> <li>Portal is currently non-standard and only available in Chrome.</li> <li>Not all websites need single page apps; use portals for interactive elements.</li> <li>Portal is non-standard and only available in recent Chrome versions.</li> <li>Gradual adoption of technologies like React is encouraged.</li> <li>HTML has become smarter, reducing the need for custom JavaScript implementations.</li> <li>Use frameworks to prototype ideas before standardization.</li> <li>Polyfilling with JavaScript can speed up innovation without waiting for browser support.</li> <li>Be aware of performance and accessibility concerns when using new technologies.</li> <li>Stay updated with the industry, not just libraries or GitHub.</li> <li>Not knowing new tech is normal; focus on important issues.</li> <li>Use frameworks for prototyping and polyfilling to speed up innovation.</li> <li>Standardization takes time, so be patient while staying ahead of trends.</li> <li>The web has the power to connect people and share knowledge globally.</li> </ol>"},{"location":"goto_programming_lang/#scaling-up-an-ios-codebase-tjeerd-int-veen-goto-2019","title":"Scaling up an iOS Codebase \u2022 Tjeerd In't Veen \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n09omYo_QPk</p> <ol> <li>Split monolithic iOS application into modules for better organization and management.</li> <li>Consider versioning, stability, and dependency management when working with modules.</li> <li>Organizational challenges include local projects, frameworks, and package managers.</li> <li>Core module is the most important; minimize public API to maintain stability.</li> <li>Test your code, especially public APIs, for quality assurance.</li> <li>Add documentation for clarity and understanding, focusing on public APIs.</li> <li>Maintain a stable public API for better code management.</li> <li>Documentation is crucial, especially for public APIs.</li> <li>Consider offering sample apps and accessibility identifiers for easier integration.</li> <li>Local modules provide hard boundaries between codes and make testing easier.</li> <li>Downsides include fragmented code and difficulty in updating multiple projects simultaneously.</li> <li>Workspace remains monolithic despite using local modules, but it's more manageable with smaller projects for testing and access control.</li> <li>Code is more fragmented with multiple projects, but can be beneficial.</li> <li>Use semantic versioning to handle changes in packages.</li> <li>Major versions are tricky; plan carefully and update dependencies based on application requirements.</li> <li>Avoid major releases by considering dependencies and versioning.</li> <li>Be cautious with enums, open classes, and subclassing to prevent breaking changes.</li> <li>Start with beta versions and gradually move towards stable releases.</li> <li>Use deprecations for code removal while maintaining backward compatibility.</li> <li>Implement escape hatches for flexibility in case of missing features.</li> <li>Beware of secret majors that can be hidden within minor or patch updates.</li> <li>Take extra care in projects to handle pain for others.</li> <li>Use protocols, but consider alternatives like marking classes.</li> <li>Be conscious of options that may break other people's code.</li> <li>Use access levels to narrow scope and reduce chances of clashes.</li> <li>Avoid Singletons with global mutable state.</li> <li>Plan major changes and work together with co-workers.</li> <li>Release minor updates before major ones.</li> <li>Test your framework or module in different environments for compatibility.</li> <li>Use modules or frameworks for versioning to support multiple workspaces and control updates.</li> <li>Dependency management is crucial for software development.</li> <li>Semantic versioning can impact organizations when code breaks or major releases take time to resolve.</li> <li>Package managers like CocoaPods, Sweet Package Manager, and Swift Package Manager help with dependency management.</li> <li>Carthage and its fork, Carthage+, offer framework stability for enterprise-level projects.</li> <li>The speaker recommends checking out their book on the topic.</li> </ol>"},{"location":"goto_programming_lang/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ul> <li>Microservices are an organizational solution, not a technical one.</li> <li>Monolithic architectures can be problematic when scaling.</li> <li>Sacred breaker is a concept to handle failures in distributed systems.</li> <li>Circuit breaker pattern in complex web service architecture: stops calling backend service when failure occurs; self-healing mechanism tries to make calls again after some time; important configuration option: fallback strategy for failures.</li> <li>Recommendation engine example: no fallback is acceptable, but it doesn't disrupt business; pricing web service example: requires fallback and business logic integration.</li> <li>Service meshes vs libraries for fallback strategies.</li> <li>Couple of payment solutions: gray out provider, send invoice; Swiss method: merchant sends goods, customer pays later.</li> <li>Kubernetes: popular service mesh, Istio; Resilience4J: Java library for circuit breakers, rate limiting, etc.</li> <li>Demo: Spring WebFlux app with network simulation and Resilience4J integration.</li> <li>Functional programming challenges for those not familiar with it.</li> <li>Two applications: reactive pricing service and non-reactive shop service; uses function composition to assemble features like time limiter, circuit breaker, and caching in the shop service.</li> <li>Levin's Eleven test demonstrates system behavior under different conditions.</li> <li>Encourages audience to explore further through blog, Twitter, and source code.</li> </ul>"},{"location":"goto_programming_lang/#building-secure-react-applications-philippe-de-ryck-goto-2019","title":"Building Secure React Applications \u2022 Philippe De Ryck \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=O91hJJ5KMLs</p> <ul> <li>Discussing security and React applications</li> <li>Important topics in 5 minutes: projects, managing people, securing web and mobile apps</li> <li>Cross-site scripting (XSS) vulnerabilities</li> <li>Tips for building secure project applications</li> <li>Blog posts on security issues</li> <li>Security awareness and education</li> <li>Importance of documentation and testing</li> <li>Examples of real-world cases with security issues</li> <li>Discusses various security issues and solutions in web applications, cross-site scripting, credit card information theft, underground markets, etc.</li> <li>Introduces Purify as a sanitizer for secure websites</li> <li>Highlights the importance of maintaining safe browsing experiences</li> <li>Focus on ensuring secure applications and best practices</li> <li>Mentions tools like Purify, Snap, React, and other frameworks for improving security</li> <li>Discusses proper coding guidelines and best practices</li> <li>Shares experiences with different projects and their approaches to security</li> <li>Conference talks about cipher pitfalls, web development, security, application design, etc.</li> <li>Mentions modern applications, code quality, and ethical considerations in the industry</li> <li>NPM landscape analysis and efforts to improve developer experience</li> <li>Focus on maintaining and improving software performance and security</li> <li>Discusses various topics related to software, patches, updates, advertising, Cuba, feeds, shoes, tickets, CPUs, patches, software, budgets, websites, frameworks, events, exploits, graphics, DVDs, patches, festivals, people, updates, security, marketing, projects, references, budgets, roles, applications, developments</li> <li>No context provided for the overall discussion</li> </ul>"},{"location":"goto_programming_lang/#nullable-reference-types-in-c-8-jon-skeet-goto-2019","title":"Nullable Reference Types in C# 8 \u2022 Jon Skeet \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=1tpyAQZFlZY</p> <ol> <li>Nullable reference types in C# 8 enhance the type system by providing more information about potential nullability.</li> <li>They aim to improve code readability, reduce bugs, and not eliminate null reference exceptions.</li> <li>Disabling nullable reference types doesn't change a project's meaning; enabling them results in warnings for potential issues.</li> <li>The compiler helps identify problems but won't fix your code automatically.</li> <li>Migrating to nullable reference types is crucial for ensuring code quality and avoiding unexpected behavior.</li> <li>C# 8 introduces these features, focusing on improving code safety without changing runtime behavior.</li> <li>Compilers handle nullability differently; CLR doesn't check nullable reference types like C# does.</li> <li>Arrays can have null values without warnings, making it challenging to reason about them.</li> <li>The compiler trusts developers in some cases but provides warnings for local variables with potential nullability issues.</li> <li>Techniques such as the null conditional operator (?.), is null, and others help handle these issues.</li> <li>C# 6.0 introduced new syntax for nullable reference types, including adding a question mark to a type name.</li> <li>Testing code should be done before changing existing code to ensure desired behavior.</li> <li>Nullability affects properties, method parameters, and return types; specific attributes specify relationships between inputs and outputs.</li> <li>Generics and nullable reference types can clash in certain aspects of language design.</li> <li>The CLR could have been changed for more type safety but would make adopting C# 8 more challenging.</li> <li>Nullable reference types improve code expressiveness without changing behavior.</li> <li>Migration involves fixing warnings and enabling errors after reaching zero warnings.</li> </ol>"},{"location":"goto_programming_lang/#how-java-scala-are-imitating-functional-languages-maurice-naftalin-jose-paumard-goto-2019","title":"How Java &amp; Scala are Imitating Functional Languages \u2022 Maurice Naftalin &amp; Jos\u00e9 Paumard \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=e6n-Ci8V2CM</p> <ol> <li>Announcements: New job as a developer and technology evangelist, Edinburgh &amp; Jalba unconference.</li> <li>Talk about functional programming influences on object-oriented programming.</li> <li>The Pizza Paper (1997) introduced generics, higher-order functions, and pattern matching into Java.</li> <li>Generic Java (2004): Implemented generics in Java with compromises.</li> <li>Higher-order functions: Introduced in Java 8 (2014).</li> <li>Pattern matching: Under development for future Java releases through the Amber Project.</li> <li>Scala avoids compatibility issues by starting from scratch and incorporating functional programming features.</li> <li>Java's slow adoption of generics due to lack of runtime type information.</li> <li>Covariance in arrays allowed generic methods but caused problems with array subtyping.</li> <li>Type erasure was used for compatibility between non-generic and generic code.</li> <li>Scala avoided these issues by not having backward compatibility constraints.</li> <li>Pattern matching is coming to Java, starting with preview features in Java 14.</li> <li>Type erasure in Java removes type information at runtime for compatibility.</li> <li>Inheritance brings challenges, requiring synthetic methods and hacks.</li> <li>JVM and compiler sometimes differ in method signature interpretation.</li> <li>Arrays of generics are not allowed in Java due to difficulties in differentiating them.</li> <li>Java has issues with generics, such as no runtime type information and incompatible array types.</li> <li>Scala addresses these problems by using immutable data structures and defining covariant data structures for better client code.</li> <li>In Scala, the library writer defines the covariance while in Java, it's at the call site with wildcards.</li> <li>The Scala approach makes library methods simpler to use compared to Java's complex signatures.</li> <li>Declaration site variance in Scala simplifies library methods.</li> <li>Java's lack of function types led to the creation of abstract classes with apply methods.</li> <li>Lambdas in Java were introduced after a debate on capturing non-final local variables.</li> <li>In Scala, functions are first-class citizens and can capture local variables.</li> <li>Lambdas in JavaScript don't have concurrency issues as they lack multi-threaded programming.</li> <li>Discussed Java concurrency rules and how they apply to local variables.</li> <li>Compared Scala's approach to handling local variables with concurrent access.</li> <li>Explained partial application in both Scala and Java, using examples.</li> <li>Introduced pattern matching in Scala through the \"pizza papers\" example.</li> <li>Discussed how pattern matching will be introduced in future versions of Java.</li> <li>Introduced sealed types in Scala, allowing only specific extensions for a class.</li> <li>Pattern matching used to determine vehicle type and color.</li> <li>Java is adopting similar features with sealed types for classes, abstract classes, or interfaces.</li> <li>Language design complexity leads to different approaches between languages like Java and Scala.</li> <li>Backward compatibility affects language evolution and adoption of new features.</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ol> <li>The future of machine learning and JavaScript was discussed, with a focus on AI-powered applications.</li> <li>A meetup group called AI JavaScript led to the creation of ijsrocks.com, showcasing innovative projects.</li> <li>Emoji Fire is an app that detects faces, emotions, and replaces them with appropriate emojis using facial analysis techniques.</li> <li>Calculating emotion in facial features involves detecting facial points and utilizing neural networks.</li> <li>Neural networks are inspired by brain neurons; they can be combined to create complex systems for various tasks.</li> <li>Emotion detection in faces requires identifying facial features and applying neural networks.</li> <li>TensorFlow.js enables machine learning in the browser using JavaScript, making it easier to use and more accessible.</li> <li>Microsoft's Face API uses similar technology to detect faces, emotions, and other attributes in images.</li> <li>TensorFlow and MobileNet are used for image analysis, improving web accessibility with human-readable descriptions of images.</li> <li>Generative adversarial networks (GAN) can generate images based on outlines or data sets, with applications beyond just cats.</li> <li>GANs consist of a generator and discriminator, both competing to improve their performance.</li> <li>Exportable models can run in browsers using JavaScript for further optimization and use.</li> <li>Generative neural networks create new images based on input, with potential applications in art and music.</li> <li>TensorFlow JS book and tutorials are available for learning machine learning with JavaScript.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-swift-daniel-h-steinberg-goto-2019","title":"What\u2019s New in Swift \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6P-nh3uNnsQ</p> <ol> <li>Swift 5.1 introduces improvements such as single expression return removal, raw strings with pound escape, string interpolation enhancements, key paths in functions, and combine map/filter implementation (not yet in main branch).</li> <li>Result type is a powerful feature used for functional programming, providing optional-like behavior with success or failure cases.</li> <li>Doubled function example demonstrates handling out of bounds errors using result types.</li> <li>Maps are utilized to transform values within result types.</li> <li>Swift focuses on dynamic languages for better interoperability with other languages.</li> <li>Dynamic member lookup allows accessing properties without knowing the exact key at compile time.</li> <li>The Dynamic callable protocol enables treating any type as a function that takes arguments and returns a value.</li> <li>Opaque result types are used in Swift UI, allowing the compiler to determine what's being returned at compile time.</li> <li>Function builders facilitate creating complex structures like V stacks from multiple elements, useful for DSLs (domain-specific languages).</li> <li>Trailing closures improve code readability by moving last closure outside parentheses into curly braces.</li> <li>Swift UI leverages function builders for higher order functions.</li> <li>Swift UI's impressive performance is attributed to value types and optimizations.</li> <li>State in Swift UI enables efficient updates through reference storage instead of values.</li> <li>Property wrappers enable customization, such as rounding values to a specific number of places.</li> <li>New features in Swift are inspired by Swift UI's underlying principles.</li> </ol>"},{"location":"goto_programming_lang/#kotlinnative-the-good-the-bad-and-the-ugly-ellen-shapiro-goto-2019","title":"Kotlin/Native: The Good, The Bad, and the Ugly \u2022 Ellen Shapiro \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JHUY1Ckmo64</p> <p>Error</p>"},{"location":"goto_programming_lang/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ol> <li>Erlang is a functional, concurrency-oriented language with fault tolerance and dynamic typing.</li> <li>It features pattern matching for assertions and can implement parallel map functions using list comprehension and process spawning.</li> <li>Monitor function ensures supervision of processes and order preservation in results.</li> <li>Eternity blockchain uses Erlang for its core, offering features such as proof of work, key blocks, microblocks, Sofia smart contract language, state channels, oracles, generalized accounts, context-sensitive authentication, and a carrier class product mentality for stability and efficiency.</li> <li>Quick Check is a powerful testing tool that generates random code to find bugs in Erlang programs.</li> <li>The Fast Eternity transaction engine uses a virtual machine for the Sofya contract language.</li> <li>State channels allow off-chain transactions, improving speed and efficiency.</li> <li>Finite state machines are complex but essential for state channel programming.</li> <li>Blockchain technology requires dynamic languages like Erlang for adaptability.</li> <li>Eternity blockchain has an open-source foundation with grants for development.</li> </ol>"},{"location":"goto_programming_lang/#a-veterans-guide-to-transitioning-android-teams-into-kotlin-g-gilmour-e-boyle-goto-2019","title":"A Veterans Guide To Transitioning Android Teams Into Kotlin \u2022 G. Gilmour &amp; E. Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=ocCE3s9j-9A</p> <ol> <li>Eamonn and Garth are trainers at Instill, a software development company focusing on modern JVM languages like Scala and Kotlin for enterprise apps with Spring Boot.</li> <li>Kotlin is an alternative language for the JVM with many useful features, recommended by Google for Android development due to its benefits.</li> <li>Instill has been using Kotlin in their projects and training courses as it offers advantages over Java, such as reduced codebase (40%), simplified coding, and better memory management.</li> <li>Adopting Kotlin didn't require new frameworks; existing ones can be used with the language.</li> <li>Co-routines are a recent addition to Kotlin, making concurrent code easier to write.</li> <li>Kotlin is easy to learn for developers familiar with other languages like Java, C#, and Swift due to its expressive nature, good interoperability story, and features such as data classes, DSLs, and lambdas with receivers.</li> <li>Kotlin's expressiveness makes it easier to write elegant code while reducing complexity.</li> <li>Kotlin offers features like lazy delegation, weak references, and extension methods for better code readability.</li> <li>Null safety ensures non-nullable types by default, requiring defensive coding only when dealing with nullable types.</li> <li>Top-level functions and expressions simplify code without needing classes or complex structures.</li> <li>Kotlin's evolution makes it a natural choice for developers, offering incremental improvements over other languages.</li> <li>Co-routines are a significant feature in Kotlin, allowing efficient handling of asynchronous tasks while maintaining readable code.</li> <li>Co-routines can be used with other libraries like RxJava for specific use cases.</li> <li>JUnit is mentioned for unit testing instead of newer frameworks due to preferences and ease of use.</li> <li>Co-routines are useful for sequential algorithms.</li> <li>Clover teams are game changers, while JUnit works well for Cortland projects.</li> <li>Documentation issues in early days of Kotlin have been addressed.</li> <li>Dependency injection frameworks can be experimented with.</li> <li>Kotlin native and multi-platform libraries simplify development.</li> <li>Existing skills remain relevant, learning curve is gentle.</li> <li>Cortland gives advantages to businesses in terms of agility and customer satisfaction.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2019","title":"Upgrade Time: Choose Java 11 or the \u201cother\u201d one\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VX3UBvwJtyA</p> <ol> <li>Free event with energy left to listen</li> <li>Various topics discussed: playtime, software engineering company, work, conferences, workshops, tips, happiness, Medion, free time, learning languages, reviews, features in Word, Excel, Wit, Shovel Knight, programming, functional programming, Java, Swift, Huawei, Android, iOS, website, readability, Katleen's languages, badolie, Luca's framework, Spring, Ajax, magic, Albert Heijn, migration, compiling coat, comfort zone, smoothing codebase, programming koppeling, Palmerie, pet project</li> <li>No context provided for summarization- Migrating to Spring Boot</li> <li>Testing and optimizing applications</li> <li>Integration challenges and solutions</li> <li>Board game development and testing</li> <li>Java frameworks and their features</li> <li>Organic functional programming</li> <li>Enhancing technical organizations</li> <li>Adding new features to projects</li> <li>Using different tools for efficiency- Trucje toe showed live koning</li> <li>Site lift, office-apps, and testing</li> <li>Penis is in two hours, choice of the penis</li> <li>Standard library of a second key</li> <li>School of test help</li> <li>Conficker, Link\u00f6ping coat, and weekend targeted JVM</li> <li>Minutes to finger, site hij woont u beeld</li> <li>Hi-bit solution, bringing it for you</li> <li>Compiler tells, comparison link\u00f6ping coat</li> <li>Weekend, targeted JVM one place, minutes to finger</li> <li>Aankoop wie sites, hij woont u beeld</li> <li>De hi-bit solution die kan zijn want je brengt mij</li> <li>Online steps in the ben het beter</li> <li>Productie ze live shows en het juiste punt om mijn koppeling coating toen mijn job folder lid sinds may be a bit slappe</li> <li>But at least mijn keuzes living site b, site en dit is organisch' functionele</li> <li>Which might be fair over de technical organisatie</li> <li>RT en migration ik vind je swing neem mijn tja van voldoet te koop in vodden</li> <li>En mol van de rest tussen met of t's wat je kunt u was wel eens je stukken ketens lijnen en wie place despite koppeling en dan dit nota dit huis toe source code</li> <li>De retorische gebouw zo dit ze bouwde hij just added add to my job project zal eenens checken of dit of dit is running</li> <li>Yes appeltjes doe klink test</li> <li>School van mijn test hulpverlenen</li> <li>Hoewel het stil stil</li> <li>Lammy</li> <li>Work now chart work</li> <li>Dan hou je zoals om spring good looking</li> <li>And will search and that mijn voor tests pas met mij</li> <li>Application stil starred up en het mij en points and still working in venlo het mij en appendices</li> <li>Zo dit was a first step to take naar de second step</li> <li>Dat hij moet een lesje om het stuur maar ik weet je opeens java op chicks te koppeling wat wil doe het yes maar ik weet mag jij</li> <li>Hij kindjes start to make</li> <li>Probleem van en wilt starten maar ik weet mijn meenam jack wat je ze bord chemicus test wordt eeuw verkiezingen zal buik</li> <li>Je c ok\u00e9 hier aan mee lezen developer weidser</li> <li>En wieltjes copy micoach dit zo beheer en just face it</li> <li>Dus amnesie en dan will see this poppen</li> <li>Van jane's</li> <li>Yes-r bond itself which doe mijn werk met de vinger is dat jane's will produce het java equivalent coating clans zuivel</li> <li>Kamp our time beslissen shabai coach dit is waar dat we zal gaan buiten mediums hij can use this take it for granted by two trio cupping pad en voor net en wieltjes</li> <li>Kussen vol start je ruben hoe vol de nullen bot ives which indicate het bij de questionmark</li> <li>En de installation toneel hij doen wat hij nu nobel thaise nooit like deel en nu is zou</li> </ol>"},{"location":"goto_programming_lang/#kotlin-dissecting-the-stdlib-huyen-tue-dao-goto-2019","title":"Kotlin: Dissecting the stdlib \u2022 Huyen Tue Dao \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uCMuGVh7W_0</p> <ol> <li>Kotlin's idiomatic approach can be learned through its standard library, focusing on functional programming concepts.</li> <li>The Collections API in Kotlin is functional and expressive, emphasizing \"what\" rather than \"how\".</li> <li>Higher-order functions are crucial in functional languages; they allow storing functions in variables, passing them as parameters, and returning them from other functions.</li> <li>Lambdas are an important part of Kotlin's functional API, enabling anonymous function definitions.</li> <li>Kotlin allows functional programming with higher-order functions, treating functions as first-class citizens.</li> <li>Lambda functions are compiled into internal classes that extend functional interfaces.</li> <li>Higher-order functions enable passing functions around as parameters or return values.</li> <li>Function references can be used to pass declared functions like lambdas.</li> <li>Kotlin's standard library provides higher-order functions for manipulating code scope and behavior through extensions, apply, run, and let.</li> <li>Lambdas with receivers offer a cleaner syntax by elevating parameters and removing qualifications when calling methods inside the lambda block.</li> <li>Extensions allow adding functionality to classes without subclassing or altering them.</li> <li>Lambdas and receiver functions improve code organization, readability, and reduce visual noise.</li> <li>The Executor method pattern abstracts away ceremony, focusing on critical logic.</li> <li>Closures and captures involve a function accessing scoped values from its environment.</li> <li>Inlining functions can help counteract performance issues by copying the function body into the call site.</li> <li>Non-local returns are possible with inlined functions due to execution context clarity.</li> <li>There is a trade-off between using inline functions and code bloat, so it depends on the situation.</li> <li>The 'noInline' keyword allows treating a parameter as an expression instead of inlining it.</li> <li>Reification helps retain type information for better type checking with inline functions.</li> <li>Kotlin conventions provide flexibility and readability through features like infix notation, operator overloading, and destructuring declarations.</li> <li>Contracts (1.3 feature) help define how a function behaves, ensuring correct usage.</li> </ol>"},{"location":"goto_programming_lang/#life-after-java-8-trisha-gee-goto-2019","title":"Life After Java 8 \u2022 Trisha Gee \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eBuFzQeiGe0</p> <ol> <li>Java release cadence has changed from every three years to six months, with two licenses for Oracle JDK: open source and commercial.</li> <li>OpenJDK is free but updated every six months; the commercial version offers long-term support for three years. AdoptOpenJDK provides community-run builds with long-term support.</li> <li>Java 8 remains popular among developers, while Oracle's focus on licensing and support changes may impact future versions.</li> <li>Oracle's commercial JDK and open JDK are the same but have different licenses; Adopt OpenJDK offers long-term support for various Java versions.</li> <li>New features in Java 9 include JShell, a tool for interactive code execution without class files or main methods, and Far (local variable type inference) for improved readability.</li> <li>Convenience factory methods for collections were introduced in Java 9, making it easier to create lists and sets from arrays or iterables.</li> <li>Java 10 allows collecting two unmodifiable collections; Java 11 added predicates not, providing more options for method references. Optional in later versions improved functional handling and readability.</li> <li>Java 11 introduced a built-in HTTP client with non-blocking reactive streams support. Multi-release JAR files allow libraries to use newer features without requiring specific Java versions.</li> <li>Java 9's jigsaw (modularity) allows for smaller deployables and easier integration of third-party libraries; Java 12 has preview features like switch expressions, which may change before becoming solid.</li> <li>Future releases will include text blocks, lambda leftovers, data classes, and performance enhancements. Moving to a recent version of Java improves performance, memory usage, and attracts better developers.</li> <li>Staying up-to-date with six-monthly release cycles allows for faster updates and testing; Java is evolving with frequent updates, focusing on performance and cost reduction.</li> <li>Multiple garbage collectors cater to different application types; migrating to newer versions of Java can improve code readability, performance, and reduce maintenance costs.</li> <li>Tips for migration: run on updated JDK, fix compiler warnings, update dependencies, build tools, and gradually adopt new features.</li> </ol>"},{"location":"goto_programming_lang/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <ol> <li>Spring Boot simplifies project creation, making it easier to manage dependencies and versions.</li> <li>Kotlin allows for top-level functions and multiple classes in a single file.</li> <li>Inferring types in Java 11 can reduce the need for explicit type declarations.</li> <li>Spring Data provides magic through annotations, but some developers prefer explicit code.</li> <li>Magic is found in annotations, making it difficult to understand implicitly defined code.</li> <li>The speaker discusses using Spring Data to simplify Java code and suggests removing annotations by utilizing Kotlin, Spring Boot 2.3, and Spring Framework 5.2 for better readability.</li> <li>Use the Route DSL for better organization and explicitness in configuration files.</li> <li>The importance of making code more explicit while still being concise and easy to understand is emphasized.</li> <li>Reified generics in line can help with dependency injection, and Shrink creates beans automatically based on dependencies.</li> <li>Spring Foo is an experimental project that aims to be explicit and without annotations.</li> <li>Kofu focuses on functional programming, making code more concise and easier for compilers like Gravy VM.</li> <li>Migrating to Kofu requires being reactive, which may cause issues with existing libraries like Spring Data GP.</li> <li>DSLs are used for different aspects of the application, making it more explicit and easier to check in IDEs.</li> <li>Removing magic from a Spring Boot app involves removing controllers, beans, and using bean DSL.</li> <li>The main takeaway is that Spring Boot is great, and people can experiment with Kofu or other frameworks.</li> </ol>"},{"location":"goto_programming_lang/#it-really-is-easier-to-ask-for-forgiveness-than-permission-naomi-ceder-goto-2019","title":"It Really is Easier to Ask for Forgiveness (than Permission) \u2022 Naomi Ceder \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=SYrVZR_g718</p> <ol> <li>Naomi Cedar discusses exceptions in various programming languages, highlighting their unique approaches to error handling.</li> <li>Pearl uses segfaults and return value checks for error handling.</li> <li>C++ adds exception handling but lacks deep integration within the language.</li> <li>Java combines exceptions with checking before performing actions.</li> <li>JavaScript allows flexible error handling by allowing any object as an exception.</li> <li>Go has a unique approach, using error codes returned from functions.</li> <li>Python's exception system is straightforward and customizable through its rich hierarchy.</li> <li>Exceptions can be used for control flow in addition to error handling (Harry Potter theory).</li> <li>Generator exit exceptions occur when generators are not properly cleaned up, preventing memory leaks.</li> <li>Python uses exceptions as a form of flow control and simplifies code readability.</li> </ol>"},{"location":"goto_programming_lang/#rust-2018-access-all-areas-florian-gilcher-goto-2019","title":"Rust 2018: Access All Areas \u2022 Florian Gilcher \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=sCSfyQYDImM</p> <ol> <li>Rust is a new language designed for building reliable and efficient software.</li> <li>It focuses on performance, reliability, and productivity.</li> <li>Rust offers memory safety with strict resource handling for concurrency and parallelism.</li> <li>Ownership and resource management are key features of the language.</li> <li>No runtime or garbage collector is needed as it's a native programming language.</li> <li>Rust's memory layout allows custom construction and allocation on the heap.</li> <li>Ownership ensures resources are managed effectively, with values having trackable regions of active use.</li> <li>Results in Rust allow for error handling without exceptions using enums with success or failure variants.</li> <li>Rust's ownership and borrowing system ensure data safety in parallel programming.</li> <li>Parallel and concurrent programming libraries like crossbeam and rayon are available for easy implementation.</li> <li>Async/await syntax allows choosing the right concurrency pattern for different devices.</li> <li>Rust's send and sync properties enable passing values between concurrent units, independent of power or parallelism library used.</li> <li>Rust's ownership concept enables multiple ownership of data through smart pointers.</li> <li>Atomic reference counters (ARC) ensure safe thread access and prevent data loss.</li> <li>Mutexes help synchronize data access in multi-threaded programs.</li> <li>Rust is used for fast CLI programs with structured code generation, serialization, and deserialization capabilities.</li> <li>Embedded Linux is a popular platform for deploying small devices like routers, IoT gateways, and industrial control systems.</li> <li>Rust supports bare metal embedded devices and has a complete tooling system.</li> <li>Rust can interact with C and C++ using static and dynamic libraries.</li> <li>Sealed Rust project aims to bring certification of rust for safety critical use cases.</li> <li>Rust is a memory safe C replacement with performance similar to C and C++.</li> <li>It can be used as a library for existing C code, making it suitable for mobile use cases.</li> <li>Rust has tools for generating libraries that look like C libraries.</li> <li>Sealed Rust project aims to bring certification of the language for safety critical use cases.</li> <li>Rust offers productivity features such as documentation, books, and tooling support.</li> <li>It can be used in various ways without requiring a complete switch from other languages.</li> <li>Rust is useful in IoT sector due to its ability to cover all use cases from small devices to service systems.</li> </ol>"},{"location":"goto_programming_lang/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>Draftbit, a platform for building mobile apps visually using Expo and React Native, has transitioned from JavaScript to Reason due to its ease of use and reduced technical debt.</li> <li>The company's stack includes React Native, Expo, GraphQL, Apollo, Postgres, and WebAssembly. They aim to provide a fast and efficient development experience for early-stage companies.</li> <li>Reason is a JavaScript-like functional language with a friendly compiler built on top of OCaml and uses NPM for package management. Benefits include faster compilation, fewer errors, easy integration with existing projects, and helpful error messages.</li> <li>React components in reason are familiar to JSX users with some differences like destructuring. A real-world project demonstrates the use of ReasonML and React.</li> <li>Pipe first feature in ReasonML allows composable functions, while its standard library, Belt, offers useful tools. Converting immutable lists to arrays for browser compatibility is also discussed.</li> <li>Hooks in React are used in ReasonML, offering safety and ease of use. Pattern matching with switch statements in reason is powerful, as well as variants for complex data structures. Jen type generates bindings between JavaScript and reason, simplifying integration.</li> <li>Reason allows using existing JavaScript components, working together with Ohmecamel to provide three output options: byte code, native code, and JavaScript. BuckleScript focuses on readable, safe, and optimized JavaScript compilation, offering tree shaking for smaller compiled files.</li> <li>Deep integration with JavaScript libraries enables efficient optimization and performance improvements. The community can create custom bindings between Reason and JavaScript using specific syntax.</li> <li>Many large companies use BuckleScript in production, including Bloomberg Messenger, Accenture, McKinsey &amp; Company, Jane Street, and Facebook. Learn more through meetups, Google Discord groups, and upcoming conferences. Give BuckleScript a chance as it may become popular like React did.</li> </ol>"},{"location":"goto_programming_lang/#achieving-functional-programming-in-java-john-napier-goto-2019","title":"Achieving Functional Programming in Java \u2022 John Napier \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VUH_HhAaNpc</p> <ul> <li>Speaker is a software developer at an algorithmic trading firm.</li> <li>Lambda is an open source library for functional programming in Java.</li> <li>Guiding principles for effective programming:</li> <li>Constraints should be precisely stated via type.</li> <li>JDK generic operations should have generic interfaces.</li> <li>Lazy evaluation is a useful default.</li> <li>Partial operations should be encoded as total operations.</li> <li>Pure and impure operations should be separate in design and type checking.</li> <li>Encode partial operations as total operations</li> <li>Separate pure and impure operations</li> <li>Precisely state constraints</li> <li>Use lambda types for better representation</li> <li>Utilize co-products for type safety</li> <li>Generic interfaces for generic operations</li> <li>Discussed issues with tuples and optional values in languages like Java, Ruby, and Go.</li> <li>Introduced the Either type to represent success or failure semantics.</li> <li>Highlighted the importance of generic operations for functional programming.</li> <li>Explained how functors can be used as a first class concept in Lambda.</li> <li>Demonstrated flat map operation on different types like Optional, Stream, and Completable Future.</li> <li>Discussed lazy evaluation and its usefulness in dealing with dates.</li> <li>Lambdas offer a rich library of functional iteration patterns.</li> <li>Covers functors, applicative functors, monads, and more.</li> <li>Generic operations provide reusability and lawful behavior.</li> <li>Data types like Either and Maybe for composable expressions.</li> <li>Lambdas' Either type has caching, ensuring, and try with resources semantics.</li> <li>Generic operations lead to reusability and efficient code.</li> <li>Data types like Maybe, Either, Unit, and Curried functions are useful in functional programming.</li> <li>Partial application allows for flexible function usage.</li> <li>Semigroups and Monoids provide useful properties and functions.</li> <li>Functional iteration patterns (map, filter) can be applied to various data structures.</li> <li>Heterogeneous data structures like HList allow different types of elements.</li> <li>Lenses for focusing on specific elements in a list or map.</li> <li>IO monad for handling asynchronous tasks and concurrency.</li> <li>Lambda project available on GitHub under MIT license.</li> </ul> <p>No context: - Lambdas are functional programming concepts in Java. - Guiding principles for effective programming. - Either type represents success or failure semantics. - Generic operations provide reusability and lawful behavior. - Data types like Maybe, Either, Unit, Curried functions. - Partial application allows flexible function usage. - Semigroups and Monoids offer useful properties and functions. - Functional iteration patterns (map, filter) can be applied to various data structures. - Heterogeneous data structures like HList allow different types of elements. - Lenses for focusing on specific elements in a list or map. - IO monad handles asynchronous tasks and concurrency. - Lambdas' library available under MIT license.</p>"},{"location":"goto_programming_lang/#embracing-the-future-in-a-multi-platform-world-a-kotlin-story-sean-mcquillan-goto-2019","title":"Embracing the Future in a Multi-Platform World: A Kotlin Story \u2022 Sean McQuillan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xilI3dIOJfI</p> <ol> <li>Kotlin Multi-platform allows sharing app logic between iOS and Android, with UI layers remaining native to each platform.</li> <li>The technology supports JVM (Android), LLVM (iOS), and JavaScript targets for persistence layer generalization across platforms.</li> <li>Team structure should include frontend teams (iOS/Android) and a mobile backend team responsible for data layer and shared libraries.</li> <li>Kotlin Multi-platform is in beta stage, with new ideas like safe threading, expect classes, and shared data storage between platforms being explored.</li> <li>Adoption curve suggests early adopters should start now while pragmatic users may wait until Q1 2021.</li> <li>Key concepts include atomic references, co-routines, frozen objects, and worker threads for safe threading in Kotlin Multi-platform.</li> <li>Sudoku application demonstrates cross-platform iOS and Android project using Kotlin Multi-platform.</li> </ol>"},{"location":"goto_programming_lang/#server-side-kotlin-with-coroutines-roman-elizarov-goto-2019","title":"Server-side Kotlin with Coroutines \u2022 Roman Elizarov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=hQrFfwT1IMo</p> <ol> <li>Cotton, a general purpose language, addresses modern programming challenges through its suspend functions for natural asynchronous coding.</li> <li>Service-oriented architecture leads to complex business logic and cascading failures due to slow services; synchronous programming is one solution using threads and waiting for responses.</li> <li>Various approaches like callbacks, futures/promises, and reactive programming are used for asynchronous programming. Cotton's suspend functions simplify this process without complex combinators.</li> <li>Reactive programming can be hard to read due to code combinations; some languages propose a sink await paradigm based on futures (e.g., C# tasks or JavaScript promises).</li> <li>Carbon Curtains use suspend functions for more natural programming without future combinators, and Spring 5.2 natively supports them. Adapters can help integrate with frameworks that don't directly support suspending functions.</li> <li>Performance is crucial for server-side applications; callbacks are efficient low-level primitives. Suspending functions in Spring 5.2 make it easier to write asynchronous code.</li> <li>If your framework doesn't support synchronous or asynchronous operations, use reactive or future builders with adapters. Curtain builder helps transform code with curtains into a synchronous type for other frameworks.</li> <li>Suspending functions are more efficient than traditional approaches in terms of memory allocation and performance. Configuring service threads depends on the I/O framework used but is easier to scale with suspending functions.</li> <li>If blocking occurs due to legacy code or third-party libraries, use a dispatcher thread pool to execute tasks asynchronously. Configure system efficiency by using context to avoid blocking main threads and create separate thread pools for different types of operations (CPU, I/O, etc.).</li> <li>Curtains provide natural support for consolation, allowing cancellation of long-running tasks. They ensure safe execution, preventing leaks and resources from being left behind after failures. Enforcing curtain usage through types helps with documentation and better organization of code.</li> </ol>"},{"location":"goto_programming_lang/#the-language-of-programming-anjana-vakil-goto-2019","title":"The Language of Programming \u2022 Anjana Vakil \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6EdFiISk22k</p> <ol> <li>Programming languages and human language share a relationship, as they both serve as means of communication.</li> <li>Linguistics studies various languages to understand how they work, while linguistic typology analyzes features across different languages.</li> <li>Every language has unique aspects that contribute to the overall picture of human language.</li> <li>Programming involves analyzing software at different levels of abstraction and follows programming paradigms, which are like linguistic theories.</li> <li>Linguistics teaches descriptive analysis instead of prescriptivism, similar to how programming should be understood in context.</li> <li>Code is a human activity that evolves with changing needs and should be considered within broader social contexts.</li> <li>Creating beginner-friendly teaching languages in different languages helps share collaborative power worldwide.</li> <li>Learning programming should be gradual, similar to how children acquire natural language.</li> <li>Communities play a crucial role in learning and advancing skills; investing in these communities is essential for progress.</li> </ol>"},{"location":"goto_programming_lang/#java-current-and-future-georges-saab-mikael-vidstedt-goto-2019","title":"Java Current and Future \u2022 Georges Saab &amp; Mikael Vidstedt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vJrHHe3IbQs</p> <ol> <li>Java is a thriving technology, with ongoing development and improvements.</li> <li>Open JDK offers early access binaries for testing new features.</li> <li>Focus on cloud-friendly, small footprint, fast startup time, low latency, and AI/ML applications.</li> <li>Oracle leads most of the investment in Java's future.</li> <li>New release cadence: frequent releases every six months with smaller increments.</li> <li>Long-term support (LTS) releases for stable performance, security fixes, and no new features.</li> <li>Oracle pricing model: $25 per month on servers, $2.50 on desktops; scales with usage.</li> <li>Projects like Amber, Valhalla, Panama, GraalVM, and Quarkus are being developed in open JDK.</li> <li>Valhalla focuses on adding inline classes to Java for better performance.</li> <li>Amber project aims to improve the performance of Java applications through optimized garbage collection.</li> <li>Panama adds support for foreign function interfaces (FFI) for native library access.</li> <li>GraalVM is a high-performance runtime that compiles various languages into native machine code.</li> <li>Quarkus is a Kubernetes-native Java stack for building cloud-native applications.</li> <li>Valhalla project aims to improve Java performance by optimizing memory usage and reducing overhead.</li> <li>Inline classes (value types) are being developed for better performance, but compatibility concerns exist.</li> <li>Matrix multiplication example shows significant improvement in speed, memory allocation, and CPU efficiency with inline classes.</li> <li>Projects aim to make Java more expressive, easier to read while maintaining type safety.</li> <li>Local variable type inference simplifies code by letting the compiler infer types.</li> <li>Switch expressions are a preview feature that allows switch statements to return values.</li> <li>Pattern matching simplifies type checking and casting.</li> <li>Records provide a simpler way of creating objects with default constructors, hash codes, equals methods, etc.</li> <li>Loom enhances concurrency by using fibers (lightweight threads) and delimited continuations for asynchronous programming.</li> <li>Panama connects Java to C/C++ libraries and native data through a new API.</li> <li>Metropolis aims to move Java Runtime components into Java, starting with JIT compilers.</li> <li>Scarlet focuses on modernizing developer experience for JDK development.</li> <li>Portola explores making sure the JDK works well in containers like Alpine Linux.</li> <li>CGC is a project working on a garbage collector with low pause times and support for large heaps.</li> <li>Early access binaries available for JDK 13, including Valhalla, Panama, and J package projects.</li> <li>Focus on improving Java development and user experience.</li> </ol>"},{"location":"goto_programming_lang/#the-soul-of-erlang-and-elixir-sasa-juric-goto-2019","title":"The Soul of Erlang and Elixir \u2022 Sasa Juric \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JvBT4XBdoUE</p> <ol> <li>Erlang and its runtime, the BEAM virtual machine, are part of Joe Armstrong's legacy.</li> <li>BEAM uses processes for concurrency, with separate execution contexts, memory space, and message passing.</li> <li>Concurrent programming in BEAM allows systems to be split into independent parts for better scalability and flexibility.</li> <li>Demonstration shows the benefits of using multiple processes in a system.</li> <li>BEAM offers an alternative software building style that is simpler yet more powerful and flexible than traditional approaches.</li> <li>Lix implementation uses Erlang with a single OS process, showcasing its potential for millions of lightweight programs.</li> <li>BEAM's schedulers handle process execution efficiently, even managing 10K processes at 20% capacity.</li> <li>User-facing pages and WebSockets enable input and asynchronous results.</li> <li>Calculation processes improve fault tolerance and high availability by handling individual requests.</li> <li>BEAM's scheduler ensures fair distribution of CPU time through frequent context switching.</li> <li>Negative inputs can cause issues, but the system still functions with reduced efficiency.</li> <li>Fixing issues is crucial for maintaining high availability.</li> <li>Using BEAM's debugging capabilities, operators can identify and resolve problems in processes.</li> <li>Elixir's technical uniformity simplifies development and maintenance across distributed systems.</li> <li>Swarm dependency manages cluster state and process associations.</li> <li>Three lines of code make a service distributed without extra processes or containers.</li> <li>Technical uniformity benefits include easier setup, teamwork improvement, and reduced need for specialists.</li> <li>Elixir can handle complex challenges without rewriting everything from scratch.</li> <li>Author promotes their book \"Elixir in Action\" with a discount code.</li> </ol>"},{"location":"goto_programming_lang/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <ol> <li>Speaker loves programming and believes it's a creative discipline with no limits but one's mind.</li> <li>Philosophy and computer science share similarities, as Ludwig Wittgenstein discussed boundaries/limits in language.</li> <li>Programming languages limit problem-solving due to different paradigms.</li> <li>Majority of audience loves programming, knows multiple languages, and has a favorite one.</li> <li>Closure is a functional programming language with unique features like shared code across platforms and immutable data structures.</li> <li>A lecture capture tool project was developed using closure for audio recording and sharing.</li> <li>Lisp was used in the project to demonstrate how data structures can be utilized.</li> <li>Introduced a lecture capture application idea using Closure, with shared code between platforms and shared libraries.</li> <li>Discussed immutable data structures and atomic references in Closure.</li> <li>Demonstrated hot reloading and state management in development systems.</li> <li>Showcased an example of a fun game with changing states.</li> <li>Encouraged learning various programming languages and paradigms, including Closure.</li> <li>Saved orangutans through the nonprofit organization.</li> </ol>"},{"location":"goto_programming_lang/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <ol> <li>Typescript was released in 2012 as a tool for compiling code into JavaScript, aiming to improve the language rather than replace it.</li> <li>CoffeeScript and Dart were other compile-to-JavaScript tools that didn't achieve the same level of success as Typescript due to various reasons.</li> <li>Typescript has been more successful because it feels familiar to existing JavaScript developers while focusing on improving the language.</li> <li>Both CoffeeScript and Dart faced challenges in gaining mass adoption among the JavaScript community, primarily due to unfamiliar code for developers.</li> <li>NativeScript initially considered not using TypeScript but later embraced it as it made developers more productive.</li> <li>Typescript's success can be attributed to its commitment to the JavaScript standard, familiarity for developers, and opt-in typing system.</li> <li>The typescript compiler can infer types without explicit declarations, making it easier to learn and use.</li> <li>Tooling support in editors like Visual Studio Code provides intelligent suggestions, autocomplete, and seamless integration with libraries and frameworks.</li> <li>Types are available for popular libraries and frameworks through NPM packages, enhancing the development experience.</li> <li>Flow is similar to Typescript but operates directly on JavaScript files, making it slightly slower.</li> <li>Benefits of using Typescript include improved productivity for large teams, better code understanding, and easier collaboration with non-JavaScript developers.</li> <li>Downsides of Typescript include configuration complexity and advanced features that may confuse some developers.</li> <li>Organizations with diverse app developers may benefit from using TypeScript, as it can be useful for debugging and non-JavaScript developers can find comfort in using it for front-end work.</li> </ol>"},{"location":"goto_programming_lang/#rust-async-programming-in-2018-katharina-fey-goto-2018","title":"Rust Async Programming in 2018 \u2022 Katharina Fey \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=j0SIcN-Y-LA</p> <ol> <li>Rust is a systems programming language focusing on safety in memory and thread ownership.</li> <li>Borrowing data in Rust ensures proper ownership and prevents concurrency issues.</li> <li>Async programming allows non-blocking I/O without creating new threads, making it efficient and easy to use.</li> <li>In 2013, Lib Green was introduced for asynchronous programming but required a runtime; it was removed in late 2014 leading to the development of mio.</li> <li>Rust has zero-cost abstractions like futures RS for efficient asynchronous programming.</li> <li>Tokio combines mio and futures RS with an event reactor, providing a stable technology stack since 2016.</li> <li>Rust 2018 introduced async/await feature for writing asynchronous code using an event loop in the background.</li> <li>Futures library provides building blocks for creating async applications.</li> <li>Ownership model ensures data is accessed by only one function at a time.</li> <li>Async/await syntax uses weight macro to interact with runtime without needing an event loop.</li> <li>Standard library includes futures abstraction for compatibility across devices.</li> <li>The async/await syntax is stable in nightly compiler, but the library ecosystem needs improvement.</li> <li>Stability expected by early 2019, but delays due to other issues.</li> </ol>"},{"location":"goto_programming_lang/#fresh-async-with-kotlin-roman-elizarov-goto-2018","title":"Fresh Async With Kotlin \u2022 Roman Elizarov \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=hb0hfHVWCS0</p> <ol> <li>History of coroutines and synchronous programming</li> <li>Traditional approach: callbacks (callback hell)</li> <li>Solution: Futures/Promises (different names in various languages)</li> <li>Issues with futures: Complexity, learning new primitives, readability</li> <li>Kotlin Coroutines: Designed to solve callback hell and improve code readability</li> <li>Suspend functions: Marked with a special modifier, allowing for suspension of execution</li> <li>Cotton curtains aim to solve callback hell by using the suspend modifier for functions that can suspend execution</li> <li>Suspended functions are compiled into GBM declarations, which use continuation (callback) parameters</li> <li>In Java, there's a variety of future types across different libraries; Kotlin Coroutines integrate with these libraries through 'lift' extension function</li> <li>Async/await is not available in Kotlin; instead, it offers a better solution for asynchronous programming using suspend functions</li> <li>Kotlin coroutines offer simple and powerful features for concurrency</li> <li>Kotlin's approach to concurrency differs from C# and other languages</li> <li>Cotton language focuses on structured concurrency with suspended functions, sync functions, and deferred types</li> <li>Cotton supports parallelism without forcing it upon developers</li> <li>Suspended functions in Cotton allow for synchronous programming without shared mutable state</li> <li>CSP (Communicating Sequential Processes) is a solution to the problem of shared mutable state</li> <li>Cotton 1.30 stabilized curtains, making them a stable feature</li> </ol>"},{"location":"goto_programming_lang/#keeping-up-with-java-sander-mak-goto-2018","title":"Keeping Up with Java \u2022 Sander Mak \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cF-rUNCOm2c</p> <ol> <li>Java 9 introduced a module system for better code organization and dependency management.</li> <li>Modules allow strong encapsulation, ensuring only necessary dependencies are exposed.</li> <li>Module paths help in running applications with explicit dependencies.</li> <li>The module system improves maintainability and flexibility of large code bases.</li> <li>Java 11 has removed some enterprise IPs like JAXB, RI, and XML Web Services; applications must bundle their own dependencies.</li> <li>JShell is an interactive coding environment with code completion and documentation.</li> <li>Collection factory methods in Java 9 improve collection initialization.</li> <li>Local variable type inference was added in Java 10 with 'var'.</li> <li>Java 11 has a new HTTP client API, now part of the standard library.</li> <li>Adopt a strategy based on your company or team needs regarding LTS and non-LTS versions.</li> <li>Oracle JDK's licensing changed to commercial for Java 11, making openJDK more relevant. Long-term support will be provided every three years starting from Java 17.</li> <li>OpenJDK and Oracle JDK feature parity since Java 11, with some proprietary features removed. When moving from Java 8 to 11, consider using openJDK again.</li> <li>Long-term support for Oracle JDK 11 is available through subscription; long-term support for OpenJDK 11 may be offered by other parties like Azul and IBM's AdoptOpenJDK.</li> <li>If following release train (Java 11 to 12 to 13), plain openJDK bills are sufficient. When jumping from LCS to LCS, consider adopting a vendor's JDK (Oracle, Azul, Red Hat, AdoptOpenJDK).</li> </ol>"},{"location":"goto_programming_lang/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ul> <li>Mozilla contractor and Rust developer, Ashley Williams, shared her experience of convincing NPM to use Rust.</li> <li>NPM is the largest package registry with over 1 million packages.</li> <li>Rust is a systems programming language designed for Firefox's codebase.</li> <li>To convince companies to adopt Rust, focus on its benefits and potential drawbacks.</li> <li>Don't completely rewrite software in Rust; use microservices architecture.</li> <li>Showcase Rust through code demonstrations and avoid bashing other languages.</li> <li>Be a systems developer and advocate for Rust within your company.</li> <li>Emphasize safety, speed, and ergonomics when explaining Rust benefits.</li> <li>Ensure Rust is accessible to all developers by using real-world examples.</li> <li>Encourage collaboration with other languages; Rust can complement them.</li> <li>Be patient and persistent while promoting Rust within your company.</li> <li>Introduce new technology without controlling someone's first experience.</li> <li>Focus on inclusivity, documentation, tooling, and support tools like cargo and crates.io.</li> <li>Rust has a strong focus on documentation and tooling, providing resources for developers.</li> <li>Rust cares about inclusivity with programs like increasing breast reach and Russ bridge.</li> <li>Selling tech should consider technical merits but also other factors.</li> <li>Be prepared for technology changes in the industry.</li> <li>Rust's memory management can make writing fast code more complicated, requiring attention to details.</li> <li>Rust has a strong compiler that helps catch errors and ensures correctness.</li> <li>Boring code can be reliable due to Rust's safety features.</li> <li>Compilers provide helpful error messages and guidance.</li> <li>Focus on solving problems rather than using the latest technology.</li> <li>Rust is good at processing files, particularly markdown.</li> <li>Prioritize reliability over speed when possible.</li> <li>Server performance affects team dynamics.</li> <li>Focus on solving real problems, not just cool ones.</li> <li>Rust is useful for specific tasks like file processing and memory management.</li> <li>Learning new technologies can be energizing and beneficial for employee motivation.</li> <li>Gumption (initiative, resourcefulness, enthusiasm) is essential when introducing new tech.</li> <li>WebAssembly allows compiling Rust to run in browsers or Node.js.</li> <li>Try new things, but consider context and other people's experiences.</li> </ul>"},{"location":"goto_programming_lang/#functional-programming-in-40-minutes-russ-olsen-goto-2018","title":"Functional Programming in 40 Minutes \u2022 Russ Olsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=0if71HOyVjY</p> <ol> <li>Functional programming is a refactoring of existing programming knowledge, focusing on organizing and reusing working pieces with a new paradigm.</li> <li>Traditional object-oriented programming may have become messy, requiring refactoring, which functional programming aims to address.</li> <li>It starts with a clean sheet of paper, emphasizing simplicity and core ideas while seeking a new paradigm for programming.</li> <li>Functional programming borrows ideas from mathematical functions, introducing pure functions that only consider input and output without side effects.</li> <li>Immutable data structures are used to maintain program understanding, along with persistent data structures that efficiently handle copying during modification.</li> <li>Combining pure functions and immutable data structures creates a functional programming world with no side effects.</li> <li>Closure provides atoms for representing mutable state and bridges between functional and real-world code. Agents are used to handle side effects like database updates or file deletions.</li> <li>Functional programming offers a better way to write programs but still has issues like off-by-one errors.</li> <li>Pedestal, a library written in a functional style, demonstrates that functional programming works in practice.</li> <li>Functional programming mainly consists of writing functions and dealing with interfaces.</li> </ol>"},{"location":"goto_programming_lang/#the-dos-and-donts-of-error-handling-joe-armstrong-goto-2018","title":"The Do's and Don'ts of Error Handling \u2022 Joe Armstrong \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=TTM_b7EJg5E</p> <ul> <li>Fault-tolerant systems are designed to work despite failures.</li> <li>Hardware redundancy helps minimize hardware issues, but software errors are more common and harder to eliminate.</li> <li>Distributed programming is crucial for fault tolerance as it allows concurrent execution of programs on multiple computers.</li> <li>Message passing is the foundation of object-oriented programming and should be consistent across scales.</li> <li>Airline language unifies ideas from concurrent programming, object-oriented programming, and functional programming to create an easy-to-understand framework for fault-tolerant systems.</li> <li>Involvement in fault-tolerant systems since 1980: Created Erlang programming language for Ericsson, focusing on detecting and fixing errors; unified object-oriented programming with functional programming; Ellen (Erlang) became open source due to being banned within Ericsson; founded Blue Tail company, later acquired by Altium Web Systems; Nortel Networks bought Altium Web Systems.</li> <li>Discussed the importance of messaging in programming and the need for self-consistency in software systems.</li> <li>1985: Moved to Ericsson, worked on Flex (object-oriented hardware).</li> <li>In 1998, Erlang became open source due to Nortel Networks acquisition of Ericsson.</li> <li>Airline model of computation and shared memory systems were adopted in programming languages.</li> <li>Reliability of service should be applied to consumer products.</li> <li>Six rules for building reliable systems: support concurrency, encapsulate errors, detect faults, stable storage, make simple choices when errors occur, and have an error kernel.</li> <li>Erlang's error kernel is small (200 lines of code) and used by companies like WhatsApp, CERN, and National Health Services in the UK.</li> <li>Importance of fault tolerance and scalability in concurrent programming.</li> <li>Error handling through hierarchical architecture, where each level handles errors differently.</li> <li>Concurrency allows for better fault tolerance and security by isolating components.</li> <li>Erlang's approach to error handling: crash immediately, log the issue, and move on.</li> <li>Concurrency makes programming easier as it can be applied to both local and distributed systems.</li> <li>Importance of reliable systems through isolation.</li> <li>Concurrency and programming languages.</li> <li>Arithmetic errors and their impact on precision.</li> <li>Observational equivalence in system behavior.</li> <li>Need for describing protocols and contracts.</li> <li>Architecture with client, server, and contract checker.</li> <li>Contract checkers assign blame when issues occur.</li> <li>Programming languages are not important; focus on behavior at interfaces.</li> <li>Observational equivalence is about same patterns in black boxes.</li> <li>Focus on interactions between components and message passing.</li> <li>Contracts describe protocols, assign blame, and help with architecture.</li> <li>Immune system idea for detecting internal errors and self-healing.</li> <li>Error kernel logs errors, restarts failed parts.</li> <li>Distinction between error and failure.</li> <li>Asynchronous messaging needs order in message passing.</li> <li>Protobufs are moving in the right direction but not adequate.</li> <li>Session types exist for sequencing messages.</li> <li>No context provided on existing systems for telecommunications.</li> </ul>"},{"location":"goto_programming_lang/#software-automation-in-a-polyglot-stack-jessica-kerr-goto-2018","title":"Software Automation in a Polyglot Stack \u2022 Jessica Kerr \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cEyjEEK0xuo</p> <ol> <li>Polyglot programming is common due to various reasons, such as fitting the language to a problem and considering community and people involved.</li> <li>Introducing new languages can be beneficial for growth and innovation, but also think about existing enterprise stacks and individual preferences.</li> <li>Gradually build new tools with modern technologies while ensuring automation makes bringing in new languages less painful for teams.</li> <li>Readme-driven development starts with human needs, then automates the process.</li> <li>Automate project setups to help people explore easily using docker containers or other tools.</li> <li>Make automation accessible to everyone on the team and ensure documentation is clear and consistent.</li> <li>Encourage team collaboration with a centralized API for better efficiency and safety.</li> <li>Focus on generativity, which involves overall growth rather than individual productivity.</li> <li>Risk management involves considering worst-case scenarios and making software easier to change.</li> <li>Update organizational tools regularly for an agile development process.</li> <li>Add reversibility through tools and processes.</li> <li>Avoid automating everything in production, learn by hand first.</li> <li>Use mental models and pair/mob programming for shared understanding.</li> <li>Understand the objective behind changes and new tools.</li> <li>Convince people about new tools or languages, focusing on high-level objectives and new capabilities.</li> <li>Empathy plays a role in understanding others' concerns.</li> <li>Start small and show useful results before moving to bigger changes.</li> </ol>"},{"location":"goto_programming_lang/#the-robustness-of-go-francesc-campoy-goto-2018","title":"The Robustness of Go \u2022 Francesc Campoy \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=40d26ZGfhR8</p> <ol> <li>Robustness in computer science focuses on how programs function when things go wrong.</li> <li>Go language addresses memory safety through pointers without pointer arithmetic, garbage collection, automatic bounds checks, and escape analysis.</li> <li>Rust has a more complex type system for memory safety.</li> <li>Type safety in Go is achieved via static typing and efficient compiler checks.</li> <li>Erlang's robustness comes from its fault tolerance and graceful handling of errors.</li> <li>Go's memory management uses stack allocation for local variables, offering performance benefits.</li> <li>Type safety is maintained through static typing, no implicit type conversion, and explicit conversions for compatibility.</li> <li>Interfaces are checked at compile time in Go, leading to easy-to-understand errors.</li> <li>No exceptions prevent blocking issues in concurrent programs.</li> <li>Concurrency features include goroutines, channels, and select for multiple operations.</li> <li>Mutable state can lead to incorrect results in Go; data races are detected using the race detector.</li> <li>Nil pointers are useful but require careful handling.</li> <li>Go lacks generics, making some implementations challenging.</li> <li>Panic is similar to exceptions but allows recovery through deferred functions.</li> <li>Robustness in Go depends on underlying systems; it cannot prevent catastrophic failures.</li> <li>Erlang offers better concurrency with actors and fault detection.</li> <li>Live code upgrade enables continuous running without downtime.</li> <li>Stable storage ensures transactions are either fully completed or not at all, preventing data corruption.</li> <li>Kubernetes provides robustness through containers, nodes, clusters, automatic failure detection, and recovery.</li> <li>Rolling updates allow live code upgrades in Kubernetes.</li> <li>Go's robustness comes from its architecture rather than the language itself.</li> <li>Go has not yet decided on a version management system due to its origins at Google with one repository.</li> <li>DEP and Vigo are tools for dependency management and versioning in Go.</li> <li>A dynamic hot code swapping feature is currently impossible in Go, but it's an interesting idea.</li> <li>A potential future direction could be a distributed runtime that allows go routines to run on different machines without needing Kubernetes.</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-with-kotlin-hadi-hariri-goto-2018","title":"Functional Programming with Kotlin \u2022 Hadi Hariri \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=eNe5Nokrjdg</p> <ol> <li>Introducing functional programming in Kotlin</li> <li>Benefits of functional programming: abstraction, expressive and concise code</li> <li>Kotlin as an object-oriented language with functional constructs</li> <li>Basic syntax for functions in Kotlin</li> <li>Understanding unit, nothing, and top-level objects in Kotlin</li> <li>Higher order functions and lambdas support in Kotlin</li> <li>Lambdas can be used with single parameter names</li> <li>Extension functions allow adding new functionality to existing classes</li> <li>Infix notation for more readable function calls</li> <li>Concepts of anonymous functions and lambdas in Kotlin</li> <li>Lambda behaviors, such as non-local returns in forEach</li> <li>Data classes can be made immutable with val properties</li> <li>Immutability helps avoid invalid objects and simplifies validation logic</li> <li>Custom getters on immutable properties may not work as expected</li> <li>Kotlin's Const keyword guarantees constant expressions for properties</li> <li>Partial functions (e.g., process entry) can be handled using checked exceptions or result classes with success/failure subclasses</li> <li>Algebraic data types provide safety by restricting inheritance to specific files</li> <li>Arrow library offers built-in functionality, including Either type for handling either a successful result or an error message</li> <li>Partial functions handle all cases, unlike total functions</li> <li>Arrow library provides built-in solutions to simplify option type handling</li> <li>Introducing the concept of option in Kotlin</li> <li>Map and flatMap functions for working with options</li> <li>Bind function for monadic comprehensions</li> <li>Creating a custom configuration DSL using objects, invocation, and extension functions</li> <li>Implementing DSLs may not be suitable for every class or project; it depends on the requirements and complexity of the codebase</li> </ol>"},{"location":"goto_programming_lang/#c-the-newest-old-language-matt-godbolt-goto-2018","title":"C++ - the Newest Old Language \u2022 Matt Godbolt \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=HAFrggEDr5U</p> <ol> <li>C++ is a powerful and evolving language with numerous benefits, including recent updates like auto, range for, lambdas, move semantics, smart pointers, and more.</li> <li>Auto allows the compiler to infer variable types, simplifying code.</li> <li>Range for makes iterating over containers easier.</li> <li>Lambdas enable inlining small functions and capturing variables.</li> <li>Move semantics help manage memory efficiently by transferring object ownership.</li> <li>Smart pointers actively manage memory, reducing memory leaks.</li> <li>C++ has seen significant improvements with new features like range-based for loops, lambdas, move semantics, smart pointers, context/constexpr, atomics, user-defined literals, return type deductions, and lambda enhancements.</li> <li>C++17 introduced constexpr if statements (if constexpr) for template meta programming.</li> <li>New features in the pipeline include concepts, ranges, co-routines, and improved network programming support.</li> <li>Value types are passed by value, making them easier to handle and reason about in code.</li> <li>Strong typing helps catch errors early on, such as passing the wrong parameters to a function.</li> <li>Custom types can be modeled with specific behavior and operations.</li> <li>Constructors allow for default initialization, ensuring objects are initialized properly.</li> <li>Const keyword ensures an object remains unchanged during method calls.</li> <li>Object lifetime management is crucial; destructors run when objects go out of scope.</li> <li>Custom types can have their own lifecycle management, such as releasing resources upon destruction.</li> <li>Mutation in objects can indicate they're not allowed to change, signaling callers that methods won't affect the object.</li> <li>C++ unique pointers ensure ownership transfer and prevent copying temporary values.</li> <li>Compilers can optimize code based on memory layout, leading to faster execution.</li> <li>Clang compiler is recommended for its error messages and tooling support.</li> <li>Sanitizers help detect errors in programs, ensuring better security.</li> <li>The C++ community has grown with guidelines, best practices, and resources available online.</li> <li>Rust offers similar performance to C++ but is stricter on borrowing and ownership.</li> <li>Clang tooling is a C++ language server.</li> <li>Sea Lion Community Edition helps with C++ development.</li> <li>The C++ community has improved recently, with clear guidelines and best practices.</li> <li>Rust is similar to C++ but stricter about ownership and borrowing.</li> <li>Sanitizers are used in some core Google components for security reasons.</li> <li>Package management systems like Conan help manage dependencies.</li> <li>TDD can be done using catch library with BDD and TDD modes.</li> <li>Core guidelines support is available, though the standard library is mostly fine.</li> <li>Boost is a high-quality general-purpose library for algorithms.</li> <li>C++ adoption barriers are being addressed to improve user experience.</li> </ol>"},{"location":"goto_programming_lang/#why-is-rust-successful-florian-gilcher-goto-2017","title":"Why is Rust Successful? \u2022 Florian Gilcher \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=-Tj8Q12DaEQ</p> <ul> <li>Rust is a new systems programming language developed by Mozilla and the community, focusing on safety, concurrency, and speed.</li> <li>It has explicit notions of mutability, data ownership (borrowing), and treats errors as values.</li> <li>Data ownership ensures static deallocation through reference counting.</li> <li>Borrowing can be done in immutable or mutable ways, ensuring no conflicting access to shared state.</li> <li>Rust offers a safe environment with an optional unsafe sublanguage for specific cases.</li> <li>The language combines safety techniques from research settings into production-ready packages.</li> <li>It's used in sizable production environments like Firefox, Dropbox, and canonical infrastructure.</li> <li>More than 2000 contributors have worked on the project, with over 80% of contributions coming from outside Mozilla.</li> <li>Rust has grown significantly since its inception, now having more libraries than Haskell.</li> <li>It's considered a loved language by developers and is used for production software.</li> <li>Stylo, the styling engine powering Firefox Quantum, uses Rust's concurrency tracking for efficient parallelization.</li> <li>The language has a strict commitment to stability, releasing every six weeks with minimal breaking changes.</li> <li>It's backwards compatible and piggybacks on other mature technologies like LLVM.</li> <li>Mozilla follows an open governance structure for changes and improvements.</li> <li>Visual Studio Code and JetBrains' Rust IDE are recommended for development.</li> <li>Compile performance is improving over time with around 20-30% gains in half a year.</li> <li>Rust's static nature makes it unsuitable for heavy dynamic programming or object-oriented environments.</li> <li>Maturity of libraries varies depending on the field.</li> <li>Rust has a framework and library called Tokyo for non-blocking I/O.</li> <li>Fuzzing is possible with tools like American Fuzzy Lop, LipFuzz, and LLVM fuzzers.</li> </ul>"},{"location":"goto_programming_lang/#flutter-the-best-way-to-build-for-mobile-kasper-lund-goto-2017","title":"Flutter: The Best Way to Build for Mobile? \u2022 Kasper Lund \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=1BXg4wfB9pA</p> <ul> <li>Flutter is a new framework for building mobile apps, designed to be productive and efficient with custom UIs and fast applications.</li> <li>Based on Dart language runtime and Skia graphics library, it offers Material design components for easy app development.</li> <li>The framework is reactive and compiles to native code, running on Android, iOS devices, and web browsers.</li> <li>Flutter provides a layered framework with predefined high-quality widgets for rapid app development, supporting custom UI across platforms.</li> <li>It allows building apps with a single codebase for both Android and iOS platforms, offering customization based on platform requirements.</li> <li>Dart has been upgraded to have a sound type system for better scalability, and the compiler converts Dart code into native code or JavaScript for different platforms.</li> <li>Flutter's Just-In-Time (JIT) compilation during development and Ahead-Of-Time (AOT) compilation for deployment improve productivity.</li> <li>The framework has an open source alpha release focusing on localization, accessibility, and screen reader support.</li> <li>Accessing platform-specific APIs involves writing native code in Java, C++, or Swift, then exposing it through a messaging API to the Dart layer.</li> <li>Flutter is stable with few breaking changes, learning from customer feedback to improve its API.</li> <li>The framework compiles to native machine code for better performance and efficiency.</li> </ul>"},{"location":"goto_programming_lang/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ul> <li>Uber's growth and scale: 73 countries, 470 cities, 1.5 million active driver partners</li> <li>JavaScript usage in Uber's engineering: Node.js for web applications, Go, Java, Python</li> <li>Reasons for using JavaScript: Flexibility, asynchronous nature, mature module ecosystem</li> <li>Four ways Uber uses JavaScript: Backend microservices, front-end web properties, data visualization, external API for developer platform</li> <li>Migration to other languages: Focus on Go and Java due to their scalability and performance (Uber started with PHP, moved to Node.js)</li> <li>Node.js has core strengths: asynchronous I/O, non-blocking single threaded event loop, great module ecosystem</li> <li>Uber's marketplace platform consists of 3400+ microservices, with 100 services for the core trip flow</li> <li>They use JavaScript for front-end development with React and Express</li> <li>The developer experience team focuses on productivity tools and infrastructure</li> <li>Microservices allow clear ownership boundaries, product specific velocity, independent team velocity</li> <li>Node.js helps Uber scale by providing language and platform independence (started with monolithic architecture, transitioned to microservices)</li> <li>Benefits: clear ownership boundaries, product velocity, scalability, language and platform independence</li> <li>Challenges: increased complexity, discovery, eventual consistency, operational overhead</li> <li>Scaling node applications: geo-sharding, Ring Pop for application level sharding, T Channel RPC protocol, Jaeger for distributed tracing</li> <li>Use standard Linux performance tools for profiling and visibility (T Channel: RPC protocol for efficient communication between microservices)</li> <li>Node.js provides performance tools and observability for distributed services</li> <li>Performance issues with dynamic typing languages like JavaScript</li> <li>Microservices require tight interfaces, statically typed languages help enforce this</li> <li>Node.js ecosystem has small libraries but some issues with maturity and dependency chains</li> <li>C++ can be used to improve performance in certain cases</li> <li>Architecture decisions are important for scaling teams and services</li> <li>Consistent platform foundation helps maintain web applications efficiently</li> <li>Web platform built on node.js, npm, Express, React, and Redux</li> <li>Investing in technology platforms solves problems like security vulnerabilities and duplicated effort (Uber's web platform is built on Node.js, Express, React, and Redux)</li> <li>They use customized tools for internal NPM registry, build automation, authentication, security, metrics logging, internationalization, error handling, and analytics</li> <li>Separating front-end services from back-end services allows better scaling and reusability across platforms</li> <li>React components are used to standardize UI design and make it easy for developers to create good-looking websites without dedicated designers on each team (React, Express, Redux)</li> <li>Style Tron is used for managing CSS, making it easier to handle styles in one place</li> <li>JavaScript is used for data visualization with libraries like React Vis, React MapGL, and Deck GL</li> <li>Luma GL simplifies WebGL interaction</li> <li>Node SDK exposes microservices for third parties to build custom experiences</li> <li>Uber shares open source tools on GitHub and engineering blog (Uber uses open source libraries and tools for their developer platform)</li> <li>They expose 3400 microservices as business domain objects via Node SDK (most of these tools are available on GitHub, explained in detail through engineering blogs)</li> <li>Uber aims to build an open platform for third parties to create moving experiences using their tools and data</li> <li>The company has offices worldwide, and they encourage people to join the team</li> </ul>"},{"location":"goto_programming_lang/#elixir-the-only-sane-choice-in-an-insane-world-brian-cardarella-goto-2017","title":"Elixir: The only Sane Choice in an Insane World \u2022 Brian Cardarella \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=gom6nEvtl3U</p> <ol> <li>Infinity refers to the increasing demand on engineering teams for solving complex problems.</li> <li>Elixir is a language built upon Erlang, which was created for telecommunication systems with requirements like zero downtime and hot code loading.</li> <li>Jose Valim developed Elixir as a lightweight language built upon the Erlang virtual machine.</li> <li>Elixir inherits battle-tested 30-year old technology from Erlang, offering solutions to complex problems with modern syntax.</li> <li>Elixir is used by multibillion-dollar corporations for its proven technology and features like battle-tested concurrency and distributed systems.</li> <li>Elixir has a strong tooling system with built-in debugging, linting, documentation, and dependency management tools.</li> <li>Pattern matching is a key feature in Elixir, allowing for more concise code and easier refactoring.</li> <li>Phoenix is a popular web framework used with Elixir.</li> <li>Erlang VM manages processes within the language, ensuring efficient resource usage and distribution across available CPU cores.</li> <li>Deployment targets like Roku are not ideal for Elixir due to cost and performance issues; alternatives include Rackspace or AWS Lambda.</li> <li>Bleacher Report reduced infrastructure costs by moving to Elixir/Phoenix, requiring fewer servers and engineers.</li> <li>WhatsApp's scalability is another example of Erlang's benefits.</li> <li>Gen server allows for blocking requests and fire-and-forget queries.</li> <li>Supervisors manage processes, ensuring a clean restart when errors occur.</li> <li>Let it die philosophy in Erlang focuses on maintaining a good initial state.</li> <li>Supervisors in Elixir monitor workers, with strategies for handling errors or worker death.</li> <li>Agents can be used to maintain state outside the process for better resilience.</li> <li>Functional programming focuses on data and data out, making state more visible.</li> <li>Ruby's focus is on making programming enjoyable.</li> <li>Object-oriented programming (OOP) can be complex and challenging.</li> <li>Functional programming is simpler to learn, with Elixir as an example.</li> <li>Elixir uses modules instead of classes for code reuse.</li> <li>Memory allocation in functional programming is more efficient than OOP.</li> <li>Phoenix framework and Elixir are used by Dr. Calm Consulting.</li> </ol>"},{"location":"goto_programming_lang/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Elm is a functional programming language that compiles to JavaScript, offering more reliability and predictability than JavaScript.</li> <li>Integrate Elm with existing JavaScript applications using interop techniques.</li> <li>Ellie allows side-by-side development of Elm and JavaScript apps while maintaining Elm's guarantees.</li> <li>Embed Elm in JavaScript apps for interactivity, preserving data transfer between the two languages.</li> <li>Elm Architecture: View function returns virtual DOM, model represents state, user interaction triggers messages, and effects are handled using commands.</li> <li>Interoperability with JavaScript: Use commands to send data from Elm to JavaScript, and subscriptions for data transfer in reverse.</li> <li>Multiple embeds can coexist on a page, communicating through subscriptions.</li> <li>Incrementally integrate Elm into existing applications while considering runtime overhead.</li> <li>Use Elm for business logic and embed it in the DOM or as a drop-in component with libraries like React Elm Components.</li> <li>Refer to official resources for more information on interoperability between Elm and JavaScript, maintaining guarantees, and client-server communication.</li> </ol>"},{"location":"goto_programming_lang/#demystifying-scala-kelley-robinson-goto-2017","title":"Demystifying Scala \u2022 Kelley Robinson \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IayQ7lxPUP4</p> <ul> <li>Scala is a statically typed, functional programming language.</li> <li>It combines object-oriented and functional programming styles.</li> <li>Inherently object-oriented and functional, Scala offers interoperability with Java.</li> <li>Popular in industries like finance, telecommunications, and media.</li> <li>Large community with resources for learning and development.</li> <li>Compiles to Java bytecode, runs on the JVM, and leverages existing tools/libraries.</li> <li>Features include type inference, immutable data by default, multiple inheritance of traits, pattern matching, higher-order functions, and flexibility in coding styles.</li> <li>Reasons for using Scala: productivity, familiarity with Java, strong community, interoperability, and performance.</li> <li>Challenges: lack of standard syntax guide, managing teams, difficulty understanding some code due to complexity.</li> <li>Resources for learning: Repl.it, Coursera's Functional Programming Principles in Scala course, LearnScala.org, official Scala website.</li> <li>Testing frameworks: ScalaTest, multiple options available.</li> <li>Good tooling support for development: SBT (Scala Build Tool).</li> </ul>"},{"location":"goto_programming_lang/#programming-across-paradigms-anjana-vakil-goto-2017","title":"Programming Across Paradigms \u2022 Anjana Vakil \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Pg3UeB-5FdA</p> <ol> <li>Paradigms are fundamental patterns that influence our understanding of programming and the universe.</li> <li>Thomas Kuhn's \"Structure of Scientific Revolutions\" explains how paradigm shifts occur in science, where communities move from one dominant model to another as anomalies arise.</li> <li>Programming paradigms include functional, object-oriented, logic, and others, each with its own theory, methods, and standards.</li> <li>Paradigms can be applied across various domains like data analysis, machine learning, and natural language processing.</li> <li>Shifting from one paradigm to another requires a community consensus on the new model's usefulness and ability to address anomalies.</li> <li>Scientific paradigms and programming languages have evolved over time.</li> <li>Imperative programming focuses on commands, state, and precise timing.</li> <li>Object-oriented programming (OOP) introduced objects with their own state and interactions via messages.</li> <li>Functional programming focuses on pure functions that return values without changing state or side effects.</li> <li>Declarative programming is about describing the desired result instead of how to achieve it.</li> <li>Domain-specific languages (DSLs) are specialized for specific tasks, making code more readable and maintainable.</li> <li>Different paradigms can have similar concepts, making them less distinct than initially thought.</li> <li>Declarative programming includes logic programming and object-oriented (OOP) &amp; functional programming.</li> <li>Both OOP and functional programming reject shared mutable state, focusing on messaging and immutability respectively.</li> <li>Object-oriented code can be rewritten in a functional way using closures.</li> <li>Paradigms are worldviews or mindsets that define how we conceive the universe of our program.</li> <li>No single paradigm is best; it depends on the problem being solved and personal preference.</li> <li>Paradigms are useful in different ways, depending on the problem.</li> <li>Each paradigm has unique contributions to the dialogue of programming.</li> <li>Different paradigms can be combined for better solutions.</li> <li>The key is to understand the problem and choose the best approach.</li> <li>Understand the importance of different programming paradigms.</li> <li>Declarative, imperative, object-oriented, and functional programming each have their strengths for specific problems.</li> <li>Multiparadigm languages allow exploring various approaches without learning new syntax.</li> <li>Expanding your repertory of paradigms helps improve as an individual programmer.</li> <li>Importance of understanding and embracing different programming paradigms.</li> <li>Multi-paradigm languages allow exploring various mindsets and problem-solving approaches.</li> <li>Paradigms define the nature of programs, problems they solve, and solutions they provide.</li> <li>Mixing paradigms in a system is possible if supported by the language; mixing different languages can be more complicated.</li> <li>Assembly code represents the imperative paradigm.</li> <li>Microservices are decentralized systems that fit Alan Kay's vision of object-oriented programming, and can also be seen as pure functions.</li> </ol>"},{"location":"goto_programming_lang/#why-you-should-take-another-look-at-c-mads-torgersen-goto-2016","title":"Why You Should Take Another Look at C# \u2022 Mads Torgersen \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=zQXNq-isqFI</p> <ol> <li>C# is a widely used and loved programming language, constantly evolving to remain modern and relevant.</li> <li>Microsoft actively works on improving the language, drawing inspiration from sister languages like F#.</li> <li>C# can be utilized across various platforms beyond Windows, thanks to Project Roslyn and .NET Core.</li> <li>Xamarin enables developers to create native apps for Android, iOS, Mac, and Windows using C#.</li> <li>Unity leverages C# for 2D and 3D game development.</li> <li>The .NET Core framework offers a lightweight solution for server-side use, cross-platform compatibility, and open source accessibility.</li> <li>Project Roslyn modernizes the C# language engine, making it accessible across tools and platforms.</li> <li>OmniSharp uses Roslyn to provide semantically aware C# modes in multiple editors.</li> <li>The Analyzer framework helps build code analysis tools with fixes for enforcing coding styles or refactoring.</li> <li>Roslyn provides complete information for code analysis, enabling developers to create custom analyzers and fixers.</li> <li>C#'s evolution includes aggressive innovation, mainstreaming concepts from other languages, and embracing new core libraries.</li> <li>Roslyn improves the development experience and language evolution by providing better tools and frameworks.</li> <li>Generics are deeply implemented in runtime for improved performance.</li> <li>Async heavily relies on Generics for efficiency.</li> <li>C# 7 focuses on functional programming and data, not necessarily object-oriented concepts.</li> <li>New features include tuples, binary literals with digit separators, refactoring to generate methods, and pattern matching.</li> <li>Tuples are value types, allowing mutability and deconstruction.</li> <li>Pattern matching is being introduced in C# for more flexibility in the 'is' expression.</li> <li>Future plans include smarter patterns for better integration into the language, nullable types for reference types, a 'bang operator', improved framework annotations, and nullability propagation.</li> </ol>"},{"location":"goto_programming_lang/#exploring-swift-memory-layout-mike-ash-goto-2016","title":"Exploring Swift Memory Layout \u2022 Mike Ash \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=ERYNyrfXjlg</p> <ol> <li>Memory is fundamental to computing, organized as a sequence of bytes with addresses.</li> <li>Pointers are used to reference memory locations.</li> <li>Modern systems store data in little-endian order.</li> <li>Memory is divided into three parts: hardware level, stack for local variables, and heap for dynamically allocated objects.</li> <li>Unsafe buffer pointers allow creating arrays from containers.</li> <li>Mach call (mach vm read overwrite) can safely read from pointers without crashing.</li> <li>Recursive scanning systems use safe pointer reading and guess how many bytes to read at any given time.</li> <li>Malloc size function is for heap allocation data, dladder function for symbol information, demangling tools for Swift and C++ symbols.</li> <li>Detect textual data using ASCII characters heuristic.</li> <li>Analyzing memory layouts in different programming languages:<ul> <li>C structs are simple with fields laid out sequentially.</li> <li>C++ classes have a vtable pointer for virtual method dispatch and inheritance.</li> <li>Swift structs are similar to C, with no extra metadata or overhead.</li> <li>Swift classes have additional runtime information but object data is stored sequentially.</li> </ul> </li> <li>Classes in Objective-C have extra metadata, while method calls translate into array lookups for efficiency at runtime.</li> <li>Subclassing multiple levels still results in the same memory layout.</li> <li>Arrays in Swift are reference types but appear as value types at runtime.</li> <li>Protocols in Swift can store structs inline if they fit size limit; otherwise, stored dynamically.</li> <li>Enums in Swift are compact and efficient, representing each case with a single byte.</li> <li>Any Objective-C objects in Swift 3 are now represented as 'any'.</li> <li>Xcode 8's new memory debugging features offer live graphs and limited tracing capabilities.</li> </ol>"},{"location":"goto_programming_lang/#exploring-rxjava-2-for-android-jake-wharton-goto-2016","title":"Exploring RxJava 2 for Android \u2022 Jake Wharton \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=htIXKI5gOQU</p> <ol> <li>Reactive programming is crucial due to the increasing complexity of asynchronous code.</li> <li>Traditional imperative programming struggles with handling multiple asynchronous sources and managing state.</li> <li>Android apps require reactive thinking for a smooth user experience, as they are inherently asynchronous.</li> <li>RxJava helps model these asynchronous sources in a way that makes it easier to handle complex scenarios.</li> <li>RxJava has two main types: Observable and Flowable, both representing zero to N items with termination possibilities.</li> <li>Backpressure is a concept in RxJava 2 that allows you to slow down data sources when your system cannot process them fast enough.</li> <li>RxJava 2 offers specialized observables for reactive data handling, such as Single, Completable, and Maybe.</li> <li>FromCallable models synchronous behavior, while the create method is useful for wrapping existing sources.</li> <li>The create method allows modeling asynchronous data and cancellation actions when subscribers unsubscribe.</li> <li>RxJava 2 provides various types of observables for modeling data sources and offers operators to manipulate or combine data.</li> <li>Reactive programming helps developers write code that reacts to changes instead of managing state manually.</li> <li>RxJava 2 is an improved version focusing on asynchronous programming in Android, with a developer preview release and a final release planned soon.</li> </ol>"},{"location":"goto_programming_lang/#microservices-in-go-matt-heath-goto-2016","title":"Microservices in Go \u2022 Matt Heath \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=WiCru2zIWWs</p> <ol> <li>Speaker is a back-end engineer focusing on Go for three years.</li> <li>Mons oh is a new startup building a bank with modern technology using Go.</li> <li>The app has features like spending analysis and card control.</li> <li>Reasons for choosing Go: simplicity, static typing, comprehensive standard library, lightweight concurrency.</li> <li>Go's communication approach: favors process communication over shared memory.</li> <li>Statically linked or linked Go code allows easy deployment on various machines without runtime dependencies.</li> <li>Frameworks like go kit, micro, and timeit can be used to build services quickly.</li> <li>Speaker introduces their own framework called Month Called Time (MCT) for communication between services using message buses like RabbitMQ.</li> <li>Infrastructure includes an HTTP routing layer, API services, individual services for specific tasks.</li> <li>Benefits of microservice architecture: easy deployment of new functionality without impacting other services.</li> <li>Microservice architecture with Go language for banking infrastructure.</li> <li>Routing layer to handle HTTP requests and drop into proxy.</li> <li>API services with defined endpoints, public APIs, and external providers.</li> <li>Kubernetes for high availability, cost savings, and efficient resource usage.</li> <li>Exponentially weighted moving average load balancer for detecting failures.</li> <li>Asynchronous processing using Kafka to publish events and handle business logic.</li> <li>Well-defined interfaces and tracing systems like Zipkin for understanding infrastructure behavior.</li> <li>Utilize Go's context package for thread-local variables.</li> <li>Microservices can be beneficial if you understand your business, but may cause issues with interface changes.</li> <li>Kafka handles transactions by writing events into a partition and uses two-phase commit in the credit card network.</li> <li>Cassandra supports SQL databases through standard library drivers.</li> <li>Sample web poker API uses protocol buffers for request/response communication across services.</li> <li>Moving from PHP and Java to Go as a microservice architecture choice.</li> <li>Go stores code in packages with encapsulation and exported interfaces.</li> <li>Kafka is used for distributed transactions, with retry mechanisms.</li> <li>Cassandra supports SQL databases through standard library drivers.</li> <li>Sample web poker API uses protocol buffers for request/response communication across services.</li> <li>Moving from monolithic systems to microservices is a continuous process.</li> <li>Encapsulated Java MQ and Go service using Scala driver service.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-ready-for-production-hadi-hariri-goto-2016","title":"Kotlin - Ready for Production \u2022 Hadi Hariri \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=R0J_Jl7bKY8</p> <ol> <li>Kotlin is a language developed by JetBrains in 2010, designed for interoperability and tooling with Java compatibility.</li> <li>It has been adopted by various companies like Google, Pinterest, and Square. Gradle supports Kotlin, recommending plugins be written in it.</li> <li>Kotlin is open source and available on multiple platforms such as IntelliJ IDEA, Android Studio, Eclipse, NetBeans, Maven, Gradle, Kobalt, Ant, and command-line.</li> <li>Kotlin offers easy interoperability between Java and Kotlin, with a small runtime (900KB) and standard library features like filterMap, flatMap, etc.</li> <li>It is statically typed, compiling down to Java, JVM, and JavaScript. Kotlin follows conventions for accessing objects, functions, and properties from both Java and Kotlin.</li> <li>Kotlin allows top-level functions without the need for classes, reducing boilerplate code. It has immutable (val) and mutable (var) variables with a name: type convention.</li> <li>Kotlin reduces boilerplate code compared to Java. Properties are declared in the class, with val for immutable and var for mutable variables. Constructors can be added to initialize objects. Objects can be used for singletons or other purposes. Functions can be created without specifying return types (default is Unit).</li> <li>Kotlin has features similar to JavaScript, TypeScript, and Scala. It focuses on conciseness, readability, and expressiveness.</li> <li>Kotlin's restricted language design aims to improve readability and maintainability compared to other languages.</li> <li>Kotlin offers various features such as lambda with receiver, extension functions, delegation support, lazy evaluation, and algebraic data types.</li> <li>Lambda with receiver allows accessing an object within a lambda expression without explicitly creating it. Extension functions add new functionality to existing classes without inheritance. Delegation provides first-class support for delegating methods from one class to another. Kotlin has lazy evaluation through asSequence, similar to Java's Stream concept. Algebraic data types use the sealed modifier in Kotlin to restrict a class's inheritance and enable exhaustive checks on its subclasses.</li> <li>Kotlin is a pragmatic language with an easy learning curve, interoperating with Java, allowing for low-risk adoption and mixing of classes. It offers various features like sealed classes, co-routines, data class hierarchies, type aliases, deconstructing lambdas, bound method references, delegated properties, local, and Java 8/9 support. Kotlin is committed to providing Java 6 support but improves code optimization for Java 8/9.</li> <li>Resources include kotlinglang.org, try.kotlinglang.org (in-browser IDE), books, community on Slack, Twitter, and forums. Kotlin aims to be enjoyable and provides a starting point for converting Java classes into Kotlin code using IntelliJ.</li> <li>Kotlin provides Java 6 support, but improves for Java 8/9 with code optimization and functionality. Includes JavaScript and Native support (Kotlin to Native). Try.kotlinglang.org offers an in-browser IDE without installation. Kotlin books are available, including \"Kotlin for Android Developers\". Active community on Slack, forums, and Twitter.</li> <li>JetBrains' commitment to Kotlin is due to its use in their products.</li> </ol>"},{"location":"goto_programming_lang/#micropython-the-internet-of-things-damien-george-goto-2016","title":"MicroPython &amp; the Internet of Things \u2022 Damien George \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=EvGhPmPPzko</p> <ul> <li>Damien George, a former theoretical physicist, developed Micro Python to run on microcontrollers.</li> <li>Reasons for choosing Python: Large community, easy learning curve, shallow but long learning curve, native bitwise operations, and distinction between integer and floating point numbers.</li> <li>Challenges with existing Python implementations: High memory usage, inefficient method calls, heap memory allocation, and garbage collection.</li> <li>Micro Python features: Optimized memory usage, no heap memory, no garbage collection, and a small runtime environment.</li> <li>Kickstarter project: Launched in 2013 to fund the development of Micro Python for microcontrollers.</li> <li>Goals: Reduce memory consumption and improve efficiency.</li> <li>MicroPython uses interned strings, fixed numbers, optimized method calls, ahead-of-time compilation with a virtual machine, static allocation, and garbage collection reduction.</li> <li>Open source project hosted on GitHub allows community contributions and feedback from different platforms.</li> <li>Runs on the Pi board (192k RAM, 1MB ROM) at 168 MHz and can be used as a lightweight Python implementation for desktop testing.</li> <li>Used in various projects like European Space Agency, BBC micro:bit, and Internet of Things chips.</li> <li>Kickstarter campaigns raised funds for developing Micro Python for specific hardware.</li> <li>Micro Python is not a full version of Python but aims to enable Python to run where it couldn't before.</li> <li>Features include JSON support, hardware access through the machine module, web server capabilities, and Wi-Fi connectivity.</li> <li>Access to hardware features like GPIO pins and PWM function for controlling LEDs with adjustable frequency.</li> <li>Ongoing work includes async I/O support, multi-threading, and integration with other languages.</li> <li>Micro Python is suitable for low-power, small devices like Arduino C or embedded C.</li> <li>It can be used in various applications such as internet-connected coffee machines and teaching courses.</li> <li>The future of micro Python lies in its growth as an open source project with a sustainable community.</li> </ul>"},{"location":"goto_programming_lang/#using-modern-c-in-anger-todd-montgomery-goto-2016","title":"Using Modern C++ In Anger \u2022 Todd Montgomery \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=9KljYagEPnE</p> <ol> <li>Aaron is a modern messaging transport designed for low latency and predictable performance, focusing on simplicity, integration, and composability.</li> <li>The architecture consists of client, conductor, driver, and media components.</li> <li>A C++ version of the driver is in development, allowing C++ applications to communicate with other languages.</li> <li>Modern C++ (C++11 and beyond) emphasizes resource ownership and lifetime management through mechanisms like RAII, smart pointers, lambdas, and function objects.</li> <li>Smart pointers include shared_ptr for reference counting, weak_ptr for soft references, and unique_ptr for single ownership.</li> <li>Lambdas and function objects simplify code and make it more powerful but can be tricky to use effectively.</li> <li>C++11 introduced new features like lambdas, function objects, atomic operations, thread support, move construction, and assignment.</li> <li>Modern tool chains improve development efficiency (e.g., make, Google Tasks, JetBrains' SeaLion).</li> <li>Lambdas, atomic operations, thread support, and tool chains are essential for modern C++ development.</li> <li>Lessons learned: lambdas, atomic operations, thread support, and tool chains are crucial for modern C++ development.</li> <li>Stack allocation is vital for performance, especially in high-performance systems.</li> <li>Value types can reduce memory usage and improve performance.</li> <li>Move construction and assignment can be tricky; sometimes copying may be better than moving.</li> <li>The rule of three/five/zero helps understand the interaction between different constructors and assignment operators.</li> <li>Iterating over collections like images or block buffers can benefit from maintaining arrays instead of using move constructors.</li> <li>Move constructors and assignment operators have deeper implications than just providing mechanisms.</li> <li>Rule of three, rule of five, and rule of zero are guidelines for using these features effectively.</li> <li>Sometimes language features aren't built for specific tasks; alternative solutions may be better.</li> <li>C++11 introduced atomic operations and memory models to address interoperability issues with other languages like Java.</li> <li>A project focused on improving IPC performance in C++ achieved 32 million messages per second, outperforming Java (15 million) and job (started at 15 million).</li> <li>Optimizations in C++ lead to better performance.</li> <li>Working on persistence, replication, and error correction for log buffer structure.</li> <li>Collaboration with other developers leads to innovative ideas.</li> </ol>"},{"location":"goto_sw_arch_list/","title":"Goto sw arch list","text":""},{"location":"goto_sw_arch_list/#building-distributed-applications-with-event-driven-architecture-eric-johnson-goto-2023","title":"Building Distributed Applications with Event Driven Architecture \u2022 Eric Johnson \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=9StQpMLC-5Q</p> <ul> <li>Serverless architecture is a way of building applications where you build and run your code without having to manage any servers.</li> <li>Benefits of serverless architecture include:<ul> <li>Reduced operational costs</li> <li>Simplified scaling</li> <li>Faster time-to-market for new features</li> <li>Improved developer productivity</li> </ul> </li> <li>Challenges of serverless architecture include:<ul> <li>Cold starts</li> <li>Limited control over infrastructure</li> <li>Vendor lock-in</li> </ul> </li> <li>Tips for building event driven architectures:<ul> <li>Use asynchronous over synchronous communication</li> <li>Use routers and buses to maintain item potency</li> <li>Maintain a good understanding of your data flow</li> <li>Monitor and test your system thoroughly</li> </ul> </li> <li>Serverless Land is a website that provides resources for learning about serverless architecture, including getting started tips, patterns, and more.</li> </ul>"},{"location":"goto_sw_arch_list/#generic-or-specific-making-sensible-software-design-decisions-bert-jan-schrijver-goto-2023","title":"Generic or Specific? Making Sensible Software Design Decisions \u2022 Bert Jan Schrijver \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=lh5qWwIj06s</p> <ul> <li>The speaker discussed the trade-offs between going generic or specific when it comes to network architecture, libraries, and code.</li> <li>Going generic can save time and effort in the short term but may lead to inflexibility and difficulty in making changes later on.</li> <li>Going specific can be more time-consuming upfront but can provide greater flexibility and adaptability in the long run.</li> <li>The speaker suggested considering the \"YAGNI\" principle (You Ain't Gonna Need It) and avoiding over-engineering or building for hypothetical future needs.</li> <li>The speaker recommended keeping code simple, as this can make it easier to change and maintain over time.</li> <li>Overall, the talk emphasized the importance of striking a balance between short-term efficiency and long-term adaptability in network architecture and code design.</li> </ul>"},{"location":"goto_sw_arch_list/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm for managing data in a decentralized manner</li> <li>It has similarities with service mesh and microservices, allowing for the production and consumption of data to be decentralized while still being supported by a centralized platform</li> <li>The centralized platform needs to be oriented differently than before, focusing on independent operation, Federated governance, and decentralized decision making</li> <li>This is in contrast to traditional data management approaches which often result in data silos and bureaucratic decision making</li> <li>Data mesh aims to break down these barriers and enable organizations to make better use of their data</li> <li>The speaker has had a year one experience report from their journey into this world and hopes to come back in future years to discuss what worked and what didn't.</li> </ul>"},{"location":"goto_sw_arch_list/#repls-all-the-way-up-a-rubric-for-better-feedback-loops-avdi-grimm-goto-2023","title":"REPLs All The Way Up: A Rubric For Better Feedback Loops \u2022 Avdi Grimm \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=k9lwn-RqEsE</p> <ul> <li>The talk is about how to be a rebel in software development.</li> <li>To be a rebel, you need to cultivate safe ways to play and automate the repetitive tasks.</li> <li>Leave room for open-ended exploration and hope for surprises.</li> <li>Keep seeking new questions instead of just looking for answers.</li> <li>The talk covers how to do this at different levels: as an individual contributor, a team lead, and at higher levels in the organization.</li> <li>At the individual level, you can automate repetitive tasks, leave room for exploration, and seek out new questions.</li> <li>At the team level, you can create safe spaces to play and experiment with new technologies.</li> <li>At the organizational level, you can cultivate a culture of curiosity and open-endedness, and encourage people to ask new questions instead of just looking for answers.</li> <li>The talk emphasizes the importance of automation, exploration, and seeking new questions in order to be a rebel in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#democratising-software-architecture-eoin-woods-goto-2023","title":"Democratising Software Architecture \u2022 Eoin Woods \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=nchRmYvUf2Y</p> <ul> <li>The speaker introduced themselves and gave a brief overview of their background in software architecture.</li> <li>They discussed the importance of making architecture more continuous in a digital age.</li> <li>They talked about how architecture practices can be improved by incorporating continuous practices, such as continuous integration and delivery.</li> <li>They also mentioned the book \"Continuous Architecture and DevOps\" and the website continuousarchitecture.com as resources for learning more about these concepts.</li> <li>The speaker discussed the importance of involving stakeholders in the architecture process and making sure that they understand the value of architecture.</li> <li>They talked about how to make architecture more visible in an organization, including using visualization tools and creating a culture of transparency and communication.</li> <li>They also mentioned the book \"The Continuous Architecture Practice: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker discussed the importance of continuously evolving architecture to keep up with changing business needs, and how this can be done through continuous learning, experimentation, and feedback.</li> <li>They also mentioned the book \"Continuous Architecture: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker concluded by summarizing the key points of their talk and providing resources for further learning.</li> </ul>"},{"location":"goto_sw_arch_list/#crafting-robust-architectures-for-a-resilient-future-eleanor-saitta-jez-humble-goto-2023","title":"Crafting Robust Architectures for a Resilient Future \u2022 Eleanor Saitta &amp; Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iD3HQ0LXM_M</p> <ul> <li>Eleanor Saitta is a security consultant and designer.</li> <li>Security is an emergent property of the system, not just a feature you can tack on.</li> <li>The fundamental problem with security is that it's really hard to know what's going on in your systems.</li> <li>If you don't understand how things are connected, you won't be able to secure them properly.</li> <li>It's important to write down the things that you say you are doing to make auditing easier.</li> <li>Security certifications primarily serve as a marketing expense and a tool for making sure you're asking the right questions about your systems.</li> <li>If you want to know more, visit structures.systems or contact ela@structures.systems.</li> </ul>"},{"location":"goto_sw_arch_list/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>In this demo, the speaker is showing how to use Skim, a GraphQL schema stitching library.</li> <li>The speaker first starts with a simple Git API and then adds a new endpoint for a Post API.</li> <li>They then use Skim to combine the two schemas into one.</li> <li>They show how the schema has been updated by looking at the profiler.</li> <li>The demo ends with the speaker answering questions from the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#the-art-of-software-development-sander-mak-goto-2023","title":"The Art of Software Development \u2022 Sander Mak \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=fUVfkLUmII4</p> <ul> <li>The speaker discussed the importance of craftsmanship in software engineering and how to become a better developer.</li> <li>He emphasized that becoming a great developer is not just about learning new technologies, but also about finding your purpose and style with your team.</li> <li>Mentoring is an excellent way to leave a legacy and bring 10 people around you who are smarter than they are.</li> <li>The speaker encouraged the audience to write beautiful code and to go forth and become better developers.</li> <li>He recommended checking out the engineering blog of his company, Picnic, for more information on how they do software engineering.</li> </ul>"},{"location":"goto_sw_arch_list/#build-software-like-a-bag-of-marbles-not-a-castle-of-lego-hannes-lowette-yow-2022","title":"Build Software Like a Bag of Marbles, Not a Castle of LEGO \u2022 Hannes Lowette \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wkFx2R4uk2A</p> <ul> <li>Plugins in .NET6 make it easy to structure and modularize code.</li> <li>Before distributing your code, learn about proper SOLID principles.</li> <li>Plugins offer a lot of tools out-of-the-box in .NET6, making it easier to add, remove, or replace functionality.</li> <li>Don't introduce deployment problems while solving code issues; take this advice from personal experience.</li> <li>It's okay not to be at step four, five, eight, or any other step \u2013 everyone grows and learns at their own pace.</li> <li>The speaker encourages attendees to connect with them on Twitter, LinkedIn, or ICQ to chat about code, guitars, or learning.</li> </ul>"},{"location":"goto_sw_arch_list/#energy-efficient-software-architecture-for-developers-henrik-brbak-christensen-goto-2023","title":"Energy-Efficient Software Architecture for Developers \u2022 Henrik B\u00e6rbak Christensen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=xVKJvUHCanQ</p> <ul> <li>Start by measuring the utilization of your on-premise service centers and finding ways to increase it.</li> <li>Look for low hanging fruits, such as using more power-efficient processors or optimizing your code.</li> <li>Learn a programming language that is commonly used in cloud computing, such as Go, C++, Java, or C#.</li> <li>Consider using arm processors, which use less energy than x86 processors.</li> <li>Keep in mind the saying \"Perfection is a cheat, not when there's nothing more to add but when there's nothing left to take away.\" Try to simplify your systems and remove unnecessary features.</li> <li>It may be difficult to sell the idea of reducing features or salary, but it could lead to cost savings and improved performance.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=4aiAkUm7rzQ</p> <ul> <li>Structurizr is a set of tools for creating software architecture diagrams and documentation.</li> <li>It uses a Domain Specific Language (DSL) to describe the system and its components, and then generates diagrams and textual descriptions based on this information.</li> <li>The DSL is written in Clojure, but can be used from any JVM language.</li> <li>Structurizr has several components:<ul> <li>A web-based modeling tool for creating and editing the DSL scripts.</li> <li>A Java library for parsing the DSL scripts and generating diagrams and documentation.</li> <li>A set of plugins for integrating with other tools, such as Jira and Confluence.</li> </ul> </li> <li>The tooling is free and open source, and can be found at structuralize.com/DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#large-scale-architecture-the-unreasonable-effectiveness-of-simplicity-randy-shoup-yow-2022","title":"Large-Scale Architecture: The Unreasonable Effectiveness of Simplicity \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=oejXFgvAwTA</p> <ul> <li>Event-driven architecture can help to decouple systems and make them more scalable</li> <li>Asynchronous messaging is a common way to implement event-driven architectures, but it can also be done with synchronous HTTP requests</li> <li>Testing asynchronous event-driven systems can be more difficult than testing synchronous systems, but it's possible to test individual components or services in isolation</li> <li>When testing asynchronous systems, it's important to consider the order and timing of events, as well as how they affect the state of the system</li> <li>Testing strategies for event-driven systems may include using mocks or stubs for dependencies, using message brokers that support test features, and using tools that can simulate message traffic.</li> </ul> <p>Please note that this summary is based on my understanding of the conversation, and it might not be 100% accurate.</p>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-principles-practices-rebecca-parsons-yow-2022","title":"Building Evolutionary Architectures: Principles &amp; Practices \u2022 Rebecca Parsons \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=jTX45V5JuN4</p> <ul> <li>Rebecca Parsons discussed the role of architects in communicating with stakeholders and decision-makers</li> <li>Architects need to be able to explain technical concepts in terms that connect with business value</li> <li>Architecture decisions should be made based on their impact on business requirements, not just technical considerations</li> <li>It's important to communicate the consequences of making certain decisions, such as increased development time or reduced scalability</li> <li>Architects should focus on building relationships and trust with stakeholders over time</li> <li>Architects can use objective measures, such as risk assessments or cost-benefit analyses, to make their case for certain decisions</li> <li>Communication is a critical skill for architects, and they need to learn how to convey technical concepts in plain language</li> <li>It's important to be able to explain the \"why\" behind architecture decisions, not just the \"how\" or \"what\"</li> <li>Architects should be proactive in identifying potential issues and bringing them up with stakeholders early on</li> <li>Ultimately, architects need to be able to communicate effectively with decision-makers to ensure that their technical decisions align with business goals.</li> </ul>"},{"location":"goto_sw_arch_list/#minimum-viable-architecture-randy-shoup-yow-2022","title":"Minimum Viable Architecture \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=9Q7GANXn02k</p> <ul> <li>The talk focuses on how to build a scalable system for an online game.</li> <li>The speaker emphasizes the importance of decoupling components, such as database and web server, using message queues or event sourcing techniques.</li> <li>He suggests starting with a simple monolithic architecture first and then gradually evolving it into microservices when necessary.</li> <li>The speaker highlights the trade-offs between using a relational database vs NoSQL solutions depending on the use case.</li> <li>He also discusses different caching strategies, such as distributed caching and client-side caching.</li> <li>The talk covers various aspects of building an online game system, including matchmaking, session management, and game logic processing.</li> <li>The speaker encourages developers to consider security implications, such as authentication and authorization, from the beginning when designing their systems.</li> <li>He suggests using containerization techniques like Docker for easier deployment and scaling of microservices.</li> <li>The talk concludes with a Q&amp;A session where the speaker answers questions about specific technologies and provides additional insights based on his experience.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022_1","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=f7i2wxQVffk</p> <ul> <li>Simon presented his open-source tool, \"ArchiMate Modeler\", which allows users to model and visualize their architecture using the ArchiMate language.</li> <li>The tool is built on top of Electron, React, and Redux, making it cross-platform and easy to use.</li> <li>It supports importing and exporting models in various formats, including JSON and XML.</li> <li>Simon also discussed some of the features he plans to add to the tool, such as improved error handling and support for custom plugins.</li> <li>He emphasized the importance of using a standardized language like ArchiMate to model architecture, as it helps ensure consistency and clarity across different teams and stakeholders.</li> <li>Simon answered questions from the audience, discussing topics such as integration with other tools, support for specific ArchiMate elements, and potential use cases for the tool.</li> </ul>"},{"location":"goto_sw_arch_list/#the-next-big-thing-in-software-architecture-dave-farley-goto-2023","title":"The Next Big Thing In Software Architecture \u2022 Dave Farley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=DCWo9DuywYo</p> <ul> <li>Actor model is a programming paradigm that allows for the creation of complex, concurrent systems.</li> <li>Each actor can have its own state and behavior, and they communicate with each other by sending messages.</li> <li>Actor systems are highly fault-tolerant and can recover from failures automatically.</li> <li>Akka is a popular framework for building actor systems in Java and Scala.</li> <li>Actors can be used to build a wide range of applications, including web servers, games, and distributed systems.</li> <li>Actors provide a simple but powerful abstraction for building complex systems, allowing developers to focus on the problem at hand rather than worrying about low-level details.</li> <li>Akka provides features such as clustering and persistence, making it easy to build distributed and fault-tolerant systems.</li> <li>Actor systems are a good choice for building concurrent and distributed applications that need to be highly available and scalable.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-rebecca-parsons-neal-ford-james-lewis-goto-2023","title":"Building Evolutionary Architectures \u2022 Rebecca Parsons, Neal Ford &amp; James Lewis \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=m2ZlX1je3as</p> <ul> <li>Introduction of Dr. Rebecca Parsons and Neal Ford, discussing the evolution of software development and technology.</li> <li>The importance of understanding the past to shape the future of software development.</li> <li>Evolving programming languages and their impact on developers' productivity and creativity.</li> <li>The role of constraints in shaping programming languages and design patterns.</li> <li>Exploring different paradigms: object-oriented, functional, and logical programming.</li> <li>Balancing the tension between innovation and maintainability in software development.</li> <li>Embracing change and evolving best practices in a rapidly changing industry.</li> <li>The impact of cloud computing, serverless architecture, and quantum computing on software development.</li> <li>Exploring artificial intelligence, machine learning, and their implications for software developers.</li> <li>Addressing the ethical considerations in technology development and its societal impacts.</li> <li>Concluding thoughts on the importance of staying informed and adapting to changes in the industry.</li> </ul>"},{"location":"goto_sw_arch_list/#patterns-of-legacy-displacement-rob-horn-ian-cartwright-goto-2022","title":"Patterns of Legacy Displacement \u2022 Rob Horn &amp; Ian Cartwright \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=noOoLULfInc</p> <ul> <li>Replacing a legacy system is not just about replacing the technology, but also about re-engineering business processes.</li> <li>It's important to understand why the current system was built that way and what problems it was designed to solve.</li> <li>The new system should be designed to solve the same problems and meet the same needs as the old one, but in a more efficient and effective way.</li> <li>Involving stakeholders in the design process can help ensure that the new system meets their needs and is easy for them to use.</li> <li>It's important to plan for data migration and to test the new system thoroughly before deploying it.</li> <li>Replacing a legacy system can be a complex and time-consuming process, but it can also bring significant benefits in terms of efficiency, effectiveness, and agility.</li> </ul>"},{"location":"goto_sw_arch_list/#i-made-everything-loosely-coupled-does-my-app-fall-apart-gregor-hohpe-goto-2022","title":"I Made Everything Loosely Coupled. Does My App Fall Apart? \u2022 Gregor Hohpe \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=w9a7eI6BlVc</p> <ul> <li>The speaker discussed how modern technology has shifted the way we can create loosely coupled systems.</li> <li>They emphasized that automation code is what holds a loosely coupled application together, and it is through this code that you define your system's composition.</li> <li>Key takeaways:<ul> <li>Event-driven architecture is still important to understand as an architect.</li> <li>Modern technology allows us to code our system's composition and coupling.</li> <li>Automation code defines how a loosely coupled application holds together.</li> </ul> </li> <li>Resources provided by the speaker include their website, serverless land, and books on the topic.</li> </ul>"},{"location":"goto_sw_arch_list/#coevolution-of-architecture-code-closing-the-gap-dave-thomas-yow-2022","title":"Coevolution of Architecture &amp; Code - Closing The Gap \u2022 Dave Thomas \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=slGZMTFPElo</p> <p>Summary:</p> <ul> <li>Continuous Integration (CI) is the practice of integrating code into a shared repository frequently, which helps in identifying integration issues early on.</li> <li>Continuous Delivery (CD) is the ability to get changes of all types\u2014including new features, configuration changes, bug fixes and experiments\u2014into production or into the hands of users safely and quickly in a sustainable way.</li> <li>The main difference between CI and CD is that CI focuses on integrating code while CD focuses on delivering it to the end-users.</li> <li>Continuous Deployment (CD) is an automated process that pushes changes to production without human intervention.</li> <li>Testing is crucial in both CI and CD as it helps in identifying issues early on and ensuring the quality of the software being delivered.</li> <li>DevOps culture emphasizes collaboration between development and operations teams, breaking down silos, and sharing responsibilities for software delivery.</li> <li>Shipping code frequently does not necessarily mean delivering value to users, and it's essential to focus on delivering value rather than just shipping code.</li> <li>The main goal of CI/CD is to deliver high-quality software quickly and safely while maintaining a sustainable development process.</li> </ul> <p>Source: Transcript from the talk \"Continuous Integration vs Continuous Delivery\" by Jez Humble.</p>"},{"location":"goto_sw_arch_list/#microservices-from-the-trenches-sander-hoogendoorn-goto-2022","title":"Microservices from the Trenches \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=UFFmT4Z5frw</p> <ul> <li>The talk is about software architecture and how to make it scalable, maintainable, and testable.</li> <li>The speaker emphasizes the importance of small teams and small components (microservices) for productivity.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker encourages the audience to keep learning, experimenting, and iterating in software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-the-hard-parts-neal-ford-mark-richards-goto-2023","title":"Software Architecture: The Hard Parts \u2022 Neal Ford &amp; Mark Richards \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=rIgTE9aDVj4</p> <ul> <li>Neal Ford and Mark Richards are discussing their book, \"The Building Microservices Development Handbook\".</li> <li>They discuss the importance of understanding the trade-offs and decisions made when building microservices.</li> <li>The second law of the Hard Parts book is that why is more important than how.</li> <li>They emphasize the importance of understanding the reasoning behind implementation choices in order to make informed decisions.</li> <li>They aim to exemplify this concept in the Hard Parts book.</li> </ul>"},{"location":"goto_sw_arch_list/#the-lost-art-of-software-design-simon-brown-yow-2019","title":"The Lost Art of Software Design \u2022 Simon Brown \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=gNj8I4uSTgc</p> <ul> <li>The session was about architecture characters and their importance in software development.</li> <li>Architecture characters are archetypes that represent common approaches to designing and building software systems.</li> <li>They provide a shared vocabulary for discussing architectural decisions and help teams make informed trade-offs.</li> <li>Neil Ford's book \"The IT Architect: Leading IT Decisions, Motivating IT Teams\" discusses 15 architecture characters in detail.</li> <li>The session covered four architecture characters - the architect as a craftsperson, the architect as a chef, the architect as a gardener, and the architect as a toolsmith.</li> <li>Each character has their own strengths, weaknesses, and approaches to solving problems.</li> <li>Understanding these characters can help teams make better architectural decisions and improve their development practices.</li> <li>The session also discussed the importance of feedback loops in software development and how architecture characters can help teams create effective feedback mechanisms.</li> <li>Finally, Neil Ford offered a free download of his books until the end of the year as a thank you for attending the session.</li> </ul>"},{"location":"goto_sw_arch_list/#team-topologies-software-architecture-complexity-james-lewis-goto-2022","title":"Team Topologies, Software Architecture &amp; Complexity \u2022 James Lewis \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=izLg4NkJQO4</p> <ul> <li>The talk discusses the characteristics of high-performing teams</li> <li>High-performing teams are cross-functional and self-organizing</li> <li>They have a shared understanding of their mission, goals, and ways of working</li> <li>Team members trust each other to do their best work</li> <li>Teams need to be small (less than 10 people) and co-located</li> <li>Amazon's leadership principles align with the characteristics of high-performing teams</li> <li>The book \"Team Topologies\" by Matthew Skelton and Manuel Pais is recommended for further reading on this topic.</li> </ul> <p>Bibliography:</p> <ul> <li>Team Topologies by Matthew Skelton and Manuel Pais</li> <li>Accelerate by Nicole Forsgren, Jez Humble, and Gene Kim</li> <li>The Phoenix Project by Gene Kim, Kevin Behr, and George Spafford</li> <li>The DevOps Handbook by Gene Kim, Patrick Debois, John Willis, and Jez Humble</li> <li>An Elegant Puzzle by Will Larson</li> <li>High Output Management by Andrew S. Grove</li> <li>Drive by Daniel H. Pink</li> <li>The Five Dysfunctions of a Team by Patrick Lencioni</li> <li>The Lean Startup by Eric Ries</li> <li>Continuous Delivery by Jez Humble and David Farley</li> </ul>"},{"location":"goto_sw_arch_list/#beyond-rest-contract-testing-in-the-age-of-grpc-kafka-graphql-matt-fellows-yow-2022","title":"Beyond REST - Contract Testing in the Age of gRPC, Kafka &amp; GraphQL \u2022 Matt Fellows \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=ESM84C7QKl8</p> <ul> <li>Integration testing is important in a distributed system context where there are many teams and services involved</li> <li>The idea of having a budget for your CI pipeline can help ensure that lead time for recovery, batching changes, etc. don't become issues</li> <li>Contra testing is one form of integration test but there are others as well</li> <li>Thinking about time can be a useful way to help find a balance between different types of tests and their execution times</li> </ul>"},{"location":"goto_sw_arch_list/#loosely-coupled-lotteries-cloudy-casinos-nederlandse-loterij-case-st-joris-kuipers-goto-2022","title":"Loosely Coupled Lotteries &amp; Cloudy Casinos: Nederlandse Loterij Case St. \u2022 Joris Kuipers \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=PUqalWaZaXY</p> <ul> <li>Microservices are a way of structuring an application as a collection of small autonomous services.</li> <li>Each microservice:<ul> <li>Is developed around a specific business capability.</li> <li>Runs in its own process and communicates with other services using a lightweight mechanism, often an HTTP resource API.</li> <li>Can be deployed independently.</li> <li>Can be managed by different teams.</li> </ul> </li> <li>Advantages of microservices:<ul> <li>Easier to understand and maintain.</li> <li>Faster development cycles.</li> <li>Better fault isolation.</li> <li>Scalability.</li> </ul> </li> <li>Disadvantages of microservices:<ul> <li>Increased operational complexity.</li> <li>Network latency.</li> <li>Distributed transaction management.</li> <li>Service coordination.</li> </ul> </li> <li>To decide whether to use monolithic or microservices architecture, consider the size and complexity of the application, the team's experience, and the organization's culture.</li> <li>When adopting microservices, start small, with a single service, and gradually add more as needed.</li> <li>Use practices such as automated testing, continuous integration, and deployment to manage the increased complexity of microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#simplicity-complexity-the-beauty-the-beast-sander-hoogendoorn-kevlin-henney-goto-2022","title":"Simplicity &amp; Complexity: The Beauty &amp; the Beast? \u2022 Sander Hoogendoorn &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=JAl3QFae_dE</p> <ul> <li>Sander is a consultant for companies that want to use data-driven decision making.</li> <li>He enjoys helping people find insights in their own data and seeing the impact it has on their business.</li> <li>Sander's favorite tool for data visualization is Tableau.</li> <li>In his free time, he enjoys traveling and experiencing different cultures.</li> <li>One of his most memorable travel experiences was seeing Monty Python in a church in Belfast with his family.</li> </ul>"},{"location":"goto_sw_arch_list/#architects-live-in-the-first-derivative-gregor-hohpe-yow-2019","title":"Architects Live in the First Derivative \u2022 Gregor Hohpe \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5B9xPo8U9JU</p> <ul> <li>The talk was about how architecture and agile can work together, and the role of an architect in an agile organization.</li> <li>Agile is about bringing change, and architecture is there to bring options.</li> <li>Architecture and agile go together because both are about bringing change.</li> <li>There are different roles for an architect in an agile organization, such as a \"change agent\" or a \"catalyst\".</li> <li>The traditional role of an architect may not be necessary in an agile organization, where change is constant.</li> <li>Architects should focus on bringing options and facilitating change, rather than dictating solutions.</li> <li>Architects should work closely with development teams to understand their needs and help them make decisions.</li> <li>An architect's role may change over time as the organization evolves and adapts to new challenges.</li> <li>It is important for an architect to have a deep understanding of the technology and business, and to be able to communicate effectively with different stakeholders.</li> <li>The talk emphasized the importance of bringing different perspectives and dimensions to architecture and decision making.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-for-developers-simon-brown-yow-2017","title":"Software Architecture for Developers \u2022 Simon Brown \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=dtVI7PvgVsQ</p> <ul> <li>Software architecture is the high-level design of a software system and it's important to consider it early in the development process</li> <li>There are different architectural styles, such as monolithic and microservices. Each has its own trade-offs and should be chosen based on the specific needs of the project.</li> <li>Modularity is key to good design, regardless of the architectural style. It allows for easier maintenance, testing, and scaling.</li> <li>Understanding the dependencies between different parts of the system is crucial for making informed decisions about its architecture.</li> <li>If you can't build monoliths properly, don't do microservices. Make sure to have a solid understanding of how to structure your code before moving on to more complex architectures.</li> </ul>"},{"location":"goto_sw_arch_list/#shortening-the-architectural-feedback-loop-eltjo-r-poort-goto-2022","title":"Shortening the Architectural Feedback Loop \u2022 Eltjo R. Poort \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lshfKKeB1Io</p> <ul> <li>Architects need to understand the business needs and requirements of their stakeholders</li> <li>The architecture feedback loop is the process by which architectural decisions are shared, discussed, and improved upon among stakeholders</li> <li>Shortening the feedback loop helps ensure that architectural decisions align with business needs and reduces risks</li> <li>Politics, not technology or requirements, often drive decision-making in organizations</li> <li>Architects should focus on the outcomes of their decisions rather than technical solutions to avoid strong opinions that are unhelpful</li> <li>Five tips for shortening the architecture feedback loop:<ol> <li>Share concerns and decisions continuously</li> <li>Invite feedback and be open to being wrong</li> <li>Simplify your documentation template</li> <li>Get involved in delivery</li> <li>Be vulnerable and open to feedback</li> </ol> </li> </ul>"},{"location":"goto_sw_arch_list/#enterprise-architecture-architecting-the-enterprise-gregor-hohpe-yow-2017","title":"Enterprise Architecture = Architecting the Enterprise? \u2022 Gregor Hohpe \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=hhlxFtV_tZo</p> <ul> <li>The role of an IT Architect is to bridge the gap between technical and business perspectives.</li> <li>An IT Architect should have a broad range of skills, including communication, problem solving, and leadership.</li> <li>Having diverse experiences in different areas of IT can help provide unique viewpoints when approaching architecture.</li> <li>There is high demand for Enterprise Architects who can provide significant business value.</li> <li>The book \"37 Things One Architect Knows About IT Transformation\" contains stories, anecdotes, and opinions about the role of an IT Architect in a large Enterprise.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-scaling-down-complexity-in-software-james-lewis-kevlin-henney-goto-2022","title":"Expert Talk: Scaling Down Complexity in Software \u2022 James Lewis &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=miYyinA-Nxc</p> <ul> <li>James Lewis is a principal consultant at Thoughtworks.</li> <li>He has been working with Thoughtworks for 18 years and has experience in software development, architecture, and design.</li> <li>In this transcript, James Lewis talks about the technology radar and its importance in staying up-to-date with emerging technologies.</li> <li>The technology radar is a tool used by Thoughtworks to assess and categorize new technologies based on their relevance and maturity.</li> <li>It consists of four quadrants: Techniques, Tools, Platforms, and Languages &amp; Frameworks.</li> <li>Each quadrant has four categories: Ring 1 (Adopt), Ring 2 (Trial), Ring 3 (Assess), and Ring 4 (Hold).</li> <li>James Lewis talks about the importance of having a balanced portfolio of technologies in an organization.</li> <li>He also discusses the challenges of adopting new technologies, such as the risk of vendor lock-in and the need for proper training and support.</li> <li>He emphasizes the importance of having a clear strategy and vision when it comes to technology adoption.</li> <li>James Lewis also talks about some of the emerging technologies that are currently on Thoughtworks' radar, such as serverless computing, blockchain, and quantum computing.</li> <li>He discusses the potential benefits and challenges of these technologies and provides insights into how organizations can start experimenting with them.</li> <li>Finally, James Lewis shares his thoughts on the future of technology and the importance of staying up-to-date with emerging trends and developments.</li> </ul>"},{"location":"goto_sw_arch_list/#the-zen-of-programming-sander-hoogendoorn-goto-2022","title":"The Zen of Programming \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=syGnlE_oosM</p> <ul> <li>The talk is about the speaker's experience and lessons learned during their career as a software developer.</li> <li>They emphasize the importance of taking small steps, asking questions, and never stopping to learn.</li> <li>Here are some key takeaways from the talk:<ul> <li>Take small steps in everything you do, including writing code, learning new technologies, and making career decisions.</li> <li>Don't be afraid to ask questions and admit what you don't know.</li> <li>Learn from your mistakes and use them to improve.</li> <li>Never stop learning and stay up-to-date with the latest technologies.</li> <li>Have fun and enjoy what you do.</li> <li>Take care of yourself and your mental health.</li> <li>Remember to take your mom out for dinner more often.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#from-monolith-to-state-of-the-art-banking-flavio-deroo-goto-2022","title":"From Monolith to State-of-the-Art Banking \u2022 Flavio Deroo \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=gVucnhnyYTw</p> <ul> <li>Solaris Bank is a German bank that provides banking services through APIs.</li> <li>They decided to migrate their monolithic system to an event-driven architecture using AWS Lambda and other managed services like DynamoDB, SNS, and SQS.</li> <li>The migration was done in two phases: the first phase involved decoupling the monolith into microservices and integrating them with the new architecture, while the second phase involved migrating data from the old system to the new one.</li> <li>They used a tool called AWS Serverless Application Repository (SAR) to package their Lambda functions and dependencies, making it easier to deploy and manage them.</li> <li>They also used AWS App Mesh to manage service-to-service communication and AWS Glue for data integration.</li> <li>The new architecture provided several benefits like better scalability, availability, and cost-efficiency compared to the old monolithic system.</li> <li>They faced some challenges during the migration process, such as dealing with cold starts in Lambda functions, managing stateful services, and ensuring data consistency between microservices.</li> <li>However, they managed to overcome these issues by using techniques like function warmup, implementing eventual consistency, and using distributed tracing tools like AWS X-Ray.</li> <li>Overall, the migration was a success, and Solaris Bank is now able to provide better banking services through their APIs using the new architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#restful-web-api-patterns-practices-cookbook-mike-amundsen-alianna-inzana-goto-2022","title":"Restful Web API Patterns &amp; Practices Cookbook \u2022 Mike Amundsen &amp; Alianna Inzana \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=OewdV0gQ67o</p> <ul> <li>Mike Amundsen's new book, \"Design and Build Great APIs,\" focuses on the importance of designing great APIs and how to achieve that goal.</li> <li>The book is divided into four sections: Foundations, Design, Implementation, and Operations &amp; Management.</li> <li>The Foundations section covers API basics, including what they are, why they're important, and their history.</li> <li>In the Design section, Amundsen discusses designing APIs with the user in mind, using scenarios to help guide decisions.</li> <li>The Implementation section dives into the technical aspects of building an API, such as choosing the right protocols and formats.</li> <li>The Operations &amp; Management section covers maintaining and scaling an API after it's been built, including monitoring and testing.</li> <li>Amundsen emphasizes the importance of collaboration between teams when designing APIs, using tools like design documents to ensure everyone is on the same page.</li> <li>He also stresses the need for iteration and refinement in API design, encouraging developers to continually improve their APIs based on user feedback.</li> <li>Throughout the book, Amundsen provides practical advice and real-world examples to help guide readers through the process of designing great APIs.</li> <li>He encourages developers to make informed choices based on their specific use cases and environments.</li> <li>Writing the book has been a valuable learning experience for Amundsen, as he's gained new insights into API design and best practices.</li> </ul>"},{"location":"goto_sw_arch_list/#diagrams-as-code-20-simon-brown-goto-2021","title":"Diagrams as Code 2.0 \u2022 Simon Brown \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Za1-v4Zkq5E</p> <ul> <li>The talk was about the Structurizr DSL, a domain-specific language for creating software architecture diagrams.</li> <li>Software architecture is important because it helps us understand how our systems work and make better decisions when developing them.</li> <li>A diagram can help us communicate complex ideas in a simple way, but creating good diagrams can be difficult.</li> <li>Structurizr DSL aims to simplify the process of creating software architecture diagrams by using plain text instead of drawing tools.</li> <li>The language is based on C4 model, which consists of four levels of abstraction: system context, container, component, and class.</li> <li>By using a text-based approach, we can version control our diagrams, use continuous integration, and generate documentation automatically.</li> <li>Structurizr DSL supports various export formats, such as PNG, SVG, and PlantUML.</li> <li>The talk included a live coding demonstration of creating a software architecture diagram using Structurizr DSL.</li> <li>The presenter emphasized the importance of consistency in naming conventions when creating diagrams.</li> <li>The presenter also showed how to use the dsl cookbook, which contains examples and best practices for using Structurizr DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-managing-complexity-in-software-hadi-hariri","title":"Expert Talk: Managing Complexity in Software \u2022 Hadi Hariri","text":"<p>URL: https://www.youtube.com/watch?v=P7CfWtR-ECk</p>"},{"location":"goto_sw_arch_list/#summary","title":"Summary:","text":"<ul> <li>Hadi Hariri talks about the current state of software development and how it has become more complex over time.</li> <li>He mentions that the industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Hariri emphasizes the importance of simplicity in software design, saying that it requires discipline and effort to achieve.</li> <li>He also discusses the trade-offs between complexity and simplicity and how developers should strive for a balance between the two.</li> <li>Hariri suggests that the industry has become too focused on delivering features quickly, often at the expense of code quality and maintainability.</li> <li>He encourages developers to prioritize simplicity in their work and to be mindful of the long-term consequences of complexity.</li> </ul>"},{"location":"goto_sw_arch_list/#key-points","title":"Key Points:","text":"<ul> <li>Software development has become more complex over time.</li> <li>Simplicity requires discipline and effort to achieve.</li> <li>The industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Developers should strive for a balance between complexity and simplicity.</li> <li>Prioritizing simplicity can lead to better code quality and maintainability in the long run.</li> </ul>"},{"location":"goto_sw_arch_list/#data-mesh-data-driven-value-at-scale-zhamak-dehghani-samia-rahman-goto-2022","title":"Data Mesh: Data-Driven Value at Scale \u2022 Zhamak Dehghani &amp; Samia Rahman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=CDWp_xyCdzw</p> <ul> <li>Zhamak is the author of \"Designing Data-Intensive Applications\" and a partner at Neo4j.</li> <li>Samia is a data scientist who used the value-based design process from Zhamak's book to improve her company's product development.</li> <li>Zhamak's book emphasizes the importance of understanding the value that a system provides before designing it, and using that understanding to guide decisions about technology and architecture.</li> <li>Samia found that this approach helped her team focus on delivering value to their customers more quickly and effectively.</li> <li>The conversation also touches on the role of data in product development, the challenges of building distributed systems, and the importance of continuous learning and improvement.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-continuous-architecture-pierre-pureur-kurt-bittner-goto-2022","title":"Expert Talk: Continuous Architecture \u2022 Pierre Pureur &amp; Kurt Bittner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=_cgnL96VeME</p> <ul> <li>Continuous Architecture is a way to ensure that architecture decisions are aligned with business goals and can evolve over time.</li> <li>The four essential activities of Continuous Architecture are focusing on quality attributes, driving and revisiting architecture decisions, knowing your technical debt, and implementing feedback loops.</li> <li>Quality attributes are the four fundamental aspects of a system: performance, security, scalability, and maintainability.</li> <li>Architecture decisions should be based on these quality attributes, and should be revisited regularly to ensure they still meet the needs of the business.</li> <li>Technical debt is the cost of making suboptimal architecture decisions, and it's important to be aware of it and address it as soon as possible.</li> <li>Feedback loops are essential for learning from mistakes and improving decision-making in the future. They can be implemented through various mechanisms such as code reviews, automated testing, and monitoring.</li> <li>The Continuous Architecture approach emphasizes collaboration between stakeholders, including business leaders, developers, and operations teams, to ensure that architecture decisions align with business goals and are executed effectively.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-software-engineering-dave-farley-steve-smith-goto-2022","title":"Modern Software Engineering \u2022 Dave Farley &amp; Steve Smith \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=80LbSyTCKas</p> <ul> <li>Dave Farley is a software developer, consultant, and coach.</li> <li>He co-authored the book \"Continuous Delivery\" with Jez Humble.</li> <li>The goal of Continuous Delivery is to make delivering software changes as easy, reliable, and fast as possible.</li> <li>The three main pillars of Continuous Delivery are: automation, version control, and testing.</li> <li>Testing should be automated, repeatable, and consistent.</li> <li>Small, frequent changes are easier to manage than large, infrequent ones.</li> <li>Automated tests should run quickly and provide fast feedback.</li> <li>The deployment process should be automated, reliable, and repeatable.</li> <li>Continuous Delivery requires a cultural shift towards collaboration, trust, and accountability.</li> <li>DevOps is a culture and a set of practices that encourages collaboration between development and operations teams.</li> <li>DevOps emphasizes automation, continuous improvement, and feedback loops.</li> <li>The goal of DevOps is to create a fast, reliable, and secure software delivery pipeline.</li> <li>Continuous Integration (CI) is the practice of integrating code changes into a shared repository frequently.</li> <li>Continuous Deployment (CD) is the practice of deploying code changes to production automatically after they pass all tests.</li> <li>Version control is essential for managing code changes and collaborating with others.</li> <li>Feature flags are a way to decouple feature releases from code deployments.</li> <li>The \"Build, Test, Release\" mindset focuses on delivering value quickly and safely.</li> <li>Continuous Delivery requires a holistic approach that considers the entire software delivery pipeline.</li> <li>DevOps is not just about tools and technology but also about people and culture.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-devops-software-architecture-simon-brown-dave-farley-hannes-lowette-goto-2021","title":"Expert Talk: DevOps &amp; Software Architecture \u2022 Simon Brown, Dave Farley &amp; Hannes Lowette \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Qv92qaIGbDg</p> <p>Summary:</p> <ul> <li>The speaker, John Allspaw, is discussing his experiences and insights on incident management and resilience engineering.</li> <li>Resilience engineering focuses on understanding how systems fail and how to make them more robust.</li> <li>It's important to recognize that failure is a natural part of any system, and it's impossible to prevent all failures.</li> <li>The goal should be to minimize the impact of failures when they do occur.</li> <li>To do this, it's essential to have a deep understanding of how the system works, including its weak points and vulnerabilities.</li> <li>It's also important to have a culture of learning and improvement, where incidents are seen as opportunities to learn and improve, rather than as failures to be punished.</li> <li>The speaker emphasizes the importance of communication and collaboration in incident management, both within teams and between different organizations.</li> <li>He also discusses the challenges of managing complex systems, where there are many interdependencies and feedback loops, and where small changes can have large unintended consequences.</li> <li>The speaker stresses the need for humility and caution when making changes to complex systems, as even seemingly minor adjustments can have significant impacts.</li> <li>He also highlights the value of automation and monitoring in incident management, but cautions against relying too heavily on technology and neglecting the human element.</li> <li>Finally, the speaker emphasizes the importance of continual learning and improvement in resilience engineering, and encourages organizations to adopt a proactive approach to managing incidents and failures.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7NAyn1DC420</p> <ul> <li>Vaughn Vernon is the author of \"Strategic Monoliths and Microservices: Driving Innovation Using Purposeful Architecture.\"</li> <li>The book discusses how to make informed decisions about monoliths and microservices.</li> <li>The first part of the book focuses on understanding the domain, including modeling, language, and communication.</li> <li>The second part of the book dives into implementing strategic monoliths and microservices using various programming languages and architectural patterns.</li> <li>The goal is to provide a complementary resource to Vaughn's previous book, \"Reactive DDD.\"</li> <li>James Higginbotham interviewed Vaughn Vernon about his new book for GOTO Conferences.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-teaser-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices (Teaser) \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vhAtH9NW-WA</p> <ul> <li>The importance of viewing software projects as learning experiences through experimentation and discovery is highlighted.</li> <li>Today's C-level executives in technology are different from those 30 or 40 years ago; having a solid architecture requires understanding the software being developed.</li> <li>Events are all about human communication, and thinking synchronously can lead to trouble because \"life is not a podcast.\"</li> <li>The speaker expresses difficulty in defining what software architecture is and suggests making architecture decisions at the last responsible moment.</li> <li>Developing with monoliths initially allows for faster development.</li> <li>A promotion for Go To Conferences and their YouTube channel is made, using the promo code \"book club\" for registration.</li> </ul>"},{"location":"goto_sw_arch_list/#architecting-for-scale-lee-atchison-ken-gavranovic-goto-2021","title":"Architecting For Scale \u2022 Lee Atchison &amp; Ken Gavranovic \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=n_yZB0ZrsxU</p> <ul> <li>Lee Atchison is an experienced technology executive, author, and international speaker.</li> <li>He works as a Senior Director at New Relic, where he focuses on helping the company scale their architecture.</li> <li>Lee has extensive experience in building and managing large-scale, cloud-based web applications and services.</li> <li>In this interview, Ken and Lee talk about his new book \"Architecting for Scale\", which covers best practices for designing scalable systems.</li> <li>The second edition of the book includes updates on the latest trends and technologies in cloud computing, containers, microservices, DevOps, and more.</li> <li>Lee shares insights from his experience working at companies like Amazon and Akamai Technologies.</li> <li>He emphasizes the importance of considering scale as a fundamental aspect of software design.</li> <li>The interview also covers topics like reliability, fault-tolerance, observability, monitoring, and managing system complexity.</li> <li>Lee provides practical advice for teams building cloud-native applications, including tips on capacity planning, performance optimization, and team organization.</li> <li>He encourages developers to adopt a \"shift left\" mindset, focusing on quality and reliability from the beginning of the development process.</li> <li>Lee also highlights the importance of continuous learning and staying up-to-date with new technologies and best practices in the field.</li> </ul> <p>Additional Resources:</p> <ul> <li>Lee Atchison's website</li> <li>Architecting for Scale (Second Edition)</li> </ul>"},{"location":"goto_sw_arch_list/#the-hidden-costs-of-poor-database-access-denis-rosa-goto-2019","title":"The Hidden Costs of Poor Database Access \u2022 Denis Rosa \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=t9b2TZiZUpM</p> <p>Summary of Transcript:</p> <ul> <li>Relational databases have been the standard for many years, but they are not always the best choice for storing hierarchical data structures.</li> <li>Hierarchical data models can be more efficient and performant than relational models in certain scenarios.</li> <li>There are various ways to store hierarchical data, such as nested sets, materialized paths, closure tables, and recursive trees.</li> <li>Nested sets are a popular way to represent hierarchical data, but they have some limitations and can be slow for certain operations.</li> <li>Materialized paths are another method that is more efficient for reading, but not writing.</li> <li>Closure tables store the relationships between nodes in a separate table, which makes it easy to query, but can be slow when there are many relationships.</li> <li>Recursive trees use a recursive function to traverse the tree and can be slower than other methods, but they allow for more flexibility in how the tree is stored.</li> <li>There are some libraries available that help with storing hierarchical data, such as <code>acts_as_tree</code> and <code>ancestry</code>.</li> <li>When choosing a method to store hierarchical data, consider the size of the dataset, the frequency of reads and writes, and the complexity of the queries.</li> <li>It's important to keep performance in mind when working with large datasets, especially for write-heavy applications.</li> <li>The speaker encourages developers to experiment with different methods and choose the one that fits their specific use case best.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-22-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 2/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=PmRLX57ChTE</p> <ul> <li>The conversation covers the importance of managing software architecture and dependencies to improve collaboration, maintainability, and scalability.</li> <li>Adam Tornhill explains his experience working with large codebases and how understanding coupling can help identify potential issues early on.</li> <li>He emphasizes the need for a data-driven approach in making informed decisions about software design and refactoring.</li> <li>The conversation touches upon the importance of granularity and modeling concepts when building an architecture, highlighting that focusing too much on technical building blocks could lead to heavy team coupling.</li> <li>Adam introduces his book 'Your Code as a Crime Scene' and the tool, CodeScene, which help developers analyze codebases and understand dependencies, enabling them to prioritize refactoring efforts effectively.</li> <li>The conversation closes with Adam sharing his experience working with various companies and how understanding dependencies can lead to cost savings in software development projects.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-12-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 1/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-z5EWVyRhOo</p> <ul> <li>Hotspots are areas of the codebase that require attention and improvement.</li> <li>There are different types of hotspots, including:<ul> <li>Lines of Code (LOC) - visualization to gain situational awareness.</li> <li>Cyclomatic Complexity - number of linearly independent paths through a program's source code.</li> <li>Clone Detection - identifying duplicate or similar code fragments that violate the DRY (Don't Repeat Yourself) principle.</li> </ul> </li> <li>The discussion focused on findings and prioritization work done on the code level to address these hotspots.</li> <li>Further talks are planned to discuss organizational problems that can be detected and addressed.</li> </ul>"},{"location":"goto_sw_arch_list/#service-meshes-istio-linkerd-or-no-mesh-at-all-hanna-prinz-eberhard-wolff-goto-2021","title":"Service Meshes: Istio, Linkerd - or No Mesh at All? \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=kwUgrSG_ZKI</p> <ul> <li>Service meshes are a way to manage and control communication between microservices in a distributed system.</li> <li>They provide features such as service discovery, load balancing, circuit breaking, rate limiting, and security.</li> <li>Some popular service mesh implementations include Istio, Linkerd, Consul, and AWS App Mesh.</li> <li>Service meshes can be implemented using sidecar proxies or a data plane proxy that is integrated into the application code.</li> <li>Sidecar proxies are easier to set up but have a higher performance overhead, while data plane proxies have lower overhead but require more integration work.</li> <li>Some benefits of using service meshes include:<ul> <li>Improved observability and monitoring of distributed systems.</li> <li>Simplified management of communication between microservices.</li> <li>Enhanced security with features such as mutual TLS authentication and authorization.</li> </ul> </li> <li>Some potential drawbacks of using service meshes include:<ul> <li>Increased complexity and overhead.</li> <li>Difficulty in choosing the right implementation for your needs.</li> <li>The need to learn new tools and concepts.</li> </ul> </li> <li>To decide whether a service mesh is right for your organization, consider factors such as the size and complexity of your microservices architecture, the level of control you want to have over communication between services, and your team's familiarity with service mesh concepts and implementations.</li> </ul> <pre><code>\n\n## Is Domain-Driven Design Overrated? \u2022 Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=ZZp9RQEGeqQ](https://www.youtube.com/watch?v=ZZp9RQEGeqQ)\n\n - Recipes are a good starting point, especially for beginners\n- Following a recipe closely can be helpful at the start of a project\n- However, it's important not to be dogmatic and continue to follow a recipe exactly in the long run\n- Contexts are the most valuable contribution of recipes, they provide a boundary within which you can make different decisions from others\n- Use contexts to help guide your decision making process.\n\n\n## Kafka in the Wild \u2022 Laura Schornack &amp; Maureen Penzenik \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=iMx8otu3rFg](https://www.youtube.com/watch?v=iMx8otu3rFg)\n\n * Advancing domain driven design (DDD) from one application to enterprise DDD\n* Sharing data sets across many applications, avoiding rework and Kafka spider webs\n* Having a cleaner API strategy and real-time strategy throughout the enterprise\n* Merging with the data side of the house for a unified operational and analytical approach\n* Using DDD principles from operational systems to solve similar challenges in analytics environments (breaking up monoliths)\n* Applying Jamaat Dagani's Data Mesh principles, extending domain driven design to break up data monoliths\n* Ensuring access control and secure data products according to the business owner's approved use for the data.\n\n\n## Organization: A Tool for Software Architects \u2022 Eberhard Wolff \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=wwzn4l_gmco](https://www.youtube.com/watch?v=wwzn4l_gmco)\n\n * Transcript is about a talk on software architecture and design.\n* The speaker discusses the importance of aesthetics in software development.\n* Aesthetics can lead to better problem solving and more efficient code.\n* The speaker suggests that architects should have a \"categorical imperative\" for software engineering, ensuring that their designs are both functional and beautiful.\n* The talk includes references to various tools and concepts used in software development, such as Mckinsey workshops, media solutions architecture, and the use of design patterns.\n* The speaker also mentions the importance of collaboration and communication in software development, suggesting that architects should be skilled in these areas in order to create effective designs.\n* Overall, the talk emphasizes the value of aesthetics in software development and encourages architects to consider both form and function in their work.\n\n\n## What Are Reactive Systems? \u2022 Dave Farley \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=Ysn6eInApYM](https://www.youtube.com/watch?v=Ysn6eInApYM)\n\n * Messaging allows for location transparency and clustering\n* The code doesn't need to change in any way to make clustering work\n* The infrastructure can handle the load balancing and allocation\n* Messaging separates accidental complexity (running stuff on a computer) from essential complexity (domain logic or function)\n* This approach allows for focus on the problem being solved rather than the technical details\n* Relational databases work in a similar way internally\n* The core of the exchange built this way could process 6.5 million trades per second on a single thread\n\n\n## Idiomatic RabbitMQ \u2022 Gavin M. Roy \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=fNbdgWe5Tbs](https://www.youtube.com/watch?v=fNbdgWe5Tbs)\n\n * RabbitMQ is a message broker that can handle high volumes of messages and provide reliability, scalability, and flexibility.\n* It has features such as message durability, delivery acknowledgements, publisher confirms, and message priority.\n* When using RabbitMQ, it's important to think about the design of your messaging system and how messages are routed and consumed.\n* Consider using a fanout exchange for simplicity, direct exchanges for fine-grained control, or topic exchanges for more complex routing scenarios.\n* It's also crucial to consider message serialization and deserialization formats, as well as error handling and retry mechanisms.\n* When designing your messaging system, keep in mind the principles of loose coupling, high cohesion, and failure isolation.\n* Using RabbitMQ can provide benefits such as improved system resilience, scalability, and maintainability, but it also requires careful planning and design.\n\n\n## Continuous Architecture in Practice Part 2/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=IIy4Adg4WR0](https://www.youtube.com/watch?v=IIy4Adg4WR0)\n\n * Continuous Architecture: Evolving Technical Leadership at Scale is a new book by Eoin Woods, Murat Erder and Pierre Pureur\n* The authors discussed their motivation for writing the book and what they hope to achieve with it in this interview\n* The book is aimed at software architects who are looking to improve their skills and adapt to changing circumstances\n* It covers topics such as how to manage technical debt, how to work effectively with other teams and how to stay up-to-date with new technologies\n* The authors also discuss the importance of communication and collaboration in architecture roles\n* The book is based on the authors' own experiences and draws on real-world examples to illustrate its points\n* It is available for pre-order now and will be published in June 2021.\n\n\n## Continuous Architecture in Practice Part 1/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=963Ls1X17zs](https://www.youtube.com/watch?v=963Ls1X17zs)\n\n * Documentation is essential for software development, but many teams have not yet reached this point.\n* Younger or less mature engineering teams may avoid documentation, but they often realize its importance in two to three years.\n* Architecture Decision Records (ADRs) are becoming more popular, as they allow capturing and documenting key decisions made during the development process.\n* Recording the rationale behind these decisions can prove valuable in the future.\n* While the concept of capturing and checking decisions into code is not new, only a few teams practice it. The growing popularity of ADRs shows that this trend is changing.\n\n\n## Learnings from Running 1000s of Production RabbitMQ Clusters \u2022 Lovisa Johansson \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=nxQrpLfX3rs](https://www.youtube.com/watch?v=nxQrpLfX3rs)\n\n * CloudAMQP is a managed RabbitMQ service that provides various configurations for different use cases.\n* Some applications require high throughput, while others prioritize high availability and consistency.\n* Customers can easily set up a cluster specified for their selected use case based on best practice recommendations.\n* CloudAMQP has a list of recommendations for new users to quickly start using RabbitMQ.\n* The speaker invites the community to contribute to the list or share different opinions.\n\n\n## Stop Punching Yourself in the Face \u2022 Hannes Lowette \u2022 GOTO 2020\n\nURL: [https://www.youtube.com/watch?v=_-ne2kwF8tc](https://www.youtube.com/watch?v=_-ne2kwF8tc)\n\n * Hannes' talk focuses on the importance of being a responsible developer\n* He shares a story about \"Chad\", a fictional developer who is well-meaning but often makes mistakes due to carelessness or lack of knowledge.\n* To address this issue, Hannes created the \"red certification program\" to help developers become more responsible and aware of best practices.\n* The website redcert.com contains a quiz and resources for developers to learn about responsible development.\n* Hannes encourages developers to follow @redcert on Twitter and spread the word about being a responsible developer.\n* He also shares his personal background, including his role at Access in Belgium, having three kids, and his hobbies of building guitars and playing with Legos.\n* His contact information is shared as well, including his Twitter handle (@hannesvdv) and icq number (358491287).\n\n\n## Software Architecture for Developers Part 2/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=gDlE4q3mozY](https://www.youtube.com/watch?v=gDlE4q3mozY)\n\n * Simon is a software architect and author of the book \"Software Architecture for Developers\"\n* The book focuses on how to design good software architecture, focusing on practical techniques for developers\n* He emphasizes that software architecture should not be overcomplicated or made too complex\n* Good architecture should provide flexibility and make it easier for future changes\n* A good architect should be able to understand the needs of their customers and stakeholders, as well as being technically competent\n* The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n* Simon recommends several books for further learning: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n* He also mentions that the book will be available as an e-book, audiobook, and paperback in May 2021.\n\nNote: I am not sure if you meant to write this summary as a markdown style or just plain text, but here it is in markdown format.\n```vbnet\n- Simon is a software architect and author of the book \"Software Architecture for Developers\"\n- The book focuses on how to design good software architecture with practical techniques for developers\n- He emphasizes that software architecture should not be overcomplicated or made too complex\n- Good architecture should provide flexibility and make it easier for future changes\n- A good architect should understand the needs of their customers and stakeholders, as well as being technically competent\n- The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n- Simon recommends several books: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n- The book will be available as an e-book, audiobook, and paperback in May 2021.\n</code></pre>"},{"location":"goto_sw_arch_list/#why-architectural-work-comes-before-coding-part-12-simon-brown-stefan-tilkov-goto-2021","title":"Why Architectural Work Comes Before Coding Part 1/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=TE4rKZ7M1aM</p> <ul> <li>Discussing modeling in software development</li> <li>Models are abstractions of the system that we're trying to build</li> <li>Modeling is a way for us to think about what our system should do before we start writing code</li> <li>Two main reasons to model: communication and documentation</li> <li>Three types of models: data, behavioral, and structural</li> <li>Tools like Lucidchart, Visio, or Draw.io can be used for modeling</li> <li>UML (Unified Modeling Language) is a widely used notation for modeling in software development</li> <li>UML provides various ways to customize the model but it can also be complex and powerful than needed</li> <li>Go To Conference offers a promo code BOOKCLUB for viewers of this episode.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-2-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 2 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=nbqh1EK_FU8</p> <ul> <li>The role of an architect is to provide value and get out of the way</li> <li>Architectural decisions should be made with flexibility in mind, allowing for changes to be made easily in the future</li> <li>Manager systems architectural evolution: have a plan for how you want to move the system forward, as no system can tolerate staying the same forever</li> <li>Avoid creating roadblocks or becoming a bottleneck in any way, whether through system decisions, development environment decisions, or process decisions</li> <li>Provide value to the people who have to suffer through your decisions and try not to inhibit their work too much.</li> </ul>"},{"location":"goto_sw_arch_list/#balancing-choreography-and-orchestration-bernd-rucker-goto-2020","title":"Balancing Choreography and Orchestration \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=zt9DFMkjkEA</p> <p>Summary:</p> <ul> <li>Orchestration and choreography are two different communication styles used in microservices architecture.</li> <li>Orchestration is command-driven, centralized, and has a unidirectional flow of control. Choreography is event-driven, decoupled, and has a bidirectional flow of control.</li> <li>Both orchestration and choreography have their own advantages and disadvantages. Orchestration provides better observability and control, while choreography promotes loose coupling and autonomy.</li> <li>It's important to balance both styles in a microservices architecture based on the use case and requirements.</li> <li>The direction of dependency and responsibility should be considered when deciding between orchestration and choreography for a specific service.</li> <li>Orchestration is not necessarily centralized, and choreography is not always decoupled. It depends on the implementation and design.</li> </ul> <p>Q&amp;A:</p> <ul> <li>What is the difference between synchronous and asynchronous communication?<ul> <li>Synchronous communication waits for a response before continuing, while asynchronous communication does not.</li> </ul> </li> <li>Can you have orchestration in an event-driven architecture?<ul> <li>Yes, it's possible to use command-driven orchestration in an event-driven architecture by having a centralized component that sends commands to other services.</li> </ul> </li> <li>How do you ensure consistency between microservices?<ul> <li>Consistency can be ensured using various techniques such as eventual consistency, transactions, and event sourcing. It depends on the use case and requirements.</li> </ul> </li> <li>What are some tools for implementing orchestration and choreography?<ul> <li>Tools for orchestration include Kubernetes, AWS Step Functions, and Azure Logic Apps. Tools for choreography include Apache Kafka, RabbitMQ, and AWS EventBridge.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#five-things-every-developer-should-know-about-software-architecture-simon-brown-goto-2020","title":"Five Things Every Developer Should Know about Software Architecture \u2022 Simon Brown \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=9Az0q2XHtH8</p> <p>Here are the five things every developer should know about software architecture, as presented by Kevlin Henney:</p> <ul> <li>Architecture is a significant decision that is hard to change. It's not just code or infrastructure, but encompasses both and how they interact.</li> <li>Good architecture enables change, rather than dictating it. It provides choices, rather than limiting them.</li> <li>The design of software and the organization of teams are intimately related. Architecture should support communication and collaboration between teams.</li> <li>Microservices are not a silver bullet or a default choice. They should be used only when they provide a clear advantage over other architectural styles.</li> <li>When considering microservices, think about the problem you're trying to solve, rather than starting from scratch with a view to rewrite your monolith as a collection of microservices. You may end up with a distributed monolith if you're not careful.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-1-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 1 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=RtRpL3Ndi0c</p> <ul> <li>The talk discussed the importance of architecture in software development</li> <li>Architecture is defined as the stuff that's hard to change, and it's important to be explicit about it</li> <li>The speaker advised against creating bottlenecks or roadblocks and being someone who everyone else has to wait on</li> <li>Motivation comes from cross-functional teams that can deliver something end-to-end</li> <li>Decisions should be made at the level closest to the actual problem, where the work happens</li> <li>The speaker encouraged having few rules, making it easier for people to adhere to them.</li> </ul>"},{"location":"goto_sw_arch_list/#software-is-details-kevlin-henney-goto-2020","title":"Software Is Details \u2022 Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kX0prJklhUE</p> <ul> <li>The speaker discussed the importance of understanding and testing software configurations.</li> <li>Many systems have latent configuration errors due to lack of checking and testing.</li> <li>Configuration is often seen as a detail, but it can be critical to the functioning of the software.</li> <li>The speaker quoted Robert Persig's observation that even seemingly unimportant parts, like a screw on a motorcycle, can be vital to the overall function of the system.</li> <li>The speaker encouraged the audience to expand their knowledge of software configurations and to test them thoroughly.</li> </ul>"},{"location":"goto_sw_arch_list/#automating-processes-in-modern-architectures-bernd-rucker-goto-2020","title":"Automating Processes in Modern Architectures \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IBfuKA9Nc3M</p> <ul> <li>Workflows are a way to manage the state of long-running processes</li> <li>Visual processes, such as BPMN, make it easier to discuss and change workflows</li> <li>Event driven choreography is useful but not a magic cure-all, and orchestration is still necessary at certain points in an architecture</li> <li>Decentralized and asynchronous event driven choreography can be used</li> <li>Q&amp;A:<ul> <li>How do you handle errors in workflows?<ul> <li>There are several ways to handle errors in workflows, such as using catch events or error boundaries. It depends on the specific use case.</li> </ul> </li> <li>Can you use microservices with a monolithic workflow engine?<ul> <li>Yes, it is possible to use microservices with a monolithic workflow engine, but it may not be the best approach. It is better to have a decentralized architecture where each service has its own state management and workflow capabilities.</li> </ul> </li> <li>How do you handle retries in workflows?<ul> <li>Retries can be handled using compensation mechanisms or by configuring the workflow engine to automatically retry failed tasks. It depends on the specific use case.</li> </ul> </li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#getting-started-with-service-mesh-hanna-prinz-eberhard-wolff-goto-2020","title":"Getting started with Service Mesh \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=w14ge2838Vs</p> <ul> <li>Service meshes are a way to add functionality like traffic management, security, and observability to distributed applications.</li> <li>The most popular service mesh implementations include Istio, Linkerd, and Consul Connect.</li> <li>Service meshes can be installed as sidecars alongside application containers in a Kubernetes cluster or using a data plane proxy such as Envoy.</li> <li>Service meshes provide features like traffic management (route requests to specific versions of services), security (mutual TLS authentication, authorization policies), and observability (tracing, logging, metrics).</li> <li>It is important to consider the trade-offs when deciding whether to use a service mesh, such as added complexity and potential performance overhead.</li> <li>The hosts recommended some resources for learning more about service meshes, including the \"Service Mesh Patterns\" book and the \"Getting Started with Service Mesh on Kubernetes\" guide. They also suggested trying out examples of applications using service meshes, such as Istio and Linkerd.</li> </ul>"},{"location":"goto_sw_arch_list/#why-are-distributed-systems-so-hard-denise-yu-goto-2020","title":"Why Are Distributed Systems so Hard? \u2022 Denise Yu \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IzbYUjPAm5A</p> <ul> <li>Humans are the last line of defense against failures in complex systems</li> <li>Designing for humans means:<ul> <li>Empathizing with every human who interfaces with the system</li> <li>Challenging ourselves to design for the humans who operate and build the systems</li> <li>Choosing tools and processes that promote learning and sustainable pace</li> <li>Understanding and designing for the whole system, including the human parts</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#when-to-use-microservices-and-when-not-to-sam-newman-martin-fowler-goto-2020","title":"When To Use Microservices (And When Not To!) \u2022 Sam Newman &amp; Martin Fowler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=GBTdnfD6s5Q</p> <ul> <li>Microservices are a way of structuring an application as a collection of small services, which can be developed and maintained independently</li> <li>Benefits of using microservices include easier scalability, faster deployment, and increased flexibility</li> <li>Challenges of using microservices include increased complexity and the need for more sophisticated deployment and monitoring tools</li> <li>When considering whether to use microservices, it's important to consider the needs and constraints of your organization, as well as the specific requirements of your application</li> <li>It's not necessary to use a specific technology or platform in order to adopt a microservices architecture</li> <li>To get the most out of using microservices, it's important to have a clear understanding of the problem you're trying to solve and to be willing to adapt your organization and processes as needed.</li> </ul>"},{"location":"goto_sw_arch_list/#saas-deep-dive-designing-and-building-multi-tenant-solutions-tod-golding-goto-2020","title":"SaaS Deep Dive: Designing and Building Multi-Tenant Solutions \u2022 Tod Golding \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=joz0DoSQDNw</p> <ul> <li>Multi-tenancy is important for SaaS applications</li> <li>There are different ways to implement multi-tenancy, such as:<ul> <li>Shared database with separate schemas or tables</li> <li>Separate databases for each tenant</li> <li>Virtual private cloud (VPC) for each tenant</li> </ul> </li> <li>It's best to limit the developer awareness of multi-tenancy through good design and architecture constructs</li> <li>Data partitioning and finding the right fit for your data on a micro service by micro service basis is important</li> <li>Tenant isolation is another layer of protection on top of authentication and authorization</li> <li>Metrics, monitoring, and alerting are also important considerations for multi-tenancy in SaaS applications.</li> </ul> <p>Contact:</p> <ul> <li>Email address provided in the presentation for further questions or information.</li> </ul>"},{"location":"goto_sw_arch_list/#practical-end-to-end-container-security-at-scale-yashvier-kosaraju-goto-2020","title":"Practical End-to-End Container Security at Scale \u2022 Yashvier Kosaraju \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=rcrmTHOIz24</p> <ul> <li>Container security is becoming increasingly important as containers are being used more widely in production environments.</li> <li>Containers can introduce new attack surfaces, such as image vulnerabilities, container breakouts, and privilege escalation.</li> <li>To secure containers, it's essential to have a comprehensive security strategy that includes image scanning, runtime protection, network segmentation, access control, and monitoring.</li> <li>Image scanning can help identify known vulnerabilities, configuration errors, and malware in container images before they are deployed in production.</li> <li>Runtime protection can help detect and prevent suspicious activities in running containers, such as unauthorized access, process injection, and network communication.</li> <li>Network segmentation can limit the attack surface by isolating containers in different networks or subnets.</li> <li>Access control can restrict who can access and manage containers, images, and other container resources.</li> <li>Monitoring can help detect and respond to security incidents by providing real-time visibility into container activities, such as CPU usage, memory consumption, network traffic, and process behavior.</li> <li>Some popular container security tools include Clair, Trivy, Aqua Security, Twistlock, Anchore Engine, and Falco.</li> <li>Best practices for container security include keeping containers up-to-date, minimizing image sizes, using multi-stage builds, configuring resource limits, disabling unnecessary services, and monitoring container activities.</li> <li>Resources for learning more about container security include the CNCF Container Security Special Interest Group, the Open Container Initiative (OCI), and the Red Hat Enterprise Linux Container Host Security Guide.</li> </ul>"},{"location":"goto_sw_arch_list/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ul> <li>Introduced Ray, an open-source distributed computing framework developed by RISELab at UC Berkeley.</li> <li>Ray provides a single API for building and running applications at scale, and can be used to parallelize CPU/GPU workloads and build distributed services.</li> <li>Ray is designed to handle complex workloads and provide fault tolerance, allowing users to build highly available systems with minimal overhead.</li> <li>Some common use cases for Ray include machine learning, AI, data analytics, and gaming.</li> <li>Ray has a growing community of users and contributors, and is used by several large companies including Amazon Web Services, Microsoft, and Google.</li> <li>Ray can be used in conjunction with other frameworks such as TensorFlow and PyTorch to provide distributed training capabilities for machine learning models.</li> <li>Ray's architecture includes a global control plane that manages cluster resources and a set of worker nodes that execute tasks and store data.</li> <li>Ray provides a set of high-level APIs for building applications, including:<ul> <li>Actors: Object-like entities that can be used to parallelize workloads and share state.</li> <li>Tasks: Functions that can be executed in parallel on the cluster.</li> <li>Datasets: Distributed data structures that allow users to perform efficient data processing tasks at scale.</li> </ul> </li> <li>Ray also provides several lower-level APIs for advanced use cases, including direct access to the underlying object store and network communication layer.</li> <li>Ray's performance is competitive with other distributed computing frameworks, and it can be used to build highly scalable systems with minimal overhead.</li> <li>Ray has a flexible deployment model, allowing users to run it on their own hardware or in the cloud using managed services such as Amazon ECS and Kubernetes.</li> <li>Ray has several resources available for learning and development, including documentation, tutorials, and community support.</li> <li>Ray is an open-source project, licensed under the Apache 2.0 license.</li> </ul>"},{"location":"goto_sw_arch_list/#dont-get-blamed-for-your-choices-hannes-lowette-goto-2020","title":"Don\u2019t Get Blamed for Your Choices \u2022 Hannes Lowette \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Mo9hm51NXxw</p> <ul> <li>Hannes' talk is about the \"Chad developer\" who makes decisions based on emotions and personal preferences rather than data and facts.</li> <li>The Chad developer often fails to deliver software in a better way because they don't make informed decisions.</li> <li>Hannes emphasizes the importance of making data-driven decisions as a team, using tools such as A/B testing to gather information and make informed choices.</li> <li>He encourages developers to avoid falling into the trap of being a Chad developer by making informed decisions based on data and facts.</li> <li>Hannes also talks about his company, Access, which offers consulting services and confidence coaching for teams looking to improve their decision-making processes.</li> <li>He ends his talk by encouraging the audience to spread the message of making better decisions as a team and becoming better developers in the process.</li> </ul>"},{"location":"goto_sw_arch_list/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ul> <li>The speaker presented an approach for building REST APIs using ASP.NET Core and OpenAPI.</li> <li>Controllers in this approach should not contain business logic, only HTTP request/response handling.</li> <li>Application logic is contained in the application layer.</li> <li>Well-defined view models should be created and consumed by controllers.</li> <li>Open API bridges the gap between front-end and back-end and automates the generation of OpenAPI specifications and clients using a simple msbuild task.</li> <li>The speaker recommended trying out this approach by grabbing the code or installing the template.</li> <li>Key points:<ul> <li>Controllers should not contain any business logic.</li> <li>Application logic lives in the application layer.</li> <li>Use well-defined view models and consume them in controllers.</li> <li>OpenAPI automates generation of specifications and clients.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#explore-your-microservices-architecture-with-graph-theory-network-science-nicki-watt-goto-2019","title":"Explore your Microservices Architecture with Graph Theory &amp; Network Science \u2022 Nicki Watt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=0G5O1ffYIPI</p> <ul> <li>The speaker presented a case study on using graph databases and graph algorithms to analyze microservice architecture.</li> <li>They used the Neo4j database and Cypher query language for data modeling and analysis.</li> <li>They collected data from various sources such as JIRA, GitHub, and logs.</li> <li>They modeled the data in a graph format where nodes represent entities such as services, repositories, and users, and edges represent relationships between them.</li> <li>They used graph algorithms such as community detection, centrality measures, and pathfinding to analyze the data.</li> <li>They identified clusters of related services, key services that act as hubs, and service dependencies.</li> <li>They also analyzed issues, pull requests, and commits to identify patterns and trends in development workflows.</li> <li>The analysis helped them understand the complexity of their microservice architecture, identify bottlenecks, and optimize their development processes.</li> <li>The speaker recommended the book \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" by Mark Needham and Aimee Hodler for further reading on this topic.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=wjF4X9t3FMk</p>"},{"location":"goto_sw_arch_list/#summary-of-transcript","title":"Summary of Transcript:","text":"<ul> <li>The speaker talks about the importance of keeping up with technology and how things move fast in the tech industry.</li> <li>They mention that while it can be hard to keep up, it's necessary to stay updated on new technologies and tools.</li> <li>They highlight the benefits of using Kubernetes for container orchestration, but caution against ignoring other options like Docker Swarm.</li> <li>The speaker emphasizes the importance of testing new technology in production environments to fully understand its impact.</li> <li>They also stress the need to prioritize security and make it everyone's job.</li> <li>The speaker mentions some organizations that are doing great work in the tech industry, including Red Hat, SUSE, IBM, and others.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-stefan-tilkov-goto-2019","title":"\"Good Enough\" Architecture \u2022 Stefan Tilkov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=PzEox3szeRc</p> <ul> <li>Architectural decisions should be made consciously, weighing the risks and benefits of simplicity versus adaptability.</li> <li>The YAGNI (You Ain't Gonna Need It) principle means choosing the simplest thing that will work, creating evolvable structures.</li> <li>Manage your system's evolution by making deliberate decisions about what to change and how to change it within the possibilities of its original design.</li> <li>An architect's role is not to force personal tastes on everyone else in the company, but to do meaningful and valuable work and get out of the way as fast as possible.</li> </ul>"},{"location":"goto_sw_arch_list/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ul> <li>The speaker discussed using circuit breakers and caching to manage errors and improve performance in web applications.</li> <li>A circuit breaker is a design pattern used to prevent a system from repeatedly attempting to perform an operation that is likely to fail, thus avoiding overloading the system.</li> <li>Caching is a technique for storing frequently accessed data in memory to reduce the time it takes to retrieve it.</li> <li>The speaker demonstrated using the Hystrix library, which provides circuit breaker and caching functionality, in a Java-based web application.</li> <li>The speaker discussed how to configure the circuit breaker's behavior, such as setting a threshold for the number of failures before tripping the circuit, and how to use caching to improve performance by storing frequently accessed data in memory.</li> <li>The speaker also discussed the trade-offs between using a circuit breaker and caching, such as the risk of serving stale data from the cache, and the importance of monitoring and testing the system to ensure it is behaving as expected.</li> </ul>"},{"location":"goto_sw_arch_list/#visualizing-cloud-systems-lynn-langit-goto-2019","title":"Visualizing Cloud Systems \u2022 Lynn Langit \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=HHitdmje1ok</p> <ul> <li>The speaker is Lin Lang, an architect at Capital One.</li> <li>She talked about how her team uses a combination of data science and software engineering to build systems that can be used by researchers around the world.</li> <li>She discussed their use of visualization tools, such as 3D printing, to help communicate complex scientific concepts and data to non-scientists.</li> <li>She also touched on the importance of reproducibility in scientific research and how it can be improved through better communication and collaboration between researchers and engineers.</li> <li>The speaker highlighted a picture of a ribosome, which was visualized by Venki Ramakrishnan and his collaborators, who were awarded the Nobel Prize for their work on this.</li> <li>She encouraged the audience to learn more about bioinformatics and to work on visualization of systems to improve their quality and reproducibility.</li> </ul>"},{"location":"goto_sw_arch_list/#re-architecting-2-tier-to-3-tier-thomas-hejlsberg-niels-hallenberg-goto-2019","title":"Re-architecting 2-tier to 3-tier \u2022 Thomas Hejlsberg &amp; Niels Hallenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=AQJYLGg1JCk</p> <ul> <li>The presentation is about a case study on how a large organization implemented event sourcing and CQRS in their system.</li> <li>The main challenges were:<ul> <li>Handling the complexity of multiple teams working on different parts of the system</li> <li>Ensuring good enough quality for each team to work with</li> <li>Deciding when the implementation is done</li> </ul> </li> <li>The solution was to create a cookbook that engaged a number of application programmers to go through and decode.</li> <li>The importance of forming teams with dedicated tasks was emphasized.</li> </ul>"},{"location":"goto_sw_arch_list/#monolith-decomposition-patterns-sam-newman-goto-2019","title":"Monolith Decomposition Patterns \u2022 Sam Newman \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=9I9GdSQ1bbM</p> <ul> <li>The talk is about designing distributed systems, specifically focusing on building a system for selling CDs in a record store.</li> <li>The speaker emphasizes the importance of understanding the problem domain and defining clear requirements before diving into the design.</li> <li>They introduce the CAP theorem and discuss the trade-offs between consistency, availability, and partition tolerance in distributed systems.</li> <li>The speaker presents several patterns for building distributed systems:<ol> <li>Sharding - breaking data into smaller chunks and distributing them across multiple nodes.</li> <li>Replication - storing multiple copies of data to increase availability and handle failures.</li> <li>Quorums - a mechanism for achieving consistency in replicated data stores.</li> <li>Command Query Responsibility Segregation (CQRS) - separating reads and writes to simplify the system design.</li> <li>Event Sourcing - storing the history of changes as events, which can be used to reconstruct the state of the system.</li> <li>Sagas - coordinating multiple services in a distributed transaction using a saga pattern.</li> </ol> </li> <li>The speaker also highlights the importance of monitoring and logging in distributed systems for debugging and maintaining the system.</li> </ul>"},{"location":"goto_sw_arch_list/#how-to-become-a-great-software-architect-eberhard-wolff-goto-2019","title":"How to Become a Great Software Architect \u2022 Eberhard Wolff \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=v_nhv6aY1Kg</p> <ul> <li>Transcript is a garbled text that appears to be a result of broken OCR or similar technology.</li> <li>It's difficult to make out any coherent meaning from the transcript, but here are some potential phrases and words that can be discerned:<ul> <li>software communications agencies</li> <li>soccer cage soccer</li> <li>cappuccinos haut place of hope</li> <li>minister otto schily dem selbstmord</li> <li>actully in response to be on the go 22</li> <li>bruno bevor es oft dass die etikette</li> <li>sind wird f\u00fcr komplexe zwei mutige den architekt und meint nur im may not cold den mietern des tempels</li> <li>manchmal important to be der communicator kombat der das management</li> <li>software steckt ratte mimi nie ins bett ihres of technical problems er wurde an der station slater disney think about cars konnte bessere minsk</li> <li>der ist am problem to mac edition bordet bei dem crash is enough to say</li> <li>transcript appears to be a result of broken OCR or similar technology.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#uncoupling-michael-nygard-goto-2018","title":"Uncoupling \u2022 Michael Nygard \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=esm-1QXtA2Q</p> <ul> <li>Functional/operational coupling is the same for GraphQL and REST</li> <li>Semantic coupling in GraphQL is stronger because of its web-like object querying, but can be mitigated by using interface layer objects instead of domain layer objects</li> <li>In pure REST (Level 5 Richardson style), semantic coupling is strong as consumers are allowed to change any aspect of the representation and put it back, encouraging knowledge about everything in that resource.</li> </ul>"},{"location":"goto_sw_arch_list/#prioritizing-technical-debt-as-if-time-and-money-matters-adam-tornhill-goto-2019","title":"Prioritizing Technical Debt as if Time and Money Matters \u2022 Adam Tornhill \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fl4aZ2KXBsQ</p> <ul> <li>The talk was about using behavioral code analysis to prioritize technical depth when working on software design.</li> <li>Behavioral code analysis is a way of analyzing the structure and behavior of code to understand how it changes over time.</li> <li>Prioritizing technical depth means focusing on making the most important parts of the system easier to change, rather than trying to make every part of the system perfect.</li> <li>Locality of change is an enabler for scaling up systems because it allows teams to work on different parts of the system independently without affecting each other.</li> <li>Behavioral code analysis and these techniques for prioritizing technical depth have a place in software development because they give insights that cannot be obtained from the code alone.</li> <li>The main use case for this analysis is that they help focus expertise and attention to the parts of the system that are likely to change the most.</li> <li>The talk concluded with a thank you to the audience for attending and listening.</li> </ul>"},{"location":"goto_sw_arch_list/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ul> <li>The talk is about software architecture in front-end development.</li> <li>Front-end developers should care about software architecture because it helps to build scalable and maintainable applications.</li> <li>Software architecture can be defined as the high-level structure of a system, including its components and their relationships.</li> <li>There are different architectural patterns that can be applied in front-end development, such as monolithic, modular, or micro-frontends.</li> <li>The talk covers some principles of good software architecture, such as separation of concerns, single responsibility, and loose coupling.</li> <li>It also discusses common pitfalls in front-end architecture, such as mixing business logic with presentation logic or using global state.</li> <li>Finally, the talk encourages front-end developers to learn from other communities of programming languages or paradigms and to keep an open mind about software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ul> <li>Erlang is a dynamic symbolic language</li> <li>State machines are used in Eternity blockchain to manage state transitions and handle messages</li> <li>Cubic quickcheck is used for property-based testing, which helps ensure the correctness of state transitions</li> <li>Proper is an open-source equivalent to cubic quickcheck for other languages</li> <li>Eternity foundation provides incubators and grants for developers interested in working on the Eternity blockchain</li> </ul>"},{"location":"goto_sw_arch_list/#all-the-worlds-a-staging-server-heidi-waterhouse-goto-2019","title":"All The World\u2019s A Staging Server \u2022 Heidi Waterhouse \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eyvrtU4dYgM</p> <ul> <li>Software development is complex</li> <li>Testing is important to ensure software works as expected</li> <li>\"Test in production\" is a strategy to test software on live systems with real users and data</li> <li>Reasons to test in production:<ul> <li>Tests are more realistic, closer to user behavior</li> <li>Faster feedback loop, issues can be fixed immediately</li> <li>Easier to scale tests, no need for separate testing environments</li> <li>Reduces the risk of missing critical bugs</li> </ul> </li> <li>Steps to test in production safely:<ul> <li>Start with a small set of users and increase over time</li> <li>Use feature flags to enable/disable features for testing</li> <li>Monitor systems closely during testing</li> <li>Have a rollback plan if issues arise</li> </ul> </li> <li>Common misconceptions about testing in production:<ul> <li>Testing can't be done in production because it will affect users</li> <li>It is not possible to test in production because of regulatory reasons</li> <li>Testing in production is risky</li> </ul> </li> <li>Using flags allows for gradual rollouts and rollbacks, reducing risk</li> <li>Monitoring is crucial when testing in production</li> <li>Benefits of testing in production include:<ul> <li>Faster feedback loop</li> <li>More realistic test environment</li> <li>Easier to scale tests</li> <li>Reduced risk of missing critical bugs</li> </ul> </li> <li>Test in production because you are testing anyway</li> <li>Use feature flags to reduce risk</li> <li>Monitor closely and have a rollback plan ready</li> </ul>"},{"location":"goto_sw_arch_list/#a-case-for-outside-in-design-sandro-mancuso-goto-2019","title":"A Case For Outside-In Design \u2022 Sandro Mancuso \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fKHYBnuPApY</p> <ul> <li>The speaker is discussing their experiences with technical debt and how to manage it effectively.</li> <li>They define technical debt as the difference between what was planned and what was actually built.</li> <li>Technical debt can be beneficial in some cases, such as when it allows for faster delivery of a product. However, it can also become a hindrance if not managed properly.</li> <li>The speaker suggests using the \"London style\" TDG (Test-Driven Gardening) approach to manage technical debt. This involves test-driving the code and continuously refactoring it to keep it clean and maintainable.</li> <li>They also recommend using tools like SonarQube to monitor the health of the codebase and identify areas that need improvement.</li> <li>The speaker shares their experiences pairing with another developer and experimenting with different TDD styles, such as the \"elastic\" style and the \"classic\" style.</li> <li>They emphasize the importance of continuous learning and improving one's skills to stay up-to-date with the latest tools and techniques in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-fast-microvm-for-serverless-computing-radu-weiss-arun-gupta-goto-2019","title":"Secure &amp; Fast microVM for Serverless Computing \u2022 Radu Weiss &amp; Arun Gupta \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=oKKOBsqQndY</p> <ul> <li>Firecracker is a virtual machine monitor (VMM) that uses the Linux KVM to create and manage microVMs.</li> <li>It is designed to provide secure and fast isolation for multi-tenant container environments.</li> <li>Firecracker has a small attack surface, with only about 200K lines of code, which makes it easier to audit and maintain.</li> <li>The VMM has a minimalist design, with only the necessary components included to provide efficient and secure virtualization.</li> <li>It supports lightweight networking and block storage devices, allowing for fast creation and destruction of microVMs.</li> <li>Firecracker is well-suited for use in serverless and container orchestration platforms, where it can provide secure and fast isolation for functions and containers.</li> <li>The project is open source and available on GitHub.</li> </ul>"},{"location":"goto_sw_arch_list/#cqrs-event-sourcing-apps-with-axon-pivotal-cloud-foundry-s-v-beelen-b-wilcock-goto-2019","title":"CQRS &amp; Event Sourcing Apps with Axon &amp; Pivotal Cloud Foundry \u2022 S. v. Beelen &amp; B. Wilcock \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=moRDmcl5_WY</p> <ul> <li>Introduction to Axon Framework and Axon Server</li> <li>Demonstration of a simple event sourcing and CQRS pattern using Axon Framework</li> <li>Explanation of the reference architecture for Axon Trader, a trading platform built with Axon Framework and Axon Server</li> <li>Overview of the Wallet demo, an example of how to use Axon Framework with Spring Boot and PCF</li> <li>Q&amp;A session on using Axon Framework and Axon Server in cloud-native applications.</li> </ul>"},{"location":"goto_sw_arch_list/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <p>Summary:</p> <ul> <li>Spring Boot is a popular framework for building web applications in Java.</li> <li>The presenter discussed some of the problems with using magic strings and annotations in Spring Boot, such as difficulty in understanding code and refactoring.</li> <li>He suggested using Kotlin instead of Java to take advantage of its type safety and null safety features, which can help eliminate some common errors.</li> <li>The presenter then discussed how to remove magic from Spring Boot by gradually migrating from annotations to the functional programming style. This involves:<ul> <li>Migrating routes from controller classes to route DSL files.</li> <li>Replacing beans with a bean DSL.</li> <li>Using the web MVC DSL instead of reactive programming.</li> </ul> </li> <li>The presenter also mentioned that Spring Boot is working on improving its functional programming support in future releases.</li> </ul> <p>The repository for this talk can be found at https://github.com/bodden/spring-boot-magic.</p>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019_1","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=w008iz_UwDk</p> <ul> <li>Transcript summary:<ul> <li>The talk covers the challenges and strategies for decomposing monolithic applications into microservices.</li> <li>Key takeaways include the need to understand the business domain, design services with clear boundaries, and use appropriate technology and architecture patterns.</li> <li>The importance of automation, monitoring, and security are also emphasized.</li> </ul> </li> <li>Key points:<ol> <li>Understand the business domain and context before decomposing a monolith.</li> <li>Design services with clear boundaries that align with business capabilities.</li> <li>Use appropriate technology and architecture patterns for each service.</li> <li>Implement automation for building, testing, and deploying services.</li> <li>Monitor services to ensure they are performing as expected.</li> <li>Implement security measures to protect services and data.</li> </ol> </li> <li>Quotes:<ul> <li>\"The first thing you need to do is understand the business domain.\"</li> <li>\"Design services with clear boundaries that align with business capabilities.\"</li> <li>\"Use appropriate technology and architecture patterns for each service.\"</li> <li>\"Implement automation for building, testing, and deploying services.\"</li> <li>\"Monitor services to ensure they are performing as expected.\"</li> <li>\"Implement security measures to protect services and data.\"</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#temporal-modelling-mathias-verraes-goto-2019","title":"Temporal Modelling \u2022 Mathias Verraes \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=KNqOWT0lOYY</p> <ul> <li>Blockchain technology allows for decentralized and distributed databases that can record transactions between two parties efficiently and in a verifiable and permanent way.</li> <li>Bitcoin is an example of a popular blockchain technology that enables the transfer of value without needing a trusted third party, like a bank or government.</li> <li>Transactions are grouped into blocks and added to the blockchain through a process called mining, which involves solving complex mathematical problems.</li> <li>The decentralized nature of blockchain technology means that it is not controlled by any single entity, making it more secure and resistant to tampering.</li> <li>Blockchain technology has potential applications beyond cryptocurrency, such as supply chain management, voting systems, and digital identities.</li> <li>In the context of online payments, blockchain technology can provide faster and cheaper transactions compared to traditional methods like credit cards or PayPal.</li> <li>The time it takes for a transaction to be confirmed on the Bitcoin network is around 10 minutes, but this can vary depending on the network's congestion.</li> <li>In the case of online payments with blockchain technology, the confirmation of the transaction is crucial to ensure that the payment has been processed correctly and cannot be reversed.</li> <li>It is possible to use other blockchain networks that offer faster confirmation times, such as Ethereum or Ripple. However, they may have different trade-offs in terms of cost, security, and adoption.</li> <li>In summary, while there are some technical considerations when it comes to using blockchain technology for online payments, the main advantage is that it allows for decentralized and secure transactions without needing a trusted third party.</li> </ul>"},{"location":"goto_sw_arch_list/#getting-to-grips-with-kubernetes-rbac-liz-rice-goto-2019","title":"Getting to Grips with Kubernetes RBAC \u2022 Liz Rice \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=4HMRFcg6nEY</p> <ul> <li>Kubernetes is a container orchestration tool</li> <li>Security in Kubernetes involves configuring permissions upfront and following the principle of least privilege</li> <li>Users and groups are first-class things in a Linux system, but including eTI's they're expected to be defined somewhere else in Kubernetes</li> <li>There are different ways that users can authenticate with Kubernetes, such as using a username and password or using a token</li> <li>Once a user is authenticated, they need to have the correct permissions to perform certain actions on resources</li> <li>These permissions are granted through RBAC rules, which specify who can do what on which resources</li> <li>It's important to configure these permissions correctly, as giving too many permissions to a user or group can lead to security vulnerabilities</li> <li>There are three different types of resources in Kubernetes: namespaces, clusters, and eTI's</li> <li>Namespaces are virtual clusters that allow users to organize their resources</li> <li>Clusters are the physical infrastructure that runs Kubernetes</li> <li>eTI's are external resources that can be accessed through Kubernetes</li> <li>There are also different types of permissions in Kubernetes: verbs, resources, and namespaces</li> <li>Verbs are the actions that a user can perform on a resource, such as 'get' or 'delete'</li> <li>Resources are the objects that a user can interact with, such as pods or services</li> <li>Namespaces are the virtual clusters where resources are organized</li> <li>eTI's can have their own set of permissions and resources</li> <li>To specify RBAC rules, you can use YAML files or the kubectl command line tool</li> <li>It's also possible to use third-party tools like Open Policy Agent to enforce RBAC rules</li> <li>When configuring RBAC rules, it's important to consider the different types of users and their roles in Kubernetes</li> <li>For example, a developer might need different permissions than an administrator</li> <li>You can also specify RBAC rules based on the user or group that is requesting access</li> <li>It's important to test RBAC rules thoroughly before deploying them in a production environment</li> <li>Make sure that users and groups only have the necessary permissions, and that eTI's are properly secured</li> <li>Finally, it's recommended to use a network policy tool like Calico or Kubernetes Network Policy to restrict traffic between pods and services. This can help prevent security vulnerabilities caused by lateral movement in your cluster.</li> </ul>"},{"location":"goto_sw_arch_list/#the-world-after-microservice-migration-w-service-mesh-contract-testing-d-mitrovic-goto-2018","title":"The World after Microservice Migration w/ Service Mesh &amp; Contract Testing \u2022 D. Mitrovic \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=MxhcFPRkzlw</p> <p>Summary:</p> <ul> <li>The speaker talks about the microservices architecture they adopted at Atlassian.</li> <li>They discuss how they use OpenAPI (formerly known as Swagger) to document their APIs and how they use a tool called Swagger Packet Validator to ensure that the documentation is up-to-date.</li> <li>They also talk about how they handle legacy systems and ensure that new microservices can communicate with them without issues.</li> <li>They used OpenAPI to define incoming and outgoing contracts for their services, which allowed them to split a monolithic application into smaller microservices while ensuring compatibility between them.</li> <li>They recorded all possible requests to and from the legacy system, converted them into packed files using OpenAPI tools, and then used these contracts to check if the new providers were behaving as expected. This approach allowed them to ensure that the legacy system would continue to work as intended after they separated it into smaller components.</li> <li>They emphasized the importance of testing their microservices thoroughly before deploying them, using a tool called Postman to test all possible request scenarios and ensuring compatibility with different clients.</li> </ul>"},{"location":"goto_sw_arch_list/#the-7-quests-of-resilient-software-design-uwe-friedrichsen-goto-2018","title":"The 7 Quests of Resilient Software Design \u2022 Uwe Friedrichsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=v8hh0mB35wQ</p> <ul> <li>The speaker discussed seven quests that a company might face when trying to implement resilient software design.</li> <li>The first quest is understanding the problem domain and modeling it correctly. This includes identifying the boundaries of the system, the entities within it, and their relationships.</li> <li>The second quest is mastering functional design. The speaker noted that as a domain, software engineering is still quite bad at this, and distributed systems add an extra twist to the challenge.</li> <li>The third quest is picking up distributed systems. This includes understanding concepts such as eventual consistency, sharding, and CAP theorem.</li> <li>The fourth quest is learning how to deal with partial failure. The speaker noted that in a distributed system, it's not a question of if something will fail, but when and where.</li> <li>The fifth quest is mastering observability. This includes logging, monitoring, and tracing, which are crucial for understanding what is happening within a complex system.</li> <li>The sixth quest is learning how to deal with concurrency. The speaker noted that this is a hard problem, and it's made even harder in a distributed system where there are multiple processes running concurrently.</li> <li>The seventh quest is learning how to deal with legacy systems. The speaker noted that many companies have legacy systems that they need to integrate with, and doing so can be challenging.</li> <li>The speaker emphasized that resilient software design is not just about the technology, but also about the people and the processes. It requires a cultural shift towards a more empirical approach, where experiments are used to test assumptions and hypotheses.</li> </ul>"},{"location":"goto_sw_arch_list/#event-driven-microservices-not-just-about-events-allard-buijze-goto-2018","title":"Event-Driven Microservices - not (just) about Events! \u2022 Allard Buijze \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=DzGuDNHsOQ0</p> <ul> <li>Events are a way of modeling messages in a microservices architecture</li> <li>They can stimulate location transparency, but beware of creating tight couplings between services</li> <li>It's important to consider bounded contexts when designing events</li> <li>Other reasons for communication between services should also be considered, such as RPC or REST</li> <li>Modeling messages explicitly can retain value over time</li> <li>Evolve your way into microservices, don't just go there straight away.</li> </ul>"},{"location":"goto_sw_arch_list/#event-based-architecture-and-implementations-with-kafka-and-atom-eberhard-wolff-goto-2018","title":"Event-based Architecture and Implementations with Kafka and Atom \u2022 Eberhard Wolff \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Ecg7lvvm8aU</p> <ul> <li>Introduction to microservices</li> <li>Definition of microservices: small, independent services that communicate with each other using APIs</li> <li>Benefits of using microservices: scalability, resilience, and development speed</li> <li>Challenges of using microservices: data consistency, service discovery, and monitoring</li> <li>Different ways to implement communication between microservices: REST, gRPC, and message queues</li> <li>Comparison between REST and gRPC: performance and complexity</li> <li>Introduction to Kafka: a distributed streaming platform for building real-time data pipelines</li> <li>Benefits of using Kafka for microservices communication: scalability, fault tolerance, and message durability</li> <li>Example of using Kafka for implementing event sourcing pattern</li> <li>Comparison between Kafka and traditional message queues: throughput and latency</li> <li>Best practices for designing and implementing microservices: data modeling, service boundaries, and testing strategies</li> <li>Conclusion: microservices are not a silver bullet, but can be a powerful tool in certain scenarios. It's important to understand the trade-offs and choose the right technology for the job.</li> </ul>"},{"location":"goto_sw_arch_list/#modular-monoliths-simon-brown-goto-2018","title":"Modular Monoliths \u2022 Simon Brown \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=5OjqD-ow8GE</p> <ul> <li>Monolithic architecture is a single, self-contained application where the UI, business logic, and data access are combined into a single program.</li> <li>Microservices architecture breaks down an application into smaller, independently deployable services that can communicate with each other using APIs.</li> <li>Pros of monolithic architecture: simpler to develop and deploy, less operational overhead, better performance due to fewer network calls.</li> <li>Cons of monolithic architecture: scalability issues, difficulty in maintaining large codebases, slow development cycles due to the need for frequent redeployments.</li> <li>Pros of microservices architecture: easier to scale and maintain, independent deployment of services, faster development cycles due to modularity.</li> <li>Cons of microservices architecture: operational complexity, network latency, service discovery, data consistency, and testing challenges.</li> <li>Choosing between monolithic or microservices depends on the specific needs of the project and the team's expertise. It is not a one-size-fits-all decision.</li> <li>When choosing microservices, it is essential to ensure that the services communicate with each other using APIs and that diagrams match the code.</li> <li>Microservices architecture requires more operational overhead, such as service discovery and communication between services.</li> <li>Monolithic architecture can be a good choice for small teams or projects with simple requirements.</li> <li>It is possible to start with a monolithic architecture and transition to microservices later if needed.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-in-the-age-of-things-frank-buschmann-goto-2018","title":"Software Architecture in the Age of Things \u2022 Frank Buschmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=_qggqkROlE4</p> <ul> <li>Introduced himself as a software architect and developer working on IoT.</li> <li>Mentioned that the world is changing rapidly due to technology and IoT is one of the major drivers of this change.</li> <li>Discussed some challenges faced by IoT developers such as security, scalability, networking and connectivity, etc.</li> <li>Talked about designing for failure in IoT systems.</li> <li>Mentioned that software architects need to understand the business domain they are working on.</li> <li>Discussed the importance of feedback loops in IoT development.</li> <li>Emphasized on making IoT a place worth living in as software developers have a lot of control over it.</li> </ul>"},{"location":"goto_sw_arch_list/#unconditional-code-michael-feathers-goto-2018","title":"Unconditional Code \u2022 Michael Feathers \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AnZ0uTOerUI</p> <ul> <li>Error handling is an important aspect of software development.</li> <li>The term \"error\" can be misleading and may not accurately represent what is happening in the code.</li> <li>Instead of thinking about errors, it may be more productive to think about the conditions under which the code can run unconditionally.</li> <li>Using structures like option monads and exception handling can help make the code less prone to error.</li> <li>It's important to consider the design of the code and how it can be structured to be less prone to error.</li> <li>By using design and generalization, it may be possible to expand the conditions under which the code can run unconditionally.</li> <li>The goal is to make it as easy as possible for users to do the right thing, and to make it more difficult for them to do the wrong thing.</li> </ul>"},{"location":"goto_sw_arch_list/#ddd-today-modeling-uncertainty-vaughn-vernon-goto-2017","title":"DDD Today - Modeling Uncertainty \u2022 Vaughn Vernon \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8Y-XPlXOWoA</p> <p>Summary of Transcript:</p> <ul> <li>Vaughn Vernon's talk focuses on Domain-Driven Design (DDD) and how to make it work in practice.</li> <li>Key takeaways include the importance of context, language, and modeling, as well as the use of events and bounded contexts.</li> <li>The speaker emphasizes the need to avoid using technical terms in the business model and to name events with verbs and past tense.</li> <li>Other tips include avoiding anemic models, modeling aggregates as entities, and using a consistent naming convention for events.</li> <li>The talk also touches on the use of CQRS and Event Sourcing as part of a DDD implementation.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-patrick-kua-goto-2017","title":"Building Evolutionary Architectures \u2022 Patrick Kua \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8bEsNT7jdC4</p> <ul> <li>The main focus of N26 is to provide a mobile-first banking experience.</li> <li>They are regulated by the German financial regulatory authority and have a full European banking license.</li> <li>N26 offers a free account with no monthly fees, but they also offer premium accounts with additional features for a monthly fee.</li> <li>The company has implemented various security measures to protect its customers' data and funds, including two-factor authentication and encryption.</li> <li>They use automation and DevSecOps practices to ensure that security scales as the company grows.</li> <li>N26 is named after the 26 moves required to solve a Rubik's Cube, representing their goal of simplifying complex financial transactions.</li> </ul>"},{"location":"goto_sw_arch_list/#a-crystal-ball-to-prioritize-technical-debt-adam-tornhill-goto-2017","title":"A Crystal Ball to Prioritize Technical Debt \u2022 Adam Tornhill \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=SdUewLCHWvU</p> <ul> <li>The talk was about the concept of \"technical debt\" in software development and how to address it using a prioritization technique.</li> <li>Technical debt is the difference between the current state of the codebase and the ideal state, taking into account factors like complexity, maintainability, and test coverage.</li> <li>The technique presented consists of 3 steps: measure technical debt, prioritize it, and then address it through refactoring or rewriting.</li> <li>To measure technical debt, the speaker suggested using a combination of metrics such as cyclomatic complexity, code duplication, and test coverage.</li> <li>To prioritize technical debt, the speaker proposed using a scoring system based on factors like business value, risk, and effort required to address it.</li> <li>The speaker also emphasized the importance of continuous improvement and regular code reviews to prevent technical debt from accumulating.</li> <li>The talk ended with a Q&amp;A session where the speaker answered questions about specific tools, techniques, and experiences related to addressing technical debt.</li> </ul>"},{"location":"goto_sw_arch_list/#shopifys-architecture-to-handle-80k-rps-celebrity-sales-simon-eskildsen-goto-2017","title":"Shopify's Architecture to Handle 80K RPS Celebrity Sales \u2022 Simon Eskildsen \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=N8NWDHgWA28</p> <ul> <li>The company uses a custom built distributed data store called FlockDB.</li> <li>It is written in Scala and runs on top of Apache Mesos.</li> <li>The system has thousands of nodes, each node with 48 cores and 256GB RAM.</li> <li>There are around 10 billion writes per day.</li> <li>Each write op takes about 3ms to complete.</li> <li>Data is sharded by user ID.</li> <li>FlockDB is used for storing social graph data and metadata.</li> <li>The company uses Apache Kafka for stream processing, log aggregation and real-time data ingestion.</li> <li>They are considering using Kubernetes in the future.</li> <li>They do not currently use MySQL binlog with Kafka but it might be considered if there were other use cases for it.</li> </ul>"},{"location":"goto_sw_arch_list/#serverless-the-future-of-software-architecture-peter-sbarski-goto-2017","title":"Serverless: the Future of Software Architecture \u2022 Peter Sbarski \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=LAWjdZYrUgI</p> <ul> <li>Service-oriented architecture is an approach to software design that emphasizes the use of small, loosely coupled services to build complex systems.</li> <li>Services are independent components that communicate with each other using well-defined interfaces and protocols.</li> <li>The main benefits of service-oriented architecture include flexibility, scalability, and maintainability.</li> <li>To successfully implement a service-oriented architecture, it is important to carefully design the services and their interfaces, as well as to choose an appropriate communication protocol.</li> <li>Microservices are a type of service-oriented architecture that emphasizes even greater independence and simplicity of the individual services.</li> <li>Service meshes are a way to manage the communication between microservices in a distributed system.</li> <li>When designing a service-oriented architecture, it is important to consider aspects such as data consistency, security, and monitoring.</li> <li>It is also important to keep in mind that service-oriented architecture is not always the best choice for every project, and that other approaches such as monolithic architectures may be more appropriate in certain cases.</li> <li>The speaker is the founder of a consulting company that specializes in service-oriented architecture and microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#the-many-meanings-of-event-driven-architecture-martin-fowler-goto-2017","title":"The Many Meanings of Event-Driven Architecture \u2022 Martin Fowler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=STKCRSUsyP0</p> <ul> <li>Event-driven systems are those where events cause other things to happen</li> <li>Events should be modeled as facts that have happened in the past, e.g., \"UserRegistered\"</li> <li>Event-driven systems can be more resilient and scalable than traditional request/response architectures</li> <li>Events can be used for communication between services, data integration, and system auditing</li> <li>There are common patterns for event-driven systems: Event Notification, Event Port, Event Sourcing, Command Query Responsibility Segregation (CQRS), and Event-Carried State Transfer (ECST)</li> <li>Event-driven systems can be more complex to understand and debug than traditional architectures, so it's important to be precise in the use of terminology.</li> </ul>"},{"location":"goto_sw_arch_list/#whoops-where-did-my-architecture-go-oliver-gierke-goto-2016","title":"Whoops! Where Did My Architecture Go? \u2022 Oliver Gierke \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=v1XIcgFUIEw</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#building-theories-is-building-value-george-fairbanks-goto-2016","title":"Building Theories is Building Value \u2022 George Fairbanks \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Led34f3Pcq4</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#visualise-document-explore-your-software-architecture-simon-brown-goto-2016","title":"Visualise, Document &amp; Explore Your Software Architecture \u2022 Simon Brown \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=GM_J_jRp62g</p> <ul> <li>The speaker discusses their experience using Gliffy and the potential security concerns of storing data on the cloud.</li> <li>They mention that they are creating an on-premises API to store data locally for added security.</li> <li>The speaker expresses their preference for using cloud-based tools, but notes that the current tooling in this area is immature.</li> <li>They ponder whether there needs to be a mind shift change for people to start using the cloud more or if on-premise solutions need to be built.</li> <li>They mention that they don't want to lose functionality by packaging up an on-premise version of their current cloud-based solution.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-as-systems-dissolve-eoin-woods-goto-2016","title":"Software Architecture as Systems Dissolve \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=XanSoFchPbw</p> <ul> <li>Security engineering is important for software developers, but there is often a disconnect between the security community and software development teams.</li> <li>There is a lack of intersection between the two communities, with few software developers attending security conferences and vice versa.</li> <li>The security community needs to do a better job of speaking the language of software developers and helping them prioritize security measures.</li> <li>Hacking can happen to anyone, as demonstrated by the hacking of hacking team, a company that produces hacking technology.</li> <li>It is important for software developers to take security measures seriously and apply best practices to their work.</li> </ul>"},{"location":"goto_sw_arch_list/#continuous-architecture-murat-erder-goto-2016","title":"Continuous Architecture \u2022 Murat Erder \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3xw3a35yLOQ</p> <ul> <li>Continuous architecture is a set of principles and tools that can help architects make their work more relevant and practical.</li> <li>It involves breaking down silos, collaborating with developers and other teams, and continuously delivering value to the organization.</li> <li>The principles of continuous architecture include:<ol> <li>Embrace Change</li> <li>Deliver Value Continuously</li> <li>Make Architecture Everyone's Job</li> <li>Practice Continuous Discovery</li> <li>Use Appropriate Tools and Techniques</li> <li>Organize Around Capabilities</li> </ol> </li> <li>The continuous architecture mindset involves making architecture real and relevant, rather than something that sits on the side and is in constant conflict with other teams or the organization.</li> </ul>"},{"location":"goto_sw_arch_list/#from-homogeneous-monolith-to-heterogeneous-microservices-architecture-chad-fowler-goto-2015","title":"From Homogeneous Monolith to Heterogeneous Microservices Architecture \u2022 Chad Fowler \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=sAsRtZEGMMQ</p> <ul> <li>Introduction to the speaker and their background in software development.</li> <li>Explanation of the company's use of Elixir and its benefits for building scalable, fault-tolerant systems.</li> <li>Discussion on how the company transitioned from a monolithic architecture to a microservice architecture using Elixir.</li> <li>Explanation of the challenges faced during the transition and how they were overcome.</li> <li>Comparison of the differences between monolithic and microservice architectures.</li> <li>Explanation of the importance of service discovery, load balancing, and message routing in a microservice architecture.</li> <li>Discussion on the company's future plans for further optimizing their architecture, including potentially refactoring to a monolith.</li> <li>Q&amp;A with the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#reactive-systems-21st-architecture-for-21st-century-systems-dave-farley-goto-2015","title":"Reactive Systems: 21st Architecture for 21st Century Systems \u2022 Dave Farley \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=RuHkNGrwD5o</p> <ul> <li>Synchronous and asynchronous communication have different trade-offs.</li> <li>Synchronous communication is simpler and easier to reason about, but can lead to performance issues if not managed carefully.</li> <li>Asynchronous communication can be more complex and harder to reason about, but can provide better performance and scalability.</li> <li>When designing a system, it's important to consider the needs of the application and choose the appropriate communication style accordingly.</li> <li>It's possible to mix synchronous and asynchronous communication in a single system, but care must be taken to ensure that they are properly isolated and managed.</li> <li>A gateway service can be used to manage synchronous communication between services in an otherwise asynchronous system.</li> <li>When using a database commit as a synchronous action, it's important to limit the amount of data being committed to avoid performance issues.</li> <li>Agent Lee is a fundamental communication protocol that can be built upon to create other communication styles.</li> </ul>"},{"location":"goto_sw_arch_list/#mobile-first-architectures-alexander-stigsen-goto-2015","title":"Mobile-First Architectures \u2022 Alexander Stigsen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Xh43D4E2e2M</p> <ul> <li>Mobile devices, drones, and IoT devices have limited network connectivity, which can lead to high latency when trying to access data from a centralized server.</li> <li>To address this issue, it's important to bring the data and computation together on the device itself, a concept known as endpoint computing or client cloud computing.</li> <li>This approach can help reduce latency and improve the user experience by allowing devices to process and display information more quickly.</li> <li>One example of endpoint computing is using mobile devices to perform tasks that would normally be done on a desktop computer, such as video editing or data analysis.</li> <li>Another example is using drones to process sensor data in real-time, rather than sending it back to a central server for processing.</li> <li>Endpoint computing can also help reduce the amount of data that needs to be transmitted over a network, which can save bandwidth and improve overall performance.</li> <li>As mobile devices and IoT devices become more powerful, it's likely that we will see more applications of endpoint computing in the future.</li> </ul>"},{"location":"goto_sw_arch_list/#evolutionary-architecture-microservices-rebecca-parsons-goto-2015","title":"Evolutionary Architecture &amp; Microservices \u2022 Rebecca Parsons \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=WhHtVUlJNA0</p> <ul> <li>Microservices is an architectural style that emphasizes small, loosely coupled services.</li> <li>Continuous delivery is important for microservices because it enables quick and easy deployment and updating of individual services.</li> <li>The book \"Building Microservices\" started out as a book about continuous delivery.</li> <li>Microservices are the first major architectural paradigm to come along since continuous delivery became popular.</li> <li>Operations departments will not like it if you implement microservices without involving them, because their processes for monitoring and error recovery will be different.</li> </ul>"},{"location":"goto_sw_arch_list/#deliberate-architecture-robert-smallshire-goto-2016","title":"Deliberate Architecture \u2022 Robert Smallshire \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3cjSpH4SYpU</p> <ul> <li>Software quality attributes are non-functional requirements that affect how a system operates.</li> <li>Examples of software quality attributes include performance, security, usability, and maintainability.</li> <li>Different stakeholders have different priorities when it comes to software quality attributes. For example, developers may be more concerned with maintainability, while users may be more interested in usability.</li> <li>Software architects play a key role in ensuring that software quality attributes are considered and addressed in the design and development of a system.</li> <li>A good starting point for improving software quality in an organization is to have software architects act as champions for software quality attributes. By focusing on these attributes, other aspects of the system such as features will take care of themselves.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-by-design-the-architects-guide-to-security-design-principles-eoin-woods-goto-2016","title":"Secure by Design \u2013 the Architect's Guide to Security Design Principles \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=4qN3JBGd1g8</p> <ul> <li>Security is about trade-offs and making informed decisions</li> <li>10 principles of security:<ul> <li>Good security requires good design.</li> <li>It's impossible to make anything foolproof because fools are so ingenious.</li> <li>Treat people as a resource to be developed not a problem to be solved.</li> <li>The difficulty of doing something is inversely proportional to how often it is done.</li> <li>If you don't actively manage security, it will managedly get worse.</li> <li>Security is not a product, but a process.</li> <li>Complexity is the enemy of security.</li> <li>Security is a non-competitive advantage.</li> <li>There's no point in having security unless people use it.</li> <li>The most secure system is one that is turned off and disconnected.</li> </ul> </li> <li>References:<ul> <li>NCSC (National Cyber Security Centre)</li> <li>NIPC (National Infrastructure Protection Center)</li> <li>\"Security Engineering\" by Ross Anderson, Cambridge University</li> </ul> </li> </ul> <p>[^1]: Transcript from Video of talk</p>"},{"location":"goto_sw_arch_list/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ul> <li>Rest is a set of ideas for simplifying web development</li> <li>The main components of rest are:</li> <li>Immutable data structures (using functional programming)</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration</li> <li>These ideas can help reduce complexity in web development by:</li> <li>Making it easier to reason about code</li> <li>Encouraging reusable components</li> <li>Minimizing the amount of boilerplate code</li> <li>It's important to continually evaluate assumptions and biases, and consider unfamiliar but time-tested ideas for complexity reduction.</li> <li>Some examples of these ideas include:</li> <li>Functional programming concepts like closures and Lisp</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-vs-code-simon-brown-goto-2014","title":"Software Architecture vs. Code \u2022 Simon Brown \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=GAFZcYlO5S0</p> <ul> <li>Starts by drawing diagrams to decompose problems</li> <li>Uses UML notation for clarity and consistency, but not necessary</li> <li>Diagramming helps clarify responsibilities and interactions between components</li> <li>Helps identify high-level components in a system</li> <li>Can use TDD or other testing strategies once components are identified</li> <li>Diagrams serve as starting point for further development and evolution of the system</li> <li>Encourages thinking about the system in terms of components and their relationships, which is useful for microservices architecture</li> </ul>"},{"location":"usenix_atc_2023/","title":"Usenix atc 2023","text":""},{"location":"usenix_atc_2023/#usenix-atc-23-and-osdi-23-joint-keynote-address-sky-computing","title":"USENIX ATC '23 and OSDI '23 Joint Keynote Address - Sky Computing","text":"<p>URL: https://www.youtube.com/watch?v=AuNfxVLdo0A</p> <ul> <li>The speaker is discussing \"Sky Computing\", a new lab at their university.</li> <li>They believe Sky Computing will happen, and are trying to answer three questions: why Sky will happen, what it looks like, and their early experience with it.</li> <li>The speaker references the first internet demo in 1977, where packet data was sent between two continents using different network technologies. They draw a parallel to Sky Computing, where they want to abstract away the differences in cloud technologies for users.</li> <li>The goal of Sky Computing is to allow users to run applications across multiple clouds, which can provide benefits such as data sovereignty, better hardware matching for specific tasks, cost reduction, and avoiding lock-in with a single cloud provider.</li> <li>They mention previous efforts at creating portability layers between clouds, but believe these have not been successful due to the complexity of reimplementing services at a higher layer.</li> <li>Instead, they propose a two-sided market approach, where services are implemented across multiple clouds and applications can choose which cloud to use based on their needs and preferences.</li> <li>They mention the issue of service incompatibility between clouds, and provide examples of open source and proprietary services that may be incompatible.</li> <li>The speaker then provides a simple example of a machine learning pipeline running on Sky, which can abstract away the cloud and choose the best option for the task based on requirements such as data confidentiality and cost minimization.</li> <li>They mention the use of an intercloud broker to map application requirements to available services in different clouds, and the importance of billing in a multi-cloud environment.</li> <li>The speaker believes that Sky will happen due to growing compatibility sets, market forces, and the desire of cloud providers to participate in these sets. They also mention the potential impact of Sky on research and innovation.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-bifrost-analysis-and-optimization-of-network-io-tax-in-confidential-virtual","title":"USENIX ATC '23 - Bifrost: Analysis and Optimization of Network I/O Tax in Confidential Virtual...","text":"<p>URL: https://www.youtube.com/watch?v=E47Jgd6zXW8</p> <ul> <li>The transcript is from a university talk about data security in cloud computing.</li> <li>Confidential VMS (CVMS) and CVN Hardware are proposed for secure cloud computing, providing OS level confidential computing with memory isolation and hardware encryption.</li> <li>Traditional VMS have been compromised, leading to disclosed sensitive data in Real Estate Services and Financial Services.</li> <li>GDPR has established and enforced data security regulations.</li> <li>CVMS provide good compatibility and transparency for application workloads.</li> <li>The growth of mobile network devices and ethernet speed is discussed.</li> <li>End-to-end encryption, POS forced dial data, and enhanced performance with extended filter are mentioned.</li> <li>The impact of end-to-end network performance on 3BM's network IO intensive application benchmark is evaluated.</li> <li>A serial attack scenario is described, focusing on CPU time spent on security protection intrinsic Network IO procedure.</li> <li>The non-red component histogram shows that the cvms comparison Baseline overhead mainly comes from um access tax and technical setting text.</li> <li>Synthetic protection secure state instance happens transiently, consuming large CPU cycles when receiving clear register add in CBM.</li> <li>Next Generation ethereum Hardware with bounce buffer is analyzed for traditional rear memory shared hypoider headquarters copy package directly to shared memory.</li> <li>The Rainbow Bridge north mythology metaphorically represents secure Rapid iodta transfer Syrian Ultra or share threat model existing cvms TCB.</li> <li>Design goals include performance, negative text largely reduced future hardware focus reducing bounce power tax, technically processing tax much possible time, maintaining level security guarantee, and practicality.</li> <li>The proposed defrost CVMS design focuses on zero copy encryption deduplication and eliminates payload bouncing.</li> <li>A backend-focused architecture is suggested to improve network performance by addressing the challenge of fully loaded CPUs.</li> <li>The prototype has low code complexity and achieves large performance improvement, but it cannot outperform the Baseline in certain scenarios.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-secretflow-spu-a-performant-and-user-friendly-framework-for-privacy-preserving","title":"USENIX ATC '23 - SecretFlow-SPU: A Performant and User-Friendly Framework for Privacy-Preserving...","text":"<p>URL: https://www.youtube.com/watch?v=X20APC8c9pQ</p> <ul> <li>The transcript is from a conference presentation about the Secret Flow SPU project.</li> <li>The presenter discusses the importance of data privacy and security in machine learning.</li> <li>Secure Multiple Party Computation (MPC) is introduced as a solution to protect sensitive data during processing.</li> <li>A demo is shown to illustrate how MPC works, with three parties (Alice, Bob, Charlie) calculating the sum of their salaries without revealing individual amounts.</li> <li>The presenter then introduces Privacy-Preserving Machine Learning (PPML), which allows multiple parties to train machine learning models without exposing individual training data.</li> <li>MPC and PPML are distinct fields with different priorities, but integrating them is a challenge.</li> <li>Existing frameworks attempt to bridge this gap, either as general-purpose NPC compilers or by encapsulating cryptographic primitives in customized machine learning APIs.</li> <li>The presenter then introduces the Secret Flow SPU framework, which contains a compiler that converts ML model bytecodes into instructions for a high-performance runtime operating on a specific MPC protocol.</li> <li>The goal of Secret Flow SPU is to be user-friendly, extensible, and high-performance.</li> <li>The presenter concludes by mentioning the importance of GPT2 inference in the context of PPML.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-portunus-re-imagining-access-control-in-distributed-systems","title":"USENIX ATC '23 - Portunus: Re-imagining Access Control in Distributed Systems","text":"<p>URL: https://www.youtube.com/watch?v=J50rieOdMRQ</p> <ul> <li>Tanya is discussing Fortuna, a geographical key management system built using attribute-based encryption variant of public key cryptography.</li> <li>The system allows access control and keeps customer key knowledge hidden.</li> <li>It's an alternative to the usual strategy of using a central party or arbiter for access control in distributed systems.</li> <li>TLS termination is discussed as a problem where the infrastructure provider needs access to the customer's private key.</li> <li>Fortuna's solution involves a globally synchronized key value store (Quicksilver) that distributes customer configuration to edge machines.</li> <li>The challenge is to provide edge lower latency, high availability, fault tolerance, and comply with regulations like keeping the key accessible within the EU.</li> <li>Three options are discussed: centralizing access control logic, sending the key to an EU-based data center, or using public key crypto.</li> <li>The chosen solution involves key rotation and a variant of ABE that uses ciphertext policy for expressing access control.</li> <li>The system includes a key generation authority, an edge machine, and a machine provisioning database.</li> <li>The edge machine validates the set attribute and terminates the handshake if it can decrypt the data.</li> <li>The talk also discusses the challenge of decryption performance and the solution involving symmetric key crypto.</li> <li>The speaker mentions that the use of ABE is not widespread and lacks standardization.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-glogs-interactive-graph-pattern-matching-query-at-large-scale","title":"USENIX ATC '23 - GLogS: Interactive Graph Pattern Matching Query At Large Scale","text":"<p>URL: https://www.youtube.com/watch?v=qF17EMpEog4</p> <ul> <li>The transcript is from a conference presentation about the design of an interactive graph query system called \"geologs\".</li> <li>The system is designed to handle large-scale graphs and support complex graph pattern matching queries.</li> <li>It aims to simplify the trial-and-error process typically involved in such queries, especially for non-expert users.</li> <li>Features of the system include:</li> <li>Support for a collaborative language called Grammy Cipher.</li> <li>Automatic optimization for performance tuning.</li> <li>Expected support for distributed execution across a cluster.</li> <li>The presentation compares geologs with existing solutions like Neo4j and TigerGraph, highlighting their strengths and weaknesses.</li> <li>The speaker introduces a new 4G Tech graph database that supports Cypher and GraphQL but lacks automatic optimization and distributed execution features.</li> <li>The speaker discusses the challenges in designing an igpm system and proposes solutions to overcome them.</li> <li>The proposed Glog system consists of three modules: user frontend, backend, and graph specifier.</li> <li>The system is designed to optimize GPM execution plans using higher-order statistic patterns stored in the innovative Glog structure.</li> <li>The distributed data flow engine in the backend module organizes executors corresponding to nodes in the cluster and partitions large graphs across clusters for efficient query processing.</li> <li>The graph specifier module is responsible for specifying the original large graph as a smaller one that maintains accuracy in pattern frequency estimation.</li> <li>The speaker highlights the importance of performance in the GPM system and compares execution plans generated by geologs, Neo4j, and Dulux, showing geologs' superiority in intermediate result size.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-cyclosa-redundancy-free-graph-pattern-mining-via-set-dataflowi","title":"USENIX ATC '23: Cyclosa: Redundancy-Free Graph Pattern Mining via Set Dataflowi","text":"<p>URL: https://www.youtube.com/watch?v=ooJvvgOIk34</p> <ul> <li>The transcript is from a presentation at Tru Huad University Science Technology.</li> <li>The presenter introduces the Research Graph Pattern Mining System, which aims to solve redundant computation problems in graph mining.</li> <li>The system uses an embed-centric paradigm, which avoids storing subgraphs and intermediate isomorphism checks by using pattern structure to guide exploration.</li> <li>This approach reduces the workflow significantly and avoids unnecessary partial instances.</li> <li>Redundant computation exists even in optimal search spaces due to repeated set intersections. The presenter identifies two categories of redundant computation: explicit (performed between neighboring subgraphs) and implicit (performed within search paths).</li> <li>The proposed solution is a new abstraction at the operator level, rather than the set formula level, which allows for better tracking and prediction of redundant computations.</li> <li>The system uses a data reuse possibility set data flow directed graph to indicate set transfer between operators, enabling fine-grained pattern analysis and decoupling of set operators from operators.</li> <li>The presenter introduces the Cyclosa prototype system, which has three major tasks: analyzing user input patterns, generating efficient set data flows, and scheduling set data flows for operator execution.</li> <li>Cyclosa supports three basic set operators (range-based data flow graph, time-based execution engine, and set manager) and uses a two-phase pattern analysis approach that considers pattern data graph features and symmetry breaking.</li> <li>The system uses dual IDs to identify sets and operators, ensuring correctness and saving memory space.</li> <li>Cyclosa has been tested for efficiency and outperforms other works in handling explicit and implicit redundancies. It also supports fine-grade load balancing and shading among sets.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-sowalker-an-io-optimized-out-of-coregraph-processing-system-for-second-order","title":"USENIX ATC '23 - SOWalker: An I/O-Optimized Out-of-CoreGraph Processing System for Second-Order...","text":"<p>URL: https://www.youtube.com/watch?v=g7JD1TppoBY</p> <ul> <li>The transcript is from a conference about using second order random work in graph processing systems.</li> <li>Second order random work is powerful for extracting information from graphs, as it considers recent work history and previous vertex selection.</li> <li>Traditional random work uses first order markup model, assuming transition probability depends only on the current vertex, not previous information.</li> <li>Encouraging results have been obtained with second order random work, showing its necessity in considering higher order structure of real world data.</li> <li>AutoCore graph processing systems are proposed to make it cheaper and easier to analyze large graphs.</li> <li>Current systems load all work for a block into memory when loading the block, leading to extra IO for updatable works.</li> <li>The transcript suggests two factors to improve second order random work efficiency: avoiding loading nonupdatable works and loading many updateable works.</li> <li>A concept of work Matrix is introduced, which represents the dimensionality Matrix with numbered blocks created or updated based on work state elements.</li> <li>The system uses a succinct data structure to encode work in 128 bits for compact organization.</li> <li>The existing block scheduling model is limited as it ignores dependencies between blocks, leading to nonoptimal block scheduling and low utilization.</li> <li>Simulated annealing method provides an approximate solution much simpler than linear programming methods for solving the problem.</li> <li>The system's managed work block granularity restricts work updating, which hinders efficient work updating.</li> <li>An experiment is conducted using two representative second order random work based algorithms (ASO worker and graph worker) on a test bed with two graphs.</li> <li>Results show that the graph worker achieves significant performance improvement compared to the ASO worker.</li> <li>The left figure shows average IO utilization, where the graph worker has the highest utilization and work updating rate.</li> <li>The right figure demonstrates similar performance trends for both algorithms in terms of speedup.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-light-dedup-a-light-weight-inline-deduplication-framework-for-non-volatile","title":"USENIX ATC '23 - Light-Dedup: A Light-weight Inline Deduplication Framework for Non-Volatile...","text":"<p>URL: https://www.youtube.com/watch?v=dQzjK--oikw</p> <ol> <li>TC talks about memory-based storage methods, such as Intel's Optane DC Persistent Memory, which are expensive but can enlarge logical space and reduce cost through basic workflow duplication in the file system.</li> <li>Cisco's persistence data duplication file system performs identification first, calculates hash data fingerprints for duplicated files, and uses a metadata table to determine redundant data.</li> <li>The system increments the reference count for non-redundant data and simply writes data with a reference count of 1.</li> <li>Two methods of calculating fingerprints are discussed: using noncryptographic hash access (faster, less safe) and cryptographic hash functions like SHA256 (slower, more secure).</li> <li>The text discusses the potential benefits of using non-crypto hash in byte container comparison for MDM software I/O bottleneck reduction.</li> <li>Existing works often focus on exploiting I/O asymmetry and using noncryptographic hash for byte content comparison but fail to fully utilize their benefits.</li> <li>The text highlights five common features that could impact MVM deduplication file systems: data distribution, update frequency, metadata overhead, access patterns, and software-defined storage.</li> <li>The author focuses on two important components of duplication file systems: redundant identification management and deduplication methods.</li> <li>A naive hash-based file system is introduced for comparison, but it incurs much higher latency compared to the Nova system due to synchronous latency hidden by fingerprint calculation.</li> <li>The text proposes using memory prefetch instructions or hardware prefetching to hide high read latency and improve performance.</li> <li>A speculative cross-block prefetch method (CBPP) is introduced, which pre-fetches the next block based on a hint field in metadata, potentially achieving full parallelism in IO operations.</li> <li>The authors evaluate CBPP's effectiveness, showing it reduces overall time spent on container comparison.</li> <li>A light redundant block identifier (LRBI) component is proposed, which uses noncryptographic hash-based approaches for speculative privilege-based content comparison.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-tidedup-a-new-distributed-deduplication-architecture-for-ceph4","title":"USENIX ATC '23 - TiDedup: A New Distributed Deduplication Architecture for Ceph4","text":"<p>URL: https://www.youtube.com/watch?v=UhRRTgebFqE</p> <ol> <li>The speaker is discussing a data duplication system using fingerprint indexing for efficient backup in the YouTube system.</li> <li>They mention a previous proposal of a centralized architecture, but express concern that application fingerprint indices may conflict with their philosophy.</li> <li>The speaker highlights two main issues with existing systems:</li> <li>Different applications have different data types, making it difficult to uniformly handle all data.</li> <li>Previous duplication methods can disrupt the normal operation of the system due to locking mechanisms.</li> <li>They propose a new architecture called D2 that addresses these issues:</li> <li>It uses selective level crossover and crawling for efficient deduplication.</li> <li>It introduces an event-driven architecture that reacts to external APIs without background work.</li> <li>It implements content-defined chunking and a wide shared reference system to minimize generic messages.</li> <li>The speaker concludes by mentioning they have conducted experiments showing the reasonableness of their proposed design's performance, and that the source code is available in a personal repository for feedback.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-loopdelta-embedding-locality-aware-opportunistic-delta-compression-in-inline","title":"USENIX ATC '23 - LoopDelta: Embedding Locality-aware Opportunistic Delta Compression in Inline...","text":"<p>URL: https://www.youtube.com/watch?v=OAHFt4KCyr0</p> <ol> <li>The transcript is from a conference presentation on the topic of data reduction techniques in backup systems.</li> <li>Two common methods are mentioned: data deduplication and data compression, each with their own limitations.</li> <li>Data deduplication removes duplicate chunks based on fingerprints but cannot remove redundancy among non-duplicates or highly similar chunks.</li> <li>Data compression reduces storage cost by eliminating redundant data, but its effectiveness depends on the sketch indexing technique used.</li> <li>The presentation introduces a challenge related to low compression ratio in existing sketch indexing approaches and proposes a solution called Loop dirt.</li> <li>Loop dirt is a locality-aware sketch indexing technique that detects similar chunks based on logic and physical locality, improving data compression.</li> <li>The presenter also discusses the challenge of low backup throughput caused by extra I/O reading in typical duplication-based backup systems.</li> <li>Loop dirt is proposed to improve backup throughput by reducing xgios reading based chunk operations.</li> <li>Another challenge mentioned is potential miss similar chunks during writing, which Loop dirt aims to address with a locality-aware filter.</li> <li>The presentation concludes with an outline of the data sets used for performance evaluation and results indicating improved compression ratio and restore performance using Loop dirt.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-tc-gnn-bridging-sparse-gnn-computation-and-dense-tensor-cores-on-gpus","title":"USENIX ATC '23 - TC-GNN: Bridging Sparse GNN Computation and Dense Tensor Cores on GPUs","text":"<p>URL: https://www.youtube.com/watch?v=Et-kBEnry5Y</p> <ul> <li>The speaker is a fifth-year PhD student from UCSB.</li> <li>They are presenting their work on TCGN, a system that bridges Sports Gene computation with dense tensor core GPUs.</li> <li>Graphs are everywhere in daily life and are used to analyze social networks, friend recommendations, financial services, power grid failure detection, molecular biology property production, etc.</li> <li>TCGN operates in two parts: <ol> <li>Basic computation flow: It follows the graph-like operation of PageRank to get information from neighbors and then updates the node itself using the information from its neighbors.</li> <li>Basic operators used: Gene general first one is labor aggregation, which follows sparse Matrix multiplication (spmm).</li> </ol> </li> <li>The second computation node feature computation follows sampled tense dense matrix multiplication (node embedded Matrix transpose).</li> <li>The speaker discusses the trend in parallel kind development algorithms that leverage powerful units like tensor cores in recent GPUs for deep learning acceleration.</li> <li>They highlight the challenge of bridging the gap between basic Gene operations and high-performance GPU units, which is still a challenging task.</li> <li>The speaker identifies several challenges:<ol> <li>Existing Frameworks like PyTorch and TensorFlow support Deep learning but many focus on dance gym operation optimization.</li> <li>The irregular nature of gene computation makes it hard to harvest real performance as it lacks efficient sparse operators.</li> <li>There exists a sports library dedicated to developed vendors like Nvidia that leverages CUDA cores for acceleration, but it underutilizes resources in existing GPUs.</li> </ol> </li> <li>The speaker then discusses two directions to address these challenges:<ol> <li>Trying to let sparse GN fit dense Gene computation on GPU.</li> <li>Letting the GPU face GNNs by profiling basic operations and optimizing the sparse kernel.</li> </ol> </li> <li>The speaker concludes that applying separate operations in either direction could hardly work and suggests a holistic optimization approach for better utilization of GPU resources.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-legion-automatically-pushing-the-envelope-of-multi-gpu-system-for-billion-scale","title":"USENIX ATC '23 - Legion: Automatically Pushing the Envelope of Multi-GPU System for Billion-Scale...","text":"<p>URL: https://www.youtube.com/watch?v=_5EXingIu1U</p> <ul> <li>The transcript is from a well known conference presentation.</li> <li>The presenter discusses their work on applying graph neural networks (GNNs) to large-scale DNS work at Alibaba group and Chuchang University.</li> <li>They highlight the challenge of handling billion-scale graphs with current GPU capacity, which often reaches its limit with real-world datasets.</li> <li>The presenter introduces Legion, a system designed for training large-scale graphs in a practical way using sampling-based methods.</li> <li>Legion consists of three key stages: rough sampling, feature extraction model training, and example typical graph stage.</li> <li>The Gene model, used in Legion, typically involves two-hop sampling to extract subgraphs and generate mini-batches for filling the model.</li> <li>A key issue with traditional GNN systems is that CPU sampling cannot catch up with GPU tuning, leading to a bottleneck.</li> <li>To address this, researchers have proposed cash-based systems like Quiver Gene Lab, which use GPU feature caches to minimize CPU-GPU data transform volume and overcome the CPU sampling bottleneck.</li> <li>Legion aims to fully explore hardware capability in modern multi-GPU systems for training billion-scale graphs.</li> <li>It proposes a hierarchical graph partitioning design to solve the poor multi-GPU cache stability issue, minimize overlap among partitions, and improve load balance.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-bridging-the-gap-between-relational-oltp-and-graph-based-olap","title":"USENIX ATC '23 - Bridging the Gap between Relational OLTP and Graph-based OLAP","text":"<p>URL: https://www.youtube.com/watch?v=QVZfKw4XyB0</p> <ul> <li>Speaker from Shanghai Jon University and Alibaba group presents at a conference.</li> <li>They introduce the use of graph-based AP for processing dynamic data in various scenarios, such as social media networks.</li> <li>Two existing solutions for dynamic graph analytical processing are discussed: <ul> <li>ETL process with relational data stored in a graph system. This method provides good TP performance but has poor data freshness due to costly and lengthy data transformation processes.</li> <li>Graph database systems that store data natively as a graph, offering better freshness but slower performance for transactional data management.</li> </ul> </li> <li>A new computing model called Hybrid Transactional Analytical Processing (HTAP) is introduced, which provides the capability for real-time querying of data generated by transactions, achieving high performance and data freshness.</li> <li>The speaker presents their solution, HDJP, based on the HTAP model, addressing two unique design goals:<ul> <li>Preventing users from rewriting TP/JP requests by decoupling interfaces using a data menu population model convention.</li> <li>Ensuring efficient dynamic graph storage with high performance and data freshness using local replayers to update graph data and supporting concurrent reading and writing operations.</li> </ul> </li> <li>The HDJP system is designed to handle three key problems in existing general-purpose dynamic graph storage:<ol> <li>Topology storage (CSR) that supports efficient edge scanning but is immutable, making new edge insertion costly.</li> <li>Multi-version concurrency control (MVCC) that introduces overhead and breaks temporary locality during updates.</li> <li>Efficient property storage models for JP workloads with almost fixed access patterns.</li> </ol> </li> <li>The HDJP system redesigns dynamic graph storage, focusing on topology storage, MVCC poverty, and efficient property storage models.</li> <li>An evaluation of the HDJP system is conducted through experiments on two machines serving as both OLTP and OLAP servers, extended from standard benchmarks like LDBC-SD and TPC-C to accommodate HTGP workloads.</li> <li>The HDJP system is compared with offline solutions combined with state-of-the-art OLTP systems and graph systems, as well as an online solution using a graph database called Neo4j. The HDJP system achieves comparable performance to the online solution, outperforming the offline solution by an order of magnitude due to efficient graph storage and freshness.</li> <li>The speaker thanks the audience for listening and notes that the source code for the experiment is also available.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-comosum-an-extensible-reconfigurable-and-fault-tolerant-iot-platform-for","title":"USENIX ATC '23 - Comosum: An Extensible, Reconfigurable, and Fault-Tolerant IoT Platform for...","text":"<p>URL: https://www.youtube.com/watch?v=E7L5lP1EmrI</p> <ul> <li>The speaker is GL Bamba, a PhD candidate in computer science at Allrell University.</li> <li>They are discussing Kamasan, an extensible and reconfigurable platform for digital agriculture.</li> <li>The project is a joint work with M Cornell, Shang Wan, Chin Sail, Atatu Muid, Reman Jose Martinez, Hakim Wepon, and other team members.</li> <li>The project aims to convert data into actionable insights to support decision making in farming.</li> <li>The speaker highlights the challenges of massive data collection, storage, and analysis in digital agriculture.</li> <li>They mention the need for a system that can tolerate equipment failure and unreliable power, which are common in rural areas.</li> <li>The speaker also discusses the challenge of vendor locking, where farmers are dependent on a single provider for their data and insights.</li> <li>Kamasan is designed to be flexible and adaptable, able to work with different sensors, networks, and geographies.</li> <li>The system uses a software-defined networking (SDN) approach, with a data plane for sensor data generation and transmission, and a control plane for configuration and analytics.</li> <li>The speaker also mentions the use of RPC protocol to ensure module network agnostic communication.</li> <li>They present three case studies: water guard for water stress alert in crops, vineyard disease detection, and cow fitness monitoring.</li> <li>The system has been deployed in various farms, including apple orchards, hemp corn strawberry tomato growing experiments, and a dairy farm.</li> <li>The speaker also mentions the challenge of cloud-based systems, which can be complex to configure and manage, and can suffer from deprecated APIs.</li> <li>They conclude by acknowledging the contributions of various individuals and organizations in the project.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-oakestra-a-lightweight-hierarchical-orchestration-framework-for-edge-computing","title":"USENIX ATC '23 - Oakestra: A Lightweight Hierarchical Orchestration Framework for Edge Computing","text":"<p>URL: https://www.youtube.com/watch?v=tdwTqPh8lH0</p> <ul> <li>Transcript is from a presentation on Orchestra, a lightweight hierarchical orchestration framework for Edge Computing.</li> <li>The presenter discusses the challenge of managing applications on constrained Edge devices, which may have heterogeneous hardware and network connectivity.</li> <li>A toy example of a microservice application (AR pipeline) is used to illustrate the concept of orchestration. This application consists of three services: camera, object detection, and tracking.</li> <li>The presenter compares the traditional approach of using a centralized orchestration platform like Kubernetes with Orchestra's hierarchical approach.</li> <li>Orchestra is designed as a three-tier system: worker node, cluster orchestrator, and root orchestrator. Each tier has specific components and responsibilities.</li> <li>The worker node consists of a node engine (for maintaining application state), net manager (for networking processes), and execution runtime (for running applications).</li> <li>The cluster orchestrator manages worker nodes within a geographical area, keeping track of their status and scheduling decisions. It communicates with worker nodes via MQTT.</li> <li>The root orchestrator provides an interface for application deployment and manages multiple clusters. It uses delegated scheduling to distribute workloads across clusters based on their capabilities and constraints.</li> <li>The presenter also mentions the concept of aggregation services, which can be balanced across instances in a cluster using different policies (like round robin or closest).</li> <li>The implementation of Orchestra is open-source and modular, with a focus on lightweight design. It has been tested to perform better than Kubernetes in terms of resource consumption.</li> <li>A use case of an AR application is used to demonstrate the benefits of using Orchestra, showing improvements in footprint and processing time compared to running the application natively without any orchestration platform.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-explore-data-placement-algorithm-for-balanced-recovery-load-distribution","title":"USENIX ATC '23 - Explore Data Placement Algorithm for Balanced Recovery Load Distribution","text":"<p>URL: https://www.youtube.com/watch?v=I9WrwbNS6pM</p> <ul> <li>Video transcript from a conference about data placement algorithm for distributed storage systems.</li> <li>Explore Data Placement Algorithm is the title, presented by Junction Laboratory of Qingwai University.</li> <li>The research focuses on balancing recovery load distribution in HDFS and GFS systems.</li> <li>Recovery process can be paralyzed when dealing with multiple placement groups, leading to slower recovery times.</li> <li>Fingerprinting technique is suggested for distributing sufficient numbers of data units across various nodes to balance the recovery load.</li> <li>The research question revolves around finding a data placement algorithm that balances recovery load distribution.</li> <li>A 3D data placement algorithm is proposed to achieve optimal recovery load distribution, but it's an NP-hard problem.</li> <li>The study highlights the importance of balanced recovery load distribution and its impact on overall system performance.</li> <li>Recovery load distribution can affect the system expansion process, and a greedy data placement algorithm can help reduce recovery time.</li> <li>The transcript suggests that there is still room for exploration in discovering potentially more efficient algorithms.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-luci-loader-based-dynamic-software-updates-for-off-the-shelf-shared-objects","title":"USENIX ATC '23 - Luci: Loader-based Dynamic Software Updates for Off-the-shelf Shared Objects","text":"<p>URL: https://www.youtube.com/watch?v=h9-vHlND9ZY</p> <ul> <li>Lucy loader is a dynamic software update tool for off-the-shelf software.</li> <li>Existing approaches to dynamic software updates often require changes at the source level or use custom compilers, which can restrict the programming language used.</li> <li>Lucy's approach uses relocatable object files and doesn't require handcrafted patches, resulting in binary patch files.</li> <li>The approach is designed to be generic and applicable to multiple applications in user space.</li> <li>Lucy has been used to dynamically update the Apache web server, which has many external dependencies.</li> <li>A common example of a library that would benefit from dynamic updating is the expat XML parser, which had 17 vulnerabilities last year, many of which were severe.</li> <li>Lucy's Dynamic Software Update (DSU) capability can perform updates on dynamically linked libraries.</li> <li>Lucy uses the dynamic linker to load required chat libraries and performs necessary relocations at runtime.</li> <li>Lucy's approach doesn't modify machine instructions, making it safer and simpler.</li> <li>Lucy has been used to update the expert Library, which had 81 severe vulnerabilities since 2010.</li> <li>Lucy can hide old code and install a user page fault handler to detect access to the old code.</li> <li>Lucy uses a designated relocation interface and modifies code in place, making it easier to handle multiple shared object versions in memory.</li> <li>Lucy's approach can prevent execution of old library code if an incompatibility is detected.</li> <li>Lucy has been tested with the official release of a single patch built for a standard environment and was able to automatically update the library without manual intervention.</li> <li>Lucy can perform updates even in stable phases of a distribution, as demonstrated by tests on Debian Buster and Ubuntu LTS versions.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-melf-multivariant-executables-for-a-heterogeneous-world","title":"USENIX ATC '23 - MELF: Multivariant Executables for a Heterogeneous World","text":"<p>URL: https://www.youtube.com/watch?v=bkkwaur2GCk</p> <ul> <li>Dominic Turner is a PhD student at Lapis University in Hanover.</li> <li>He presented the melf approach, which uses Mighty variant executables for profiling in a heterogeneous world.</li> <li>The motivation behind this approach is to address issues such as slow service and high latency faced by software engineers when dealing with databases.</li> <li>The melf approach allows for function-level granularity in profiling, enabling the profiling of individual functions within an application.</li> <li>This is achieved through the use of an overlay manager that allows for the concurrent use of multiple variants across the application.</li> <li>The overlay manager uses a synchronized address-based view concept, ensuring consistency and allowing for fast communication between processes.</li> <li>The melf approach has been evaluated through four case studies, including performance isolation and profiling maps.</li> <li>The Mighty variant elf format is used to incorporate multiple compile-time variants into a single executable file.</li> <li>This is done by compiling the source code twice, once with and once without the compiler transformation for profiling.</li> <li>The linker then builds an executable that includes both object files, placing the function sections in separate output files.</li> <li>A virtual address technique called memory overlaying is used to exchange sections at runtime, ensuring that function pointers remain valid.</li> <li>The overlay manager applies the exchange mechanism, allowing for the selection of the appropriate variant at runtime.</li> <li>The first case study presented involves performance isolation profiling using memkashd, where the melf approach was able to reduce the performance penalty payed when switching between connections.</li> <li>The second case study involves a heterogeneous ISO setup, where two core groups execute different ISA extensions to increase performance.</li> <li>The third approach combines the melf approach with thread pool awareness, allowing for the optimal dispatching of jobs to the appropriate core group.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-apron-authenticated-and-progressive-system-image-renovation","title":"USENIX ATC '23 - APRON: Authenticated and Progressive System Image Renovation","text":"<p>URL: https://www.youtube.com/watch?v=aZn8UMDuzfw</p> <ul> <li> <p>The transcript is from a Microsoft researcher's presentation on Apron, an authenticated proactive system for secure and efficient physical device recovery.</p> </li> <li> <p>The system aims to address issues like system corruption due to file storage errors, software or hardware faults, or postponed updates.</p> </li> <li> <p>The recovery process involves five stages:</p> <ol> <li>Detection of system corruption.</li> <li>Learning from internal/external signals like telemetry.</li> <li>Recognition of the need for a reset.</li> <li>Solution implementation, such as entering a recovered environment for repair.</li> <li>System recovery using a reference image downloaded from a remote or local location.</li> </ol> </li> <li> <p>Criticism of existing recovery methods includes:</p> <ul> <li>Large system image files that require long download times.</li> <li>Recovery environments that lack meaningful applications.</li> </ul> </li> <li> <p>The proposed Apron system aims to address these issues by:</p> <ol> <li>Differential recovery of only the necessary data blocks.</li> <li>Performing program-specific recovery to minimize system downtime.</li> <li>Implementing an interposed storage access strategy for secure device management.</li> </ol> </li> <li> <p>The Apron system works in preparation and runtime phases, with a measurement server calculating H3 image metadata and signing the root hash value. This prevents low-rate attacks and ensures data integrity.</p> </li> <li> <p>Evaluation of the system shows improved recovery times compared to full recovery methods, especially in high-latency network environments.</p> </li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-zpoline-a-system-call-hook-mechanism-based-on-binary-rewriting","title":"USENIX ATC '23 - zpoline: a system call hook mechanism based on binary rewriting","text":"<p>URL: https://www.youtube.com/watch?v=aC_X0WU-tGM</p> <ul> <li>The transcript is from a conference presentation about system code and user space programs.</li> <li>The speaker discusses the use of system code to intercept and redirect execution of user space programs.</li> <li>They mention a hook mechanism that can be used to apply user-defined functions transparently to existing applications.</li> <li>The speaker mentions DPDK, a user space networking stack, which achieves five times better performance compared to the standard Linux TCP stack.</li> <li>They discuss a system configuration mechanism called P Trace, which uses three signaling techniques and SQL for user dispatch.</li> <li>The speaker notes that high performance penalty and flux can be issues with certain binary writing approaches.</li> <li>They explain the basic binary writing approach for x86 CPUs, using Cisco C Center instructions to trigger system calls.</li> <li>The speaker introduces a calling convention loop that defines how system code is invoked and executed in user space programs.</li> <li>They mention the use of trampoline code addresses and sampling code to manage address ranges.</li> <li>The speaker discusses the need to handle null access termination values and suggests a solution involving three types of memory access: write, execute, and read.</li> <li>They mention an execution check during the binary writing phase, which can be done using a bitmap overhead check.</li> <li>The speaker compares the measured overhead of their system with that of other systems, noting a smaller overhead for their system.</li> <li>They present a summary of their presentation, highlighting the benefits of their system configuration mechanism on existing CPUs.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-sponge-fast-reactive-scaling-for-stream-processing-with-serverless-frameworks","title":"USENIX ATC '23 - Sponge: Fast Reactive Scaling for Stream Processing with Serverless Frameworks","text":"<p>URL: https://www.youtube.com/watch?v=mhx0aWhzP6w</p> <ul> <li>Speaker is Mohammed, discussing Sponge, a distributed system for fast and reactive scaling in stream processing.</li> <li>Goals of modern stream processing engines: low latency, high throughput, correctness, resource efficiency.</li> <li>Real-time data stream processing can be tricky due to irregular and unpredictable data.</li> <li>Existing works struggle with scaling stateful operators, which keep state and perform Shuffle operations.</li> <li>Sponge aims to provide fast adaptation scaling for both stateless and stateful operators.</li> <li>Uses serverless frameworks for rapid handling of problematic situations, balancing stability and fast startup time.</li> <li>Challenge: large initialization overhead for network connection in serverless instances.</li> <li>Sponge design: composed of compiler and runtime, with the compiler setting data paths and the runtime providing fast reactive scaling.</li> <li>Runtime synchronization workload progress compilation phase is much shorter than dynamic optimization methods.</li> <li>Uses router operator to redirect data flow between operators, and transient operator for stateful operators.</li> <li>Aims to scale system within one second, overcoming challenges of incurring large overhead.</li> <li>Implemented in various open-source projects, including Apache Beam and Apache Nemo.</li> <li>Supports AWS Lambda service framework and helps manage instance valuation in a cluster.</li> <li>Shows performance improvement compared to baseline scaling using VM based scale with VM initialization overhead.</li> <li>Able to cover different real-world environment input data patterns, as shown in representative experiments.</li> <li>Cost analysis shows Sponge can be more cost effective than provisioned cases, especially during bursts of traffic.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-on-demand-container-loading-in-aws-lambda","title":"USENIX ATC '23 - On-demand Container Loading in AWS Lambda","text":"<p>URL: https://www.youtube.com/watch?v=Wden61jKWvs</p> <ul> <li>The transcript is from a conference talk about AWS Lambda.</li> <li>AWS Lambda was launched in 2015 and initially supported deploying code via a zip file or raw code file.</li> <li>The platform initially supported a 50MB code limit, which was later raised to 250MB.</li> <li>The speaker discusses the challenge of increasing the package size without increasing cold start latency.</li> <li>The speaker mentions that customers started asking for more complex deployment methods as they tried to bring a broader range of applications to serverless.</li> <li>AWS Lambda increased the code file limit to 10GB, which is a 40x increase from the initial limit.</li> <li>This increase allowed customers to use standard container toolkits and chains for creating artifacts for deployment.</li> <li>The speaker mentions that the cold start is primarily contributed by downloading the package, and increasing the package size makes the cold start longer.</li> <li>AWS Lambda has built a pipeline for handling larger container images, including breaking them into chunks, calculating their hashes, and storing them in S3 using content-addressable storage.</li> <li>This allows for deduplication, which can significantly reduce the amount of data that needs to be moved around.</li> <li>The speaker also mentions that they've built an on-demand loading container system, which can accelerate container loading by up to 15x.</li> <li>They've seen a huge deduplication effect with container images, with up to 100x benefits when customers upload containers.</li> <li>The speaker also discusses the use of convergent encryption to allow for deduplication while maintaining security.</li> <li>AWS Lambda uses consistent hashing and Erasure coding in their cache design for fault tolerance and high data availability.</li> <li>They've built a tiered cache system with L1 local cache, L2 data center level distributed cache, and L3 S3.</li> <li>The speaker mentions that they've launched Lambda Snapstart caching distribution to reduce cold start times for Java applications.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-decentralized-and-stateful-serverless-computing-on-the-internet-computer-blockchain","title":"USENIX ATC '23 - Decentralized and Stateful Serverless Computing on the Internet Computer Blockchain","text":"<p>URL: https://www.youtube.com/watch?v=y4rVM_dXD5s</p> <ul> <li>The speaker is discussing the Internet Computer platform, a decentralized system for efficient computation.</li> <li>The platform is composed of a collection of replicated state machines, each running on independent server machines in partitioned subnets.</li> <li>Canister smart contracts, written in languages like Rust, Python, JavaScript, or Motoko, are run on this platform.</li> <li>Canisters can send messages to other canisters or make exterior HTTP calls.</li> <li>The system is divided into four layers: networking, consensus, message routing, and canister.</li> <li>Canisters can make two types of calls: updates (slow, persistent changes) and invocations (fast, non-persistent computations).</li> <li>The Internet Computer differs from blockchains in several ways, including its Byzantine fault tolerance, geographical distribution, and self-governance.</li> <li>The speaker then focuses on the efficiency of the execution environment, discussing two main challenges: statefulness and deterministic scheduling.</li> <li>Statefulness is achieved through a system that maps memory pages on demand and checkpoints canister state at regular intervals.</li> <li>Deterministic scheduling is maintained by charging based on instruction count rather than time, and by using instruction-level slicing to ensure fairness.</li> <li>The Internet Computer uses context switching and instruction slicing to maintain high throughput.</li> <li>The speaker concludes by mentioning the production readiness of the Internet Computer and its growing adoption since May 2021.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-pinolo-detecting-logical-bugs-in-database-management-systems-with-approximate","title":"USENIX ATC '23 - Pinolo: Detecting Logical Bugs in Database Management Systems with Approximate...","text":"<p>URL: https://www.youtube.com/watch?v=mirh27_Pwmw</p> <ul> <li>The transcript is from a conference presentation about database management system (DBMS) testing.</li> <li>The speaker mentions the importance of DBMS, as it is used by many companies worldwide and even caused 9,000 flight delays when it sparked in January 2023.</li> <li>A specific type of bug, called a logical bug, is discussed. This bug causes the DBMS to return an incorrect result set given a SQL query.</li> <li>An example of a logical bug is provided, where two subqueries are used instead of one, causing inconsistency in the overall result statement.</li> <li>The speaker mentions that discovering and fixing logical bugs is challenging because the system may run normally but still produce wrong results.</li> <li>Three main lines of work are discussed for improving DBMS testing: differential testing, article guided synthesis, and metamorphic testing.</li> <li>Differential testing compares the results of a SQL query from different DBMS implementations. If there is a difference, at least one implementation contains a logical bug.</li> <li>Article guided synthesis generates a table containing data and constructs specific SQL statements to test for logical bugs.</li> <li>Metamorphic testing tries to construct two input/output pairs that satisfy a given metamorphic relation. If the number of outputs does not equal, at least one query triggers a logical bug.</li> <li>The speaker mentions limitations in existing techniques and proposes an advanced version of metamorphic testing that generates a generalized equivalence relation to detect deeply hidden bugs.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-autoarts-taxonomy-insights-and-tools-for-root-cause-labelling-of-incidents-in","title":"USENIX ATC '23 - AutoARTS: Taxonomy, Insights and Tools for Root Cause Labelling of Incidents in...","text":"<p>URL: https://www.youtube.com/watch?v=sGsDeJTuhEI</p> <ul> <li>The transcript is from a conference presentation about automating root cause labeling for incident postmortem reports in Microsoft Azure.</li> <li>The goal is to analyze and extract insights from past incident reports to reduce future incidents by identifying common root causes.</li> <li>Currently, the process of labeling postmortem reports is manual, ambiguous, and often prone to errors due to different taxonomies used by different teams.</li> <li>A new tool called Autoarts has been developed to automate this process using a comprehensive root cause taxonomy and machine learning techniques.</li> <li>The Autoarts system includes a hierarchical structure for the taxonomy, which facilitates easy navigation and helps in identifying contributing factors behind incidents.</li> <li>The system consists of two main tasks: root cause classification and context extraction from postmortem reports.</li> <li>The root cause classification module uses a multilabel text classification approach to identify contributing factors based on the taxonomy.</li> <li>The context extraction task involves identifying key contexts from the postmortem report to justify the chosen root cause tag.</li> <li>Autoarts has been trained using 2000 incident reports and 450 services in Microsoft Azure, with a focus on ensuring quality labeling by involving team incident domain experts for review.</li> <li>The system is open-source and continuously evolving, aiming to address issues caused by missing or ambiguous contributing factors in past incidents.</li> <li>Manual root cause labeling is still error-prone, while manual analysis can be expensive and not scalable for cloud environments. Autoarts addresses these concerns by automatically labeling given postmortem reports with contributing factors from the hierarchical taxonomy.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-avoiding-the-ordering-trap-in-systems-performance-measurement","title":"USENIX ATC '23 - Avoiding the Ordering Trap in Systems Performance Measurement","text":"<p>URL: https://www.youtube.com/watch?v=h3CM16m_Jq4</p> <ul> <li>The transcript is from a conference presentation.</li> <li>The speaker talks about a \"watering trap\" in performance measurement, where the order of benchmark execution can affect results.</li> <li>They share an example of a study where memory performance on newer servers was three times worse than on older ones, due to unbalanced memory page allocation.</li> <li>The speaker emphasizes the importance of considering system state changes and factors like cache data layout and RAM disk in performance testing.</li> <li>They mention a survey of 56 papers from top computer systems conferences, finding that only 7% specified, ran, and discussed an inner experiment reset procedure.</li> <li>The methodology they propose for avoiding the \"watering trap\" involves defining a baseline order, implementing a state reset procedure, and running tests in fixed or random orders.</li> <li>They suggest using a nonparametric statistical test like the Wilcoxon-Mann-Whitney test, and correcting for multiple comparisons with the Bonferroni correction.</li> <li>The speaker also discusses a long-term performance data set they collected, finding that order can have a significant effect on results in many cases.</li> <li>They conclude by emphasizing the importance of considering order when conducting rigorous performance analysis.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-aware-automate-workload-autoscaling-with-reinforcement-learning-in-production","title":"USENIX ATC '23 - AWARE: Automate Workload Autoscaling with Reinforcement Learning in Production...","text":"<p>URL: https://www.youtube.com/watch?v=gnOmCb1CG1s</p> <ul> <li>The transcript is from a conference presentation about Auto scaling in Cloud systems.</li> <li>The speaker discusses the use of Reinforced Learning (RL) for workload Auto scaling.</li> <li>The RL model is trained using data from modern Cloud systems, which generate abundant data through monitoring and measurement.</li> <li>The RL agent is designed to optimize specific workloads in a Cloud system, such as small jobs with low load and periodicity.</li> <li>The RL agent consists of two parts: policy training and policy serving.</li> <li>The speaker highlights the challenge of bridging the gap between the model's advancement and its deployment in production.</li> <li>The speaker then focuses on a concrete example of Cloud Resource Management, specifically Auto skating workload.</li> <li>The RL agent is modeled as a Markov decision process, with the artificial agent interacting with the environment in a step-by-step fashion.</li> <li>The speaker identifies three main challenges in implementing IO-based controllers in real production systems.</li> <li>The speaker proposes solutions for each challenge, including reliable Exploration, online serving policy, and model adaptation.</li> <li>The speaker introduces the concept of meta learning to address the model adaptation challenge.</li> <li>The speaker concludes by presenting the Aware framework, which aims to tackle three challenges in Cloud systems: providing fast adaptation through meta learning, reliable IO Exploration through bootstrapping, and robust online performance.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-nodens-enabling-resource-efficient-and-fast-qos-recovery-of-dynamic-microservice","title":"USENIX ATC '23- Nodens: Enabling Resource Efficient and Fast QoS Recovery of Dynamic Microservice...","text":"<p>URL: https://www.youtube.com/watch?v=YKkyh6oAqEY</p> <ul> <li>The transcript is from a conference discussing the complexity of medical service applications.</li> <li>Current architecture is monolithic, shifting towards microservices for better distribution and deployment in data centers.</li> <li>Challenges include managing dependencies among microservices and handling dynamic load changes.</li> <li>A study was conducted on 3000 medical service applications, observing load variation and choreographed proportion variation over time.</li> <li>Two types of dynamics were identified: predictable (based on historical data) and unpredictable.</li> <li>Current benchmarks support dynamic graph build, but struggle with handling unpredictable dynamics.</li> <li>Proposed solution is a runtime system called 'Node' that enables fast skill recovery while maintaining result efficiency.</li> <li>Node uses a traffic-based load monitor, an execution blocking graph, and an actual load updating mechanism.</li> <li>The system aims to allocate enough resources quickly to handle dynamic changes, reduce long kill recovery times, and maintain high result efficiency.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-lifting-the-veil-on-metas-microservice-architecture-analyses-of-topology-and","title":"USENIX ATC '23 - Lifting the veil on Meta\u2019s microservice architecture: Analyses of topology and...","text":"<p>URL: https://www.youtube.com/watch?v=vfsdGdVAwag</p> <ul> <li>The transcript is from a conference presentation about microservice architecture.</li> <li>The speaker highlights the increasing popularity of microservices, with over 10,000 papers published last year alone.</li> <li>A fundamental change in the development landscape, microservices allow for independent team work and quick development of different functionalities.</li> <li>The speaker emphasizes that a service unit should be fine-grained enough to schedule, scale, route, and observe different entities.</li> <li>An example of a social network application is given, where frontend, stateless services, feed, friend, ad, and database work together to form the application.</li> <li>The speaker notes that there is a shared understanding in current literature about microservices, including assumptions about service granularity, deployment, scaling, observability, and topology.</li> <li>There is ongoing research into various aspects of microservice architecture, such as topology, request workflow, resource management, and performance profiling.</li> <li>The speaker presents the findings of a study on meta microservice architecture, focusing on topology and request workflow.</li> <li>The study found that the assumption of service granularity being sufficient for management tasks is true.</li> <li>However, the belief that topology is relatively static was found to be false, with significant daily churn in deployed services.</li> <li>The study also found that services are simpler than believed, but request workflows are wider and shallower than expected.</li> <li>The speaker notes that there is a lot of observability research, especially into deeper traces, and introduces the concept of 'depth' as a reliable metric for predicting characteristics of request workflows.</li> <li>The study also found variation in concurrency dependency within child calls.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-tectonic-shift-a-composite-storage-fabric-for-large-scale-ml-training","title":"USENIX ATC '23 - Tectonic-Shift: A Composite Storage Fabric for Large-Scale ML Training","text":"<p>URL: https://www.youtube.com/watch?v=F1ffpj8NkzE</p> <ul> <li>Mark is a visiting researcher at Meadow.</li> <li>He talks about Tectonic, a file system used for storing data in the data center.</li> <li>The system is composed of a metadata layer and a linearly scalable chunk store made up of hard drive based storage nodes.</li> <li>Recently, there has been an explosion in demand for AI applications, which require larger and more complex models to be trained.</li> <li>This requires scaling the ML infrastructure, both in terms of storage capacity and IOPS (Input/Output Operations Per Second) read bandwidth.</li> <li>The traditional approach of using a single server or rack for training is no longer sufficient. Instead, a cluster of thousands of accelerators is needed to train these models.</li> <li>The same applies to the storage infrastructure. The traditional approach of provisioning enough storage capacity to store the data set is not enough. There is also a need for enough IOPS read bandwidth to handle the increased demand.</li> <li>Mark discusses the idea of a composite storage system, which uses hard drives for storage and SSDs for serving IOPS.</li> <li>He mentions that they have built a transparent flash tier, called Tectonic Shift, designed specifically for industrial ML workloads.</li> <li>This tier is designed to be transparent to the end user, scalable, fault-tolerant, and able to maximize IOP absorption without storing the entire data set.</li> <li>The production ML storage fabric of Tectonic Shift looks like a standard Tectonic cluster with an additional shift cluster made up of flash-based storage nodes.</li> <li>The cache policy is specifically tailored to the ML workload and able to maximize IOP absorption.</li> <li>Mark also mentions that they have evaluated Tectonic Shift using benchmarks consisting of three production DLRM recommendation model training workloads.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-calcspar-a-contract-aware-lsm-store-for-cloud-storage-with-low-latency-spikes","title":"USENIX ATC '23 - Calcspar: A Contract-Aware LSM Store for Cloud Storage with Low Latency Spikes","text":"<p>URL: https://www.youtube.com/watch?v=esHi3z0HdRE</p> <ol> <li>The transcript is from a conference presentation about cloud block storage, specifically Amazon EBS.</li> <li>Cloud block storage has become organized and safer, leading to widespread adoption by businesses worldwide.</li> <li>Amazon EBS is chosen due to its low latency and high predictability, which are crucial for many applications.</li> <li>The speaker discusses the trend towards cloud-based application servers and databases.</li> <li>Other databases mentioned include RSM store and ASM store.</li> <li>Cloud block storage offers guaranteed steady and predictable latency, making it a professional resource.</li> <li>The speaker analyzes the latency performance of cloud block storage systems.</li> <li>They discuss the importance of observing and appreciating the exercise paid in terms of obvious latency increase.</li> <li>An example is given of a city where L2 latency increased significantly due to high load.</li> <li>The speaker introduces EBS's low latency characteristic and how it works well with other systems.</li> <li>They discuss the concept of CDM figure in cloud block storage.</li> <li>The speaker mentions the use of GB2 and GB3 in cloud block storage.</li> <li>They discuss the importance of understanding the nature of latency spec and the challenge of quantifying it.</li> <li>The speaker suggests that AWS EBS's regular fee control can help manage latency issues.</li> <li>They present an equation to configure LPS for better latency performance.</li> <li>The speaker discusses the impact of high RPS on latency and how it can be managed.</li> <li>They mention the concept of IO overdrafting and its impact on flow.</li> <li>The speaker discusses EBS's punishment mechanism for excessive IO requests.</li> <li>They present a latency model based on real-world internet latency data.</li> <li>The speaker discusses the challenge of cloud storage meeting demanding performance requirements.</li> <li>They mention the issue of fluctuation in cloud storage and how it can be handled.</li> <li>The speaker introduces the concept of Pro tax to avoid latency battles.</li> <li>They propose a solution for managing latency fluctuations in EBS.</li> <li>The speaker discusses the importance of proactive control in managing IO load and overdraft.</li> <li>They mention the challenge of fluctuation in tech support and education.</li> <li>The speaker suggests adopting small workloads to avoid latency battles due to internet regulation.</li> <li>They introduce a dynamical time Windows scheduler to reduce latency opportunity.</li> <li>The speaker briefly summarizes the latency characteristics of cloud block storage.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-adaptive-online-cache-capacity-optimization-via-lightweight-working-set-size","title":"USENIX ATC '23 - Adaptive Online Cache Capacity Optimization via Lightweight Working Set Size...","text":"<p>URL: https://www.youtube.com/watch?v=NHDM8bd_260</p> <ul> <li>The transcript is from a conference presentation about an adaptive online catching layer for data processing systems.</li> <li>The catching layer is used to manage the working set size and improve querying performance.</li> <li>The presenter discusses challenges in maintaining optimal data storage, including excessive restores and insufficient capacity.</li> <li>The presenter introduces Alexio, a catching layer that has been observed to have a high cache ratio in Presto deployments.</li> <li>The presenter highlights the importance of accurately estimating the working set size and item repetition ratio for effective resource allocation.</li> <li>The presenter proposes a cookie data structure for managing item information online, with operations for insertion, aging, and deletion.</li> <li>The presenter also suggests an optimistic concurrency control strategy called Optimistic Agent 80 for reducing locking contention in the system.</li> <li>The presentation evaluates the performance of the proposed system using Twitter Trace data and finds it to be more accurate and stable than existing approaches.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-sage-software-based-attestation-for-gpu-execution","title":"USENIX ATC '23 - SAGE: Software-based Attestation for GPU Execution","text":"<p>URL: https://www.youtube.com/watch?v=vpsNlotLJIM</p> <ul> <li>The transcript is from a conference presentation about securing GPU execution.</li> <li>The presenter, Marco Canadian, is standing in for Andrei Ivanov who couldn't attend due to a visa issue. Benjamin Rothenberg and Adrian Parrig also contributed to the work.</li> <li>The motivation for the work is the difficulty of securely executing code on GPUs, which are often used in security-critical domains.</li> <li>The proposed solution is a software-based approach called Sage, which provides time-code data integrity secrecy for GPU execution.</li> <li>Sage works by verifying the integrity of the code before it's executed on the GPU, and then establishing a secure communication channel between the CPU and GPU.</li> <li>The trusted verifier in Sage is responsible for verifying the integrity of the code and setting up the secure communication channel.</li> <li>Sage provides verifiable code execution, ensuring that the code executed on the GPU is the same as the code verified by the trusted verifier.</li> <li>The presenter discusses the challenges of software-based attestation on GPUs, including the lack of documentation and the difficulty of achieving optimal GPU utilization.</li> <li>Sage is architected with a trusted verifier running within a CPU enclave (like Intel SGX), which sends challenges to the GPU device.</li> <li>The verification function in Sage computes a checksum of the code running on the GPU, and the key establishment module sets up a secure communication channel between the CPU and GPU.</li> <li>The presenter also discusses the challenge of predictable execution time, as any modification of the verification function could be detected by measuring the execution time.</li> <li>The presenter concludes by discussing the potential of combining software and hardware solutions for a multi-layer security defense.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-confidential-computing-within-an-ai-accelerator","title":"USENIX ATC '23 - Confidential Computing within an AI Accelerator","text":"<p>URL: https://www.youtube.com/watch?v=nTVP6IvFlDY</p> <ol> <li>The speaker is discussing Confidential Computing, a new paradigm in AI that provides strong protection for sensitive data and code.</li> <li>Confidential Computing uses a concept called Trusted Execution Environment (TEE) to protect privileged attacks including those on the hypervisor, operating system, and base assumptions.</li> <li>The speaker mentions that recent years have seen a new wave of AI Innovation that requires GPUs for cost-efficient training of large models in the cloud. However, this also presents a challenge in terms of confidentiality due to the risk of sophisticated attackers stealing data.</li> <li>Confidential Computing is seen as a solution to this problem, providing a strong security mechanism for AI workloads in the cloud.</li> <li>The speaker mentions that major CPU vendors have shown support for Confidential Computing over the past 10 years, but there has been limited support for PCI devices. Recently, Nvidia announced Hopper GPUs with Confidential Computing extensions.</li> <li>The speaker is working on a development board using TSMC 7 nanometer technology that provides strong security guarantees and isolates the entire device host. It also adds remote attestation using hardware root trust for low performance overhead.</li> <li>The speaker introduces the Graphcore IPU architecture, which employs a thousand tiles with multi-threader cores and specialized units for AI workloads. Unlike CPUs and GPUs, it uses flat memory space and core private SRAM for load/store additions.</li> <li>The IPU software stack comprises a compiler, runtime, and introduces an abstraction called stream. The compiler takes the input/output and fits it into a unique stream that generates code encapsulated in the IPU binary.</li> <li>The speaker discusses the need for a small TCB (Trusted Computing Base) to provide confidentiality and integrity for data computation. They introduce a security paper that makes assumptions about the threat model.</li> <li>The speaker then talks about the IPU trust extension, which removes trust from the runtime by decoupling compilation and execution. This is done by preprocessing data and encrypting code and data before shipping it to the cloud runtime.</li> <li>The encrypted code and data are decrypted using a GCM encryption engine in the PCI memory path intercept package, which can deliver PCI Gen 4 bandwidth rate.</li> <li>The Confidential Computing Unit (CCU) is responsible for managing the life cycle of TE and attesting to the code using the job manifest and provisioning key. It also adds a trusted mode set CCU that creates a TE based on observation training job span.</li> <li>The speaker concludes by stating that they believe infrastructure with hyperscale privacy-preserving AI work is foreseeable in the near future, and their work could serve as a blueprint for this.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-arbitor-a-numerically-accurate-hardware-emulation-tool-for-dnn-accelerators","title":"USENIX ATC '23 - Arbitor: A Numerically Accurate Hardware Emulation Tool for DNN Accelerators","text":"<p>URL: https://www.youtube.com/watch?v=WvIHZMkGD7o</p> <ul> <li>The transcript is from a conference presentation about the Arbiter, a hardware accelerator for machine learning training.</li> <li>The presenter discusses the challenges of optimizing hardware level operations for speed and precision, and how these optimizations can affect model accuracy.</li> <li>The Arbiter is designed to estimate the effect of these optimizations more accurately and efficiently than existing methods.</li> <li>The Arbiter is open-source and has been used in case studies with popular benchmark data sets, showing significant speed improvements.</li> <li>The presenter also mentions the use of low precision arithmetic, sparsity processing, and approximate computing for hardware acceleration.</li> <li>The Arbiter can emulate these operations with high precision, which is crucial for accurate machine learning model training.</li> <li>The presenter concludes by encouraging the audience to check out the paper and the GitHub page for more information.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-bridging-the-gap-between-qoe-and-qos-in-congestion-control-a-large-scale-mobile","title":"USENIX ATC '23 - Bridging the Gap between QoE and QoS in Congestion Control: A Large-scale Mobile...","text":"<p>URL: https://www.youtube.com/watch?v=arT_YQmLKJ0</p> <ol> <li>The transcript is from a conference about congestion control in large-scale mobile app services.</li> <li>Quality of Experience (QE) and Quality of Service (QS) are key metrics discussed, with QS being optimized by transport layer protocol delivery capability.</li> <li>The authors propose a solution for the mismatch between QE and QS optimization, focusing on end-to-end performance of web requests.</li> <li>They emphasize that optimizing QE is challenging due to its complex relationship with QS and the different time scales involved.</li> <li>The proposed solution involves introducing a layer in the application layer to select the appropriate Congestion Control Algorithm (CCA) for better QE.</li> <li>Two main questions are addressed: selecting the best CCA based on QE mean, and switching CCAs without traffic interruption due to dynamic network conditions.</li> <li>The authors propose a framework called Flu, which uses reinforcement learning to build a prediction model for CCA preference.</li> <li>Flu also introduces a mechanism for smooth switching between CCAs, addressing the challenges of new CCAs starting in slow-start phase and network condition mismatches.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-farreach-write-back-caching-in-programmable-switches","title":"USENIX ATC '23 - FarReach: Write-back Caching in Programmable Switches","text":"<p>URL: https://www.youtube.com/watch?v=VVP0J8l9wlI</p> <ol> <li>The study aims to improve the performance of key-value stores, particularly for write-intensive workloads which have become dominant in production environments.</li> <li>A programmable switch architecture is proposed to address this challenge, consisting of a control plane and data plane.</li> <li>The data plane includes multiple pipelines, with each pipeline containing series stages that process requests and responses within the switch memory.</li> <li>A write policy is deployed on the switch cache, which absorbs in-switch records instead of updating the server immediately to improve performance.</li> <li>However, this approach faces challenges such as restricted programming language for the switch data plane, limited resources for offloading cache management, and slow controller processing that may encourage latency in the switch data plane.</li> <li>The availability challenge is addressed by proposing a far-RICH (Reliable In-switch Cache) policy to ensure the latest record is always available to clients.</li> <li>A prototype has been implemented based on the Tofino switch, and extensive experiments have shown that it achieves 66 times the performance compared to the baseline of 128 simulated servers.</li> <li>The open-source prototype design and implementation details are provided in the study.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-cxl-anns-software-hardware-collaborative-memory-disaggregation-and-computation","title":"USENIX ATC '23 - CXL-ANNS: Software-Hardware Collaborative Memory Disaggregation and Computation...","text":"<p>URL: https://www.youtube.com/watch?v=fa66gZiiF58</p> <ul> <li>The speaker is a PhD student presenting their recent work on approximate nearest neighbor search (ANNS) at a conference.</li> <li>They have collaborated with a colleague on this project.</li> <li>ANNS is widely used in various products and services such as search engines, recommendation systems, and databases.</li> <li>The challenge is handling large workloads with billions of data points requiring terabytes of memory.</li> <li>The speaker proposes a software-hardware collaborative approach to overcome the limitations of CXL (Compute eXpress Link) technology, which has shown promising but limited performance due to its far memory light characteristic.</li> <li>The proposed solution involves selectively offloading computation and reducing data transfer overhead compared to traditional systems like Oracle.</li> <li>The speaker then introduces the target research domain and the challenge of retrievable taken, which plays a crucial role in providing fundamental support for various services such as search engines, recommendation systems, and databases.</li> <li>Two main approaches for reducing memory consumption are discussed: compressing embedding tables (which can lead to errors and degraded search accuracy) and storing graph embedding tables on SSDs (which can result in slower storage access and higher latency).</li> <li>The speaker advocates building a Point data set using CXL memory pool, which provides a large memory space and supports three protocols: CXL.io, CXL cache, and CXL map.</li> <li>A graph-based ANS approach is briefly explained, achieving state-of-the-art accuracy and performance in challenging workloads.</li> <li>The speaker highlights two observations from their research: 1) traversing nodes closer to the query provides faster memory access, and 2) distance calculation can be a bottleneck, with memory access taking up most of the execution time.</li> <li>To address these issues, the speaker proposes XL NS software-hardware collaborative approach that includes a root complex size software stack for endpoint hardware stack, domain-specific accelerator register delivery interface, and cxl-based memory expander for local caching and acceleration on the endpoint side.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-overcoming-the-memory-wall-with-cxl-enabled-ssd","title":"USENIX ATC '23 - Overcoming the Memory Wall with CXL-Enabled SSD","text":"<p>URL: https://www.youtube.com/watch?v=dQDCqHYS1Lk</p> <ul> <li> <p>The transcript is from a presentation at Syracuse University about overcoming the memory wall challenge in natural language processing models.</p> </li> <li> <p>The speaker discusses the growing model size (141x per year) and the limited growth of memory resources (13x per year), which creates a gap called the 'memory wall'.</p> </li> <li> <p>The presenter highlights CXL, a new cache-coherent PCIe based interconnect that enables direct memory access to CPU endpoints via low latency store instruction features.</p> </li> <li> <p>The speaker suggests using CXL compatible devices like flash memory for expanding main memory.</p> </li> <li> <p>However, there are three major challenges when using flash memory as an expansion option:</p> <ul> <li>Granularity mismatch between host requests (64 bytes) and flash memory management data page grain (kilobytes).</li> <li>Flash memory rewrite latency is slower than the device theorem rewrite latency.</li> <li>Unlike DRAM, flash memory has limited endurance due to repeated program-erase cycles on the oxide layer of flash memory cells.</li> </ul> </li> <li> <p>The speaker proposes a solution using CXL Flash, which includes:</p> <ul> <li>Creating two design tools: Physical Memory Tracer and trace-driven simulator model for CXL Flash.</li> <li>Integrating existing optimization techniques like DRM cache and MSHR prefetcher to overcome granularity mismatch and device lifetime issues.</li> <li>Analyzing the effectiveness of existing algorithms for improving CXL flash performance.</li> </ul> </li> <li> <p>The speaker briefly covers potential system-level changes that could improve device performance, but does not provide details.</p> </li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-styx-exploiting-smartnic-capability-to-reduce-datacenter-memory-tax","title":"USENIX ATC '23 - STYX: Exploiting SmartNIC Capability to Reduce Datacenter Memory Tax","text":"<p>URL: https://www.youtube.com/watch?v=lfupho5_iNA</p> <ul> <li>The speaker is Hoshanji from UIUC.</li> <li>He presented a paper on \"Stacks\" at a conference.</li> <li>The talk focused on data center memory and optimization techniques.</li> <li>Two notable trends in data center memory are the stagnant price reduction of DRAM technology and the increasing demand for memory due to consumer needs.</li> <li>The speaker highlighted two memory optimization features: Kernel Samepage Merging (KSM) and compressed swap pages.</li> <li>KSM aims to merge page content to eliminate redundant pages, saving host memory.</li> <li>Compressed swap pages store swap pages in RAM cache instead of common backup storage like disk swap systems for faster access.</li> <li>The speaker discussed the impact of Swap Z and traditional swap methods on system performance.</li> <li>Kernel features can significantly interfere with memory-intensive, latency-sensitive applications due to CPU cycle consumption and cache pollution.</li> <li>The speaker presented a solution called \"Stacks,\" which leverages smart network interface controllers, CPUs, ASICs, and memory IO subsystems.</li> <li>Stacks propose offloading data plan operations to smart ink for efficient memory optimization without involving CPU cycles.</li> <li>The presentation included a demonstration of the effectiveness of Stacks in reimplementing two kernel features: swap and page compression.</li> <li>Evaluation results showed that Stacks successfully reduced 99th percentile latency increase by up to 624x and 870x for swap and KSM respectively.</li> <li>The speaker also mentioned the reduction in CPU cycle consumption with Stacks integration.</li> <li>The presentation concluded that memory optimizing control features are beneficial but can interfere with running applications, increasing latency significantly.</li> <li>Stacks framework leverages compute and RDMA capabilities of smart ink to reduce interference and preserve the benefits of memory optimization features while reducing 99th percentile latency for current applications.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-change-management-in-physical-network-lifecycle-automation","title":"USENIX ATC '23 - Change Management in Physical Network Lifecycle Automation","text":"<p>URL: https://www.youtube.com/watch?v=dmX_UXavC5o</p> <ul> <li>The transcript is from a conference presentation on 'change management physical Network lifecycle automation' in Google's SDN-based Data Center network, Jupiter.</li> <li>The speaker discusses four challenges faced in managing Google's vast network: scale, safety, deployment, and interoperability.</li> <li>The scale challenge involves managing the growing network with numerous human touchpoints.</li> <li>The safety challenge is about managing constant change without disrupting the network application running on the client.</li> <li>The deployment challenge is about efficiently deploying the network fabric globally in a predictable time frame.</li> <li>The interoperability challenge is about ensuring various teams and systems can effectively communicate and share an authoritative, consistent view of the network topology.</li> <li>The speaker introduces Malt, a Network management content tool that uses a language model for generating, managing, and querying network models.</li> <li>Malt represents the network topology as an entity-relationship graph with entities like nodes and relationships like connections.</li> <li>The presentation focuses on using Malt to generate, manage, and maintain a unified intent model for high-level planning and detailed Network design decisions.</li> <li>Two services are discussed: the Model Design Service and the Build Service, both of which use the Malt language model.</li> <li>The Model Design Service creates and mutates current/future network models, while the Build Service focuses on asynchronization points, resource reservation, and building the distributed data flow graph execution engine.</li> <li>Topo Plan, a service for managing future Network topology, is introduced as an analogy to software version control systems like Git.</li> <li>The presentation concludes with two case studies: Dead Zone reduction deployment project and change management in a multi-data center fabric.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-aasclepius-monitoring-diagnosing-and-detouring-at-the-internet-peering-edge","title":"USENIX ATC '23 - AAsclepius: Monitoring, Diagnosing, and Detouring at the Internet Peering Edge","text":"<p>URL: https://www.youtube.com/watch?v=Fb0dCFZMLlU</p> <ol> <li>The transcript is from a conference discussing internet issues and solutions, specifically packet loss rate reduction in cloud services.</li> <li>Four key questions are addressed: automating fault process, identifying victim traffic, dealing with faults, and deterring traffic.</li> <li>Solutions involve monitoring user traffic in real-time, distinguishing healthy vs affected traffic, and using Swift rollback to minimize impact.</li> <li>Faults are classified into three categories based on occurrence: within cloud, client-based, or middle (internet network).</li> <li>Detection and resolution strategies vary depending on the fault type and location.</li> <li>A proposed Auto system aims to automate the entire process, accurately identify fault direction, and deter traffic accordingly using a private backbone.</li> <li>The system consists of three subsystems: monitor, diagnose, and deterrent, each with specific roles and functions.</li> <li>Monitoring involves active probing, fault detection, and reporting; diagnosis uses a decision tree for fine-grid localization; deterrent employs different strategies based on fault direction.</li> <li>The system has been successful in preventing major accidents in Huawei Cloud for three years.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-deploying-user-space-tcp-at-cloud-scale-with-luna","title":"USENIX ATC '23 - Deploying User-space TCP at Cloud Scale with LUNA","text":"<p>URL: https://www.youtube.com/watch?v=TK1vEDOopX4</p> <ul> <li>The transcript is from a conference presentation by Schumer Alibaba Cloud.</li> <li>Topic: Experience deploying user space TCP in Alibaba cloud storage Luna.</li> <li>Luna's network cloud storage architecture follows the compute-storage-disk aggregation philosophy.</li> <li>Challenges for frontend network include different ages, drivers, and geographical locations of computers in the cluster.</li> <li>Kernel CCP was chosen for high reliability and compatibility, but it has high overhead and is not suitable for performance sensitive scenarios.</li> <li>Solutions to improve performance include RDMA and user space TCP solutions.</li> <li>Luna uses a user space driver and a unique thread, memory, and traffic model.</li> <li>Luna's thread model includes batch r2c and inline r2c models.</li> <li>Luna's memory model provides transparent 4K stack and zero-copy for application upper layer.</li> <li>Luna's traffic model collaborates with the kernel network stack.</li> <li>Performance evaluation shows that Luna reduces response latency by 70% and increases throughput by 35%.</li> <li>Luna has been deployed in production since 2017, increasing throughput for elastic block storage by 50% while maintaining low latency.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-rubbledb-cpu-efficient-replication-with-nvme-of","title":"USENIX ATC '23 - RubbleDB: CPU-Efficient Replication with NVMe-oF","text":"<p>URL: https://www.youtube.com/watch?v=1Sjf79QyvrM</p> <ul> <li>The transcript is from a conference discussing improvements in CPU efficiency for replicated key-value stores using NVMeOF.</li> <li>A log structure merge tree example was used to illustrate the problem of slow and dead systems, often caused by the CPU becoming a bottleneck in the system's key-value store.</li> <li>The discussion focused on redundant compaction in a replicated setting, suggesting that it might not be necessary.</li> <li>The idea is to outsource and eliminate redundant compaction, making it possible for a robot DB to make protocol avoid redundant compaction and help NVMeOF remove redundant compaction.</li> <li>The speaker also mentioned the challenges of saving CPU while introducing secondary SD file shipping, which can add CPU overhead due to data disk file system operations.</li> <li>The speaker then introduced NVMoF, a protocol that allows hosts to mount remote mid-disks as local file systems, with data transferred via RDMA or TCP configurations.</li> <li>The primary and secondary disks are distinguished in the figure, and the primary can ship SD files without CPU involvement, bypassing the secondary's CPU but introducing a new challenge of handling this bypassed long CPU NVMe work on the Linux product layer.</li> <li>Many key-value stores rely on file system interfaces to access data, which can cause issues when shipping SD files to the secretary, who may not even see the incoming file.</li> <li>The speaker then discussed the issue of SSD file preallocation and proposed a mechanism where the primary can successfully ship SSD files to the secondary using NVMoF.</li> <li>However, this doesn't entirely solve the problem, as an interesting challenge arises when applying compaction results from the primary to the secondary, especially when mem tables are involved.</li> <li>The speaker then discussed two techniques used in RobotDB: partial order and request ID tagging, which can help fix consistency issues and ensure that requests are processed in the correct order.</li> <li>An evaluation result was presented, comparing the end-to-end performance of replicated RocksDB with and without compaction every instance.</li> <li>The speaker also compared tail latency, showing that RobotDB had a lower latency than the Baseline for both read and update workloads.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-distributed-transactions-at-scale-in-amazon-dynamodb","title":"USENIX ATC '23 - Distributed Transactions at Scale in Amazon DynamoDB","text":"<p>URL: https://www.youtube.com/watch?v=3OpEIMR-ml0</p> <ul> <li>The transcript is from a conference presentation about using transactions in DynamoDB, a NoSQL database.</li> <li>The speaker discusses the benefits and challenges of adding transaction support to DynamoDB.</li> <li>Transactions can simplify application development and help maintain multi-item invariance, which is crucial for many applications, such as online ecommerce.</li> <li>However, maintaining invariance in a distributed system is difficult. Traditional methods like two-phase locking can prevent concurrent access but can also lead to performance issues.</li> <li>DynamoDB uses a multitenant service that allows applications to begin and end transactions. It doesn't use traditional two-phase locking due to the cost of maintaining multiple versions of items.</li> <li>Instead, DynamoDB introduces two new APIs: Transact Get Item and Transact Write Item. The former allows multiple items to be read consistently from an arbitrary set of tables owned by the customer. The latter allows multiple items to be created, deleted, or updated atomically.</li> <li>The speaker also introduces a new operation called Check Item, which is used when a transaction wants to verify whether another item is in a certain state before updating.</li> <li>The speaker then discusses how these APIs can be used to model various use cases, such as a shopping cart example with the Transact Write Item API.</li> <li>The speaker also explains the high-level architecture of how transactions work in DynamoDB, including the two-phase protocol used for preparing and committing transactions.</li> <li>Fault tolerance is achieved through checkpointing and recovery mechanisms.</li> <li>The speaker concludes by mentioning that DynamoDB now supports full ACID transactions, providing high scalability, high availability, and predictable performance.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-prefix-siphoning-exploiting-lsm-tree-range-filters-for-information-disclosure","title":"USENIX ATC '23 - Prefix Siphoning: Exploiting LSM-Tree Range Filters For Information Disclosure","text":"<p>URL: https://www.youtube.com/watch?v=NgVVmu39u7g</p> <ul> <li>Presenter: Moshik Kovich</li> <li>Topic: Information Disclosure Attack on Key Value Store using Range Filter</li> <li> <p>Collaborators: Ad Kman and Anda Morrison, Tel Aviv University</p> </li> <li> <p>Key Value Stores (KVS) are used in many data stores, object storage, database systems for their performance benefits.</p> </li> <li>KVS can also pose a security risk due to timing attacks, where an attacker can distinguish between the response times of queries to different keys.</li> <li>The presentation focuses on a specific type of timing attack called 'Perfect Siphoning', which reveals key prefixes using range filters in KVS.</li> <li>Range filters store information about key prefixes, which can be exploited by an attacker to reveal full keys.</li> <li>The attack is demonstrated on two different types of range filter: Surf and Sigma.</li> <li>The attack involves finding a false positive key, identifying its prefix, and then scanning for possible suffixes.</li> <li>The attack is feasible due to the high probability of finding false positive keys and the low linear key length call function.</li> <li>The presentation also discusses potential mitigation strategies, such as using authorized keys for queries, keeping ACLs outside the KVS, rate limiting user requests, and using a separate filter for Point queries.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-epf-evil-packet-filter","title":"USENIX ATC '23 - EPF: Evil Packet Filter","text":"<p>URL: https://www.youtube.com/watch?v=pkR5kJkFGkc</p> <ul> <li>The transcript is from a conference presentation on EPF pack filter joint work.</li> <li>The presenter discusses BPF (Berkeley Packet Filter) and its role in enabling new attacks on Kernel Security.</li> <li>Current security exploitation methods are discussed, with a focus on how BPF can be used to weaken kernel security.</li> <li>The presentation shows that BPF allows attackers to create large amounts of content in the kernel space and manipulate it, bypassing existing isolation mechanisms.</li> <li>The presenter introduces a new way to use BPF for password defense.</li> <li>The talk also discusses how BPF can be used to bypass user-space defenses and execute malicious code in the kernel space.</li> <li>The presentation mentions three defenses against these attacks: BPF ISR, BPF NX, and BPF CFI.</li> <li>The presenter evaluates the effectiveness of these defenses against two novel attacks that abuse the BPF subsystem.</li> <li>The evaluation shows that the defenses incur low to moderate overhead.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-translation-pass-through-for-near-native-paging-performance-in-vms","title":"USENIX ATC '23 - Translation Pass-Through for Near-Native Paging Performance in VMs","text":"<p>URL: https://www.youtube.com/watch?v=e1DrrIKU0Ko</p> <ul> <li>The transcript is from a conference discussing optimizing performance of virtual machines, which are used for consolidation and efficiency in resource utilization.</li> <li>Virtualization can lead to a substantial performance impact due to additional mechanisms required for abstraction and isolation.</li> <li>A significant issue is memory translation overhead, which can cause a lot of slowdown in applications.</li> <li>Two main approaches to virtualization are:</li> <li>Nested paging: The operating system within the VM exposes a page table that translates guest virtual addresses to guest physical addresses. The hypervisor then provides an additional hierarchy page table to translate guest physical addresses to host physical addresses.</li> <li>Shadow paging: The operating system within the VM provides a set of page tables to translate guest virtual addresses to guest physical addresses, but the hardware MMU performs the memory translation using a shadow page table provided by the hypervisor.</li> <li>Current systems require multiple memory accesses to translate a single virtual memory address to a physical memory address, which can lead to performance issues.</li> <li>The goal of the Translation Passthrough (TPT) system is to enable efficient translation management within virtualized systems while maintaining protection and isolation.</li> <li>TPT allows for self-managed direct guest VM host memory translation, providing native address translation performance.</li> <li>TPT maintains protection and isolation using a new hardware component that enforces isolation for virtual machines accessing physical pages.</li> <li>The TPT design is backwards compatible and easy to integrate into existing systems.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-efficient-memory-overcommitment-for-io-passthrough-enabled-vms-via-fine-grained","title":"USENIX ATC '23 - Efficient Memory Overcommitment for I/O Passthrough Enabled VMs via Fine-grained...","text":"<p>URL: https://www.youtube.com/watch?v=IeDlXZLyXaA</p> <ul> <li>The transcript is from a conference presentation.</li> <li>The speaker worked on memory commitment in VMS at Alibaba group.</li> <li>Memory commitment helps mitigate inefficient memory resource utilization in VMS.</li> <li>DMA (Direct Memory Access) is an important part of virtualization systems, especially for high-performance RDMA applications.</li> <li>A contradiction exists between memory commitment and DMA: when a page is reclaimed, it can cause a DMA failure if the IOP table entry is missing.</li> <li>Solutions to this problem include adding paid support hardware or monitoring DMA buffer allocation within the guest.</li> <li>The speaker discusses two software solutions, both of which require dedicated hardware and still face memory swapping overhead.</li> <li>A method called \"three-page reporting\" is mentioned as a way to get a report of free pages from the hypervisor without guest intervention.</li> <li>The goal is to make MSA (Memory Scaling Architecture) memory reformatting and password coexist, ensuring hardware compatibility and guest compatibility for easy deployment in existing systems.</li> <li>Wiprobe, a tool used for memory reclamation, contains three parts: wave probe data manager, memory formation routine, and wave probe injector guest module.</li> <li>A rule-based software isolation method is used to prevent harmful code use.</li> <li>The memory reclamation process involves synchronization problem handling.</li> <li>An experimental evaluation of the tool is conducted based on a hardware architecture with an Intel CPU and a cumulus hypervisor host.</li> <li>The wave probe significantly outperforms page ballooning in terms of time cost.</li> <li>Limitations of the work include its specificity to x86 architecture and Linux-based OS.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-lpns-scalable-and-latency-predictable-local-storage-virtualization-for","title":"USENIX ATC '23 - LPNS: Scalable and Latency-Predictable Local Storage Virtualization for...","text":"<p>URL: https://www.youtube.com/watch?v=iD4CdPmtagU</p> <ul> <li>The transcript is from a presentation about LPS (Latency Predictable Storage) NVMe virtualization.</li> <li>Background motivation includes the limitations of current storage virtualization mechanisms in providing accurate latency predictability and Quality of Service (QoS) control for multitude workloads with different QoS requirements.</li> <li>The proposed architecture utilizes a key component called LBNs (Latency Bound Network Stacks).</li> <li>Implementation details include micro-benchmark and application benchmark evaluations, demonstrating that LPNs provide reliable latency predictability and QoS control for virtualization scenarios in real-world applications.</li> <li>Overhead issues are discussed, focusing on the challenge of removing additional bottleneck latency caused by network devices and complex network topologies in data centers.</li> <li>The presentation concludes with a summary of LPS providing predictable latency QoS control for cloud storage while optimizing performance and reducing costs compared to traditional software-level virtualization designs.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-p2cache-exploring-tiered-memory-for-in-kernel-file-systems-caching","title":"USENIX ATC '23 - P2CACHE: Exploring Tiered Memory for In-Kernel File Systems Caching","text":"<p>URL: https://www.youtube.com/watch?v=oqm207ZscPg</p> <ol> <li>The speaker is presenting at State University New York Hampton on the topic of exploiting memory, internal file system, and casting strong work in storage technologies.</li> <li>They mention Ling Fung Xiang from Jarrow University Texas Arlington and observe trends in storage technologies.</li> <li>The first trend mentioned is that storage devices are becoming increasingly fast, with traditional rotating base HDDs evolving into land-based SSDs.</li> <li>The speaker introduces the concept of worldtime memory, a type of cell-based storage device that exposes a memory-like interface and operates at byte-addressable levels.</li> <li>A concrete example is given using Intel's Optane persistent memory and its test version, esd4, which leverages bi-directional adjustability to improve performance in the software stack.</li> <li>The speaker highlights that software overhead has become dominant in storage stacks and uses hd4 as an example of a traditional kernel file system unable to fully explore available PM boundaries.</li> <li>A comparison is made between the est4 test file system's performance and ht4 text, showing significant improvements with esd4 achieving 25 clicks per second for hour-sized 64k IO operations.</li> <li>The speaker then lists several proposed solutions to address challenges in leveraging bi-directional adjustability and ensuring crash consistency while maintaining high performance.</li> <li>These proposed solutions include East Vertex SFS, text Nova, stratum split FS, and a specialized file system tailored for persistent memory systems.</li> <li>The speaker emphasizes that the biggest roadblock to these PM specialized file systems is their maturity level and the time it will take for them to become production-ready.</li> <li>Existing well-tested and production-ready kernel file systems need to evolve effectively to harness the performance benefits of new storage device characteristics.</li> <li>The presentation introduces PSquare cash, a novel kernel casting mechanism designed specifically for PM specialized systems, offering instant data durability, strong consistency, and high performance without requiring application modification or radical system redesign.</li> <li>PSquare cash is open-source on GitHub and employs a rewrite distinguishable memory hierarchy, lightweight journaling mechanism, and PM's light adjustability to speed up data updates.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-revisiting-secondary-indexing-in-lsm-based-storage-systems-with-persistent-memory","title":"USENIX ATC '23 - Revisiting Secondary Indexing in LSM-based Storage Systems with Persistent Memory","text":"<p>URL: https://www.youtube.com/watch?v=oqQlKjBiwM4</p> <ul> <li>The transcript is from a conference presentation about improving the performance of secondary indexing in RSM-based storage systems.</li> <li>RSM3, a widely adopted storage engine, has high write performance but inferior read performance due to its multilevel structure.</li> <li>Recent research suggests that advanced storage devices like ASM3 can handle heavy computing overhead, but they require high rate performance. Many database applications also require higher query performance.</li> <li>Indexing is an important technique for improving query performance. However, it can be inefficient in LSM3 due to consistency issues between the secondary index and primary table.</li> <li>The presentation introduces a new calculator pair approach for blind white buffering in RSM3, which improves performance by reducing read data.</li> <li>The presenter also discusses two strategies for handling many database systems that tend to use synchronous strategy or validation strategy for secondary key updates.</li> <li>The presentation suggests using persistent memory (PM) for secondary indexing due to its addressability, comparable latency to DRAM, and data persistency.</li> <li>However, directly adopting PM index for secondary indexing can be inefficient due to nonunique secondary keys and low data locality.</li> <li>The presenter introduces PS3, a PM-based secondary index mechanism that uses a specific layer value secondary key and hybrid hash table with lightweight validation approach.</li> <li>PS3 also proposes two optimization techniques for nonindex query level region error trace feature.</li> <li>The presentation compares the performance of various secondary indexing approaches, including LSM-based, PM-based, and Composite Index log structure approach.</li> <li>The presenter concludes that precise steel (PS3) outperforms PM-based secondary index due to its good locality for searching secondary entries.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-zhuque-failure-is-not-an-option-its-an-exception","title":"USENIX ATC '23 - Zhuque: Failure is Not an Option, it\u2019s an Exception","text":"<p>URL: https://www.youtube.com/watch?v=yC_oMzOb02Q</p> <ul> <li>Presenting research on a simple pre-programming model for persistent memory systems.</li> <li>Uses flush-fail semantics, similar to EADR/GPF model.</li> <li>Claims to require little effort from application developers and performs at least 3x faster than prior work.</li> <li>Discusses the issues with naive approach of making program persistent by putting it in persistent memory.</li> <li>Introduces three groups based on programming models: common transactional model, relaxed failure atomicity model, and whole system persistence model.</li> <li>The transactional model imports traditional ACID transaction database systems but has restrictions on locking semantics.</li> <li>The relaxed failure atomicity model divides the program into regions and uses runtime tracking of dependencies between threads.</li> <li>The whole system persistence model expects system to deliver interrupt in a specific order when power failure occurs.</li> <li>Discusses a new programming model called 'whole process persistence model' which transforms memory allocated for a process to persistent memory on power failure.</li> <li>This model is implemented using libsy based runtime work, which is interposed and intercepts arguments to accomplish the goal entirely transparently to the application.</li> <li>Performance results show moderate improvement over prior work with some overhead versus native implementation.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-envpipe-performance-preserving-dnn-training-framework-for-saving-energy","title":"USENIX ATC '23 - EnvPipe: Performance-preserving DNN Training Framework for Saving Energy","text":"<p>URL: https://www.youtube.com/watch?v=RfAq1JbHbXI</p> <ul> <li>Christ talks about the impact of DNN training and inference on carbon emissions.</li> <li>The rapid expansion of AI is causing significant energy consumption, leading to a larger carbon footprint.</li> <li>Previous approaches have aimed at saving energy during DNN training by using GPU Dynamic Voltage Frequency Scaling (DVFS).</li> <li>This method seeks the optimal streaming multiprocessor (SM) and memory frequency for the GPU.</li> <li>However, reducing SM frequency can lead to a trade-off between energy saving and performance degradation.</li> <li>The speaker presents mvpipe, a performance-preserving DNN training framework that saves energy.</li> <li>mvpipe is implemented as a library in PyTorch and has three main components: a profiler, a scheduler, and a frequency planner.</li> <li>The profiler profiles the performance and energy trend of the pipeline stage.</li> <li>The scheduler schedules the pipeline units to maximize energy saving.</li> <li>The frequency planner reconfigures the SM frequency to minimize performance degradation.</li> <li>The goal is to maximize energy saving, preserve accuracy, and minimize performance degradation.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-decentralized-application-level-adaptive-scheduling-for-multi-instance-dnns-on","title":"USENIX ATC '23 - Decentralized Application-Level Adaptive Scheduling for Multi-Instance DNNs on...","text":"<p>URL: https://www.youtube.com/watch?v=6ToXzky1Dl4</p> <ol> <li>Introduction of decentralized application Level scheduling for mobile devices.</li> <li>Discussion on limited resources and compatibility issues in mobile environments.</li> <li>Presentation of a DNA network profiling model to optimize power consumption and performance.</li> <li>Highlight on the challenges of proper assignment of top applications for performance enhancement.</li> <li>Mention of privacy concerns with apps tracking user data.</li> <li>Proposal of using GPU accelerators for AI tasks in mobile devices.</li> <li>Discussion on the importance of scheduling for efficient computing and power consumption.</li> <li>Introduction to research questions focusing on offline algorithms, semisupervised deep reinforcement learning, and decentralized scheduling.</li> <li>Mention of a paper presenting a latency-inference DNS model and a power model for OS operating systems.</li> <li>Discussion on the need for user level solutions to deal with OS influence on execution.</li> <li>Introduction of a third research question focusing on decentralized scheduling in open mobile systems.</li> <li>Mention of a paper reviewing previous work and proposing a global optimization solution for multitenant scheduling.</li> <li>Discussion on the use of software and hardware for testing in the experiments.</li> <li>Presentation of three groups of experiments comparing different DNS models under various conditions.</li> <li>Mention of machine learning based decision model for decentralized scheduling.</li> <li>Conclusion emphasizing the importance of privacy and performance maintenance in mobile applications.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-unfaasener-latency-and-cost-aware-offloading-of-functions-from-serverless-platforms","title":"USENIX ATC '23- UnFaaSener: Latency and Cost Aware Offloading of Functions from Serverless Platforms","text":"<p>URL: https://www.youtube.com/watch?v=Yk9N5Ui6oaI</p> <ul> <li>Serverless computing is a popular and growing field.</li> <li>Many organizations are using serverless applications in some form.</li> <li>Azure workloads from 2019-2020 showed a majority of applications had one function, with a significant growth in workflow applications.</li> <li>There is a proposal to leverage unused capacity in virtual machines (VMs) for serverless functions, which could reduce costs and improve efficiency.</li> <li>Serverless functions are typically stateless and event-driven, executing wherever there is available resource infrastructure.</li> <li>The design of applications with a degree of disaggregation can help migrate computational functions everywhere and communicate with the rest of the system.</li> <li>There is a trend towards building complex applications with serverless functions, which can help manage critical path performance.</li> <li>A high-level idea is to build a system that can change existing serverless platforms to better utilize resources and lower costs. This would involve offloading functions to various hosts, including VMs, and using a scheduler to determine the best offloading scenario.</li> <li>A pop messaging system could be used to communicate between different components of this system.</li> <li>The system would aim to optimize cost and latency, and would need to consider performance jitter and the cost associated with moving data around.</li> <li>The system would also need to monitor resource availability and predict future resource availability for offloading.</li> <li>The system would not add anything critical to the path or support provider schedulers, but would aim to improve performance and reduce cost.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-llfree-scalable-and-optionally-persistent-page-frame-allocation","title":"USENIX ATC '23 - LLFree: Scalable and Optionally-Persistent Page-Frame Allocation","text":"<p>URL: https://www.youtube.com/watch?v=yvd3D5VOHc8</p> <ol> <li>A new allocator, LA3, was developed by a well-known project for scalable and optionally persistent memory management.</li> <li>The problem: Many memory management subsystems were designed for single core systems with low memory capacity. However, modern systems have multiple CPUs accessing memory in parallel and larger memory capacities with different properties like persistency.</li> <li>Existing allocators can become bottlenecks due to contention data structures. For example, the Linux page frame allocator manages physical memory and supports huge pages, but it can suffer from performance bottlenecks due to page fragmentation.</li> <li>The new LA3 allocator aims to address these issues by being designed for multiple cores and optionally supporting persistency. It avoids memory sharing and uses atomic instructions for updates.</li> <li>The LA3 allocator is log-free, which helps with scalability and performance. It uses a large bit field for managing pages, with each 4 KB page represented by a single bit.</li> <li>The allocator also uses an index-like data structure to group bits together, improving search times for free pages.</li> <li>For persistency, the LA3 allocator uses Atomic instructions for updates and ensures crash consistency without using logs.</li> <li>Performance benchmarks show that the LA3 allocator has a consistent allocation time independent of the number of cores allocating in parallel. It is significantly faster than the Linux allocator for huge page allocation.</li> <li>The LA3 allocator also handles fragmentation well, able to recover entire huge pages over time and avoid unnecessary checks that can slow down performance.</li> </ol>"},{"location":"usenix_atc_2023/#usenix-atc-23-singularfs-a-billion-scale-distributed-file-system-using-a-single-metadata-server","title":"USENIX ATC '23 - SingularFS: A Billion-Scale Distributed File System Using a Single Metadata Server","text":"<p>URL: https://www.youtube.com/watch?v=bjzU3RhvBXg</p> <ul> <li>The transcript is from a conference discussing a distributed file system using a single medium server.</li> <li>The motivation behind this is the dominance of distributed file systems in modern data centers, and the desire to scale while reducing TCO.</li> <li>A single medium server is capable of managing billions of files, as demonstrated by Alibaba's use of a Billy scale file system.</li> <li>However, existing solutions fail to fully utilize the performance capabilities of new hardware, such as RDMA NICs and persistent memory.</li> <li>The speakers identify three challenges contributing to this performance gap: crash consistency overhead, concurrency control in shared directories, and scalability.</li> <li>The proposed solution is Singular FS, a billion-scale distributed file system using a single medium server, focusing on optimizing medium storage methods and operation methods.</li> <li>The key design features of Singular FS include logfree method operations, hierarchical concurrency control, and hybrid inode partitioning.</li> <li>Logfree method operations are used to classify and handle different types of operations, eliminating the need for additional crash consistency costs.</li> <li>Hierarchical concurrency control is used to minimize critical areas in double node operations and eliminate transaction conflicts.</li> <li>Hybrid inode partitioning ensures locality in file operations and delegates requests to corresponding physical nodes.</li> <li>The evaluation of Singular FS shows comparable latency to local PM file systems and lower latency than distributed file systems for certain operations.</li> <li>Singular FS also demonstrates higher throughput per node compared to existing distributed file systems.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-the-hitchhikers-guide-to-operating-systems","title":"USENIX ATC '23 - The Hitchhiker's Guide to Operating Systems","text":"<p>URL: https://www.youtube.com/watch?v=crWJEi6udNU</p> <ul> <li>The transcript is from a conference presentation about teaching an operating system course.</li> <li>The presenter notes that one reviewer found the paper on teaching operating systems interesting, but thought it could be improved.</li> <li>The presenter mentions a problem with the textbook used, stating that even though it's great, it doesn't fully address the needs of students who might become top-notch system researchers.</li> <li>The presenter suggests using the OSDI book and provides a reflection on a missing plane system class.</li> <li>The presenter proposes an interesting program assignment: Tower of Hanoi, which they expect will be challenging due to its recursive nature.</li> <li>The presenter discusses the concept of a state machine in programming and operating systems, and how it can help in understanding and debugging systems.</li> <li>The presenter mentions that an operating system is a state machine built on host programs, and that understanding this can provide a refreshing perspective.</li> <li>The presenter talks about the use of process APIs and system calls like fork, exit, and exec from a state machine perspective.</li> <li>The presenter suggests using a state machine to teach debugging, providing examples of state machine trace and debugging tools like address sanitizer and thread sanitizer.</li> <li>The presenter mentions that the operating system course should cover process, thread, and storage, with Three Easy Pieces as an implementation example.</li> <li>The presenter discusses the importance of understanding end-to-end stories in system calls and how a state machine model can help.</li> <li>The presenter suggests building a toy emulator to clarify concepts mathematically, and mentions the Unix philosophy of piping output to another command.</li> <li>The presenter briefly talks about the use of a model checker for exhaustive checking and verification of system behavior.</li> <li>The presenter mentions that the course has received positive feedback and is popular in mainland China.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-accelerating-distributed-moe-training-and-inference-with-lina","title":"USENIX ATC '23 - Accelerating Distributed MoE Training and Inference with Lina","text":"<p>URL: https://www.youtube.com/watch?v=Vsb4j6hHAaA</p> <ul> <li>Presenter's name is Xiaoming from City University of Hong Kong.</li> <li>The presentation is about a mixture expert system called Lena, a joint work with City University of Hong Kong and Chinese University of Hong Kong.</li> <li>Moe (Mixture of Experts) is an example model paradigm that comprises several expert gating networks assigning weights to expert outputs.</li> <li>Moe architecture is sparsely activated, selecting only certain experts for processing instead of computing the complete graph. This benefits from the sparsity of computation.</li> <li>The number of experts can be increased without significantly increasing the computation cost, allowing for a larger model with lower computation cost.</li> <li>Moe has shown great potential in NLP tasks using Transformer models. Google's Glam Moe model family outperforms GPT3 in 29 language tasks.</li> <li>Distributed systems are used to achieve efficient training and inference in Moe, which involves another parallelism called expert partisan.</li> <li>However, this also introduces additional communication costs as data samples may need to be routed to different devices' gating networks and experts.</li> <li>The size of data transfers in Transformer-based Moes can be large due to the architecture of the Moe Network and the expert networks.</li> <li>An experiment with different scale Moe models and architectures found that the overhead (Ottawa) takes an average of 30-34 steps, which is significant.</li> <li>The bottleneck in Moe performance is identified as the Moe layer, which becomes a performance bottleneck due to the exponential computation restart required for the original sequence.</li> <li>Asynchronized blocking operations and data transfer operations also contribute to the performance bottleneck.</li> <li>The Slowdown Factor varies and cannot be determined due to the Black Box nature of GPUs. It has been measured to be up to four times the maximum in some cases.</li> <li>Inference in Moe is biased towards expert popularity, which is purely data-driven. This can lead to imbalanced device loads.</li> <li>A design choice for training stage is proposed to prioritize avoiding network bandwidth sharing and minimize blocking periods.</li> <li>Tensor partitioning is proposed as a solution to overcome the challenge of communication primitives that cannot be preempted easily.</li> <li>The challenge is to control resource sharing among GPU operations.</li> <li>The proposed solution involves using tensor partitioning to reduce the Micro Ops, which can always prioritize o2o whenever ready and reduce microop execution time.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-smartmoe-efficiently-training-sparsely-activated-models-through-combiningand","title":"USENIX ATC '23 - SmartMoE: Efficiently Training Sparsely-Activated Models through Combiningand...","text":"<p>URL: https://www.youtube.com/watch?v=iGDt-nzTofY</p> <ul> <li>The transcript is from a conference presentation about the work conducted at Pacman lab, Qinghao University.</li> <li>The team worked on training sparsely activated models more efficiently by combining offline and online parallelizations.</li> <li>Larger models tend to yield higher accuracy in downstream tasks, but scaling these models is constrained by computation resources.</li> <li>Mixture of Experts (MoE) is proposed as a promising solution for scaling large models without adding computation.</li> <li>The challenge is that increasing model size also means increased computation. MoE aims to make this process more efficient.</li> <li>MoE consists of many expert sub-networks, and the training process involves activating a subset of these experts to prevent an increase in computation.</li> <li>The team explored hybrid parallelism for MoE models, which requires system expertise to finetune the best configuration.</li> <li>Existing works have failed to handle MoE's imbalance and dynamic workload property, leading to overloaded experts and low GPU utilization.</li> <li>The proposed smart MoE is a dedicated automatic parallelization system designed for MoE models, which understands the limitations of existing works.</li> <li>Smart MoE provides an enlarged space for hybrid parallelism support and a two-stage automatic polarization approach to handle dynamic workload efficiently.</li> <li>The two-stage approach includes an offline stage that constructs a comprehensive search space and obtains a candidate pool, and an online stage that selects and improves the plan from the pool.</li> <li>The system was tested with various scenarios using three clusters of different GPUs, network bandwidth, skill models, and MoE swing models.</li> <li>Smart MoE was compared to four strong baselines, including Deep Speed MoE, Faster MoE, and TAO, achieving excellent results across different model structures and clusters.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-msrl-distributed-reinforcement-learning-with-dataflow-fragments","title":"USENIX ATC '23 - MSRL: Distributed Reinforcement Learning with Dataflow Fragments","text":"<p>URL: https://www.youtube.com/watch?v=f14YBz2v-OU</p> <ul> <li>The transcript is from a conference presentation on MSRL, a distributed reinforcement learning system.</li> <li>The presenter discusses the challenges in RL training systems, including large models, accelerating the entire training loop, and handling diversity of algorithms.</li> <li>The first challenge is addressed by using a non-distributed approach, which can handle larger models efficiently.</li> <li>The second challenge is tackled by using hardware acceleration, specifically GPUs.</li> <li>The third challenge is handled by developing an actor-based system, which can be deployed on various types of hardware.</li> <li>The presenter then introduces MSRL, a system that decouples algorithm specification and operational execution.</li> <li>This is achieved through three key technologies: defining a computation data flow graph, accelerating the data flow graph on heterogeneous devices, and supporting flexible distribution policies.</li> <li>The presenter uses PPO as an example of how MSRL can be used to develop algorithms.</li> <li>MSRL generates fragments based on information provided by the distribution policy.</li> <li>The system architecture includes a continent coordinator, fragment generator, fragment dispatcher, execution backends, and a fragment optimizer.</li> <li>The presenter concludes by sharing experiment results that demonstrate MSRL's efficiency and scalability compared to other systems.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-beware-of-fragmentation-scheduling-gpu-sharing-workloads-with-fragmentation","title":"USENIX ATC '23 - Beware of Fragmentation: Scheduling GPU-Sharing Workloads with Fragmentation...","text":"<p>URL: https://www.youtube.com/watch?v=-37_clawjdc</p> <ul> <li>Joint work by HKUST and iPAPA on resource management scheduling for GPU cluster.</li> <li>Agenda: background, GPU sharing fragmentation, machine learning cluster popularity, machine learning workload driven development.</li> <li>GPU cluster provides machine learning service with general architecture that satisfies different user requirements and supports a wide range of workloads including training and influence evaluation.</li> <li>Specific focus on the resource scheduling layer responsible for managing ML task containers and assigning them across a heterogeneous cluster with thousands of CPU/GPU servers with diverse capacity.</li> <li>Commonly observed low GPU utilization despite the cluster's capability to host thousands of GPUs.</li> <li>Illustration of medium utilization across nodes, with two out of eight GPUs showing usage, and the rest mostly at 50% utilization.</li> <li>Reference to a paper published at NSDI 2020 by Alibaba Cloud on their machine learning service.</li> <li>Introduction of a solution called GPU sharing (or transition share) that enables multiple tasks to run concurrently on GPUs in a multi-time multiplex manner.</li> <li>Related work includes framework level modification, Coda API interception, and hardware methods like Nvidia MIG.</li> <li>Measured and simulated results showing that the workload could utilize twice as many GPUs without sharing, but GPU sharing is not a silver bullet solution.</li> <li>Analysis of the cluster with 1000 nodes and 6000 GPUs hosting AI tasks, showing that around 50 tasks require one GPU, indicating insufficiency.</li> <li>Observation of stranded GPUs due to insufficient CPUs, leading to unexpected scheduling failures despite sufficient GPU quota.</li> <li>Work aimed at addressing fragmentation-induced resource utilization.</li> <li>Existing approach: packing limitation and mitigation through consolidating tasks onto one node and freezing resources.</li> <li>Classical bin packing formulation problematic for GPU sharing workload scheduling.</li> <li>Introduction of a new approach to address the fermentation problem in scheduling GPU sharing workloads.</li> <li>Definition of fragmentation, its source, and an example of insufficient GPUs and stranded GPUs contributing to fragmentation.</li> <li>Proposed solution: Fermionic Scheduling Gradient Descent (FSGD), a statistical measure that quantifies expected unallocated GPU resource given a target workload distribution.</li> <li>FSGD outperforms traditional methods in reducing unallocated GPUs and utilizes more GPU resources compared to the best-fit policy.</li> <li>Implementation of FSGD as a pluggable component in Kubernetes using a scheduling framework, with a high-fidelity event-driven tree simulation for replaying traces collected from real kubernetes clusters.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-towards-iterative-relational-algebra-on-the-gpu","title":"USENIX ATC '23 - Towards Iterative Relational Algebra on the GPU","text":"<p>URL: https://www.youtube.com/watch?v=NUIA_c-dOzI</p> <ul> <li>The transcript is from a conference discussing iterative relational algebra and its use in GPU environments.</li> <li>The speaker introduces data logic (data log) and iterative relational algebra, explaining how they are used to compute the transitive closure of a graph.</li> <li>The speaker mentions that data log rules are simple and can be used in various fields, including machine learning and detective databases.</li> <li>The iterative relational algebra is used to compute the transitive closure using two rules: one for the base case and another for recursion.</li> <li>The iterative relational algebra is then compiled into common relational algebra primitives like Union, projection, rename, and join.</li> <li>Joint operation in relational algebra can generate duplicate tuples, which can be computationally expensive to remove.</li> <li>Data log programs can be parallelized using modern data log implementations such as Souffle thread parallel implementation and DP array target GPU parallel GPU parallelism.</li> <li>The speaker then discusses two popular join algorithms: short merge join and hash join.</li> <li>The speaker also mentions the importance of handling duplicate tuples in the iterative relational algebra algorithm.</li> <li>The transitive closure operation is then demonstrated using a parallel iterative relational algebra, with the algorithm stopping when no new paths are found.</li> <li>The speaker introduces an open addressing based approach for hash table implementation on GPUs.</li> <li>The speaker also discusses the importance of handling memory overhead in CUDA libraries like cuDF and Souffle.</li> <li>Finally, the speaker summarizes their contributions to high-performance GPU HTBL iterative relational algebra and efficient GPU memory management systems.</li> </ul>"},{"location":"usenix_atc_2023/#usenix-atc-23-vectorvisor-a-binary-translation-scheme-for-throughput-oriented-gpu-acceleration","title":"USENIX ATC '23 - VectorVisor: A Binary Translation Scheme for Throughput-Oriented GPU Acceleration","text":"<p>URL: https://www.youtube.com/watch?v=TElCneM9UxQ</p> <ul> <li>Sam is a 6-year PhD candidate at Princeton.</li> <li>GPU programming has become more accessible due to cloud availability and falling prices.</li> <li>However, GPU programming can be complex due to the need for memory coalescing, divergent control flow, and different hardware architecture.</li> <li>High-level DSLs and libraries exist but may not fit all workloads well.</li> <li>Low-level frameworks like CUDA or OpenCL have their own challenges and potential issues.</li> <li>GPU programming model is notably different from typical programming models.</li> <li>WebAssembly could be a solution for easier GPU programming, as it supports multiple languages and provides memory isolation.</li> <li>The speaker proposes a new GPU programming model that could accelerate existing programs without modification, providing backwards compatibility and cross-vendor support.</li> </ul>"},{"location":"blog/architecture/eda/","title":"Building Distributed Applications with Event-Driven Architecture - Eric Johnson's presentation at GOTO 2023","text":"<p>In a world where technology evolves at a breakneck pace, keeping up with the latest trends and practices in software development can be daunting. One such emerging trend is the concept of Event-Driven Architecture (EDA) in building distributed applications. Eric Johnson, in his talk at GOTO 2023, brilliantly demystified this concept, providing valuable insights and practical advice. His presentation, \"Building Distributed Applications with Event-Driven Architecture,\" now available on YouTube, serves as an excellent resource for developers and architects looking to deepen their understanding of EDA and its applications.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#the-essence-of-event-driven-architecture","title":"The Essence of Event-Driven Architecture","text":"<p>The core idea behind EDA, as Eric puts it, is simple yet profound - \"something happens, and we react.\" This approach is a significant shift from the traditional request-response model prevalent in many systems. In EDA, the focus is on events - occurrences or changes in state that trigger specific workflows or processes. This model is inherently more dynamic and can lead to more responsive, scalable, and flexible systems.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#transitioning-from-synchronous-to-asynchronous-models","title":"Transitioning from Synchronous to Asynchronous Models","text":"<p>A pivotal point in Eric's talk is the emphasis on moving from synchronous to asynchronous models. Synchronous systems, while straightforward, have their drawbacks, particularly in terms of scalability and fault tolerance. Asynchronous systems, on the other hand, offer better resilience and flexibility. They allow components to operate independently, reducing the ripple effect of failures and improving system availability.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#asynchronous-point-to-point-queue","title":"Asynchronous Point-to-Point (Queue)","text":"<p>One method Eric discusses is the asynchronous point-to-point model, typically implemented using a queue. This setup decreases the direct coupling between sender and receiver, allowing for more resilient systems. If a receiver fails, the messages are safely queued, ready to be processed once the receiver is back online.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#asynchronous-message-router-bus","title":"Asynchronous Message-Router (Bus)","text":"<p>Another model highlighted is the asynchronous message-router, utilizing an event bus. This model centralizes the routing logic, decoupling it from individual senders and receivers. An event bus can efficiently distribute events to the appropriate services based on predefined rules, facilitating a more modular and maintainable system architecture.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#the-role-of-choreography-and-orchestration","title":"The Role of Choreography and Orchestration","text":"<p>In EDA, choreography and orchestration play crucial roles. Choreography is used for communication between different domains or services, allowing them to publish and subscribe to events autonomously. Orchestration, meanwhile, is employed within a domain to manage workflows and ensure tasks are executed in the correct sequence. AWS Step Functions, as Eric notes, is a prime example of a tool that facilitates orchestration in serverless architectures.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#ensuring-idempotency-in-distributed-systems","title":"Ensuring Idempotency in Distributed Systems","text":"<p>A key challenge in distributed systems is ensuring idempotency - the property that ensures operations can be performed multiple times without changing the result. Eric delves into practical strategies to maintain idempotency, such as using tokens and persistent layers. By embedding these practices into your systems, you can avoid issues like duplicate processing, which is particularly crucial in scenarios involving transactions or sensitive data.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#harnessing-aws-services-for-eda","title":"Harnessing AWS Services for EDA","text":"<p>Throughout his talk, Eric leverages AWS services to illustrate EDA concepts. Services like Amazon SQS (Simple Queue Service), Lambda, and EventBridge are shown to effectively implement the principles of EDA. For instance, SQS helps manage asynchronous communication through queues, while EventBridge acts as a robust event bus, routing events based on specified criteria.</p>","tags":["event-driven architecture"]},{"location":"blog/architecture/eda/#key-takeaways","title":"Key Takeaways","text":"<ol> <li> <p>Embrace Asynchrony: Moving from synchronous to asynchronous models in distributed systems enhances resilience and flexibility.</p> </li> <li> <p>Leverage Queues and Event Buses: Utilizing asynchronous queues and event buses can significantly reduce coupling and improve system maintainability.</p> </li> <li> <p>Choreography and Orchestration: Effectively manage communication and workflows in distributed systems through choreography for inter-domain communication and orchestration within domains.</p> </li> <li> <p>Maintain Idempotency: Implementing idempotency safeguards your systems against duplication and inconsistencies, especially in distributed environments.</p> </li> <li> <p>Use the Right Tools: Explore AWS services like SQS, Lambda, and EventBridge to build robust, event-driven architectures.</p> </li> </ol> <p>Eric Johnson's presentation at GOTO 2023 is a treasure trove of insights for anyone looking to navigate the complexities of building distributed applications using event-driven architecture. By breaking down these concepts into understandable and actionable points, he provides a roadmap for developing more resilient, scalable, and efficient systems. Whether you're a seasoned architect or a budding developer, this talk is a must-watch, offering guidance and inspiration for your next big project. Don't forget to check out the full presentation on YouTube for a deeper dive into the world of event-driven architecture.</p>","tags":["event-driven architecture"]},{"location":"blog/design/design_for_the_utopia/","title":"Designing for Utopia in a Dystopian Era: Insights from Chris Atherton's GOTO 2022 Talk","text":"<p>In the compelling GOTO 2022 presentation, Design for the Utopia You Want, Not the Dystopia You're In, Chris Atherton provides a profound exploration of the intersection between design, psychology, and the socio-political landscape of our times. The talk, available on YouTube, delves into how designers and individuals can navigate the complex web of modern challenges to foster a more utopian society.</p>"},{"location":"blog/design/design_for_the_utopia/#the-designers-dilemma","title":"The Designer's Dilemma","text":"<p>Atherton opens by identifying as a designer deeply interested in human needs and motivations. The talk pivots on the critical role designers play in shaping human interaction with technology and, by extension, each other. By understanding user interactions, designers can create or adapt tools that enhance or impede human agency. The speaker emphasizes the need to be vigilant about how designs are used, often in ways never intended, highlighting the adaptability required in both creation and utilization.</p>"},{"location":"blog/design/design_for_the_utopia/#navigating-dystopian-themes","title":"Navigating Dystopian Themes","text":"<p>The discussion dives into the prevalence of dystopian themes in popular culture, from Blade Runner to Terminator, contrasting them with the more insidious and real dystopias we face today \u2014 like climate change and pandemics. Atherton examines \"techwear,\" a fashion response to dystopian themes, and how it has evolved from a testosterone-heavy aesthetic to a more inclusive one. Despite the grim realities we face, the presentation encourages finding humor and humanity even in dark times.</p>"},{"location":"blog/design/design_for_the_utopia/#technology-and-agency","title":"Technology and Agency","text":"<p>A significant part of the talk revolves around technology's impact on personal agency. From the privacy erosions on platforms like Facebook to the societal implications of Bitcoin mining, Atherton urges us to consider the pervasive and often unseen influence of technology on our lives. Furthermore, the speaker delves into the concept of learned helplessness, a psychological state when someone believes they have no control over their circumstances and stops trying to change them, often exacerbated by technology's relentless demands and complexities.</p>"},{"location":"blog/design/design_for_the_utopia/#psychological-insights-for-a-utopian-future","title":"Psychological Insights for a Utopian Future","text":"<p>Atherton brings in psychological theories to bolster her argument for mindful design and living. She references William James's attention theory, Martin Seligman's learned helplessness, and the mere exposure effect, among others, to explain how repeated, unexamined interactions with technology can shape our behaviors and beliefs in undesirable ways.</p>"},{"location":"blog/design/design_for_the_utopia/#acting-for-the-utopia-you-want","title":"Acting for the Utopia You Want","text":"<p>The crux of Atherton's message is a call to action. She cites Keanu Reeves's practice of not engaging in futile arguments and Greta Thunberg's advocacy for direct action towards the Utopia we desire. The talk underscores the importance of recognizing when we might be falling into patterns of learned helplessness and intentionally rehearsing things that we believe to be good, thereby actively participating in the creation of a better future.</p>"},{"location":"blog/design/design_for_the_utopia/#concluding-thoughts","title":"Concluding Thoughts","text":"<p>Chris Atherton's talk at the GOTO 2022 conference is more than a presentation; it's a rallying cry for designers, technologists, and citizens to introspect and act with intentionality. By understanding the psychological underpinnings of our interactions with technology and society, we can move towards a future that is less about adapting to dystopia and more about creating Utopia. The advice is clear: act for the Utopia you want, dress however you like, but importantly, take action against the forces that seek to diminish our agency and potential.</p> <p>As we navigate these challenging times, let us draw inspiration from Atherton's insights and the examples set by figures like Reeves and Thunberg. Let's strive to recognize and overcome the learned helplessness that can ensnare us, choosing instead to engage in meaningful actions that lead us towards a more hopeful, utopian future.</p> <p>To watch the full presentation and delve deeper into these compelling themes, visit the talk, Design for the Utopia You Want, Not the Dystopia You're In on YouTube.</p> <p>Act for the Utopia you want, dress how you like, but take action.</p>"}]}