{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Architect's Insight Hub: Elevate Your Learning Experience","text":"<p>Welcome to Architect's Insight Hub, your exclusive portal to curated knowledge in the world of technology. As an architect, I understand the challenge of keeping up with the latest trends while juggling a busy schedule. That's why this personal website is dedicated to providing you with succinct summaries of YouTube technical videos and books \u2013 a valuable resource designed for the discerning learner who values their time.</p> <p>In a landscape where not every video is worth the watch and not every book is worth the read, Architect's Insight Hub emerges as your ally. Powered by state-of-the-art AI models, each summary is meticulously generated to capture the essence of the content, saving you time without compromising on the insights.</p> <p>This isn't just a website \u2013 it's a commitment to maintaining a high overview of trends while acknowledging the limitations of time. As the architect behind this initiative, I invite you to join me in this personalized learning journey. Elevate your learning experience with Architect's Insight Hub, where knowledge is condensed, time is respected, and trends are at your fingertips.</p>"},{"location":"#summaries","title":"Summaries","text":"<ul> <li>GOTO Conferences - Software architecture playlist</li> </ul>"},{"location":"#blogs","title":"Blogs","text":""},{"location":"#architecture","title":"Architecture","text":""},{"location":"#design","title":"Design:","text":"<ul> <li>Design for the Utopia You Want, Not the Dystopia You're In: Insights from Chris Atherton at GOTO Conference 2022</li> </ul>"},{"location":"#programming","title":"Programming","text":""},{"location":"#other","title":"Other","text":""},{"location":"goto_best_of_v1/","title":"Goto best of v1","text":""},{"location":"goto_best_of_v1/#one-rule-to-rule-them-all-pragmatic-dave-thomas-goto-2023","title":"One Rule to Rule Them All \u2022 Pragmatic Dave Thomas \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ug8XX2MpzEw</p> <ul> <li>The speaker presented the rule \"make it easier to change\" as a guiding principle in software development</li> <li>They emphasized that this is not a hard and fast rule, but rather a value that can help guide decision-making</li> <li>The speaker discussed their experiences with refactoring code and how they've learned to trust their intuition when estimating the cost of change</li> <li>They encouraged the audience to observe and learn from their own experiences in order to improve their estimation skills</li> <li>The speaker also emphasized the importance of making software development a fun and enjoyable process.</li> </ul>"},{"location":"goto_best_of_v1/#programmings-greatest-mistakes-mark-rendle-goto-2023","title":"Programming's Greatest Mistakes \u2022 Mark Rendle \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=Y9clBHENy4Q</p> <ul> <li>The title of the talk is \"Computers are stupid\"</li> <li>The speaker argues that computers cannot be trusted with important decisions because they lack common sense and can only do what they are programmed to do</li> <li>They are prone to errors, especially when dealing with ambiguity or unexpected situations</li> <li>Examples of computer failures include:<ul> <li>A computer-guided missile missing its target by 10 miles during the Gulf War</li> <li>The Therac-25 radiation therapy machine overdosing patients and causing their deaths</li> <li>Amazon's AI-powered hiring tool discriminating against women</li> <li>Google's image recognition algorithm labeling black people as gorillas</li> </ul> </li> <li>The speaker also mentions that computer algorithms are often biased because they are based on data created by humans, who are themselves biased</li> <li>The speaker concludes that computers are not intelligent and should not be trusted with important decisions, especially when human lives are at stake.</li> </ul>"},{"location":"goto_best_of_v1/#building-owly-an-ai-comic-video-generator-for-my-son-agustinus-nalwan-yow-2023","title":"Building Owly: An AI Comic Video Generator for My Son \u2022 Agustinus Nalwan \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=jkHCI4XCOg4</p> <ul> <li>The speaker presented a project using the stable diffusion model to generate comics based on user input.</li> <li>The stable diffusion model is a text-to-image generation model that can create images from text descriptions.</li> <li>The speaker used the model to generate images for each panel of a comic, with the text for each panel provided by the user.</li> <li>The project also included features such as off-riding existing concepts and enhancing engagement through storytelling.</li> <li>The speaker encouraged audience members to reach out to them for more information or to connect.</li> </ul>"},{"location":"goto_best_of_v1/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm in data management</li> <li>It allows for decentralized production and consumption of data</li> <li>Governance in the data world will be a big focus, but it needs to be federated through tooling</li> <li>Vendors have high motivation to get you on board right now, so it's important to be mindful of their motivations</li> </ul>"},{"location":"goto_best_of_v1/#cultivating-instinct-katrina-owen-yow-2023","title":"Cultivating Instinct \u2022 Katrina Owen \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=4As7GDQ8EYg</p> <ul> <li>The talk is about the importance of perceptual expertise in programming.</li> <li>Perceptual expertise is the ability to quickly and accurately recognize patterns, which allows experts to focus on higher level thinking.</li> <li>Programming requires a high level of perceptual expertise because it involves processing many different dimensions at once.</li> <li>The brain has to figure out which dimensions are important and how to categorize them, which can be overwhelming for new programmers.</li> <li>Over the past 50 years, the number of programmers in the world has doubled roughly every five years.</li> <li>Many new programmers may not be exposed to good patterns, useful distinctions, or signal that would help them develop perceptual expertise.</li> <li>Compressing these lessons can help new developers waste less time on mechanics and focus more on solving meaningful problems.</li> </ul>"},{"location":"goto_best_of_v1/#is-software-engineering-real-engineering-hillel-wayne-yow-2023","title":"Is Software Engineering Real Engineering? \u2022 Hillel Wayne \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=CmIGPGPdxTI</p> <ul> <li>The speaker discusses their experience of entering the software industry from a non-traditional background.</li> <li>They emphasize the importance of learning and adapting in order to succeed in a new field.</li> <li>They encourage others to seek out people with diverse backgrounds and experiences in order to learn from them.</li> <li>They suggest that there is much to be gained from learning about other fields and how they intersect with software engineering.</li> <li>The speaker encourages the audience to talk to people who have entered software from unusual directions in order to learn from their experiences.</li> </ul>"},{"location":"goto_best_of_v1/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ul> <li>Low-level programming is writing code that runs directly on the hardware, without an operating system or virtual machine.</li> <li>It can be useful for tasks such as embedded systems and kernel development.</li> <li>Rust is a good language for low-level programming because it allows for fine control over memory management while also providing safety features to prevent common errors.</li> <li>The ARM Cortex-M4 microcontroller is a popular choice for low-level programming, due to its wide availability and powerful capabilities.</li> <li>When working with low-level programming, it's important to have access to the datasheet and reference manuals for the hardware being used.</li> <li>Low-level programming can be challenging but rewarding, as it allows for greater control over the hardware and more efficient use of resources.</li> </ul>"},{"location":"goto_best_of_v1/#have-i-been-pwned-troy-hunt-goto-2023","title":"Have I Been Pwned? \u2022 Troy Hunt \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=pxPEdUFdayA</p> <ul> <li>The talk was about the Genesis Market, a darknet marketplace that sold access to compromised machines.</li> <li>The presenter discussed how the FBI took down the site and arrested its administrators in Operation Cookie Monster.</li> <li>The FBI used binary code and hoodies as imagery in their operations, which the presenter found amusing.</li> <li>The presentation ended on a positive note, highlighting the FBI's sense of humor.</li> </ul>"},{"location":"goto_best_of_v1/#plain-text-dylan-beattie-goto-2023","title":"Plain Text \u2022 Dylan Beattie \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=4mRxIgu9R70</p> <ul> <li>Pike Matchbox is a text encoding tool that optimizes plain text files for different cultural and linguistic contexts.</li> <li>It supports several encodings, such as ASCII, UTF-8, and UTF-16.</li> <li>It also considers language-specific features, such as Danish spelling reform, Norwegian orthography, Finnish alphabet, Swedish alphabet, and big and little endian conventions.</li> <li>The tool can be used in different operating systems and text editors.</li> <li>Pike Matchbox was developed to address the issues of unpredictability in plain text files and to ensure that the text is displayed correctly across different platforms and devices.</li> <li>The history of teleprinters and their encoding conventions also played a role in shaping Pike Matchbox's design.</li> <li>The talk encourages developers to consider cultural and linguistic contexts when working with plain text files and to use tools like Pike Matchbox to optimize them for their intended audience.</li> </ul>"},{"location":"goto_best_of_v1/#hot-deploying-low-latency-services-for-247-operation-martin-thompson-yow-2022","title":"Hot Deploying Low-Latency Services for 24/7 Operation \u2022 Martin Thompson \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=_KvFapRkR9I</p> <ul> <li>Real-time systems require coordination between different components</li> <li>Aeron is an open-source project for building clusters that can handle fault tolerance and low latency</li> <li>Coordination is done through messaging, where components send messages to each other to communicate</li> <li>Components must be versioned to keep track of conversations between them and ensure compatibility</li> <li>Background tasks are used to perform time-consuming computations without pausing the system</li> <li>Customers have driven the development of Aeron towards supporting 24/7 operation and hot deployment.</li> </ul>"},{"location":"goto_best_of_v1/#scaling-python-for-machine-learning-beyond-data-parallelism-holden-karau-goto-2023","title":"Scaling Python for Machine Learning: Beyond Data Parallelism \u2022 Holden Karau \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=IX3300umebg</p> <ul> <li>Dask is a flexible library for parallel computing in Python.</li> <li>It can be used to process large datasets that do not fit into memory by breaking them down into smaller chunks and processing them in parallel.</li> <li>It can also be used to parallelize existing code and scale up computations on multi-core machines or clusters of machines.</li> <li>Dask is designed to be used with Pandas, Numpy, and Scikit-learn, so it integrates well with existing scientific computing workflows in Python.</li> <li>It includes a number of built-in algorithms for common data processing tasks, such as sorting, filtering, and aggregating data.</li> <li>Dask can be used to parallelize machine learning models and perform distributed training.</li> <li>It is also useful for performing exploratory data analysis on large datasets by allowing users to write interactive code that scales up to handle larger datasets.</li> <li>Dask has a number of built-in visualization tools for monitoring the progress of computations and diagnosing performance issues.</li> <li>The speaker recommends using Dask with Jupyter notebooks for interactive data processing and exploration.</li> <li>Dask is not a replacement for existing parallel computing libraries such as MPI or Hadoop, but rather it is designed to be used alongside these libraries to provide additional functionality and flexibility.</li> </ul>"},{"location":"goto_best_of_v1/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>Started by showing a GraphQL API built using Prisma</li> <li>Showed how to run a query in the playground and explained what it does</li> <li>Added a new field <code>reviews</code> to the schema, which returns an array of reviews for a given post</li> <li>Explained that this requires making changes to both the schema and the resolver</li> <li>Modified the GraphQL schema by adding the <code>reviews</code> field to the <code>Post</code> type</li> <li>Updated the database model in Prisma's <code>schema.prisma</code> file to include a relation between posts and reviews</li> <li>Redeployed the API using <code>prisma deploy</code></li> <li>Showed how the new field can now be queried in the playground</li> <li>Added a mutation for creating new reviews</li> <li>Modified the <code>getPost</code> resolver function to make use of the new review data</li> <li>Explained that this required changing the contract of the <code>getPost</code> function to include review information</li> <li>Deployed changes and tested in the playground</li> </ul>"},{"location":"goto_best_of_v1/#why-is-my-app-slow-defining-reliability-in-platform-engineering-jez-humble-goto-2023","title":"Why Is My App SLOw? Defining Reliability in Platform Engineering \u2022 Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=es3DNd5Qipg</p> <ul> <li>The talk is about using statistical methods to model and predict system behavior in Site Reliability Engineering (SRE).</li> <li>The presenter, David Blank-Edelman, emphasizes the importance of understanding system behavior as a prerequisite for effective SRE.</li> <li>He introduces the concept of \"stationarity,\" which refers to the idea that certain characteristics of a system remain constant over time.</li> <li>By identifying and modeling these stationary characteristics, SREs can make more accurate predictions about system behavior and respond more effectively to incidents.</li> <li>Blank-Edelman also discusses a technique called \"time series analysis\" for analyzing stationary data and predicting future behavior.</li> <li>He then describes how Google has implemented this approach at scale using a tool called \"Borgmon,\" which can process large volumes of time series data in real time.</li> <li>The presenter emphasizes the importance of statistical modeling and prediction in SRE, and encourages practitioners to explore these techniques further.</li> <li>He also mentions that there are resources available on the sre.google website for those who want to learn more about this topic.</li> </ul>"},{"location":"goto_best_of_v1/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ul> <li>Flix is a functional, imperative, and logic programming language.</li> <li>It was developed by more than 50 people, including the speaker's research group.</li> <li>The language allows writing functions with some logic programming inside them.</li> <li>Flix has several unique features:<ul> <li>Strong typing</li> <li>Pattern matching</li> <li>Higher-order functions</li> <li>Type inference</li> <li>Logic programming</li> <li>Side effects (through monads)</li> </ul> </li> <li>Flix is designed for building scalable and efficient applications, particularly in the area of data analytics.</li> <li>The language has a visual studio code extension, documentation, and a playground available on its website.</li> <li>It is fully open source.</li> </ul>"},{"location":"goto_dt_ui_ux/","title":"Goto dt ui ux","text":""},{"location":"goto_dt_ui_ux/#state-of-storybook-7-gert-hengeveld-goto-2023","title":"State of Storybook 7 \u2022 Gert Hengeveld \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=j6i0_CjhXxs</p> <ul> <li>Storybook 7.0 was released with many improvements and new features for faster development, enhanced performance, and better UI customization.</li> <li>The core team introduced MPX (Meta Platform Experience) to simplify the configuration process.</li> <li>Improved TypeScript support with type checking during runtime.</li> <li>New features include addons panel, default theme, and design tokens.</li> <li>Storybook 7.0 is backwards compatible but requires upgrading existing projects.</li> <li>Upgrade from older versions by running <code>npx sb@latest init</code> for new projects or <code>npx sb@latest upgrade</code> for existing ones. [Applause]</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-developers-stephanie-stimac-sophie-freiermuth-goto-2023","title":"Design for Developers \u2022 Stephanie Stimac &amp; Sophie Freiermuth \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=6bDqpshjSpI</p> <ul> <li>The book \"Designing for Emotion\" by Aarron Walter is about creating emotional connections with users through design.</li> <li>Designing for emotion can lead to increased user engagement, loyalty, and overall satisfaction with a product or service.</li> <li>The book covers topics such as understanding user emotions, using visual cues to convey emotion, and creating a narrative in design.</li> <li>Aarron Walter emphasizes the importance of empathy in design, and encourages designers to put themselves in their users' shoes.</li> <li>He also discusses the concept of \"anticipatory design,\" where designers try to predict and address user needs before they arise.</li> <li>The book includes examples of successful emotional design in various industries, such as social media, e-commerce, and gaming.</li> <li>Aarron Walter encourages designers to continue learning and developing their skills in order to create better experiences for users.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=i2_lVtZZdbE</p> <ul> <li>Technology should enhance humanity and improve the world outside of screens</li> <li>The future is not all screens, but humanity enhanced by technology</li> <li>The goal is to add so much value that people can put their phones away quickly</li> <li>A dream is to impact the lives of a billion people in a positive way.</li> </ul>"},{"location":"goto_dt_ui_ux/#the-psychology-of-ux-fabio-pereira-goto-2022_1","title":"The Psychology of UX \u2022 Fabio Pereira \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=rf9Gh-VMvIk</p> <ul> <li>Technology can be addictive and have a negative impact on our lives</li> <li>We should strive to build technology that enhances the world outside of the device in our hands, rather than just keeping us glued to the screen</li> <li>The future is not all screens, humanity enhanced</li> <li>Let's build better experiences, not just technology.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2022","title":"Design for the Utopia You Want, Not the Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Q77GT8srcsQ</p> <ul> <li>Learned helplessness is when someone believes that they have no control over their circumstances and stops trying to change them.</li> <li>To avoid learned helplessness, notice if you find yourself rehearsing things that you believe to be good.</li> <li>Keanu Reeves practices not engaging in arguments or giving attention to people he disagrees with.</li> <li>Greta Thunberg suggests taking direct action for the Utopia you want and not wasting time by giving attention to people who don't act for you when they should.</li> <li>The advice is to act for the Utopia you want, dress however you like, but take action.</li> </ul>"},{"location":"goto_dt_ui_ux/#white-hat-attention-jacking-for-accessibility-fun-profit-chris-atherton-goto-2022","title":"White-Hat Attention Jacking for Accessibility, Fun &amp; Profit \u2022 Chris Atherton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VwocXCyOieM</p> <p>Summary:</p> <ul> <li>Attention is a limited resource and can be easily disrupted by irrelevant information or stimuli.</li> <li>There are several types of attention including selective, divided, and sustained attention.</li> <li>Cognitive overload occurs when there is too much information to process at once, leading to decreased performance and productivity.</li> <li>Designing for attention involves minimizing distractions, providing clear instructions, and allowing users to focus on one task at a time.</li> <li>For screen readers and sighted users, it's important to consider what you're asking people's attention to do and to carefully manage their cognitive load.</li> <li>The website https://howiexperiencewebtoday.com/ provides a good example of how not to design for attention.</li> </ul> <p>No context provided, all information is based on the given transcript.</p>"},{"location":"goto_dt_ui_ux/#the-experience-centric-organization-simon-clatworthy-goto-2021","title":"The Experience-Centric Organization \u2022 Simon Clatworthy \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=P9hobIfPw_0</p> <ul> <li>Experience is gold for customers, employees, and organizations</li> <li>Organizations need to plan their maturity model for experience design as a step-wise process</li> <li>The steps include seeing experience as superficial to being core, and require an organizational transformation</li> <li>The book \"The Experience Centric Organization\" provides more information on this topic.</li> </ul>"},{"location":"goto_dt_ui_ux/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ul> <li>The speaker, Stefan Baumgartner, talks about building a website without JavaScript</li> <li>He decided to build a site using only HTML and CSS for his personal blog</li> <li>This was due to frustration with modern web development practices</li> <li>He wanted to focus on the content of his site rather than its functionality</li> <li>He also wanted to improve his skills in HTML and CSS</li> <li>The site took him 10 hours to build, and he is satisfied with the result</li> <li>He encourages developers to consider the trade-offs of different technologies when building websites</li> <li>His main point is to focus on building sites that \"just work\" rather than worrying about the technology powering them.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-technology-influences-our-decisions-chris-atherton-fabio-pereira-goto-2019","title":"How Technology Influences Our Decisions \u2022 Chris Atherton &amp; Fabio Pereira \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=Jya6WTAB9io</p> <ul> <li>The guest, Raghavendra Kambhampati, is a Senior Director of Engineering at Okta.</li> <li>He has been in the tech industry for over 20 years and has seen many changes in how software is developed and delivered.</li> <li>One of the biggest changes he has noticed is the shift from monolithic architectures to microservices.</li> <li>This change has allowed for more flexibility and scalability in software development, but it also requires a different approach to testing and debugging.</li> <li>Another change is the rise of DevOps and the importance of collaboration between developers and operations teams.</li> <li>Kambhampati believes that the future of software development will involve even more automation and machine learning.</li> <li>He thinks that the role of developers will shift towards more creative problem-solving, while machines will handle the routine tasks.</li> <li>When asked about his advice for new engineers, Kambhampati emphasizes the importance of continuous learning and adapting to change.</li> <li>He also encourages engineers to be curious and ask questions, as well as to build strong relationships with their colleagues.</li> <li>Finally, when asked about what he would take from the past and bring to the present or future, Kambhampati says that he would like to see more connection with nature in our lives, even in the tech industry.</li> </ul>"},{"location":"goto_dt_ui_ux/#build-agility-with-design-sprints-gary-crawford-goto-2020","title":"Build Agility with Design Sprints \u2022 Gary Crawford \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=oRjY5_VACts</p> <ul> <li>Design sprints are a method for quickly prototyping and testing ideas</li> <li>They typically last for five days and involve cross-functional teams working together intensively to solve specific problems</li> <li>The goal is to rapidly iterate through different variations or try something completely new altogether</li> <li>Agility and a culture of people willing to learn are key components of design sprints</li> <li>Jake Knapp's book \"Sprint: How to Solve Big Problems and Test New Ideas in Just Five Days\" provides step-by-step guidance on how to conduct a design sprint.</li> <li>The website www.gv.com/sprint offers more information, examples, and resources for conducting design sprints.</li> </ul>"},{"location":"goto_dt_ui_ux/#server-driven-ui-on-mobile-jj-qi-goto-2020","title":"Server Driven UI on Mobile \u2022 JJ Qi \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=CtSfG8tYRdg</p> <ul> <li>Server-driven UI is a design pattern where the layout and behavior of a user interface are controlled by a server rather than locally on the client.</li> <li>This approach can be useful for implementing complex features or for providing dynamic content to users.</li> <li>To convert a feature to be server driven, you will need to do the following:</li> <li>Design an api that serves json data for your feature.</li> <li>Write client-side code to consume this json and render the ui based on it.</li> <li>Set up a way to test your implementation to ensure it's working correctly.</li> <li>When deciding whether or not to convert a feature to be server driven, consider the following:</li> <li>Is it always going to be worth the work to convert a feature to be server driven?</li> <li>What are some of the best ways to test your ui is it sufficient to have just unit tests or do we still need full end-to-end ui tests?</li> <li>Some benefits of using server-driven UI include:</li> <li>It allows you to decouple your front-end and back-end code, making it easier to maintain.</li> <li>It enables you to provide dynamic content to users without having to update the client-side code.</li> <li>It can improve the performance of your application by reducing the amount of data that needs to be downloaded to the client.</li> </ul>"},{"location":"goto_dt_ui_ux/#building-an-accessibility-culture-ayesha-mazumdar-goto-2020","title":"Building an Accessibility Culture \u2022 Ayesha Mazumdar \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Lf3YVI-9lA0</p> <ul> <li>Accessibility in design means designing products that can be used by everyone, including people with disabilities</li> <li>Importance of accessibility: 1. Legal compliance, 2. Inclusive user experience, 3. Increased user base and revenue</li> <li>Types of disabilities to consider: visual, auditory, motor, cognitive</li> <li>Tips for designing accessible products: 1. Use high contrast colors, 2. Provide alternative text for images, 3. Use clear language and concise sentences, 4. Make all functionality available from a keyboard, 5. Provide enough time for users to read and interact with content, 6. Do not use color as the only visual means of conveying information, 7. Create content that can be presented in different ways, 8. Help users navigate and find content, 9. Make it easy to see and hear content, 10. Make all functionality available from a keyboard</li> <li>Tools for checking accessibility: 1. Screen readers, 2. Color contrast checkers, 3. Keyboard accessibility testers</li> <li>Resources for learning more about accessibility: 1. Web Content Accessibility Guidelines (WCAG), 2. A11y Project, 3. W3C Web Accessibility Initiative (WAI)</li> <li>Q&amp;A available after the presentation.</li> </ul>"},{"location":"goto_dt_ui_ux/#design-for-the-utopia-you-want-not-the-dystopia-youre-in-chris-atherton-goto-2019","title":"Design For The Utopia You Want, Not The Dystopia You're In \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=pUn8Ox7ai6I</p> <ul> <li>GDP is a measure of economic activity, but it doesn't account for many important factors such as environmental damage or quality of life.</li> <li>There are alternative ways to measure prosperity, such as the Genuine Progress Indicator (GPI) and the Happy Planet Index (HPI).</li> <li>Businesses have access to vast amounts of personal data, which they use to manipulate and influence people's behavior.</li> <li>People should be aware of state-dependent learning, which suggests that the state you are in when you learn something is the best state for retrieving that information later. Therefore, if you want to remember something, it's helpful to recreate the same state when you learned it (e.g., eating and drinking the same things).</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-tips-to-avoid-losing-users-attention-chris-atherton-goto-2019","title":"UX Tips to Avoid Losing Users' Attention \u2022 Chris Atherton \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=-pixBU3EJfU</p> <ul> <li>Accessibility is important for making technology usable by as many people as possible</li> <li>There are four main categories of disabilities: visual, auditory, motor, and cognitive</li> <li>Web Content Accessibility Guidelines (WCAG) provide recommendations for making web content more accessible</li> <li>It's important to consider accessibility when designing and developing technology, rather than trying to add it in later</li> <li>There are a number of common mistakes to avoid when designing for accessibility</li> <li>Statistics show that a significant portion of the population has some kind of disability, and it's likely that at least some of your potential audience will have difficulties using technology that isn't designed with accessibility in mind.</li> </ul>"},{"location":"goto_dt_ui_ux/#devux-improving-developer-designer-collaboration-yu-ling-cheng-france-wang-goto-2019","title":"DevUX: Improving Developer-Designer Collaboration \u2022 Yu Ling Cheng &amp; France Wang \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uWIfnPc1wC0</p> <ul> <li>Dev UX is the collaboration between developers and UX designers to create better user experiences</li> <li>It involves understanding each other's roles and working together to integrate design into the development process</li> <li>The benefits of Dev UX include faster development, better user experience, and improved collaboration between teams</li> <li>Tools for promoting Dev UX culture within a team include:<ul> <li>Sharing knowledge through workshops and presentations</li> <li>Encouraging open communication and feedback</li> <li>Providing resources such as design systems and documentation</li> <li>Creating opportunities for developers to learn about UX design</li> <li>Celebrating successes and acknowledging challenges</li> </ul> </li> <li>The Dev UX manifesto can be found on the website devUX.tech, along with a toolbox of resources and a link to join their Slack community.</li> </ul>"},{"location":"goto_dt_ui_ux/#persuasive-design-anders-toxboe-goto-2018","title":"Persuasive Design \u2022 Anders Toxboe \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=1OA--3GoWso</p> <ul> <li>Persuasive design is the practice of designing interfaces that influence user behavior.</li> <li>It can be used to manipulate users (coercion) or facilitate intrinsic motivation (persuasion).</li> <li>Coercion involves using persuasive techniques to get users to do something they might not otherwise want to do, while persuasion is about helping users achieve their own goals.</li> <li>Persuasive design can be used for both short-term and long-term user engagement.</li> <li>Short-term engagement tactics include things like rewards, social proof, and loss aversion, while long-term engagement tactics involve creating a sense of autonomy, competence, and relatedness in users.</li> <li>To use persuasive design effectively, it's important to understand the difference between intrinsic and extrinsic motivation.</li> <li>Extrinsic motivation comes from external factors like rewards or social pressure, while intrinsic motivation comes from within and is driven by a desire to achieve a goal for its own sake.</li> <li>Persuasive design can be used to create interfaces that encourage users to engage in positive behaviors, such as exercising regularly or eating healthy foods.</li> <li>However, it's important to use persuasive design ethically and responsibly, as it can also be used to manipulate users into making decisions that may not be in their best interests.</li> <li>To ensure that persuasive design is used ethically, it's important to be transparent with users about how their data is being collected and used, and to give them control over their own behavior.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-balance-tech-content-location-for-the-ultimate-ux-in-mixed-reality-jason-yim-goto-2017","title":"How to Balance Tech, Content &amp; Location for the Ultimate UX in Mixed Reality \u2022 Jason Yim \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=qTVqkCV56gk</p> <ul> <li>AR experiences can be impacted by the user's position and movement</li> <li>Calibration can help to address this issue, but it may not always be practical or reliable</li> <li>One solution is to have a designated area for the AR experience, where users can calibrate their device beforehand</li> <li>Another approach is to use computer vision techniques to track objects in the environment and adjust the AR accordingly</li> <li>However, these methods also have limitations and challenges, such as requiring specific lighting conditions or being affected by other objects in the environment.</li> </ul>"},{"location":"goto_dt_ui_ux/#using-lean-concepts-that-help-the-design-transformation-at-nordstrom-jyoti-shukla-goto-2017","title":"Using Lean Concepts that Help the Design Transformation at Nordstrom \u2022 Jyoti Shukla \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=2yQvwgRJSbc</p> <ul> <li>The speaker is a designer at Google.</li> <li>They use paper prototyping as a way to quickly gather information and test concepts with users.</li> <li>Paper prototyping can be done in low-fidelity, which allows for quick iteration and feedback.</li> <li>It is often used in areas where there is not a lot of information available or when a concept needs to be tested quickly.</li> <li>The next step after paper prototyping would typically be wireframing or interaction design before moving on to development.</li> <li>Tools that make the team faster are an unlock for them.</li> <li>They have invested in new tools for quick and dirty prototyping in the last six to nine months.</li> </ul>"},{"location":"goto_dt_ui_ux/#lean-design-thinking-michael-mckay-goto-2017","title":"Lean Design Thinking \u2022 Michael McKay \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=w1qrVpeYSYo</p> <p>Error</p>"},{"location":"goto_dt_ui_ux/#smoke-mirrors-the-magic-behind-wonderful-ui-in-android-israel-ferrer-camacho-goto-2016","title":"Smoke &amp; Mirrors the Magic behind Wonderful UI in Android \u2022 Israel Ferrer Camacho \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=912hbLVdIQE</p> <ul> <li>Magic tricks for animations in Android development</li> <li>ClipPadding and ClipChildren to clip views</li> <li>Smoke and mirrors technique to hide implementation issues</li> <li>Fast animations can make up for imperfect implementations</li> <li>Use Nick Butcher's Plaid application for more examples</li> <li>Repo: https://github.com/kaaataka/AnimationsMagicTricks</li> <li>Q&amp;A: repo or Twitter @kaaataka</li> </ul>"},{"location":"goto_dt_ui_ux/#emergent-design-neal-ford-goto-2013","title":"Emergent Design \u2022 Neal Ford \u2022 GOTO 2013","text":"<p>URL: https://www.youtube.com/watch?v=tqmiUJtxaF4</p> <ul> <li>Evolutionary architecture and emergent design require good engineering practices</li> <li>Overengineering is a bad thing that can result from trying to predict the future</li> <li>Good TDD codebase makes it easier to implement evolutionary architecture</li> <li>Combination of proactive and reactive approaches works better than predictive approach</li> <li>It's difficult to get better at predicting the future</li> </ul> <p>(no context)</p>"},{"location":"goto_dt_ui_ux/#why-ux-is-not-only-the-responsibility-of-the-uxer-janne-jul-jensen-goto-2015","title":"Why UX is not only the Responsibility of the UX'er \u2022 Janne Jul Jensen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Tbu6G08n_Gw</p> <ul> <li>The speaker is discussing the importance of user experience (UX) in software development.</li> <li>UX involves considering the needs and limitations of users when designing software.</li> <li>Good UX can improve user satisfaction, reduce errors, and increase efficiency.</li> <li>To evaluate the UX of a product, the speaker suggests using a questionnaire to gather feedback from users.</li> <li>The questionnaire should include questions about the usability, usefulness, and satisfaction with the product.</li> <li>It is important to consider both positive and negative feedback when evaluating UX.</li> <li>The speaker also mentions that they have encountered resistance to implementing good UX practices in their workplace.</li> <li>They suggest trying to raise awareness of the importance of UX among colleagues, using examples and data to make a case for its value.</li> <li>If faced with a questionnaire about the UX of an organization, the speaker suggests being honest and providing constructive feedback.</li> </ul> <p>No context provided.</p>"},{"location":"goto_dt_ui_ux/#adaptive-ui-sam-davies-goto-2015","title":"Adaptive UI \u2022 Sam Davies \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Z8QA9IYB67o</p> <ul> <li>Adaptivity in iOS apps refers to the ability of an app to adjust its layout and content based on the size and orientation of the device screen.</li> <li>Apple's Human Interface Guidelines recommend designing for key layout sizes, rather than specific devices or orientations.</li> <li>Developers can use Auto Layout and Size Classes to create adaptive UI in Xcode.</li> <li>Adaptivity is important because it allows apps to provide a consistent user experience across different devices and screen sizes.</li> <li>Apple's WWDC 2014 session on Building Adaptive Apps provides an overview of the principles and techniques for creating adaptive UIs.</li> <li>Developers should focus on content, rather than specific device characteristics, when designing adaptive UIs.</li> <li>Demonstrating the effects of adaptivity can help developers understand how to create effective adaptive layouts.</li> </ul>"},{"location":"goto_dt_ui_ux/#designing-the-right-product-michele-ide-smith-goto-2014","title":"Designing the Right Product \u2022 Michele Ide-Smith \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=ZuDD5s_EOeQ</p> <p>Summary:</p> <ul> <li>Qualitative research is about understanding the \"why\" behind user behavior</li> <li>It's important to gather insights from real users rather than relying on assumptions or intuition</li> <li>Interviews are a common method for gathering qualitative data</li> <li>It's important to interview people who represent your target audience</li> <li>Two interviews is not enough to get a representative sample, but it can provide valuable initial insights</li> <li>Qualitative research is about gathering in-depth insights rather than a large sample size</li> <li>Continuously gather feedback from users to inform product decisions.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-for-mobile-chris-atherton-goto-2014","title":"UX for Mobile \u2022 Chris Atherton \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=R5ByPrFldN8</p> <ul> <li>The speaker is discussing the use of visual aids in presentations.</li> <li>They mention that they have over 500 slides, and that they try to keep their talks to around 30 minutes.</li> <li>When asked about using tags on pool, the speaker mentions that they would add an animation to the new tags to draw attention to them.</li> <li>They also mention that they haven't come across anything too complex to be shown on a small screen on mobile, but if there are multiple things to monitor, it might be better suited for a larger screen.</li> </ul>"},{"location":"goto_dt_ui_ux/#mixing-lean-ux-agile-development-courtney-hemphill-goto-2014","title":"Mixing Lean UX &amp; Agile Development \u2022 Courtney Hemphill \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NoVTpeY3vOg</p> <ul> <li>Agile methodology used in software development</li> <li>Two-week sprints with daily standups and weekly demos</li> <li>Sprints include design, development, and testing</li> <li>Client involvement throughout the process</li> <li>Flexibility to accommodate changing requirements during sprints</li> <li>Week before release focused on bug fixing and finalizing features</li> <li>Occasional weeks dedicated to refactoring or improving existing code base.</li> </ul>"},{"location":"goto_dt_ui_ux/#ux-in-an-agile-process-janne-jul-jensen-goto-2014","title":"UX in an Agile Process \u2022 Janne Jul Jensen \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=NdqtTlCi4cE</p> <ul> <li>Users' expectations have increased over the years and they become more demanding as they see more apps.</li> <li>Testing on multiple devices is a challenge due to the variety of Androids and iPhones available.</li> <li>Cross-platform testing is important to ensure functionality across all platforms.</li> <li>AppsFlyer uses a system that takes screenshots during automated tests to quickly identify broken functionalities.</li> <li>Most projects at AppsFlyer run two-week sprints, with some running one-week sprints which is too short.</li> </ul>"},{"location":"goto_dt_ui_ux/#user-interface-ux-techniques-janne-jul-jensen-goto-2012","title":"User Interface (UX) Techniques \u2022 Janne Jul Jensen \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=7OSkB4BCx00</p> <ul> <li>User interface design is about creating a system that allows people to achieve their goals in the best way possible</li> <li>The key to successful user interface design is understanding the users and their needs, as well as the context in which the system will be used</li> <li>When designing a user interface, it's important to keep in mind the principles of usability, accessibility, and inclusivity</li> <li>It's also important to consider the overall user experience, including the visual design and branding of the system</li> <li>Some common techniques for user interface design include user research, wireframing, prototyping, and user testing</li> <li>When it comes to designing mobile apps, it's important to consider the unique constraints and opportunities presented by mobile devices</li> <li>It's also important to keep in mind the principles of good mobile app design, such as simplicity, clarity, and intuitiveness</li> <li>Some common challenges in user interface design include working with complex data, integrating with existing systems, and accommodating diverse user needs</li> <li>To overcome these challenges, it can be helpful to collaborate with other designers, developers, and stakeholders, and to use tools and techniques such as user research, prototyping, and user testing.</li> </ul>"},{"location":"goto_dt_ui_ux/#how-to-design-linda-rising-goto-2012","title":"How to Design \u2022 Linda Rising \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=tbemtSmVoBY</p> <ul> <li>The speaker, Chris Pine, is discussing the importance of writing code that is easy to understand and maintain.</li> <li>He uses an example of a difficult programming problem he solved, but the solution was hard for others to understand.</li> <li>He emphasizes the idea of sending a message to all the people who will ever read your code, including yourself in the future.</li> <li>He encourages writing code that is beautiful and elegant, like a song.</li> <li>The audience laughs and claps at the end of his talk, indicating their agreement and appreciation for his insights.</li> </ul>"},{"location":"goto_dt_ui_ux/#multi-touch-ui-a-touchy-subject-alan-boykiw-goto-2012","title":"Multi-touch UI: A Touchy Subject \u2022 Alan Boykiw \u2022 GOTO 2012","text":"<p>URL: https://www.youtube.com/watch?v=mEXudZ3bH_k</p> <ul> <li>The speaker is discussing the lack of standards in the autonomous vehicle industry.</li> <li>They mention that everyone seems to be doing their own thing and taking care of their own business.</li> <li>The speaker wonders if there needs to be standards made, but they are unsure if their company is the right one to lead it.</li> <li>They also question whether standards were necessary for the automobile industry, using the example of brake pedals.</li> <li>Despite this, they acknowledge that there are similarities in the autonomous vehicle industry.</li> </ul>"},{"location":"goto_programming_lang/","title":"Goto programming lang","text":""},{"location":"goto_programming_lang/#composing-all-the-things-with-kotlin-multiplatform-garth-gilmour-goto-2023","title":"Composing All The Things with Kotlin Multiplatform \u2022 Garth Gilmour \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iq2tTtG3zs4</p> <ol> <li>Introduction to JetBrains' Compose multiplatform for building cross-platform UIs</li> <li>Kotlin Multiplatform Mobile (KMM) enables sharing business logic and data between iOS, Android, and JS</li> <li>Compose for Desktop allows sharing UI code across desktop and mobile devices</li> <li>Shared code can be up to 60% using KMM and Compose</li> <li>Jetlag demo showcases UI sharing across iOS, Android, and web browsers</li> <li>Compose multiplatform provides value proposition through UX consistency, simpler development, and less code</li> <li>No live coding due to jet lag during the conference.</li> <li>Ask the presenter for demonstrations and code changes.</li> </ol>"},{"location":"goto_programming_lang/#the-reflex-architecture-ben-kolera-yow-2019","title":"The Reflex Architecture \u2022 Ben Kolera \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5ACqm2ee-XI</p> <ol> <li>Reflex framework presentation: a new functional reactive programming language for web applications</li> <li>The creator aims to make it easier and more powerful than existing libraries</li> <li>Influenced by Elm, PureScript, and other functional languages</li> <li>Lazy evaluation and type safety</li> <li>TypeScript compatibility with Babel support</li> <li>Compiles to JavaScript and uses React as the underlying view library</li> <li>Flexible architecture for customizing the language</li> <li>Plans for better integration with external libraries and frameworks</li> <li>A workshop will demonstrate practical examples of Reflex in action.</li> <li>Workshop setup requires VirtualBox or a downloadable virtual machine image.</li> <li>Set up early to avoid last-minute issues before the workshop starts.</li> </ol>"},{"location":"goto_programming_lang/#scodec-for-scala-3-michael-pilquist-yow-2020","title":"Scodec for Scala 3 \u2022 Michael Pilquist \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=Uo9S4iKw8NA</p> <ol> <li>Discussing the talk's purpose: providing an update on Dotty, the new version of Scala 3</li> <li>Dotty's compatibility with existing Scala libraries and tools</li> <li>Over 85% of standard library migrated to Dotty</li> <li>Many popular libraries compatible or in the process of being made compatible</li> <li>More open-source ecosystem adopting Dotty support, such as Cats Effect 3</li> <li>Continuous improvement on compatibility story over time</li> <li>Encouragement for users to try Dotty and seek help from the community when needed.</li> </ol>"},{"location":"goto_programming_lang/#jakarta-ee-10-modern-lightweight-cloud-application-development-ivar-grimstad-goto-2023","title":"Jakarta EE 10: Modern &amp; Lightweight Cloud Application Development \u2022 Ivar Grimstad \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2749IF7gAbI</p> <ul> <li>Jakarta EE 9 is about simplifying the namespace</li> <li>Replaced CDI 2.0 with CDI 2.1 as default version</li> <li>Reduced overall size of API by removing unused APIs and combining specifications (specs)</li> <li>Jakarta Starter available for easier integration</li> <li>Simplified naming conventions such as replacing 'JAX-RS-RI' with just 'Jersey'</li> <li>LinkedIn course on Jakarta EE available via a QR code or 24-hour free subscription (contact author for access if no subscription)</li> </ul>"},{"location":"goto_programming_lang/#concurrency-abstractions-for-application-security-bram-verburg-goto-2023","title":"Concurrency Abstractions for Application Security \u2022 Bram Verburg \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=snCylAGgcxw</p> <ol> <li>Discussion on concurrency and supervision in Erlang, a functional programming language designed for telecom applications with high availability requirements.</li> <li>Erlang's unique features include concurrency through lightweight processes and message passing instead of threads to avoid shared memory issues.</li> <li>Supervision trees provide an automatic approach to error handling by monitoring child processes and taking actions upon failure or crash.</li> <li>Concurrent supervision enhances reliability further by introducing a layer of concurrency to the supervisor itself.</li> <li>The speaker thanks their employer for enabling contributions to the community, such as speaking at this event. (no context provided beyond the given transcript).</li> </ol>"},{"location":"goto_programming_lang/#genetic-algorithms-in-elixir-sean-moriarity-bruce-tate-goto-2023","title":"Genetic Algorithms in Elixir \u2022 Sean Moriarity &amp; Bruce Tate \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vS1_Z4xaeqQ</p> <ol> <li>Discussion centered around Bruce Tate's book \"Programming Elixir 2: Functional | Concurrent | Pragmatic\" and Sean Moriarity's \"Machine Learning in Elixir\".</li> <li>Bruce shared his background in C++ and Java, before discovering functional programming through Erlang.</li> <li>Bruce explains how a genetic algorithm works using an example of finding the optimal path in a maze.</li> <li>Sean highlights how Elixir can be used for machine learning tasks by creating custom libraries and integrating with other tools like TensorFlow.</li> <li>Bruce and Sean agree on the importance of educational resources to introduce developers to Elixir's capabilities.</li> <li>The book club conversation celebrates Elixir's growth within its ecosystem, with ongoing developments in functional programming and concurrency.</li> </ol>"},{"location":"goto_programming_lang/#problem-solving-with-erlang-the-beam-robert-virding-francesco-cesarini-goto-2023","title":"Problem Solving with Erlang &amp; the BEAM \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=I7A5Y5wHDHI</p> <ol> <li>The discussion focuses on the future of Python.</li> <li>Francesco Cesarini and Robert Heaton predict continued usage and growth for Python in various fields.</li> <li>Concurrency, parallelism, and ease of use are highlighted as key features of Python.</li> <li>Francesco expresses excitement about Python's ability to adapt to change, while acknowledging potential changes over time.</li> <li>The speakers believe that Python will continue to have a significant impact in the next decade, despite possible transformations.</li> </ol>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=wFlyUzUVFhw</p> <ol> <li>Discussion on software distribution and installation methods</li> <li>Importance of configure steps during compilation from source</li> <li>Caution against using root when installing software</li> <li>Introduction to Zig, a programming language with focus on performance, safety, and portability</li> <li>The Zig Build System for faster builds and improved tooling</li> <li>Call for donations to support the non-profit Zig Software Foundation through company sponsored donation matching programs.</li> </ol>"},{"location":"goto_programming_lang/#how-to-do-embedded-development-with-rust-steve-klabnik-goto-2023","title":"How to Do Embedded Development with Rust \u2022 Steve Klabnik \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=7lHtXkYnip8</p> <ol> <li>Advice on low-level programming for software engineers: understand the hardware, learn assembly and Rust language.</li> <li>Recommendation to start with a microcontroller development board like Arduino or similar board.</li> <li>Suggestion to read datasheets and use online resources like DigiKey and Amazon-like platforms for documentation.</li> <li>Mention of resources for documentation, such as DigiKey and Amazon-like platforms for embedded devices.</li> <li>Recommendation to learn Rust through Mozilla's docs and Jason Kegler's book \"Learn Rust with microcontrollers\".</li> <li>Suggestion to use the CMSIS pack from ARM for Cortex-M processor reference manuals.</li> <li>Sharing of a resource, \"The Definitive Guide to Data Structures\" for a deeper understanding of data structures in low-level programming.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-yow-2022","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A-f7md5exaE</p> <ul> <li>Fault tolerance in computing involves designing systems to continue operating despite component failures</li> <li>Unix and Linux are examples of fault-tolerant operating systems, with processes that can be restarted or handled by the OS if they crash</li> <li>Airline reservation systems are designed for fault tolerance with smaller components potentially crashing without causing a system failure</li> <li>Handling errors consistently across programs allows for smooth recovery in case of individual single small failures -To achieve true fault-tolerance, two physically separated machines should be used.</li> </ul>"},{"location":"goto_programming_lang/#scala-implicits-revisited-martin-odersky-yow-2020","title":"Scala Implicits Revisited \u2022 Martin Odersky \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=dr0PUXQhg3M</p> <ol> <li>The talk focuses on a practical programming language experiment with a 25-year-old research paper as inspiration.</li> <li>Key principles include eliminating superfluous punctuation, reducing boilerplate code, and improving flow for writers.</li> <li>The language adopts the concept of immutable data structure called \"flattened trees.\"</li> <li>Elimination of curly braces, semicolons, parentheses, and colons results in a more natural syntax.</li> <li>Experiment includes an IDE and a static type checker.</li> <li>The language introduces a single punctuation mark: ';'.</li> <li>The language eliminates boilerplate code by replacing <code>if</code> statements with prefix notation.</li> <li>The language eliminates braces, allowing the programmer to visually identify scopes through indentation levels.</li> <li>Tooling helps maintain vertical lines on tab stops for region identification.</li> <li>After implementing these changes, the results are considered great in practice.</li> </ol>"},{"location":"goto_programming_lang/#calling-functions-across-languages-richard-feldman-goto-2023","title":"Calling Functions Across Languages \u2022 Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=ZOvxa9aKCCg</p> <ol> <li>Discussion of using other languages alongside Python, highlighting Go (or Rock as a placeholder) for its concurrency and performance benefits.</li> <li>Demonstration of using Pythons ctypes module to call functions in C and C++ libraries, and FFI for Ruby and JS.</li> <li>Explanation of Go's Cgo functionality, which allows for calling C code from Go.</li> <li>Showcase of Cython for compiling Python into C/C++ extensions, resulting in performance improvements.</li> <li>Overview of Rust-Python integration using the Rust bindgen tool and the Rust-Python FFI.</li> <li>Discussion on gradually transitioning to Go by incrementally replacing portions of code without undertaking a high-risk all-or-nothing project.</li> </ol>"},{"location":"goto_programming_lang/#effective-programming-in-ocaml-kc-sivaramakrishnan-yow-2021","title":"Effective Programming in OCaml \u2022 KC Sivaramakrishnan \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=X28PFYvZ_V8</p> <ol> <li>Talk focused on the OCaml programming language and its concurrency improvements.</li> <li>Traditional approaches using channels, co-routines (CSP), and monads were limited in performance or complexity.</li> <li>Fibers introduced as a new concur parallel paradigm.</li> <li>Multicore library implemented with fibers for better performance.</li> <li>FX library offers simpler concurrency constructs such as spawn, forkjoin, and forkmerge.</li> <li>No context issues mentioned explicitly.</li> <li>Work is open-source, available for installation and usage.</li> <li>Numerous examples provided using FX library.</li> <li>Technical papers published on these topics in ICFP and PLDI conferences.</li> </ol>"},{"location":"goto_programming_lang/#hashing-modulo-alpha-equivalence-simon-peyton-jones-yow-2021","title":"Hashing Modulo Alpha Equivalence \u2022 Simon Peyton Jones \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=PltixgJiRrw</p> <ol> <li>Discussion on a paper about finding the number of distinct hash functions in a table with collisions</li> <li>Collision set problem: find the expected number of hash functions that produce collisions when applied to elements from a universe</li> <li>Two main approaches mentioned: a) use linearity to reduce the universe size b) find the maximum number of independent pairs of values and use probabilistic method</li> <li>The presented algorithm is simple yet efficient, solving the collision set problem with formal reasoning and mathematics for improved efficiency in practical applications.</li> <li>The concept seems obvious now but was not initially evident due to time spent searching for a solution.</li> <li>There appears to be a gap in literature on this topic, as mentioned by one of the speakers.</li> </ol>"},{"location":"goto_programming_lang/#zig-build-system-how-to-build-software-from-source-andrew-kelley-goto-2023_1","title":"Zig Build System &amp; How to Build Software From Source \u2022 Andrew Kelley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=vKKTMBoxpS8</p> <ol> <li>The presentation discusses building software from source.</li> <li>Using system packages is often the best way to get software, but sometimes it's outdated or not available.</li> <li>Building from upstream source provides the latest version and can fixme.</li> <li>Zig, a modern programming language, has an advanced build system.</li> <li>The speaker highlights building C++ projects with CMakeLists.txt.</li> <li>Zig's build system simplifies complex build systems like CMake.</li> <li>The speaker showcases building Firefox using Zig.</li> <li>Case studies include OpenSSL and NodeJS.</li> <li>Zig enables cross-platform development.</li> <li>Donations are encouraged through non-profit 501c3 organization, Zig Software Foundation.</li> </ol>"},{"location":"goto_programming_lang/#an-introduction-to-functional-imperative-programming-in-flix-magnus-madsen-goto-2023","title":"An Introduction to Functional Imperative Programming in Flix \u2022 Magnus Madsen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=2LSOqikNqxM</p> <ol> <li>Flex is a new programming language aimed at bridging functional, imperative, and logic programming paradigms.</li> <li>It allows the user to write code in multiple styles within a single expression.</li> <li>It provides unique features like lambda calculus notation, and embedded logic programs.</li> <li>Flex has a visual studio code extension, an online playground, and comprehensive documentation.</li> <li>The language is open-source, ready for early adopters, and its functional and imperative aspects were discussed in detail.</li> <li>Context provided from a presentation about Flex programming language.</li> </ol>"},{"location":"goto_programming_lang/#concurrency-oriented-programming-in-a-modern-world-robert-virding-francesco-cesarini-goto-2023","title":"Concurrency Oriented Programming in a Modern World \u2022 Robert Virding &amp; Francesco Cesarini \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=AvA97AB8cAA</p> <ol> <li>Concurrency is a fundamental concept in modern computing environments.</li> <li>Traditional sequential programming cannot handle the complexity and performance demands of modern systems.</li> <li>Multithreading and multi-core processors are examples of concurrency principles.</li> <li>Asynchronous I/O, message passing, and actors are important concepts for concurrent programming.</li> <li>Concurrent programming is challenging due to complex interactions between components and race conditions.</li> <li>Building a concurrent language as an afterthought can lead to issues.</li> <li>Learning concurrency principles improves one's overall programming skills regardless of the languages used.</li> <li>Adopting concurrent thinking involves unlearning some concepts and re-evaluating how we work with data.</li> </ol>"},{"location":"goto_programming_lang/#why-static-typing-came-back-richard-feldman-goto-2022","title":"Why Static Typing Came Back \u2022 Richard Feldman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=Tml94je2edk</p> <ol> <li>Static typing has gained popularity in recent years, particularly since 2014.</li> <li>The presentation discusses reasons for this trend and predictions for the future.</li> <li>TypeScript, Rust, and Swift are examples of popular statically-typed languages.</li> <li>Static typing offers advantages such as compile-time errors, better tooling, type inference, and better support for large codebases.</li> <li>Dynamic languages like Python and Ruby are still relevant and widely used but have their drawbacks.</li> <li>There's no evidence supporting a resurgence of dynamically typed languages or gradual typing.</li> <li>The speaker predicts continued growth in popularity for statically-typed languages without gradual typing.</li> </ol>"},{"location":"goto_programming_lang/#the-java-agent-modifying-bytecode-at-runtime-to-protect-against-log4j-joe-beeton-goto-2022","title":"The Java Agent: Modifying Bytecode at Runtime to Protect Against Log4J \u2022 Joe Beeton \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=ZrGOv44iTC8</p> <ol> <li>Demonstration of deserialization vulnerability in Java Reflection API</li> <li>Exploitation using arbitrary classes and methods</li> <li>Introduction to RASP (Runtime Application Self-Protection) to patch vulnerabilities</li> <li>Showcase of a custom RASP implementation for deserialization protection</li> <li>Disclaimer not to use the custom RASP in production and recommend using available developer resources and scanning tools from control security for secure software development practices.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-zig-programming-language-linters-andrew-kelley-jeroen-engels-goto-2022","title":"Expert Talk: Zig Programming Language &amp; Linters \u2022 Andrew Kelley &amp; Jeroen Engels \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=zKmZmiOU6qE</p> <ol> <li>The discussion involves Andrej Karpathy, a deep learning researcher, and Jeroen Engels, discussing functional programming and the Zig programming language.</li> <li>They begin with comparing functional languages to relational databases in terms of referential indirection.</li> <li>Engels explains that in Zig, function arguments are passed by value, which can be changed inside a function but doesn't affect the original variable.</li> <li>Karpathy highlights the importance of understanding whether the language has pure or impure functionalities.</li> <li>They discuss the role of linting in catching imperative side effects in Zig and how it could improve with better documentation, type systems, and tooling.</li> <li>Engels mentions that functional programming can lead to simpler code due to the lack of mutation and shared state concerns but adds that it doesn't solve all problems.</li> <li>They touch on the subject of referential transparency in functional languages, which enables parallelism and better testing by removing side effects. </li> <li>Engels describes how data structures in functional programming can be immutable and transformed instead of being modified directly.</li> <li>Karpathy points out that the need for imperative code might arise when dealing with external systems or hardware interaction.</li> <li>They conclude their conversation acknowledging the trade-offs between functional and non-functional languages while appreciating each other's perspectives on programming.</li> </ol>"},{"location":"goto_programming_lang/#deno-the-javascript-runtime-for-the-serverless-era-ryan-dahl-goto-2022","title":"Deno: The JavaScript Runtime for the Serverless Era \u2022 Ryan Dahl \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=VDKJ1rSj-NI</p> <ol> <li>Demonstration of Fresh, a new web framework by Mathias Biilmann and the team at ZEIT.</li> <li>Fresh aims to optimize server-side JavaScript for web development and make it faster than current solutions like Create React App.</li> <li>Fresh focuses on performance, simplicity, and size reduction, with an example app weighing 84 kilobytes compared to larger frameworks.</li> <li>Fresh relies heavily on ZEIT's Next.js and Denode infrastructure in the cloud.</li> <li>The team at ZEIT is actively working on server-side optimizations and hiring new members for development.</li> </ol>"},{"location":"goto_programming_lang/#beam-concurrency-in-action-sasa-juric-yow-2022","title":"BEAM Concurrency in Action \u2022 Sasa Juric \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=A4x6IfceJCM</p> <ol> <li>Comparison between Beam and traditional Unix tools for data processing.</li> <li>Beam uses a pipeline-style approach for managing data flow, with side inputs, windowing, and triggering.</li> <li>Beam offers more control over the process compared to black box solutions like yaml driven CI.</li> <li>In Beam, terminating a process leads to automatic transaction abort due to closed sockets being process-owned.</li> <li>With Beam, distributed systems problems can be handled earlier and more easily using existing patterns and messaging systems.</li> </ol>"},{"location":"goto_programming_lang/#rust-in-action-tim-mcnamara-richard-feldman-goto-2023","title":"Rust in Action \u2022 Tim McNamara &amp; Richard Feldman \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iYJ6bLITZsI</p> <ol> <li>Interview with Tim Parker, co-author of \"Rust in Action\".</li> <li>The book was written during the pandemic as an outlet for Tim's frustration and as a way to engage with the Rust community.</li> <li>The book covers the fundamentals of Rust, emphasizing safety and security.</li> <li>It aims to teach readers how to think like a Rust programmer.</li> <li>Tim shares his experience of balancing writing the book with family and work commitments.</li> <li>He appreciates feedback from the community and acknowledges that the book might not be perfect but serves as a guide for learning Rust.</li> <li>The authors made an effort to make the examples in the book practical, fun, and educational.</li> <li>Tim encourages readers to share their thoughts on the book and offers help through social media or the book's website.</li> <li>He reflects on his writing process, stating that it was a sacrifice with consequences due to time requirements.</li> <li>The conversation concludes with gratitude and appreciation for Tim sharing his experiences in writing \"Rust in Action\".</li> </ol>"},{"location":"goto_programming_lang/#intro-to-the-zig-programming-language-andrew-kelley-goto-2022","title":"Intro to the Zig Programming Language \u2022 Andrew Kelley \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=YXrb-DqsBNU</p> <ol> <li>Zig software Foundation aims to improve the craft of software engineering for everyone in the industry.</li> <li>The presentation showcases the benefits of using Zig's CT plus compiler, toolchain, and build system.</li> <li>It simplifies maintenance for existing projects, even if you don't use the language.</li> <li>Zig is a simple yet powerful programming language, excelling in demanding environments.</li> <li>The number of Zig users is growing rapidly.</li> <li>Consider using or sponsoring Zig if you like its contributions to software engineering. (No context provided beyond the transcript itself.)</li> </ol>"},{"location":"goto_programming_lang/#the-perfect-language-bodil-stokke-yow-2017","title":"The Perfect Language \u2022 Bodil Stokke \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=vnv8MGIN7A8</p> <ol> <li>Explore new languages to gain different perspectives and prevent becoming a machine yourself.</li> <li>Create an open-source project in each language you learn to give back to the community.</li> <li>Attempt to write a compiler or interpreter to understand how languages work under the hood.</li> <li>Try writing your own programming language to fill a unique niche and contribute to the field.</li> <li>Refresh knowledge by learning at least one new language annually for personal growth and better understanding of current developments.</li> <li>Build tools in various languages to enhance proficiency, expand capabilities, and broaden perspectives.</li> <li>Experiment with different paradigms and explore why certain decisions were made in language design. </li> <li>Push yourself beyond your comfort zone by learning esoteric programming languages to challenge your understanding of code.</li> <li>Don't restrict yourself to only popular or practical languages, but rather learn what interests you.</li> <li>Collaborate with others and form a community to share knowledge and experiences in learning new languages.</li> </ol>"},{"location":"goto_programming_lang/#typescript-vs-kotlinjs-eamonn-boyle-garth-gilmour-goto-2022","title":"TypeScript vs KotlinJS \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=GlU8ZyJNI7Q</p> <ul> <li>Kotlin.js allows developers to write frontend code using the Kotlin language</li> <li>Kotlin.js provides type safety and tooling for JavaScript</li> <li>The compiler converts Kotlin code into optimized JavaScript</li> <li>It uses WebAssembly where appropriate, improving performance</li> <li>Kotlin Multiplatform facilitates shared business logic across platforms</li> <li>Kotlin's null safety may save time in the long run as developers won't need to learn it again later</li> <li>Some use cases for kotlin.js include generating HTML or working with non-web apps in manufacturing companies</li> </ul>"},{"location":"goto_programming_lang/#simplifying-systems-with-elixir-sasa-juric-yow-2020","title":"Simplifying Systems with Elixir \u2022 Sasa Juric \u2022 YOW! 2020","text":"<p>URL: https://www.youtube.com/watch?v=EDfm2fVS4Bo</p> <ol> <li>Elixir is a functional language based on Erlang and its BEAM virtual machine.</li> <li>The main concepts include pattern matching, immutability, tail recursion, and processes.</li> <li>Elixir offers simplicity for concurrency through lightweight processes that act as green threads.</li> <li>OTP principles provide fault tolerance and scalability via supervision trees, hot code loading, and error handling.</li> <li>Elixir has a strong focus on tooling with excellent testing capabilities and a REPL environment.</li> <li>It offers support for web development through frameworks like Phoenix.</li> <li>The BEAM approach results in benefits such as reduced gaps between local development and production, testability, and system confidence.</li> <li>The speaker is a fan of Elixir and other BEAM languages after using them in production for 10 years.</li> </ol>"},{"location":"goto_programming_lang/#streamlining-large-scale-java-development-using-error-prone-sander-mak-goto-2022","title":"Streamlining Large-Scale Java Development Using Error Prone \u2022 Sander Mak \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=C5MBsKZHqrY</p> <ol> <li>Presentation about refaster, a tool for converting SQL to Dataform format.</li> <li>Dataform is a configuration-as-code solution for data infrastructure at Picnic.</li> <li>Refaster helps in adopting and migrating to the Dataform syntax, saving time and effort.</li> <li>Refaster is a fork of AirProm, with improvements focused on ease of use and multiple refactoring rules. 5, Refast can be used as a CLI or as part of Picnic's platform team for improvement. (no context provided directly.)</li> </ol>"},{"location":"goto_programming_lang/#interview-with-louis-pilfold-on-elixir-gleam-yow-2022","title":"Interview with Louis Pilfold on Elixir Gleam \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=kDfa7AVeugw</p> <ol> <li>The video features an interview with Louise Hu, a maintainer of the Glean programming language.</li> <li>Glean is a new functional language that aims to be easy to learn and use.</li> <li>It has similarities with Scheme, Racket, Lisp, and Python in terms of syntax and philosophy.</li> <li>Glean emphasizes clarity, safety, simplicity, and being friendly towards beginners.</li> <li>The language's type system allows for easier learning but can cause some limitations.</li> <li>Glean has a dynamic module system that provides access to the standard library without any predefined imports.</li> <li>The language focuses on readability with a strong preference for single-line functions and no semicolons.</li> <li>Glean's community is growing and actively working on improving documentation, tutorials, and tooling.</li> <li>The team aims to make the language easier to install and get started with in the future.</li> </ol>"},{"location":"goto_programming_lang/#full-stack-haskell-from-prototype-to-production-ryan-trinkle-yow-2018","title":"Full-Stack Haskell: From Prototype to Production \u2022 Ryan Trinkle \u2022 YOW! 2018","text":"<p>URL: https://www.youtube.com/watch?v=guhrVxY63tg</p> <ol> <li>Presentation about Obsidian Systems and their projects in Haskell community</li> <li>Introduction to Obsidian's open source package, Obsidian Web</li> <li>Features: Reusable components, type safety, support for server-side rendering, and hot reloading</li> <li>Development of Obsidian Mobile using React Native with GHCJS</li> <li>Motivation to expand the use of Haskell beyond research prototypes into real-world applications in web and mobile development</li> <li>Goal is to make functional programming benefits widely available for significant impact on the world</li> <li>The speaker thanks the audience for their support and encourages continued engagement within the community.</li> </ol>"},{"location":"goto_programming_lang/#building-your-own-compiler-the-slightly-easier-way-with-llvm-erik-corry-yow-2016","title":"Building Your Own Compiler The Slightly Easier Way With LLVM \u2022 Erik Corry \u2022 YOW! 2016","text":"<p>URL: https://www.youtube.com/watch?v=_XbOTRunqHk</p> <ol> <li>Discussed the process of compiling programs into machine code.</li> <li>Explained the need for intermediary representations (IR) during compilation.</li> <li>Introduced LLVM, an open-source compiler infrastructure project.</li> <li>Demonstrated a simple assembler program using LLVM's IR to generate bytecode.</li> <li>Criticized \"Compilers: Principles, Techniques, and Tools (The Dragon Book)\" for not covering SSA form due to its age. Suggested seeking better compiler learning resources.</li> </ol>"},{"location":"goto_programming_lang/#idioms-for-building-fault-tolerant-applications-with-elixir-jose-valim-yow-2021","title":"Idioms for Building Fault-tolerant Applications with Elixir \u2022 Jos\u00e9 Valim \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=mkGq1WoEvI4</p> <ol> <li>Elixir talk overview: language background, unique features, and community growth</li> <li>Erlang VM (BEAM) allows for concurrency through lightweight processes and message passing</li> <li>Elixir is a functional programming language with pattern matching, immutability, and lazy evaluation</li> <li>Elixir's syntax resembles Ruby while retaining the power of Erlang</li> <li>Community growth: 100K+ stars on GitHub, 2000+ libraries, and yearly conferences</li> <li>Popular companies using Elixir: Pinterest, WhatsApp, Moz, Bleacher Report, Netflix, and Udacity</li> <li>Elixir's adoption in education: curriculum in universities and free online resources</li> <li>Alexa language rankings: Elixir consistently ranked above Ruby, Swift, Scala, and Go</li> <li>Pinterest case study demonstrates server cost savings of over $2 million per year after converting to Elixir.</li> </ol>"},{"location":"goto_programming_lang/#a-tour-of-the-modern-java-platform-james-ward-ryan-knight-goto-2022","title":"A Tour of the Modern Java Platform \u2022 James Ward &amp; Ryan Knight \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=BU_zIpQI5Dg</p> <ol> <li>The talk discusses modern Java ecosystem tools and advancements.</li> <li>Quarkus allows for fast startup times, high throughput, and small memory footprints in cloud-native environments.</li> <li>GraalVM supports polyglot programming, enabling the execution of different languages within a single virtual machine.</li> <li>Native image converts Java applications to native binaries without requiring a JRE or JDK for runtime, leading to faster startup times throughput memory footprint cloud-native environment runtime language virtual machine native binary java application jre jdk polyglot programming.</li> <li>Demo shows GraalVM running JavaScript and Python within Quarkus's context.</li> <li>The speaker shares GitHub link for code examples.</li> <li>No additional questions were asked during the transcript.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-f-50-beyond-don-syme-yow-2021","title":"What\u2019s New in F# 5.0 &amp; Beyond \u2022 Don Syme \u2022 YOW! 2021","text":"<p>URL: https://www.youtube.com/watch?v=1cqvmiaj6SI</p> <ol> <li>F# is a functional-first, object-oriented, and component-based language.</li> <li>Distinguish between functions (pure) and methods (impure).</li> <li>Use immutable data structures to simplify reasoning about state.</li> <li>Functional programming promotes clarity, simplicity, and readability in code.</li> <li>Embrace some elements of object programming while rejecting OOP's downsides.</li> <li>Learn from both functional and imperative paradigms.</li> <li>Recommendation for learning F# is through a low-cost Udemy course.</li> </ol>"},{"location":"goto_programming_lang/#spring-boot-up-running-mark-heckler-thomas-vitale-goto-2022","title":"Spring Boot: Up &amp; Running \u2022 Mark Heckler &amp; Thomas Vitale \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=F0BJiE2LnpQ</p> <ol> <li>Discussion on the book \"The Soul of a New Machine\" by Tracy Kidder with Thomas Claburn and Mark Heckler.</li> <li>The book is centered around a team at Data General in the 1980s trying to create a new computer.</li> <li>It provides insight into the challenges, culture, and personalities involved in software development during that era.</li> <li>The book's relevance still holds for modern-day developers despite technological advancements.</li> <li>Thomas Claburn shares his connections to the book through his father, who was a computer engineer at Data General.</li> <li>Mark Heckler and Thomas first met on Twitter, a platform they both enjoy engaging with for networking and news sharing.</li> <li>The book can be found in various formats and locations, including online platforms and physical copies.</li> <li>Both guests encourage following Mark Heckler on Twitter to discuss topics like software development and books related to it.</li> </ol>"},{"location":"goto_programming_lang/#the-quick-python-book-naomi-ceder-luciano-ramalho-goto-2022","title":"The Quick Python Book \u2022 Naomi Ceder &amp; Luciano Ramalho \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7CwmUmQjvYg</p> <ol> <li>Naomi Ceder and Anka Wittenberg introduced Go To: Python by discussing its focus on the Python programming language and its community.</li> <li>They highlighted Guido van Rossum's influence and involvement in previous events.</li> <li>The conference aims to bring together academic researchers, industry experts, and open-source developers for discussions on new ideas and opportunities.</li> <li>Naomi Ceder proposed a session about Python as an embedded language in applications like AutoCAD and Mathematica, showcasing its versatility.</li> <li>Anka Wittenberg suggested discussing how Python is used in the scientific community with the library thing, emphasizing a need for improving the interpreter's performance rather than deep changes to the language itself.</li> <li>A recent PEP proposes redesigning the Python runtime, but there hasn't been significant discussion around it yet.</li> <li>The conference offers both in-person and online participation; use promo code \"book club\" when registering at gotopia.tech for upcoming events.</li> </ol>"},{"location":"goto_programming_lang/#growing-together-with-the-beam-stavros-aronis-hans-nahringbauer-code-beam-2022","title":"Growing Together with the BEAM \u2022 Stavros Aronis &amp; Hans Nahringbauer \u2022 Code BEAM 2022","text":"<p>URL: https://www.youtube.com/watch?v=OXlC6f8indM</p> <ol> <li>Presentation about Ace, a Swedish telecom operator software</li> <li>Origins in the early 90s as an internal project for management of network elements</li> <li>Initial challenges included lack of tools and programming language to handle concurrent connections</li> <li>Erlang adopted for its fault-tolerant features and scalability</li> <li>Development team has remained stable, with many members staying over 20 years</li> <li>Success factors include a strong team, early adoption of cloud services, and the use of Erlang</li> <li>Ace has offices in Sweden, Finland, and Lithuania, with around 250 employees and an ongoing search for additional Erlang developers to expand the team.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-whats-next-for-net-hannes-lowette-martin-thwaites-goto-2022","title":"Expert Talk: What\u2019s Next For .NET? \u2022 Hannes Lowette &amp; Martin Thwaites \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzywu1ol-b8</p> <ol> <li>The discussion focuses on the history and future of .NET as a development platform.</li> <li>Mark's involvement with .NET since its inception as a response to Java.</li> <li>Evolution from Windows-only to cross-platform capabilities.</li> <li>The significance of open sourcing .NET and contributions from various communities.</li> <li>The role of managed code and garbage collection in making .NET developer-friendly.</li> <li>Challenges of modernizing legacy applications for optimal performance on new hardware.</li> <li>Advancements in observability and metrics to revolutionize monitoring production codes.</li> <li>Excitement about the future of .NET, its speed, and ability to adapt to changing technological demands.</li> </ol>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2021","title":"Life After Business Objects: Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Q2p_iqjfekI</p> <ol> <li>Presentation on functional programming in an insurance company context.</li> <li>Introduction to F# language for type-safe code, simplicity, and conciseness.</li> <li>Use of F# for data processing, data analysis, reporting, and ML models.</li> <li>Moving from traditional OOP approach to a more functional style using F#.</li> <li>Utilization of immutable lists and tuples in F#.</li> <li>Discussion on public members versus private fields and functions for encapsulation.</li> <li>Transition to immutable data structures like Option type or Result type for error handling.</li> <li>Incorporation of functional patterns such as map, filter, reduce, etc. for manipulating collections.</li> <li>Emphasis on writing tests for unit checking.</li> <li>Adoption of FsUnit library for unit testing and type checking benefits.</li> <li>Integration of F# with .NET framework, SQL Server, Excel, and Power BI tools.</li> <li>Use of Apache Spark in a big data environment with Scala and PySpark alongside FSharp.Data package.</li> <li>Implementing functional style for ML models development using ML libraries for F#.</li> <li>Introduction to the concept of monads in the context of insurance claims processing.</li> <li>Integration of functional programming into the existing legacy code base through gradual adoption approach.</li> <li>Use of functional paradigm with Akka.NET library for distributed computing tasks.</li> <li>Publication of F#-based open source project called <code>FSharp.Climate</code> on GitHub as a contribution to climate modeling research.</li> <li>Conversion of legacy code from imperative style to functional programming using pattern matching, recursion, and lambda expressions in F#.</li> <li>Discussion of the choice between Clojure and F# languages, with the author preferring F# for its .NET integration capabilities and familiarity with Visual Studio IDE.</li> <li>Sharing of contact details with readers interested in functional programming or seeking to adopt it within their organizations.</li> </ol>"},{"location":"goto_programming_lang/#ready-for-rust-erik-doernenburg-goto-2021","title":"Ready for Rust \u2022 Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=WgLlwjZNEtY</p> <ol> <li>Rust is a systems programming language that aims to provide safety and speed.</li> <li>The talk presented an overview of the Rust ecosystem, tools, libraries, and community resources.</li> <li>Cargo is the package manager for the Rust ecosystem and provides dependency management, documentation, testing, and publishing features.</li> <li>There are various types of crates (Rust packages), including library, binary, example, benchmark, and workspace metadata.</li> <li>Rust has a strong community and provides resources such as official documentation, book, videos, and events like Hacktoberfest.</li> <li>The Rust compiler enforces type safety to prevent common programming errors.</li> <li>LLVM is a low-level virtual machine used by multiple languages, including Rust, leading to potential speed improvements for Rust.</li> <li>An example showcased that under certain conditions, Rust can be faster than C in a specific benchmark scenario.</li> </ol>"},{"location":"goto_programming_lang/#fail-kevlin-henney-goto-2021","title":"#FAIL \u2022 Kevlin Henney \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Lc13xKEJZTc</p> <ol> <li>Discussion on the importance of learning from past failures and successes in safety management.</li> <li>Lessons can be drawn from multiple industries, such as aviation, healthcare, and manufacturing.</li> <li>The Reason Why (Rasmussen) model highlights three systems: organizational, technical, and human factors.</li> <li>Aviation's Just Culture concept balances accountability with learning from mistakes.</li> <li>UK</li> <li>Safety-Science (SSS) framework helps identify root causes of incidents.</li> <li>Examples from aviation, healthcare, and mining demonstrate.</li> <li>SHARP program for US mining industry encourages reporting accidents to learn.</li> <li>Healthcare failures lead to thousands of preventable deaths annually.</li> <li>Learning from past safety failures leads to safer environments for individuals and companies.</li> <li>Historical observations highlight the lack of learning from history by people or governments.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-grpc-kubernetes-net-mark-rendle-matt-turner-goto-2022","title":"Expert Talk: gRPC, Kubernetes &amp; .NET \u2022 Mark Rendle &amp; Matt Turner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vzqzLSJWo3k</p> <ol> <li>Discussion on the most significant technological advancements in the last decade, including smartphones and mobile data revolutionizing communication and access to information.</li> <li>The role of the internet and social media platforms such as Facebook and Twitter in connecting people globally.</li> <li>Importance of cryptocurrencies like Bitcoin in decentralizing money systems and their potential for significant economic disruption.</li> <li>Advances in Artificial Intelligence, leading to voice recognition technology, facial recognition, self-driving cars, and machine learning applications.</li> <li>The double-edged sword aspect of these technologies, highlighting both the benefits and potential negative consequences.</li> <li>Need for ethical considerations as we continue developing AI and related technologies.</li> <li>Brief discussion on the future of quantum computing and its implications on security, data encryption, and advancements in various fields. </li> <li>The debate surrounding gene editing techniques like CRISPR and their potential to eradicate genetic diseases while raising ethical concerns.</li> <li>Discussion on technological advances in medicine, such as prosthetics and bionic limbs that can be controlled by the mind.</li> <li>Mention of space exploration advancements, including reusable rockets like SpaceX's Falcon 9 and missions to Mars.</li> <li>The rise of streaming services and their impact on media consumption, as well as their implications for industries like television and film production.</li> <li>Discussion on the ongoing revolution in renewable energy and its potential to combat climate change by reducing our reliance on fossil fuels. </li> <li>Brief mention of the YouTuber's upcoming video focusing on technological mistakes, such as the existence of null in computing systems.</li> </ol>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2021","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3PmPkZJ22Cc</p> <ol> <li>Stefan's website rebuild focused on improving accessibility and performance using HTML, CSS, and a minimal amount of JavaScript for functionality only.</li> <li>He shared his journey from being a JavaScript-driven developer to embracing a lighter approach with a better user experience.</li> <li>The site received a green lighthouse score due to the lack of slowing elements like large JavaScript bundles.</li> <li>Stefan encourages developers to use whatever technology they enjoy but advises considering trade-offs associated with different choices.</li> <li>The emphasis should be on building functional websites that work well, rather than focusing solely on trendy technologies.</li> <li>Slides from the presentation are available at Stefan's website, which he owns and promotes.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-native-vs-cross-platform-sebastiano-poggi-carl-gustaf-harroch-goto-2022","title":"Expert Talk: Native vs Cross-Platform \u2022 Sebastiano Poggi &amp; Carl-Gustaf Harroch \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=cNXDpl-rfrM</p> <ol> <li>Discussion about the Flutter framework for mobile app development, its features, and community support.</li> <li>Comparison with Swift for iOS development.</li> <li>Explanation of Dart, the programming language used in Flutter.</li> <li>Flutter's cross-platform capabilities.</li> <li>Sebastiano Poggi shares his views on mobile app development trends.</li> <li>Comparison between Flutter and React Native.</li> <li>Importance of being familiar with multiple platforms for developers.</li> <li>Possible future collaborations between Google and Apple, focusing on similar mindsets and technologies.</li> </ol>"},{"location":"goto_programming_lang/#programming-language-stereotypes-pj-hagerty-goto-2021","title":"Programming Language Stereotypes \u2022 PJ Hagerty \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3o_nCe67wA4</p> <ol> <li>Addressing diversity and inclusion in tech requires self-evaluation to identify biases.</li> <li>Forget about common myths, legends or stereotypes associated with specific roles within the industry.</li> <li>Mentor and support people who don't resemble you, specifically those underrepresented groups.</li> <li>Bringing in more diverse perspectives leads to better technology creations.</li> <li>Focus on building great things in tech while promoting diversity and inclusion principles.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-functional-programming-russ-olsen-christian-romney-goto-2022","title":"Expert Talk: Functional Programming \u2022 Russ Olsen &amp; Christian Romney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=AbCWHZljhkM</p> <ol> <li>Russ Olsen discusses his book \"Functional Thinking\" and its aim to help readers understand functional programming concepts without diving into specific syntax or languages.</li> <li>Functional thinking emphasizes breaking down a problem into smaller parts, focusing on data rather than side effects.</li> <li>Key concepts include immutability, referential transparency, lazy evaluation, higher-order functions, and recursion.</li> <li>Russ shares the idea of \"functional first,\" trying to approach problems using functional techniques before reaching for imperative or object-oriented approaches.</li> <li>He advises readers interested in learning functional programming languages like Haskell or Clojure, while considering a language they are already familiar with.</li> <li>To better grasp functional concepts, Russ suggests writing code by hand to visualize data flow.</li> <li>As an exercise for viewers, Russ proposes solving the Tower of Hanoi puzzle using functional techniques without looking up any solutions.</li> <li>Russ recommends picking up a functional programming language and reading his book \"Functional Thinking.\"</li> </ol>"},{"location":"goto_programming_lang/#live-coding-a-dashboard-with-ksql-python-javascript-kris-jenkins-goto-2021","title":"Live-Coding a Dashboard with KSQL, Python &amp; JavaScript \u2022 Kris Jenkins \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=8bPDiuJGGh0</p> <ol> <li>Discussion on real-time data streaming and its growing significance in the technology world.</li> <li>Kafka as a powerful tool for streaming live data.</li> <li>Demonstration of building a simple real-time dashboard using Kafka, Confluent, Node.js, and React.</li> <li>Code examples for live streaming data.</li> <li>Encourages developers to understand and use Kafka in their systems for handling live real-time data in motion.</li> <li>Highlights the importance of events happening right now due to their current nature.</li> <li>Q&amp;A session follows the presentation.</li> </ol>"},{"location":"goto_programming_lang/#expert-talk-web-development-its-failures-kevlin-henney-stefan-judis-goto-2021","title":"Expert Talk: Web Development &amp; Its Failures \u2022 Kevlin Henney &amp; Stefan Judis \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=jQ0_bIVhkLk</p> <ol> <li>The transcript is a discussion among software developers about naming issues context: none (indicates no specific context provided).</li> <li>They mention encountering Kevlin Henny, likely an inside joke or recurring occurrences in their daily lives.</li> <li>Topics include fixing broken screens, navigating through construction areas using GPS, and dealing with real-world issues.</li> <li>The developers share their experiences on the way to a conference.</li> <li>They express enjoyment from participating in this conversation while emphasizing the importance of communicating and learning from each other's expertise.</li> </ol>"},{"location":"goto_programming_lang/#the-ideal-programming-language-richard-feldman-erik-doernenburg-goto-2021","title":"The Ideal Programming Language \u2022 Richard Feldman &amp; Erik Doernenburg \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=MPyUvtPFDSg</p> <ol> <li>Discussion on the usage and perception of Elm in the programming community, compared to JavaScript, TypeScript, React, and WebAssembly.</li> <li>Evan Czaplicki's background as a co-founder of Prezi and how it led him to create Elm.</li> <li>Elm's focus on simplicity, safety, and productivity, with no runtime errors and automatic type inference.</li> <li>The challenge of introducing new developers to functional programming concepts and how Elm eases the learning curve.</li> <li>Elm's popularity compared to TypeScript in terms of usage and GitHub stars, and its positioning between pure FP languages like Haskell and imperative languages like JavaScript or C.</li> <li>The use of Elm in large-scale production projects such as Basecamp 3 and the BBC newsletter.</li> <li>Elm's growing community, active maintainers, and consistent releases every two years.</li> <li>Elm's approach to web development with a focus on HTML, CSS, and JavaScript interoperability through porting techniques.</li> <li>The lack of a large ecosystem for Elm compared to TypeScript or JavaScript, but its strength in core libraries and the community-driven package manager.</li> <li>Evan's belief that Elm can gain more adoption by embracing WebAssembly and improving mobile app development capabilities through native compilation.</li> </ol>"},{"location":"goto_programming_lang/#programming-now-then-eamonn-boyle-garth-gilmour-goto-2021","title":"Programming: Now &amp; Then \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=52jnUWrO9i8</p> <ol> <li>Discussion between a host and Stephen Wolfram, founder of Wolfram Research and creator of the Mathematica software.</li> <li>Wolfram shares his early interest in computers and programming at age 10.</li> <li>He developed an interest in fundamental theories from a young age while studying physics, mathematics, biology, etc.</li> <li>Wolfram developed Mathematica with the aim to solve problems across various disciplines using computational thinking.</li> <li>The program evolved through iterations and has applications in fields like quantum mechanics, cryptography, AI, etc.</li> <li>Wolfram describes his work as a \"philosophical quest\" to understand the universe at its most basic level. </li> <li>Both parties discuss their shared perspective of approaching problems from fundamental principles.</li> <li>Host expresses interest in learning coding and Wolfram encourages finding a good teacher for that purpose.</li> </ol>"},{"location":"goto_programming_lang/#erlang-the-hidden-gem-solving-problems-at-scale-for-30-years-francesco-cesarini-goto-2021","title":"Erlang, the Hidden Gem: Solving Problems at Scale for 30+ Years \u2022 Francesco Cesarini \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-m31ag9z4VY</p> <ol> <li>The talk discusses Erlang and its BEAM (Binary Efficient Architecture-Machined Code) virtual machine.</li> <li>BEAM was designed with fault tolerance in mind, allowing it to handle crashes without halting the entire system.</li> <li>Erlang code is compiled into bytecode and interpreted by BEAM, ensuring portability across various platforms.</li> <li>The BEAM team focuses on making the virtual machine scalable for multiple architectures while maintaining speed and lock-free operations.</li> <li>New versions of BEAM can significantly improve program performance without needing to change Erlang code or upgrade hardware.</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-for-pragmatists-richard-feldman-goto-2021","title":"Functional Programming for Pragmatists \u2022 Richard Feldman \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=3n17wHe5wEw</p> <ol> <li>Presentation discussing functional programming (FP) and its benefits compared to imperative programming.</li> <li>FP's focus on side-effect free functions, immutability, composition, and referential transparency.</li> <li>Benefits include easier reasoning about programs, simpler testing, increased concurrency support, and reduced memory usage.</li> <li>Drawbacks include learning curve, potential confusion with asynchronous behavior, and ecosystem challenges.</li> <li>Advocates for choosing functional programming as a pragmatic choice in most professional scenarios due to its advantages.</li> </ol>"},{"location":"goto_programming_lang/#modernizing-enterprise-java-markus-eisele-natale-vinto-ana-maria-mihalceanu-goto-2021","title":"Modernizing Enterprise Java \u2022 Markus Eisele, Natale Vinto &amp; Ana-Maria Mihalceanu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=tSjCFMSp9oY</p> <ol> <li>Markus and Natale, authors of \"Reactive Systems with the Actor Model,\" join the GOTO Book Club session.</li> <li>The book teaches developers how to design reactive systems using the actor model.</li> <li>Topics covered include concurrency, scalability, resilience, and non-blocking I/O.</li> <li>The actors model is an essential part of a reactive system.</li> <li>The book focuses on Java for readability and familiarity to developers.</li> <li>It's suggested as required reading for university students.</li> <li>The authors are praised for creating an excellent resource for the modern world, particularly for Java developers in enterprise apps sectors.</li> <li>Markus and Natale thank the GOTO Book Club for hosting them and bid farewell to the participants.</li> </ol>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2021","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9p60bBBpG6A</p> <ul> <li>Topic: Comparing JavaScript and Kotlin for frontend web development</li> <li>JSX simplifies writing JavaScript for UI</li> <li>Kotlin Multiplatform Mobile brings in more Java developers to the Kotlin ecosystem</li> <li>Kotlin's null safety feature is a significant improvement over JavaScript</li> <li>Improvements like better tooling, web bindings, and JSX implementation could make Kotlin even more appealing</li> <li>Jetpack Compose can unify UI layout for Android, desktop, and web with one DSL language</li> <li>The availability of Jetpack Compose for various platforms could be a game changer for frontend developers using both languages.</li> </ul>"},{"location":"goto_programming_lang/#how-to-read-complex-code-felienne-hermans-goto-2021","title":"How to Read Complex Code? \u2022 Felienne Hermans \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=az-MX_M11lg</p> <ol> <li>Presentation on \"Reading and Understanding Code: Techniques and Tools\" by Sandi Metz.</li> <li>The brain processes code in a non-linear manner, unlike natural language.</li> <li>Techniques to improve code comprehension include:      a. Reading aloud to engage multiple cognitive systems.     b. Summarizing the code to internalize its meaning.     c. Refactoring to simplify and clarify logic.</li> <li>The Memory Model concept can help self-diagnose understanding issues in code.</li> <li>Resources for learning more: Twitter (@sandimetz), website (felina.com), SE Radio podcast, book \"Practical Object-Oriented Design in Ruby\", and Felina's site for reading club resources.</li> </ol>"},{"location":"goto_programming_lang/#java-security-the-java-ecosystem-nicolas-frankel-goto-2021","title":"Java Security &amp; the Java Ecosystem \u2022 Nicolas Frankel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uVob-4aXbxY</p> <ol> <li>Discussion on the history of Java versions and release cadence, focusing on the impact of Sun Microsystems acquisition by Oracle in 2010.</li> <li>Concerns regarding the rapid pace of releases since Java 9, leading to potential fragmentation among developers and installations.</li> <li>Shift from biannual updates to yearly updates with LTS support since Java 8 update 201 (Java SE 8).</li> <li>Critique on Oracle's management of the Java Development Kit (JDK), leading to pessimism in the future of Java.</li> <li>Call for checking out a talk addressing these concerns, despite being slightly outdated at the time of conversation.</li> </ol>"},{"location":"goto_programming_lang/#accessiblejs-jemima-abu-goto-2021","title":"AccessibleJS \u2022 Jemima Abu \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=9SFSJDIg4KE</p> <ol> <li>Talk highlights the importance of accessibility in web development with JavaScript.</li> <li>Key points include using semantic HTML, aria attributes and focus management.</li> <li>Semantic HTML provides meaning to elements, improving screen reader experiences.</li> <li>ARIA (Accessible Rich Internet Applications) allows defining roles for custom components.</li> <li>Tabbable elements should have a clear tab order.</li> <li>Focus styles can help users navigate pages easily.</li> <li>Utilize event delegation and document fragments to avoid memory performance optimization techniques.</li> <li>Talk concludes with relevant resources, and invites questions or connections via the presenter's website, LinkedIn, or Twitter.</li> </ol>"},{"location":"goto_programming_lang/#object-oriented-programming-vs-functional-programming-dave-farley-goto-2021","title":"Object Oriented Programming vs Functional Programming \u2022 Dave Farley \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-VADIcicpcg</p> <ol> <li>The video discusses software development and its history, including the rise of object-oriented (OO) design in the 90s.</li> <li>Function, a Steve Allen K context is absent, implying 'no context' for summarization.</li> <li>Critiques of current OO practices are presented.</li> <li>Suggestions to improve software development include:     a. Limiting synchronicity through better abstractions and protocols.     b. Favoring more loosely-coupled systems.     c. Adopting ideas closer to Allen Kay's 60's vision (reactive manifesto).     d. Exploring hybrid designs combining functional and OO approaches.     e. Discarding overuse of inheritance and polymorphism in favor of composition.     f. Emphasizing simplicity and clarity by reducing the number of abstractions.     g. Encouraging viewer feedback for exploring these ideas further in future videos.</li> </ol>"},{"location":"goto_programming_lang/#explosive-velocity-with-a-modern-stack-tejas-kumar-goto-2021","title":"Explosive Velocity with a Modern Stack \u2022 Tejas Kumar \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=KTkyQ3z7M8w</p> <ol> <li>Building a real-time data-driven website with Next.js and Hasura</li> <li>Separating concerns for frontend, backend, and database</li> <li>Using Prisma to define schema and create auto-generated types</li> <li>Setting up Next.js with Hasura for real-time updates</li> <li>Utilizing strongly-typed tools like VS Code and TypeScript for predictability and velocity</li> <li>Prioritizing user experience through auto completion suggestions from editors</li> <li>Outsourcing concerns to Heroku (for database) and Hasura (as a GraphQL engine) </li> </ol> <p>(no context provided directly in input))</p>"},{"location":"goto_programming_lang/#functional-programming-through-the-lens-of-a-philosopher-linguist-anjana-vakil-goto-2021","title":"Functional Programming Through the Lens of a Philosopher &amp; Linguist \u2022 Anjana Vakil \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=0kI-as3K4Zo</p> <ol> <li>Discussion on functional programming and its evolution in the last decade.</li> <li>Advancements in tooling and type systems enabling more approachable functional programming.</li> <li>The role of immutability, referential transparency, and higher-order functions in functional programming.</li> <li>Emphasis on the conceptual benefits and mental models instead of focusing solely on syntax.</li> <li>Importance of understanding mathematical concepts to better comprehend functional programming principles.</li> <li>Comparisons between imperative and declarative paradigms.</li> <li>The impact of curation on educational materials and resources for learning functional programming.</li> <li>Hope for in-person conferences to facilitate philosophical discussions about programming and its teachings.</li> </ol>"},{"location":"goto_programming_lang/#the-power-performance-of-phoenix-liveview-geoffrey-lessel-goto-2021","title":"The Power &amp; Performance of Phoenix LiveView \u2022 Geoffrey Lessel \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-Rl-26JJ6js</p> <ol> <li>Presentation summary: Demonstrated how to set up real-time updates in Phoenix LiveView using a simple counter application.</li> <li>Steps included creating a basic Phoenix application, adding LiveView, defining live views, and implementing the view with some JavaScript.</li> <li>The project can be found on GitHub under 'jeffgeerling/phoenix_liveview_counter' and its code is organized into distinct steps for easy understanding.</li> <li>The speaker shared social media handles: Twitter, blog (jeffreylessol.com), and YouTube channel where they cover Elixir topics, including LiveView.</li> </ol>"},{"location":"goto_programming_lang/#svelte-web-app-development-reimagined-mark-volkmann-goto-2021","title":"Svelte - Web App Development Reimagined \u2022 Mark Volkmann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=4CGzFwHoD0A</p> <ol> <li>Presentation covers a comparison between popular JavaScript frameworks: Angular, React, Vue, and Svelte.</li> <li>Angular is a full-stack framework with TypeScript support for strong type checking and an opinionated approach to application structure.</li> <li>React focuses on declarative rendering, virtual DOM for optimization, and a large ecosystem of libraries and plugins.</li> <li>Vue combines the best features from Angular and React, providing flexibility, simplicity, and scalability.</li> <li>Svelte is a relatively new framework that emphasizes code readability, smaller bundles, and improved developer experience through reactive programming.</li> <li>The speaker suggests checking out resources on each framework and their books \"Svelte in Action\" and \"Sapper in Action.\"</li> </ol>"},{"location":"goto_programming_lang/#command-line-the-underestimated-tool-bert-jan-schrijver-goto-2021","title":"Command-line, The Underestimated Tool \u2022 Bert Jan Schrijver \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=bWDuXAQJX8Y</p> <ol> <li>Importance of learning and practicing Unix commands for software development, system administration, and DevOps roles.</li> <li>Familiarity with basic commands like cd (change directory), ls (list files/directories), pwd (print working directory), man (manual pages), and grep (search for a pattern).</li> <li>Utilization of Unix tools such as sed, awk, and tr for data transformation and manipulation.</li> <li>Use of pipelines to combine multiple commands for enhanced functionality.</li> <li>Benefits from automating tasks with scripts written in bash or python.</li> <li>Tracing problems in remote environments by visibly observing tests run in containers on cloud environments using tools like tmux, screen, and ssh.</li> <li>Encouragement to practice Unix commands regularly for improvement and retention of knowledge. (no context provided beyond the transcript).</li> </ol>"},{"location":"goto_programming_lang/#a-beginners-guide-to-ebpf-programming-with-go-liz-rice-goto-2021","title":"A Beginner's Guide to eBPF Programming with Go \u2022 Liz Rice \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=uBqRv8bDroc</p> <ol> <li>Demonstration of creating a BPF program to track system calls using Golang and C.</li> <li>Modification of sysenter tracepoint from \"printk\" to \"raw_tracepoint\".</li> <li>Goal to replicate the 'vps' script functionality in user space without BCC or eBPF tools.</li> <li>Attachment of raw tracepoints for specific system calls, such as read and write.</li> <li>Observation of recreated system call counters after executing the modified code.</li> <li>Potential to attach to various trace points and utilize BPF helper functions for more complex analysis.</li> <li>Full code available on GitHub with hope for audience questions or engagement.</li> </ol>"},{"location":"goto_programming_lang/#from-objective-c-to-swift-and-the-latest-innovations-at-apple-daniel-h-steinberg-goto-2019","title":"From Objective-C to Swift and the Latest Innovations at Apple \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=qynCRtJlV8I</p> <ol> <li>Discussion on Apple's Worldwide Developers Conference (WWDC)</li> <li>Introduction of Swift programming language</li> <li>Comparison between Objective-C and Swift</li> <li>Focus on WWDC announcements: Silicon Macs, iOS 15 updates, and macOS Monterey</li> <li>Discussion about Apple's chip development and integration</li> <li>Speculations about future Apple hardware releases</li> <li>Emphasis on Swift package manager enhancements</li> <li>Predictions for third-party tools like Carthage and CocoaPods as first-party application gains functionality</li> <li>Mention of in-person classes taught by the speaker across Europe.</li> </ol>"},{"location":"goto_programming_lang/#the-jamstack-book-brian-rinaldi-raymond-camden-goto-2021","title":"The Jamstack Book \u2022 Brian Rinaldi &amp; Raymond Camden \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=x0RoXonhldk</p> <ol> <li>Ray and Chris discuss their book \"The Jamstack\" and the concept of Jamstack websites.</li> <li>The book covers various case studies, technologies like Gatsby, Eleventy, and Next.js, and CDNs.</li> <li>Jamstack sites are faster, more secure, and cost-effective due to separating data and logic from presentation layers.</li> <li>The authors encourage readers to explore different tools in the booklet.</li> <li>They suggest buying multiple copies of \"The Jamstack\" for oneself and loved ones.</li> <li>Legos (toys) are expensive.</li> <li>Ray wants more books sold so he can buy more Death Star Lego sets.</li> </ol>"},{"location":"goto_programming_lang/#graphql-anywhere-our-journey-with-graphql-mesh-schema-stitching-uri-goldshtein-goto-2021","title":"GraphQL Anywhere - Our Journey With GraphQL Mesh &amp; Schema Stitching \u2022 Uri Goldshtein \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=2vwlkJnaV0Y</p> <ol> <li>Presentation focuses on GraphQL's potential beyond frontend development.</li> <li>GraphQL can be used for backends, APIs, and data infrastructure.</li> <li>GraphQL enables building flexible and resilient systems with less code.</li> <li>The talk covers various use cases of GraphQL in different scenarios: backend APIs, serverless functions, and data discovery.</li> <li>GraphQL's flexibility allows for easy integration with existing systems without breaking changes.</li> <li>A case study demonstrates how a company switched from REST to GraphQL while maintaining the same URL structure.</li> <li>The introduction of GraphQL Hive enabled unified data view across different services, even when not using GraphQL at runtime.</li> </ol>"},{"location":"goto_programming_lang/#should-kotlin-be-your-go-to-language-garth-gilmour-eamonn-boyle-goto-2019","title":"Should Kotlin Be Your Go-To Language? \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=FcrkrsxYigM</p> <ol> <li>The conversation focuses on understanding the role of performance in software development, particularly for junior developers.</li> <li>The panelists discuss that performance is critical but often underestimated by developers, leading to poor user experiences and increased costs.</li> <li>They emphasize that although modern technology provides optimizations, it's important for developers not to ignore performance issues entirely.</li> <li>The sweet spot between neglecting and overly focusing on performance must be found for most developers working on typical projects.</li> <li>Discussions around performance include topics like garbage collection strategies in various programming languages and complex optimization layers within the JVM.</li> </ol>"},{"location":"goto_programming_lang/#erlang-elixir-blockchain-serverless-what-ulf-wiger-sasa-juric-eric-johnson-goto-2019","title":"Erlang, Elixir, Blockchain &amp; Serverless\u2026 What?! \u2022 Ulf Wiger, Sasa Juric &amp; Eric Johnson \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=2QNA6uaBHY4</p> <ol> <li>Discussion on Erlang and Elixir programming languages.</li> <li>Erlang developed at Ericsson for telecommunications systems in 1986.</li> <li>Erlang's main feature - concurrent processes with built-in fault tolerance.</li> <li>Elixir based on Erlang with modern language features like macros, patterns, and better syntax.</li> <li>Both languages used for building scalable real-time distributed systems.</li> <li>Comparison between Erlang and Elixir: <ul> <li>Syntax: Elixir more readable and approachable to newer developers.</li> <li>Functional programming principles shared by both languages.</li> <li>Support for parallelism and concurrency.</li> <li>No context provided for summarizing unrelated content.</li> </ul> </li> </ol>"},{"location":"goto_programming_lang/#did-web-development-lose-the-right-direction-stefan-judis-goto-2020","title":"Did We(b Development) Lose the Right Direction? \u2022 Stefan Judis \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=0Vtoblyq8fE</p> <ol> <li>Stefan judged web projects in a front-end contest and faced issues with large JS frameworks leading to slow performance.</li> <li>He switched from React to Vue due to smaller bundle size but still struggled with performance.</li> <li>Stefan moved to static site generators, specifically Gatsby, which improved page speed significantly.</li> <li>He built his personal website using Gatsby and achieved a perfect green lighthouse score and better user experience.</li> <li>Stefan believes front-end developers should focus on building sites that just work without overemphasizing the technology used.</li> </ol>"},{"location":"goto_programming_lang/#life-after-business-objects-confessions-of-an-oop-veteran-vagif-abilov-goto-2020","title":"Life After Business Objects - Confessions of an OOP Veteran \u2022 Vagif Abilov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=UBUYwpDl3-g</p> <ol> <li>Presentation about a banking project using F# functional programming language for back-end services.</li> <li>Switch from C# to F# due to its excellent support for domain modeling and declarative coding style.</li> <li>F#'s algebraic data type facilitates clear and precise modeling.</li> <li>Simplified code with fewer bugs, faster deployment of features.</li> <li>Compact F# code typically works after compilation.</li> <li>Significant reduction in the number of failing unit tests after switching to functional programming.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2020","title":"Upgrade Time: Choose Java 11+ or the \u201cOther\u201d One\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=BcVOvdrFaPY</p> <ol> <li>Setup Gradle and Kotlin plugin for the application</li> <li>Migrate Java classes to Kotlin using the JetBrains migration assistant </li> <li>Review and fix any potential issues from the migration</li> <li>Write unit tests using JUnit5, Mockito, and Kotlin Test extensions</li> <li>Replace Java-specific imports with Kotlin ones (e.g., import org.junit.Test to import kotlinx.serialization.Serializable)</li> <li>Rewrite configuration classes (e.g., replace @Configuration with @SpringBootApplication annotation)</li> <li>Convert data objects from Java Beans to data classes in Kotlin</li> <li>Migrate integration tests using Kotlin's Spock framework and Mockito</li> <li>Run the application, ensuring it starts properly after all changes </li> <li>Successfully completed the migration from Java to Kotlin</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-java-will-you-have-to-pay-for-it-trisha-gee-daniel-bryant-goto-2019","title":"The Future of Java: Will You Have to Pay For It? \u2022 Trisha Gee &amp; Daniel Bryant \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=W-_5AV2qZXs</p> <ol> <li>Discussion on the term \"developer skills\" and its shift to emphasize a broader skillset beyond technical abilities.</li> <li>Importance of communication, empathy, collaboration, and business understanding for developers.</li> <li>Senior developers often possess better problem-solving and questioning abilities compared to juniors.</li> <li>The need for developers to develop a range of skills including technical, communication, and business acumen to succeed in the industry.</li> <li>Different companies have different requirements for developers and value unique skill sets and personalities.  (no context provided)</li> </ol>"},{"location":"goto_programming_lang/#programming-kotlin-why-how-its-future-venkat-subramaniam-hadi-hariri-goto-2021","title":"Programming Kotlin: Why, How &amp; Its Future \u2022 Venkat Subramaniam &amp; Hadi Hariri \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=7J2ATE4NGZ8</p> <ol> <li>Discussion about Venkat Subramaniam's new book \"Graduating from GoTo: The Roadmap for Senior Developers\"</li> <li>Transitioning from junior to senior developer role</li> <li>Emphasis on communication, leadership, and coaching skills for senior developers</li> <li>Venkat's motivation to write the book based on his experiences and observation of industry trends</li> <li>Graduating from GoTo concept refers to moving from a single technology or team specialization to broader expertise</li> <li>Importance of soft skills like empathy and emotional intelligence in the development field</li> <li>The book offers practical advice, real-life examples, and exercises for senior developers</li> <li>Discussion on Groovy and the Go programming language</li> <li>Venkat's involvement with the GoTo team at GoToConference</li> <li>GoToConference focuses on bringing together experts in software development</li> <li>Upcoming edition of \"Graduating from GoTo\" to include more examples and exercises.</li> <li>Book Club promotion code 'book club'.</li> <li>Venkat Subramaniam is a prominent figure in the programming community.</li> <li>The Groovy language has evolved into the GraalVM platform.</li> <li>Discussion on GoTo team's work on the Go programming language.</li> </ol>"},{"location":"goto_programming_lang/#a-typescript-fans-kotlinjs-adventures-eamonn-boyle-garth-gilmour-goto-2020","title":"A TypeScript Fan's KotlinJS Adventures \u2022 Eamonn Boyle &amp; Garth Gilmour \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Si3z82PEB5o</p> <ul> <li>Kotlin JS is a JavaScript interoperable module</li> <li>It allows developers to write frontend code using Kotlin</li> <li>Mixing with JavaScript possible, but not always recommended for large projects due to type checking and other benefits of Kotlin</li> <li>Type inference makes it more readable than TypeScript</li> <li>Gradle support ensures similarities between backend and frontend build processes</li> <li>Type erasure can cause issues, requiring explicit type annotations for nullability</li> <li>Future improvements include better code emitting, bundle size optimization, automatic generation of TypeScript definition files, and WebAssembly targeting.</li> </ul>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kQEu1VsrG44</p> <ol> <li>To optimize code performance, use the CPU profiler to analyze time-consuming methods.</li> <li>Start with the slowest method and understand its functionality.</li> <li>Identify potential issues causing inefficiencies in code by reviewing algorithms and data structures.</li> <li>Make necessary changes to improve the algorithm or data structure for better performance.</li> <li>In this specific example, removing unnecessary array creation resulted in a 2x improvement in performance.</li> <li>The compiler can't optimize certain aspects, so human intervention is crucial for optimal performance tuning.</li> <li>Constantly review and update code to ensure it remains efficient with changing requirements or environment changes.</li> <li>Understand the trade-off between simplicity and efficiency in choosing data structures and algorithms.</li> <li>Always use the CPU profiler when faced with slow code, even if you suspect a specific issue. </li> <li>The JIT compiler might not be able to optimize all cases automatically.</li> </ol>"},{"location":"goto_programming_lang/#97-things-every-java-programmer-should-know-trisha-gee-kevlin-henney-goto-2020","title":"97 Things Every [Java] Programmer Should Know \u2022 Trisha Gee &amp; Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=T47k2tHXmOA</p> <ol> <li>The discussion revolves around Go To's latest book, \"The Book of Troubleshooting\", and its format containing small chunks of knowledge.</li> <li>It aims to challenge readers' perspectives by presenting various views on issues without providing definitive answers.</li> <li>The co-authors aimed for balance in the book regarding different opinions on topics like remote work.</li> <li>To get the most out of the book, readers should explore it fully without expecting clear resolutions. They can subscribe to Go To's YouTube channel and attend conferences using the promo code from the book club on gotopia.tech.</li> </ol>"},{"location":"goto_programming_lang/#secrets-of-the-shenandoah-garbage-collector-stephanie-crater-goto-2020","title":"Secrets of the Shenandoah Garbage Collector \u2022 Stephanie Crater \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=WcSqLvxwzbA</p> <ul> <li>Discussion on the Netflix Tech Blog post about their microservice architecture evolution</li> <li>Moving from monolithic to service-based approach, addressing concerns such as scalability and resilience</li> <li>Concept of a \"stout\" stack, where services have broad responsibilities and can communicate with multiple data stores</li> <li>Importance of choosing the right level of encapsulation for microservices based on context and optimization goals</li> <li>Example of shelves not needing to know why they aren't holding things or if they are favored, as long as they perform their primary function effectively.</li> <li>Key metrics like pause time, throughput, latency, and overall Shenandoah optimization should guide decisions in microservice design rather than simply improving visual dashboards or graphs.</li> </ul>"},{"location":"goto_programming_lang/#gradually-adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Gradually Adopt GraphQL Without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=DWBL7GLMVsY</p> <ul> <li>GraphQL is a query language for APIs that provides better (humor)</li> <li>Introducing GraphQL on the front-end is easier and encourages solving common issues</li> <li>Benefits include simpler code, improved developer experience, and enhanced customization of responses</li> <li>Execution can be moved to other services like service-to-service communication</li> <li>Tool like GraphQL Mesh allows starting execution on front-end products, optimizations, and moving it to other services later. (no context provided directly in the transcript.)</li> </ul>"},{"location":"goto_programming_lang/#facts-you-may-not-know-about-kotlin-eugene-petrenko-goto-2020","title":"Facts You May Not Know About Kotlin \u2022 Eugene Petrenko \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=XwzStZaDpH0</p> <ol> <li>Presentation highlights Kotlin, a JVM language with type inference and smart casts for efficient coding.</li> <li>Kotlin supports functional programming concepts such as higher-order functions, lambda expressions, and extension functions.</li> <li>The null safety feature in Kotlin reduces common mistakes related to NullPointerExceptions.</li> <li>The reified generic feature allows working with type parameters at runtime.</li> <li>Smart constructors allow easy object creation without boilerplate code.</li> <li>Kotlin Multiplatform Mobile (KMM) enables developers to share code across platforms like Android and iOS.</li> <li>Kotlin can enhance the coding experience by using fun keywords in multi-platform programming.</li> <li>The speaker encourages questions at the end of the presentation. (no context provided directly in the transcript.)</li> </ol>"},{"location":"goto_programming_lang/#memory-efficient-java-kirk-pepperdine-goto-2020_1","title":"Memory Efficient Java \u2022 Kirk Pepperdine \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sE_dv7piOZg</p> <ol> <li>Demonstration of the class index feature using a JMH benchmark to profile memory usage</li> <li>Two objects involved: Benchmark and BenchmarkInner</li> <li>BenchmarkInner object has a reference to a Benchmark outer class object</li> <li>Testing three scenarios: no inner class, default access modifier, and package-private access modifier for the inner class</li> <li>JDK 14 shows that Score also appears in the profile, which was unexpected and might be a regression</li> <li>The application runtime drops to approximately 12 seconds after optimizations are made.</li> </ol>"},{"location":"goto_programming_lang/#elixir-in-action-sasa-juric-erik-schoen-goto-2020","title":"Elixir in Action \u2022 Sasa Juric &amp; Erik Schoen \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=-bCkha6U70o</p> <ol> <li>Go To's \"A practical guide to cloud native development\" book release and reception</li> <li>The book discusses principles of cloud native technologies without getting too technical or focusing on specific products</li> <li>It covers concepts, tools, and practices to develop cloud-native applications in various stacks and environments</li> <li>The author wanted it to be accessible for readers with different backgrounds and skills</li> <li>The book has received positive feedback from readers and grew organically through recommendations</li> <li>Feedback from unsolicited sources is the most rewarding experience for the author. </li> <li>Link provided to subscribe to Go To's YouTube channel, attend upcoming conferences with a promo code, and learn more at gotopia.tech.</li> </ol>"},{"location":"goto_programming_lang/#next-generation-programming-rust-elm-richard-feldman-goto-2020","title":"Next-Generation Programming: Rust &amp; Elm \u2022 Richard Feldman \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=ukVqQGbxM9A</p> <ol> <li>Comparison of Elm and Rust programming languages.</li> <li>Elm is a functional language for building front-end applications with static typing and strong type system.</li> <li>Rust is a systems language designed for safety, speed, and concurrency.</li> <li>Elm has better tooling for web development compared to TypeScript.</li> <li>Rust excels in the back-end space due to its flexibility, and safety guarantees.</li> <li>Both languages have excellent community support with learning resources available.</li> <li>Elm's type system results in less code, while Rust might require more boilerplate code.</li> <li>Elm has a smaller standard library, while Rust offers broader capabilities.</li> <li>Elm prioritizes simplicity and ease-of-use for beginners, while Rust aims at safety and control.</li> <li>Both languages feature type systems with strong guarantees, reducing common bugs in software development.</li> </ol>"},{"location":"goto_programming_lang/#maximizing-java-application-performance-with-graalvm-oleg-selajev-goto-2020","title":"Maximizing Java Application Performance with GraalVM \u2022 Oleg \u0160elajev \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=PeMvksAZbdw</p> <ol> <li>GraalVM is a high performance, polyglot VM developed at Oracle Labs.</li> <li>It targets faster execution and smaller memory footprints compared to JDK.</li> <li>GraalVM can run languages like Python, Ruby, JavaScript, C/C++, R, and more.</li> <li>It's used by large companies such as Twitter, Netflix, Uber, and Capital One for various purposes.</li> <li>Oracle has an enterprise edition called Oracle Runway based on GraalVM.</li> <li>The project is open-source and encourages participation in its ecosystem.</li> </ol>"},{"location":"goto_programming_lang/#bootiful-graphql-with-kotlin-dariusz-kuc-goto-2020","title":"Bootiful GraphQL with Kotlin \u2022 Dariusz Kuc \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1siPT1pTXFU</p> <ol> <li>Introduction to GraphQL Resolvers and asynchronous handling in JavaScript.</li> <li>Traditional resolver blocks the thread while fetching data, leading to slower execution.</li> <li>Using functions instead of properties in resolvers improves performance.</li> <li>Library requires minimal setup with single dependency.</li> <li>Library generates schema from source code.</li> <li>Annotations provide documentation and directives.</li> <li>Native support for Promises allows writing fully asynchronous code.</li> <li>Comprehensive examples and documentation available on GitHub pages.</li> </ol>"},{"location":"goto_programming_lang/#html-how-to-make-loveliness-bruce-lawson-goto-2020","title":"HTML: How to Make Loveliness \u2022 Bruce Lawson \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=L83LVfhTbzg</p> <ol> <li>Tim Berners-Lee highlights the web's impact on people worldwide, not just computers or technology.</li> <li>The web has empowered individuals in areas such as education, healthcare, and political freedom.</li> <li>Examples include African women, a blind man in Toronto, Bangladeshi bus passengers, a Taiwanese lady in a wheelchair, Cambodian farmer and granddaughter, and a New York Metro passenger.</li> <li>The industrial revolution took 50 years to have the same impact as today's web in terms of progress for all people.</li> <li>Web users should pay forward its benefits, acknowledging it is about humanity and not just technology.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-flows-and-channels-for-android-ryan-pierce-goto-2020","title":"Kotlin Flows and Channels for Android \u2022 Ryan Pierce \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=xch4aw7hNcY</p> <ol> <li>Three ways to implement a user list application using LiveData and Coroutines with Flow.</li> <li>First method involves LiveData, data binding adapter, and view model to create a ListView.</li> <li>Observe users from the UserLiveData stream and add each user to the List Adapter.</li> <li>Second method uses Flow and lifecycle scope with custom coroutine builder \"launchWhenCreated\".</li> <li>As users are collected by the collect operator, they're added to the adapter.</li> <li>Flow is reactive, suspending when there are no values and resuming with new values.</li> <li>A cleaner version of the second method uses the launchIn lifecycle scope and adds the user through an onEach statement.</li> </ol> <p>Note: Transcript provided, summarized accordingly. Context provided.</p>"},{"location":"goto_programming_lang/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ol> <li>Ray Talk overview: scalable programming for data-intensive workloads, with a unified framework for parallelism and concurrency.</li> <li>Ray integrates well with Python ecosystem tools such as Dask, XGBoost, and Scikit-learn.</li> <li>Ray provides transparent resource management to help maintain consistent performance during heavy loads.</li> <li>Ray's Actors enable concurrent execution without the need for explicit threading or process management.</li> <li>Ray's Task Schedulers handle resource allocation and scheduling for parallel execution, eliminating the need for complex task queues.</li> <li>Ray provides built-in resilience through task checkpointing and automatic restart functionality.</li> <li>Migration to Ray involves using drop-in replacements for multi-threading libraries with a new import statement that allows scaling across clusters.</li> </ol>"},{"location":"goto_programming_lang/#adopt-graphql-without-writing-any-backend-code-uri-goldshtein-goto-2020","title":"Adopt GraphQL without Writing any Backend Code \u2022 Uri Goldshtein \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=1bJ_M_v-tso</p> <ol> <li> <p>Three approaches to GraphQL implementation:    a. Backend-only integration (server and SDKs)    b. Frontend-only integration (Apollo Client with queries and mutations)    c. Combined frontend and backend usage (GraphQL-CodeGen for auto-generated SDKs)</p> </li> <li> <p>Benefits of GraphQL include flexibility, better UX, better cache management, easier scaling, and reduced API calls.</p> </li> <li> <p>Frontend-centric approach using GraphQL allows quick adoption with existing sources, customizations, and gradual migration deeper into the stack.</p> </li> <li> <p>The speaker recommends starting with frontend usage of GraphQL to see its benefits in action and gradually remove manual code by using markdown style for output.</p> </li> </ol>"},{"location":"goto_programming_lang/#the-magic-of-music-matching-roy-van-rijn-goto-2020","title":"The Magic of Music Matching \u2022 Roy van Rijn \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=8Dj0rekeM7g</p> <ol> <li>Exploration of music recognition technology using Python and NumPy libraries.</li> <li>Calculation of Dynamic Time Warping (DTW) distances between audio fingerprints from two songs.</li> <li>Shazam and SoundHound use DTW to match audio signatures with their database.</li> <li>Development of a simple, working music matcher in Python.</li> <li>Fingerprinting can be used for copyright infringement detection but not directly applicable to speech recognition.</li> <li>Room for improvement in the algorithm as library size grows larger.</li> </ol>"},{"location":"goto_programming_lang/#making-mutants-work-for-you-henry-coles-goto-2019","title":"Making Mutants Work for You \u2022 Henry Coles \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=LoFJajoJQ2g</p> <ol> <li>The speaker discusses mutation testing, a form of fault-based testing.</li> <li>Mutation testing involves modifying code to intentionally introduce defects and assessing if the test suite catches these new errors.</li> <li>It can be used for unit tests, acceptance tests, and integration tests.</li> <li>The speaker mentions various languages and frameworks that support mutation testing.</li> <li>Mutation testing supports approximately 20 different languages and frameworks like Python, C++, Ruby, Java, .NET, and JVM.</li> <li>The speaker highlights some limitations of mutation testing like poor support for multi-threaded code and non-deterministic behavior.</li> <li>They encourage the audience to follow sister, a related resource.</li> <li>Mutation coverage is used as a metric to measure how much of the system is covered by the test suite.</li> <li>The speaker briefly lists supported languages during lunchtime without vouching for their efficacy (Go, Scala, Clojure, Typescript, Rust, Swift).</li> <li>Lastly, they encourage following them on Twitter.</li> </ol> <p>no context (the provided text is a transcript of a conference presentation)</p>"},{"location":"goto_programming_lang/#an-introduction-to-jvm-performance-rafael-winterhalter-goto-2020","title":"An Introduction to JVM Performance \u2022 Rafael Winterhalter \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=wgJWs14YcEs</p> <ol> <li>The speaker begins by apologizing for technical issues and background noise.</li> <li>They introduce themselves as Ruthie Guo, a security researcher and community builder.</li> <li>They thank the event organizer for the invitation to speak about their journey in open source and infosec.</li> <li>Ruthie talks about how they got involved with infosec due to curiosity and a desire to protect others online.</li> <li>They mention their experience at Defcon, BSides, HackerOne, and Google Summer of Code.</li> <li>The speaker shares their passion for open source projects, particularly Bite Buddy, which they collaborate on with a Russian coach.</li> <li>Ruthie finishes by encouraging listeners to connect with them through Twitter (@rufflecoats) and their website. They also thank the audience for attending virtually amidst pandemic concerns.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-4-vs-scala-3-garth-gilmour-eamonn-boyle-goto-2020","title":"Kotlin 4 vs. Scala 3 \u2022 Garth Gilmour &amp; Eamonn Boyle \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=sIL4mduqHe0</p> <ol> <li>The video discusses a comparison between Scala and Kotlin programming languages.</li> <li>Scala is statically-typed, general-purpose, object-oriented, and functional language developed in 2003 by Martin Odersky.</li> <li>Kotlin originates from JetBrains as an interoperable language for the Android platform.</li> <li>Both languages share syntax similarities with Java, but have different approaches to type systems.</li> <li>Scala is more complex and difficult to learn for beginners due to its polymorphism, implicits, higher-order functions, and operator overloading features.</li> <li>Kotlin aims at making programming easier through features like coroutines and null safety.</li> <li>Both languages have their pros and cons depending on the project scale or mentoring junior developers.</li> <li>Personal preference, environment (Kickstarter vs enterprise), and collaboration with friends play a role in choosing between Scala and Kotlin.</li> </ol>"},{"location":"goto_programming_lang/#you-really-dont-need-all-that-javascript-i-promise-stuart-langridge-goto-2019","title":"You Really Don't Need All that JavaScript, I Promise \u2022 Stuart Langridge \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=rxlJRydqmk8</p> <ol> <li>The web is an open standard, allowing for creativity and innovation.</li> <li>Web standards are a living document, constantly evolving to adapt to new technologies.</li> <li>Browsers must follow the specification to provide a level playing field for developers.</li> <li>Polyfills can help bring emerging features to users before full standardization.</li> <li>Balance between staying ahead of web standards and ensuring compatibility is essential.</li> <li>The web is a powerful tool for knowledge sharing, connecting people, and building the largest repository of information known.</li> </ol>"},{"location":"goto_programming_lang/#scaling-up-an-ios-codebase-tjeerd-int-veen-goto-2019","title":"Scaling up an iOS Codebase \u2022 Tjeerd In't Veen \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=n09omYo_QPk</p> <ol> <li>Importance of understanding software dependencies and managing them effectively.</li> <li>Three types of version numbers: major, minor, and patch.</li> <li>Semantic Versioning guidelines for consistent release numbering.</li> <li>Challenges in dependency management and the impact of breaking code or releasing major updates.</li> <li>Package managers such as Cargo, CocoaPods, npm, Maven, Gradle, Bower, NUGet, and SPM discussed and their applicability based on projects' needs.</li> <li>The speaker shares a link to their book published by Manning with a discount offer.</li> </ol>"},{"location":"goto_programming_lang/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ol> <li>Demonstration of a real-world example using Node.js and Circuit Breaker pattern to handle unresponsive microservices.</li> <li>The circuit breaker pattern consists of four states: Open, Closed, Half-Open, and Hybrid state.</li> <li>A real-life service (Shopify) is made unavailable through Fiddler during the demo.</li> <li>Circuit Breaker strategy using the opengyre/circuitbreaker library in Node.js.</li> <li>Exploration of a simple REST API (shopify) and an order service using Shopify's APIs.</li> <li>The circuit breaker pattern ensures that unresponsive microservices do not bring down other services or the entire system bypassing them when unavailable.</li> <li>Circuit Breaker implementation in Node.js involves setting up a shopify API client, an order service, and a broker service.</li> <li>Broker service uses circuit-breaker pattern to call unresponsive order service while still working with responsive shopify service.</li> <li>In practice, developers should play around with the provided source code for better understanding of Circuit Breaker patterns in microservices architecture.</li> </ol>"},{"location":"goto_programming_lang/#building-secure-react-applications-philippe-de-ryck-goto-2019","title":"Building Secure React Applications \u2022 Philippe De Ryck \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=O91hJJ5KMLs</p> <ul> <li>Transcription includes a mix of Dutch and English phrases and words.</li> <li>Topics discussed include river levels, updating applications, voting booths, Persephone multi dat, Saturnus, Flint roles, Twitter dislikes, securities, and ministry questions.</li> <li>Acknowledgments and thank you messages are present at the end.</li> <li>Applause is heard at the conclusion.</li> <li>No specific context is provided.</li> </ul>"},{"location":"goto_programming_lang/#nullable-reference-types-in-c-8-jon-skeet-goto-2019","title":"Nullable Reference Types in C# 8 \u2022 Jon Skeet \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=1tpyAQZFlZY</p> <ol> <li>Nullable reference types in C# 8 and above add annotations to variables to indicate whether they can be null or not.</li> <li>The compiler generates warnings for possible null reference issues, prompting developers to fix them.</li> <li>Enabling nullable reference types does not alter the IL (intermediate language) code's behavior; it only highlights potential issues.</li> <li>It is an iterative process to address and eliminate these warnings for cleaner and safer code.</li> <li>This feature enables better communication between developers by indicating expected nullability within code.</li> <li>The speaker emphasizes the need for greater diversity in the tech community.</li> </ol>"},{"location":"goto_programming_lang/#how-java-scala-are-imitating-functional-languages-maurice-naftalin-jose-paumard-goto-2019","title":"How Java &amp; Scala are Imitating Functional Languages \u2022 Maurice Naftalin &amp; Jos\u00e9 Paumard \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=e6n-Ci8V2CM</p> <ol> <li>Discussion on programming language features: static typing vs. dynamic typing</li> <li>Typescript's evolution and its adoption by large organizations like Microsoft and Facebook</li> <li>Java being cautious about adding new features due to a large number of users and the difficulty in removing them later</li> <li>Lambdas, an addition to Java that seemed to stand the test of time despite their conservative approach</li> <li>Comparison between TypeScript's rapid evolution and Java's more cautious approach</li> <li>Both approaches have advantages depending on specific circumstances.</li> </ol>"},{"location":"goto_programming_lang/#the-future-of-machine-learning-javascript-asim-hussain-goto-2019","title":"The Future of Machine Learning &amp; JavaScript \u2022 Asim Hussain \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vfmGII9mGmY</p> <ol> <li>Presentation about Generative Adversarial Networks (GANs) and their real-world applications.</li> <li>GANs create new images by learning from existing data and generating - humor.</li> <li>MoJoFire, a fake fire, demonstrating GAN capabilities.</li> <li>Possible real-world uses: anti-aging, face swapping.</li> <li>Example of creating celebrity photos by combining features.</li> <li>Potential risks associated with deepfakes and its ethical implications.</li> <li>Tutorials available for learning about Mojo fire and slack bot creation in Tensfor Js.</li> <li>Upcoming book titled \"Touch the Machine Line with Tensfor Js\".</li> <li>Attendees encouraged to take a picture of the book title to stay updated on its release.</li> <li>Context provided for learning more about GANs and their implementation step by step. If no context is given, write 'no context'.</li> </ol>"},{"location":"goto_programming_lang/#whats-new-in-swift-daniel-h-steinberg-goto-2019","title":"What\u2019s New in Swift \u2022 Daniel H Steinberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6P-nh3uNnsQ</p> <ol> <li>The video discusses new features in Swift 5.5.</li> <li>Pattern matching for optionals introduces a simpler and safer way to unwrap optional values.</li> <li>Switch case patterns can now match against multiple cases, allowing for more concise code.</li> <li>The <code>withExpression</code> property wraps code within a closure while keeping the original scope alive.</li> <li>Associated value default initializers simplify struct and enum creation by providing default values for specific properties.</li> <li>A new decimal type for numbers with decimal points adds convenience methods for common operations.</li> <li>Decimal's <code>rounded(to:)</code> method allows users to specify the number of places for rounding.</li> <li>Swift 5.5 includes several features inspired by SwiftUI and combines them for improved functionality.</li> </ol>"},{"location":"goto_programming_lang/#kotlinnative-the-good-the-bad-and-the-ugly-ellen-shapiro-goto-2019","title":"Kotlin/Native: The Good, The Bad, and the Ugly \u2022 Ellen Shapiro \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JHUY1Ckmo64</p> <p>Error</p>"},{"location":"goto_programming_lang/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ol> <li>Erlang as a programming language for blockchain and decentralized applications.</li> <li>Features of Erlang: concurrency, distribution, fault tolerance, soft real-time properties (PROP) and high availability (HA).</li> <li>PROP and HA enabled by message passing between processes.</li> <li>QuickCheck tool for property-based testing in Erlang.</li> <li>Eternity blockchain project with open-source state channel.</li> <li>Cubic quick check tool not open source, but equivalent tools exist for other languages like proper in Erlang.</li> <li>Whole Eternity blockchain or state channel is open source.</li> <li>Foundation and incubators provide grants to those interested in contributing to the project.</li> </ol>"},{"location":"goto_programming_lang/#a-veterans-guide-to-transitioning-android-teams-into-kotlin-g-gilmour-e-boyle-goto-2019","title":"A Veterans Guide To Transitioning Android Teams Into Kotlin \u2022 G. Gilmour &amp; E. Boyle \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=ocCE3s9j-9A</p> <ol> <li>The video features a discussion with members of the Cortland team and their experiences with the programming language.</li> <li>Cortland is a systems programming language based on C++, designed for safety, portability, and high performance.</li> <li>It emphasizes safety through memory protection, type system, and other mechanisms to catch errors at compile-time.</li> <li>Portability is ensured by supporting multiple platforms (e.g., Linux, Windows, macOS), architectures (x86, ARM), and compilers.</li> <li>Cortland aims for high performance by generating efficient code without sacrificing safety or portability.</li> <li>The team highlights their experience with Cortland's simplicity, ease-of-use, and efficiency compared to C++.</li> <li>They also mention the advantages in agile development, faster sprints, less code review, and version control management.</li> <li>Ultimately, these benefits provide a competitive edge for the company through customer satisfaction and happiness.</li> </ol>"},{"location":"goto_programming_lang/#upgrade-time-choose-java-11-or-the-other-onekotlin-paulien-van-alst-goto-2019","title":"Upgrade Time: Choose Java 11 or the \u201cother\u201d one\u2026Kotlin \u2022 Paulien van Alst \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VX3UBvwJtyA</p> <ol> <li>Introduction to test pyramid concept and its importance in testing strategies</li> <li>Test pyramid consists of four layers: Unit tests, Integration tests, Service/System tests, and Acceptance tests</li> <li>Unit tests focus on smallest parts of code, ensuring individual functions work correctly</li> <li>Integration tests verify the interaction between components, ensuring they function as expected when connected</li> <li>Service/System tests at service or system level, simulating real-world scenarios</li> <li>Acceptance tests check the functionality of an application from the user's perspective</li> <li>Unit tests should make up around 60% to 90% of total tests</li> <li>Integration tests should be a significant portion of the test pyramid as they uncover interdependent bugs</li> <li>Service/System and Acceptance tests are expensive in terms of time and resources, but necessary for broader system checks</li> <li>Test pyramid aims to strike a balance between coverage and efficiency, avoiding testing blind spots.  (no context provided in the input transcript)</li> </ol>"},{"location":"goto_programming_lang/#kotlin-dissecting-the-stdlib-huyen-tue-dao-goto-2019","title":"Kotlin: Dissecting the stdlib \u2022 Huyen Tue Dao \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=uCMuGVh7W_0</p> <ol> <li>Colin Gillespie discussed the usage of Kotlin for Android development.</li> <li>He mentioned that Kotlin is now used by more than 70% of new and existing projects on Jetpack Compose.</li> <li>Kotlin's null safety features provide a cleaner and safer codebase.</li> <li>Kotlin coroutines simplify concurrency, making the code easier to read and test.</li> <li>The new experimental sealed classes can be used for constructing state machines in Jetpack Compose projects.</li> <li>Colin shared an example of using sealed classes for a countdown clock feature.</li> <li>He advised exploring Kotlin's open-source code and adapting its techniques to improve readability and functionality.</li> </ol>"},{"location":"goto_programming_lang/#life-after-java-8-trisha-gee-goto-2019","title":"Life After Java 8 \u2022 Trisha Gee \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eBuFzQeiGe0</p> <ol> <li>Presentation discusses Java release cadence and its impact on version updates and support.</li> <li>Long Term Support (LTS) versions released every three years, with regular releases every six months.</li> <li>Oracle Java 8 End-of-PublicUpdates (EOPU) in January 2019 and OpenJDK LTS supported until December 2026.</li> <li>Faster release cadence means quicker deprecation and removal of methods, resulting in more pain for developers if they don't keep up.</li> <li>Suggestion to upgrade to at least Java 11 and stay updated through continuous integration or test environments.</li> <li>Resources include slides, videos, reading materials, and articles on migrating to newer versions.</li> </ol>"},{"location":"goto_programming_lang/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <ol> <li>Spring Framework 5.3 features: WebFlux, Reactive programming, and better integration with Kotlin.</li> <li>WebClient for making reactive HTTP calls using Flux and Mono types.</li> <li>Reactor WebFilter to intercept requests in a non-blocking manner.</li> <li>A new WebTestClient for testing reactive endpoints.</li> <li>Spring Boot 2.3 supports Kotlin coroutines through the kotlinx-coroutines library, enabling easier migration from blocking calls to non-blocking ones.</li> <li>Two options for removing \"magic\": remove controllers and migrate routes or use Bean DSL and no longer rely on reactive programming.</li> <li>Spring continues to embrace Kotlin as a preferred language.</li> <li>Recommendation to read the presenter's blog, follow them on Twitter, and play with the provided repository for better understanding.</li> </ol>"},{"location":"goto_programming_lang/#it-really-is-easier-to-ask-for-forgiveness-than-permission-naomi-ceder-goto-2019","title":"It Really is Easier to Ask for Forgiveness (than Permission) \u2022 Naomi Ceder \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=SYrVZR_g718</p> <ol> <li>Pythonic code prioritizes readability and simplicity over performance.</li> <li>Explicit is better than implicit: clearly define variables, functions, and comments.</li> <li>Flat is better than nested: avoid deeply nested structures for easier comprehension.</li> <li>Sparse is better than dense: use whitespace and newlines to enhance readability.</li> <li>Dict Comprehensions can replace complex loops for efficient data generation.</li> <li>List Comprehensions are preferable over map/filter combinations for list operations.</li> <li>Avoid working to avoid exceptions, as Python interpreter handles them efficiently.</li> <li>While aiming for better readability and simplicity in code, understand that performance may be sacrificed in some cases.</li> </ol>"},{"location":"goto_programming_lang/#rust-2018-access-all-areas-florian-gilcher-goto-2019","title":"Rust 2018: Access All Areas \u2022 Florian Gilcher \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=sCSfyQYDImM</p> <ol> <li>Rust is a systems language focused on safety, speed, and correctness.</li> <li>It's built to replace C and C++ in many domains due to memory safety (repeated for emphasis).</li> <li>Rust offers guarantees with no runtime semantics except for threads.</li> <li>Simple runtime semantics allow usage across any area of a product.</li> <li>Rust is used for IOT sector, covering small devices to service systems.</li> <li>Simplicity in Rust's memory model and runtime enables it for any domain in a product.</li> </ol>"},{"location":"goto_programming_lang/#reasonml-react-as-a-language-and-what-the-future-looks-like-peter-piekarczyk-goto-2019","title":"ReasonML: React as a Language and what the Future looks like \u2022 Peter Piekarczyk \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xGN4BMPbk7Q</p> <ol> <li>Presentation about ReasonML, a functional language from Facebook developed alongside React Native</li> <li>Reason combines OCaml's type system with JS syntax, allowing developers to write both front and back-end code in one language</li> <li>Type inference ensures correctness of code while writing, reducing the need for boilerplate</li> <li>Reason allows for easier debugging due to better error messages and type safety</li> <li>The community is still small but growing rapidly as it gains traction with developers</li> <li>React faced similar criticism when first introduced, but eventually gained widespread adoption</li> <li>Recommendation to try out Reason and give it a chance to potentially gain the same popularity as React.</li> </ol>"},{"location":"goto_programming_lang/#achieving-functional-programming-in-java-john-napier-goto-2019","title":"Achieving Functional Programming in Java \u2022 John Napier \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=VUH_HhAaNpc</p> <ol> <li>Presentation on Functional I/O in Rust using Lambda library</li> <li>Explanation of the Lambda library as an FFI binding to PureScript's Effect type</li> <li>Discussion of Rust's synchronous and asynchronous operations, and how they can be combined in a monadic fashion</li> <li>Demonstrations of using Lambda for functional I/O</li> <li>Explanation of the IO monad to perform I/O operations within context provided or 'no context'</li> <li>Introduction to computational effects like logging and tracing</li> <li>Discussion of using bind() and ap() functions to chain I/O operations</li> <li>Overview of Lambda's features like reading from stdin, writing to stdout, working with files, timers, spawning threads, and network sockets</li> <li>Demonstration on how to use the bind() function in a real-world example</li> <li>Concept of monadic bind allowing for composing asynchronous operations</li> <li>Lambda being released under the MIT license with support available via GitHub issues and chat channels. Encouragement to rate this session honestly.</li> </ol>"},{"location":"goto_programming_lang/#embracing-the-future-in-a-multi-platform-world-a-kotlin-story-sean-mcquillan-goto-2019","title":"Embracing the Future in a Multi-Platform World: A Kotlin Story \u2022 Sean McQuillan \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=xilI3dIOJfI</p> <ol> <li>Kotlin talk overview: language evolution, major versions, and future plans.</li> <li>Major features introduced in Kotlin 1.3 include coroutines for simplifying asynchronous programming and null safety for eliminating null pointer exceptions.</li> <li>Coroutine examples demonstrated through a Sudoku solver application.</li> <li>Multiplatform Kotlin enables developers to share app logic across iOS, Android, JVM, and Native (C/C++). It's still in beta phase but can help solve multi-threading issues and Heisenbugs.</li> <li>Attendees encouraged to check out a real sampling project showcasing cross-platform ios and android development.</li> </ol>"},{"location":"goto_programming_lang/#server-side-kotlin-with-coroutines-roman-elizarov-goto-2019","title":"Server-side Kotlin with Coroutines \u2022 Roman Elizarov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=hQrFfwT1IMo</p> <ol> <li>Promise-based asynchronous programming is the standard way to write asynchronous code in JavaScript.</li> <li>Promises simplify error handling and concurrency management compared to callbacks.</li> <li>A promise represents an operation that might fail or succeed and can have three states: pending, fulfilled, and rejected.</li> <li>The then() method defines what should happen when a promise is resolved (fulfillment handler) or rejected (rejection handler).</li> <li>Chaining promises allows you to execute several asynchronous operations sequentially with ease.</li> <li>Promise anti-pattern: Nesting promises within .then() callbacks, leading to difficult-to-read code and poor performance.</li> <li>Async/await is a syntactic sugar that makes working with promises more readable by making asynchronous functions look synchronous.</li> <li>Generators are used under the hood in async/await and return an iterator object, which follows the promise resolution.</li> <li>Iterables and flows provide a more natural way to work with asynchronous programming for JavaScript programmers familiar with collections and sequences.</li> </ol>"},{"location":"goto_programming_lang/#the-language-of-programming-anjana-vakil-goto-2019","title":"The Language of Programming \u2022 Anjana Vakil \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=6EdFiISk22k</p> <ol> <li>The talk discusses the human aspect of coding and its connections to language and collaboration.</li> <li>Code is a complex, abstract, symbolic system shared by humans similar to natural languages.</li> <li>Programming can be seen as an act of translation between human thought and computer operations.</li> <li>Collaboration is crucial in coding through open-source projects, libraries, and frameworks.</li> <li>The talk emphasizes the need for reflection on how code's collaborative power is utilized to make a positive impact.</li> <li>Resources with more information about cited studies can be found on speaker deck.</li> </ol>"},{"location":"goto_programming_lang/#java-current-and-future-georges-saab-mikael-vidstedt-goto-2019","title":"Java Current and Future \u2022 Georges Saab &amp; Mikael Vidstedt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=vJrHHe3IbQs</p> <ol> <li>Java Development Kit (JDK) 16 is scheduled for March 2021 release with preview features from Project Amber and Loom.</li> <li>JDK 9 to 15 have LTS support, while JEPs are being tracked in all releases.</li> <li>The OpenJDK project has a transparent process with mailing lists, code repositories, and bi-weekly meetings open for public observation.</li> <li>Project Loom brings fibers to the JVM as a new lightweight flow control mechanism for parallelism.</li> <li>Project Panama allows direct access between native libraries and Java code via JNI, with early access binaries available since September 2020.</li> <li>Project Valhalla introduces value types and better support for generic specialization to improve performance inbox analogy.</li> <li>Project Preview enables developers to try out new features before an official release.</li> <li>JEP 413 (Dynamic Linker Integration) brings dynamic linking improvements.</li> <li>The process involves design, implementation, testing, and documentation by volunteers.</li> <li>Early access binaries are available since September 2020 for Panama and Loom previews.</li> <li>no context. (No text provided to extract context.)</li> </ol>"},{"location":"goto_programming_lang/#the-soul-of-erlang-and-elixir-sasa-juric-goto-2019","title":"The Soul of Erlang and Elixir \u2022 Sasa Juric \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=JvBT4XBdoUE</p> <ol> <li>Presentation discusses the Elixir programming language and its advantages.</li> <li>Context: Elixir in Action book (50% off today, 40% off for the rest of the DW).</li> <li>Elixir built on Erlang's runtime (its soul according to the speaker).</li> <li>Elixir features like concurrency, fault tolerance, and clear syntax.</li> <li>Elixir provides better scalability and simplicity compared to Ruby or Node.js.</li> <li>Speaker mentions popular frameworks Phoenix and Plug.</li> <li>Discusses Elixir's strong support for functional programming, patterns, and libraries.</li> <li>Explains how Elixir can handle millions of requests with ease.</li> <li>Demonstrates the use of Erlang's OTP principles in a simple chat server example written in Elixir.</li> <li>Encourages audience to evaluate session feedback, and provides book and eBook giveaways.</li> <li>Book offer: 'Elixir in Action', 50% off today with code, 40% off rest of days with code, free copies available after presentation. (no context provided directly)</li> </ol>"},{"location":"goto_programming_lang/#reaching-beyond-traditional-boundaries-with-clojure-phil-hofmann-goto-2018","title":"Reaching Beyond Traditional Boundaries with Clojure \u2022 Phil Hofmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=2aIWMYcC4Qc</p> <ol> <li>Discussion on the history and evolution of programming languages (humor).</li> <li>Comparison between C++ and Lisp, highlighting their unique features.</li> <li>Introduction to functional programming languages such as Haskell and Clojure.</li> <li>Explanation of the paradigm shift from imperative to declarative programming through examples like sorting and filtering.</li> <li>Emphasis on learning multiple programming languages, paradigms, and closures.</li> <li>Call for environmental awareness by saving orangutans (humor). no context (transcript provided)</li> </ol>"},{"location":"goto_programming_lang/#why-i-was-wrong-about-typescript-tj-vantoll-goto-2018","title":"Why I Was Wrong About TypeScript \u2022 TJ VanToll \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AQOEZVG2WY0</p> <ol> <li>TypeScript: a superset of JavaScript that adds optional static typing</li> <li>Advantages for large-scale projects with multiple developers: better collaboration, code quality and maintenance</li> <li>Stickers from NativeScript org available to attendees</li> <li>Contexts when using TypeScript could be helpful:</li> <li>Large teams working on complex projects</li> <li>Teams wanting more structure and type safety</li> <li>Traditional back-end developers joining front-end workflows (TypeScript as a bridge)</li> <li>Developers seeking to learn JavaScript through TypeScript's syntax similarities.</li> </ol> <p>(no context provided beyond the given talk transcript.)</p>"},{"location":"goto_programming_lang/#rust-async-programming-in-2018-katharina-fey-goto-2018","title":"Rust Async Programming in 2018 \u2022 Katharina Fey \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=j0SIcN-Y-LA</p> <ol> <li>Rust 2018 highlights include (humor).</li> <li><code>async/await</code> features in Rust v1.31 and beyond.</li> <li>async functions allow awaiting multiple futures concurrently with the join function.</li> <li><code>tokio</code> crate simplifies writing asynchronous network code.</li> <li><code>std::net</code> provides a standardized TCP stack for Rust.</li> <li>embedded networking future possibilities.</li> <li>async/await enables more expressive and maintainable code.</li> <li>author works at First System GmbH and Scale Ai Gmbh.</li> </ol>"},{"location":"goto_programming_lang/#fresh-async-with-kotlin-roman-elizarov-goto-2018","title":"Fresh Async With Kotlin \u2022 Roman Elizarov \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=hb0hfHVWCS0</p> <ol> <li>Presentation about concurrency in Rust and the Coton library.</li> <li>Concurrency handles multiple tasks happening simultaneously.</li> <li>Traditional approach: multiple threads or OS-level abstractions.</li> <li>Challenges with traditional approaches: data races, synchronization primitives, error-prone.</li> <li>Rust tackles concurrency using async/await and the Tokio library.</li> <li>Coton is a non-blocking I/O library for Rust based on Tokio.</li> <li>Coton provides minimalistic, primitive suspend curtain support for integration with other libraries.</li> <li>Learn more about Coton through its documentation, tutorials, and active community discussions.</li> </ol>"},{"location":"goto_programming_lang/#keeping-up-with-java-sander-mak-goto-2018","title":"Keeping Up with Java \u2022 Sander Mak \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cF-rUNCOm2c</p> <ol> <li>Java 9, 10, and 11 LTS (Long-Term Support) releases explained.</li> <li>Oracle's JDK (Java Development Kit) now requires commercial license for production use after the release of Java 16.</li> <li>OpenJDK builds are still freely available from various vendors including Amazon Corretto, AdoptOpenJDK, and Red Hat.</li> <li>Oracle JDK will include more features, while OpenJDK will have security patches and bug fixes post-LTS.</li> <li>LTS release schedule changed to every six months starting with Java 17.</li> <li>Non-LTS releases (R-Releases) will receive Public Updates for six months, then only Security Updates for another year.</li> <li>Adopting a vendor's JDK becomes crucial if moving between LCS (Long-Term Continuous Support) to LCS releases.</li> <li>Strategy for adopting Oracle, Amazon Corretto, AdoptOpenJDK, Red Hat, or others needs to be decided based on requirements and preference. (no context provided in the input explanation).</li> </ol>"},{"location":"goto_programming_lang/#zen-and-the-art-of-convincing-your-company-to-use-rust-ashley-williams-goto-2018","title":"Zen and the Art of Convincing Your Company to Use Rust \u2022 Ashley Williams \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Pn-1so-Ibsg</p> <ol> <li>Introducing Rust as a systems language for the webassembly WASMimpac (crab-related project)</li> <li>Explaining why developers might hesitate to adopt Rust: lack of context, fear of failure, and limited client-side usage</li> <li>Discussing how Rust can potentially solve common developer problems like memory safety and performance issues</li> <li>Sharing a real-life example where the author implemented Rust in a large-scale application, leading to faster page loads and cost savings</li> <li>Highlighting that Rust is not just for systems programming but also for smaller components</li> <li>Encouraging developers to give Rust a try while promoting WASMimpac, a tool for using Rust with web browsers or Node.js.</li> </ol> <pre><code>no context (as the provided text is primarily a transcript of a presentation)\n</code></pre>"},{"location":"goto_programming_lang/#functional-programming-in-40-minutes-russ-olsen-goto-2018","title":"Functional Programming in 40 Minutes \u2022 Russ Olsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=0if71HOyVjY</p> <ul> <li>Functional programming emphasizes avoiding mutable state and using immutable data</li> <li>Side effects should be isolated and controlled</li> <li>Pure functions are easier to understand, test, reason about, and parallelize</li> <li>Higher-order functions allow reusing and composing logic without redundant code</li> <li>Lazy evaluation can improve performance by only evaluating needed parts of an expression</li> <li>Pattern matching aids readability and pattern matching with algebraic data types allows for more precise error handling and control flow</li> <li>Type systems aid in catching errors earlier, improving safety, and enabling better tooling</li> <li>Functional programming relies heavily on functions (944 out of 1000 methods in a large Swift codebase) with smaller amounts of interfaces and other elements.</li> </ul>"},{"location":"goto_programming_lang/#the-dos-and-donts-of-error-handling-joe-armstrong-goto-2018","title":"The Do's and Don'ts of Error Handling \u2022 Joe Armstrong \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=TTM_b7EJg5E</p> <ol> <li>In financial trading systems, there are issues with the sequencing of messages and ensuring correct processing.</li> <li>Watson, IBM's supercomputer, faced problems while playing Jeopardy! due to its inability to handle natural language and the sequence of questions.</li> <li>The speaker mentioned his PhD thesis on dynamic session type-checking to manage message sequences.</li> <li>There might be systems today that address message sequencing concerns, but specific examples were not provided in the context.</li> <li>The speaker is involved in high-frequency trading and is aware of a few such systems within this field.</li> </ol>"},{"location":"goto_programming_lang/#software-automation-in-a-polyglot-stack-jessica-kerr-goto-2018","title":"Software Automation in a Polyglot Stack \u2022 Jessica Kerr \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=cEyjEEK0xuo</p> <ol> <li>Discussion on the challenges of advocating for new tech in an established environment.</li> <li>Factors to consider: risk, cost, and time required for implementation.</li> <li>Importance of understanding management's objectives and demonstrating the business case for adopting new technologies or tools.</li> <li>Addressing concerns about maintaining existing systems while introducing change.</li> <li>Emphasizing new capabilities and safety from o no context.</li> </ol>"},{"location":"goto_programming_lang/#the-robustness-of-go-francesc-campoy-goto-2018","title":"The Robustness of Go \u2022 Francesc Campoy \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=40d26ZGfhR8</p> <ol> <li>Discussion about the Go programming language and its popularity.</li> <li>Comparison with other languages like Python, Rust, C++, and Haskell.</li> <li>Go's focus on simplicity, concurrency, and ease of use for web development.</li> <li>Criticisms include static typing limitations, lack of higher-order functions, and difficulty in using functional programming.</li> <li>Possible future enhancements to the language: higher-order functions (no context provided).</li> <li>Francesco Soldato's experience with Go at Google.</li> <li>Idea for a project that ensures communication between two routines happens on the same machine if possible (named project not remembered in transcript).</li> </ol>"},{"location":"goto_programming_lang/#functional-programming-with-kotlin-hadi-hariri-goto-2018","title":"Functional Programming with Kotlin \u2022 Hadi Hariri \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=eNe5Nokrjdg</p> <ol> <li>Introduction to Ruby's metaprogramming capabilities.</li> <li>Method missing and how it responds to undefined methods by executing a block, allowing the creation of DSLs (Domain Specific Languages).</li> <li>Example of creating a simple DSL for building HTML using method missing.</li> <li>The <code>respond_to?</code> method can be used to check if an object recognizes a specific message.</li> <li>Introduction to ActiveSupport and its Safe buffer feature, enabling the use of a template language without risking injection attacks.</li> <li>Concept of SL (Structured Language) for building HTML with more complex syntax and semantics while still being human-readable.</li> <li>Use of markdown instead of creating HTML directly directly direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct direct business</li> <li>No mention of Ruby's metaprogramming capabilities being limited to new classes or needing explicit permission for old classes in the context provided.</li> </ol>"},{"location":"goto_programming_lang/#c-the-newest-old-language-matt-godbolt-goto-2018","title":"C++ - the Newest Old Language \u2022 Matt Godbolt \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=HAFrggEDr5U</p> <ol> <li>Discussion about C++ as a modern language.</li> <li>Matt (possibly the speaker).</li> <li>C++11 and its new features.</li> <li>Comparison to earlier versions of C++.</li> <li>C++17 and its changes in syntax.</li> <li>Useful libraries like Boost and Modern Template Library (MTTL).</li> <li>C++'s growing popularity for systems programming, game development, and other real-world applications.</li> <li>Compiler Explorer website for testing code snippets.</li> <li>Adoption barriers for new learners include less standardized syntax compared to other languages.</li> <li>No specific context provided in the transcript.</li> </ol>"},{"location":"goto_programming_lang/#why-is-rust-successful-florian-gilcher-goto-2017","title":"Why is Rust Successful? \u2022 Florian Gilcher \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=-Tj8Q12DaEQ</p> <ol> <li>Rust is a system language with a focus on safety and performance.</li> <li>Memory management in Rust is handled via ownership, borrowing, and lifetimes.</li> <li>Rust has an efficient error handling mechanism using Result type.</li> <li>Rust has traits for generic programming and type systems with features like pattern matching and tuple structs.</li> <li>The Cargo build system manages dependencies, compilation, and testing in Rust projects.</li> <li>Crates are reusable libraries or executables built from Rust code.</li> <li>Blocking IO is discouraged in Rust, using async IO instead.</li> <li>Rust offers a block-based concurrency model via threads and tasks.</li> <li>The Rust ecosystem includes compilers, build systems (Cargo), toolchains, libraries, frameworks, and learning resources.</li> <li>Rust has good support for developing games and graphics libraries like Glyph, Pixelbloc, or Diesel in databases.</li> <li>Blocking I/O can be handled via async blocks, futures, or tokio crate.</li> <li>There are options for concurrent programming in Rust using threads, tasks, or atomics.</li> <li>The rust-gaming Discord server and community are helpful for game development using Rust.</li> <li>Blocking I/O can be converted into non-blocking with the help of async library blocks.</li> <li>Rust has tools like Clippy for linting, and there's support for blockchain development in Rust too.</li> <li>The standard library in Rust supports various use cases such as network communication, data management, or graphical user interfaces (GUIs).</li> <li>Rust offers concurrency with helpers like Join or task-based programming using the Tokio crate.</li> <li>Rust supports building web applications via crates like actix-web or rocket.</li> <li>The Rust ecosystem has tools and libraries for cross-platform game development, such as GUI libraries (Gfx or gbm).</li> <li>Asynchronous network programming is possible with the Tokio crate in Rust.</li> <li>Rust offers a simple approach to writing code, ensuring memory safety, threading model, and having no runtime dependencies.</li> <li>The latest stable version of Rust can be installed on macOS via Homebrew or directly from the website.</li> <li>The main differences between C and Rust are memory management, concurrency models, lifetimes, and safer code development practices.</li> <li>Rust supports building games for multiple platforms like Windows, Linux, and macOS using toolchains such as GCC, Clang, or Rust's native one.</li> </ol>"},{"location":"goto_programming_lang/#flutter-the-best-way-to-build-for-mobile-kasper-lund-goto-2017","title":"Flutter: The Best Way to Build for Mobile? \u2022 Kasper Lund \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=1BXg4wfB9pA</p> <ol> <li>Flutter is a mobile UI framework built by Google, focusing on delivering native-like experiences on iOS and Android platforms.</li> <li>Flutter uses the Dart programming language for development, which offers high performance and efficient use of CPU resources.</li> <li>PWAs (Progressive Web Apps) utilize existing web technologies and are limited due to compatibility and performance issues when targeting mobile devices.</li> <li>Flutter addresses these limitations by offering a faster development workflow, more predictable code execution, and native-level performance.</li> <li>Legacy browser features can pose trade-offs in mobile app development on top of complex foundations.</li> <li>Both Flutter and PWAs have their own strengths and weaknesses; Flutter's focus on mobile app development allows it to be more efficient bypassing web technologies for mobile devices.</li> <li>Audience is encouraged to ask questions and vote in the session.</li> </ol>"},{"location":"goto_programming_lang/#javascript-at-uber-dustin-whittle-goto-2017","title":"JavaScript at Uber \u2022 Dustin Whittle \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IG9gwgUiqZM</p> <ol> <li>Presentation on Uber's engineering tools and practices for building and improving their platform and user experience.</li> <li>Breakdown into three main categories: data infrastructure, code collaboration, and visualization &amp; sharing.</li> <li>Data Infrastructure includes uber-genie (data catalog), uber-mimic (data access and workflow tool), and uber-curry (data processing).</li> <li>Code Collaboration tools include uber-artemis (internal package registry) and uber-archon (code review system).</li> <li>Visualization &amp; Sharing includes uber-jupiterhub (interactive data science notebooks), uber-pandora's-box (centralized monitoring and alerting platform), and uber-galaxy (data exploration tool).</li> <li>Code collaboration happens on GitHub with contributions to open-source projects like goreleaser and gogs, and code hosted on GitHub Enterprise.</li> <li>Codeshare and artemis allow private dependency hosting for Uber's internal libraries, while codebase is managed using gitflow branching model.</li> <li>Code sharing with the public includes Uber's Geofencing library and other projects on Github.</li> <li>Internal collaboration occurs through Confluence Wiki and external knowledge sharing happens via blog posts and presentations at conferences or meetups like KubeCon, Velocity, and Strata Data Conference.</li> </ol>"},{"location":"goto_programming_lang/#elixir-the-only-sane-choice-in-an-insane-world-brian-cardarella-goto-2017","title":"Elixir: The only Sane Choice in an Insane World \u2022 Brian Cardarella \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=gom6nEvtl3U</p> <ol> <li>Elixir is a dynamic functional language for building scalable and maintainable software</li> <li>Erlang VM provides the runtime environment, fault tolerance, concurrency, and distribution</li> <li>Elixir syntax is inspired by Ruby and Clojure</li> <li>BEAM compiler converts Elixir into Erlang ASP format at compile time</li> <li>GenSer allows for creating servers with ease</li> <li>No explicit thread management needed in Elixir due to concurrency provided by Erlang VM</li> <li>Macros enable reusable code through compile-time functions</li> <li>Elixir adopts a more module-based approach for reusing code, using compiled time functions emitting Erlang ASP</li> <li>GenServer module compiles Erlang ASP code into modules being used in.</li> <li>Context provided during Q&amp;A session.</li> </ol>"},{"location":"goto_programming_lang/#introducing-elm-to-a-javascript-app-richard-feldman-goto-2017","title":"Introducing Elm to a JavaScript App \u2022 Richard Feldman \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=28aJOb1A34o</p> <ol> <li>Elm can be used in production with existing JavaScript applications by gradually replacing parts.</li> <li>Include the elm-reactor script and define an element to render Elm into within your HTML.</li> <li>Use <code>elm-make</code> to compile your Elm code and embed it in your page through a Script tag.</li> <li>Set up communication between JavaScript and Elm using Ports, which handle events and messages.</li> <li>Start with small parts of your application written in Elm and gradually replace more JavaScript components over time.</li> <li>The ultimate goal is to have an entire production app built in Elm. </li> <li>Luke Westby, creator of the Ellie Elm application, is recommended for Elm training.</li> <li>To incorporate Elm into existing JavaScript applications, you only need a DOM element to render into and knowledge on how to use Ports.</li> </ol>"},{"location":"goto_programming_lang/#demystifying-scala-kelley-robinson-goto-2017","title":"Demystifying Scala \u2022 Kelley Robinson \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=IayQ7lxPUP4</p> <ol> <li>Tomas Rounaghi discusses his experience with Scala and its development history.</li> <li>Martin Odersky created Scala to address limitations in Java, inspired by Haskell and ML.</li> <li>Scala is statically-typed, supports functional programming and object-oriented features.</li> <li>Type inference, implicits, and pattern matching are notable aspects of Scala.</li> <li>The community addresses concerns regarding performance and runtime overhead.</li> <li>Scala has a learning curve but rewards with code readability, conciseness, and maintainability.</li> <li>It has strong adoption in big data processing and streaming at companies like Twitter, LinkedIn, and Netflix.</li> <li>Typesafe Stack (now Lightbend) aims to bridge academic influences of Scala and practical uses.</li> <li>Tomas encourages new users to learn from the community, use IDEs or editors with good support, and focus on fundamentals.</li> </ol>"},{"location":"goto_programming_lang/#programming-across-paradigms-anjana-vakil-goto-2017","title":"Programming Across Paradigms \u2022 Anjana Vakil \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=Pg3UeB-5FdA</p> <ol> <li>Discussion on microservices and their relation to functional programming and object-oriented programming.</li> <li>Microservices can be seen as a functional decomposition approach, where each service operates on its inputs and produces an output.</li> <li>Functional programming has inspired some aspects of microservices like immutability and statelessness.</li> <li>Object-oriented programming principles can also be applied to microservices through the use of object composition and message passing between services.</li> <li>Allen Kay's concept of OOP, where systems are made up of small chunks communicating with each other, resembles a micro functional decomposition approach inspired by both functional and object-based approaches.</li> <li>Perspective on microservices as pure functions, with inputs passed from one service to another.</li> </ol>"},{"location":"goto_programming_lang/#why-you-should-take-another-look-at-c-mads-torgersen-goto-2016","title":"Why You Should Take Another Look at C# \u2022 Mads Torgersen \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=zQXNq-isqFI</p> <ol> <li>Presentation by Mads Torgersen on new C# 9.0 features and what to expect in the future.</li> <li>Record &amp; Play for quick replay of keyboard inputs in Visual Studio, improving debugging experience.</li> <li>Global Imports simplify using namespaces without explicit import statements.</li> <li>Range operators provide compact syntax for common operations like foreach or slice expressions.</li> <li>Target-typed patterns enable pattern matching with type annotations, increasing flexibility and safety.</li> <li>Records offer automatic properties, value tuple-like data structures with less boilerplate code.</li> <li>Ref improvements allow passing ref values to methods that use them as out parameters.</li> <li>Possible addition of NullRefType, a nullable version of ref types, in future C# versions for better nullability handling.</li> <li>Encouraging attendees to fill out evaluations and thanking the audience for their time and attention.</li> </ol>"},{"location":"goto_programming_lang/#exploring-swift-memory-layout-mike-ash-goto-2016","title":"Exploring Swift Memory Layout \u2022 Mike Ash \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=ERYNyrfXjlg</p> <ol> <li>Swift Evolution proposals overview:</li> <li>A28: Optional Chaining Syntax Extension for Subscripts (rejected)</li> <li>A0346: Concurrency APIs via Actors and Concurrency Kit (accepted)</li> <li>A0359: Allow Overloaded Operators to Return Different Types (accepted)</li> <li>A0372: Allow Protocol Requirements to be Generic (accepted)</li> <li>A0184: Add New Binary Floating-Point Operations (accepted)</li> <li>Swift 5.6 features:</li> <li>Concurrency via actors and Async/Await</li> <li>SwiftUI improvements in Xcode 13:</li> <li>LazyVStack, LazyHStack</li> <li>Previews</li> <li>Dynamic Type Support (DTS)</li> <li>Memory Graph visualization tool in Xcode 13 for debug graph context no</li> </ol>"},{"location":"goto_programming_lang/#exploring-rxjava-2-for-android-jake-wharton-goto-2016","title":"Exploring RxJava 2 for Android \u2022 Jake Wharton \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=htIXKI5gOQU</p> <ol> <li>RxJava 2.0 is a major update with significant improvements in API design and performance.</li> <li>The main goal is to simplify the library, making it easier for developers to understand and use.</li> <li>RxJava 2.0 introduces functional operators for more expressive code and improved type safety.</li> <li>Operators have been grouped by source type for better discovery.</li> <li>Sources like Observable and Flowable have new names with consistent naming patterns.</li> <li>The Flowable operator is a non-blocking alternative to the old Operator.</li> <li>New operators like concat, merge, combine, and switch allow more flexible composition.</li> <li>RxJava 2.0 introduces Flowable and ObservableCompat for backward compatibility.</li> <li>The new FlowableSingle type unifies Single and Observable.</li> <li>The library now provides better support for concurrent streams.</li> <li>New operators like concat, merge, combine, and switch provide more flexibility in composing streams.</li> <li>RxJava 2.0 encourages developers to embrace asynchronous sources and compose them together, making our apps truly reactive.</li> </ol>"},{"location":"goto_programming_lang/#microservices-in-go-matt-heath-goto-2016","title":"Microservices in Go \u2022 Matt Heath \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=WiCru2zIWWs</p> <ol> <li>Scaling a monolithic system can result in high complexity and slow growth, leading to refactoring and service deletion.</li> <li>The platform consists of 50+ services, with most written in Go and some in Java/Scala.</li> <li>Infrastructure includes Kubernetes, Envoy Proxy for circuit breaking, and Consul for service discovery.</li> <li>They use GitOps principles with Argo CD for deployment.</li> <li>The team focuses on simplifying processes, like connecting to different providers using one small NGO service.</li> <li>The platform's graph has grown from 10+ services in 2020 to over 40 services today.</li> <li>They use Telemetry with Prometheus, Jaegar, and OTPR to monitor their systems. ```text no context provided.</li> </ol>"},{"location":"goto_programming_lang/#kotlin-ready-for-production-hadi-hariri-goto-2016","title":"Kotlin - Ready for Production \u2022 Hadi Hariri \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=R0J_Jl7bKY8</p> <ol> <li>Keynote speaker discusses JetBrains' history, starting with IntelliJ IDEA and growing to multiple successful products.</li> <li>Kotlin language was created as a response to Java's verbosity, aimed at improving developer productivity and ease of learning.</li> <li>Kotlin interoperates with Java, allowing for low-risk adoption in existing projects.</li> <li>The speaker shares their personal enjoyment using Kotlin coming from a C# background.</li> <li>JetBrains' commitment to Kotlin is strong due to its usage within their own products and the business model being based on JetBrains tooling.</li> <li>Comparison between last night's encounter with Kotlin and this morning's experience with Java's boilerplate in Android Studio. (no context provided outside of the keynote speech).</li> </ol>"},{"location":"goto_programming_lang/#micropython-the-internet-of-things-damien-george-goto-2016","title":"MicroPython &amp; the Internet of Things \u2022 Damien George \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=EvGhPmPPzko</p> <ol> <li>Presentation focused on creating a web scraping tool for LinkedIn profiles, called ScrapLinked.</li> <li>Inspired by the need to find potential candidates quickly and efficiently for a company's recruiting team.</li> <li>The tool uses Selenium to open a headless browser, interact with LinkedIn, and extract data.</li> <li>Faced challenges in finding email addresses on LinkedIn due to various factors like privacy settings, country restrictions, or missing information.</li> <li>Developed a solution using regex patterns to detect potential email formats from users' profiles and verify their validity through an external API.</li> <li>The tool also provides additional features such as downloading profile pictures and storing extracted data in CSV files.</li> <li>ScrapLinked is available on GitHub for open-source contribution, hoping it grows into a sustainable community project.</li> </ol>"},{"location":"goto_programming_lang/#using-modern-c-in-anger-todd-montgomery-goto-2016","title":"Using Modern C++ In Anger \u2022 Todd Montgomery \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=9KljYagEPnE</p> <ol> <li>Discussion about Cassandra, a distributed database management system</li> <li>Scalability and fault tolerance benefits</li> <li>Collaboration between DataStax and the Apache Software Foundation for Cassandra development </li> <li>Cassandra's adoption in various industries like finance, healthcare, and streaming media</li> <li>Dynamic partitioning, improved index usage, and CDC enhancements added in recent releases</li> <li>Pipeline benchmark improvements and faster read/write throughput</li> <li>Continued efforts for new language drivers (Java, Python, Node) and development of Go and C++ drivers </li> <li>Exploration of persistence and replication techniques with unique designs</li> <li>Collaboration with Martin for innovative ideas and trying out different approaches to see what works best.</li> </ol>"},{"location":"goto_sw_arch_list/","title":"Goto sw arch list","text":""},{"location":"goto_sw_arch_list/#building-distributed-applications-with-event-driven-architecture-eric-johnson-goto-2023","title":"Building Distributed Applications with Event Driven Architecture \u2022 Eric Johnson \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=9StQpMLC-5Q</p> <ul> <li>Serverless architecture is a way of building applications where you build and run your code without having to manage any servers.</li> <li>Benefits of serverless architecture include:<ul> <li>Reduced operational costs</li> <li>Simplified scaling</li> <li>Faster time-to-market for new features</li> <li>Improved developer productivity</li> </ul> </li> <li>Challenges of serverless architecture include:<ul> <li>Cold starts</li> <li>Limited control over infrastructure</li> <li>Vendor lock-in</li> </ul> </li> <li>Tips for building event driven architectures:<ul> <li>Use asynchronous over synchronous communication</li> <li>Use routers and buses to maintain item potency</li> <li>Maintain a good understanding of your data flow</li> <li>Monitor and test your system thoroughly</li> </ul> </li> <li>Serverless Land is a website that provides resources for learning about serverless architecture, including getting started tips, patterns, and more.</li> </ul>"},{"location":"goto_sw_arch_list/#generic-or-specific-making-sensible-software-design-decisions-bert-jan-schrijver-goto-2023","title":"Generic or Specific? Making Sensible Software Design Decisions \u2022 Bert Jan Schrijver \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=lh5qWwIj06s</p> <ul> <li>The speaker discussed the trade-offs between going generic or specific when it comes to network architecture, libraries, and code.</li> <li>Going generic can save time and effort in the short term but may lead to inflexibility and difficulty in making changes later on.</li> <li>Going specific can be more time-consuming upfront but can provide greater flexibility and adaptability in the long run.</li> <li>The speaker suggested considering the \"YAGNI\" principle (You Ain't Gonna Need It) and avoiding over-engineering or building for hypothetical future needs.</li> <li>The speaker recommended keeping code simple, as this can make it easier to change and maintain over time.</li> <li>Overall, the talk emphasized the importance of striking a balance between short-term efficiency and long-term adaptability in network architecture and code design.</li> </ul>"},{"location":"goto_sw_arch_list/#data-the-land-devops-forgot-michael-nygard-yow-2023","title":"Data - The Land DevOps Forgot \u2022 Michael Nygard \u2022 YOW! 2023","text":"<p>URL: https://www.youtube.com/watch?v=459-H33is6o</p> <ul> <li>Data mesh is a new paradigm for managing data in a decentralized manner</li> <li>It has similarities with service mesh and microservices, allowing for the production and consumption of data to be decentralized while still being supported by a centralized platform</li> <li>The centralized platform needs to be oriented differently than before, focusing on independent operation, Federated governance, and decentralized decision making</li> <li>This is in contrast to traditional data management approaches which often result in data silos and bureaucratic decision making</li> <li>Data mesh aims to break down these barriers and enable organizations to make better use of their data</li> <li>The speaker has had a year one experience report from their journey into this world and hopes to come back in future years to discuss what worked and what didn't.</li> </ul>"},{"location":"goto_sw_arch_list/#repls-all-the-way-up-a-rubric-for-better-feedback-loops-avdi-grimm-goto-2023","title":"REPLs All The Way Up: A Rubric For Better Feedback Loops \u2022 Avdi Grimm \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=k9lwn-RqEsE</p> <ul> <li>The talk is about how to be a rebel in software development.</li> <li>To be a rebel, you need to cultivate safe ways to play and automate the repetitive tasks.</li> <li>Leave room for open-ended exploration and hope for surprises.</li> <li>Keep seeking new questions instead of just looking for answers.</li> <li>The talk covers how to do this at different levels: as an individual contributor, a team lead, and at higher levels in the organization.</li> <li>At the individual level, you can automate repetitive tasks, leave room for exploration, and seek out new questions.</li> <li>At the team level, you can create safe spaces to play and experiment with new technologies.</li> <li>At the organizational level, you can cultivate a culture of curiosity and open-endedness, and encourage people to ask new questions instead of just looking for answers.</li> <li>The talk emphasizes the importance of automation, exploration, and seeking new questions in order to be a rebel in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#democratising-software-architecture-eoin-woods-goto-2023","title":"Democratising Software Architecture \u2022 Eoin Woods \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=nchRmYvUf2Y</p> <ul> <li>The speaker introduced themselves and gave a brief overview of their background in software architecture.</li> <li>They discussed the importance of making architecture more continuous in a digital age.</li> <li>They talked about how architecture practices can be improved by incorporating continuous practices, such as continuous integration and delivery.</li> <li>They also mentioned the book \"Continuous Architecture and DevOps\" and the website continuousarchitecture.com as resources for learning more about these concepts.</li> <li>The speaker discussed the importance of involving stakeholders in the architecture process and making sure that they understand the value of architecture.</li> <li>They talked about how to make architecture more visible in an organization, including using visualization tools and creating a culture of transparency and communication.</li> <li>They also mentioned the book \"The Continuous Architecture Practice: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker discussed the importance of continuously evolving architecture to keep up with changing business needs, and how this can be done through continuous learning, experimentation, and feedback.</li> <li>They also mentioned the book \"Continuous Architecture: Designing and Building Software Systems\" as a resource for learning more about these concepts.</li> <li>The speaker concluded by summarizing the key points of their talk and providing resources for further learning.</li> </ul>"},{"location":"goto_sw_arch_list/#crafting-robust-architectures-for-a-resilient-future-eleanor-saitta-jez-humble-goto-2023","title":"Crafting Robust Architectures for a Resilient Future \u2022 Eleanor Saitta &amp; Jez Humble \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=iD3HQ0LXM_M</p> <ul> <li>Eleanor Saitta is a security consultant and designer.</li> <li>Security is an emergent property of the system, not just a feature you can tack on.</li> <li>The fundamental problem with security is that it's really hard to know what's going on in your systems.</li> <li>If you don't understand how things are connected, you won't be able to secure them properly.</li> <li>It's important to write down the things that you say you are doing to make auditing easier.</li> <li>Security certifications primarily serve as a marketing expense and a tool for making sure you're asking the right questions about your systems.</li> <li>If you want to know more, visit structures.systems or contact ela@structures.systems.</li> </ul>"},{"location":"goto_sw_arch_list/#using-semantic-metadata-to-create-an-automated-microservice-data-mesh-marty-pitt-yow-2022","title":"Using Semantic Metadata to Create an Automated Microservice Data Mesh \u2022 Marty Pitt \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wnydtt2lTQk</p> <ul> <li>In this demo, the speaker is showing how to use Skim, a GraphQL schema stitching library.</li> <li>The speaker first starts with a simple Git API and then adds a new endpoint for a Post API.</li> <li>They then use Skim to combine the two schemas into one.</li> <li>They show how the schema has been updated by looking at the profiler.</li> <li>The demo ends with the speaker answering questions from the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#the-art-of-software-development-sander-mak-goto-2023","title":"The Art of Software Development \u2022 Sander Mak \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=fUVfkLUmII4</p> <ul> <li>The speaker discussed the importance of craftsmanship in software engineering and how to become a better developer.</li> <li>He emphasized that becoming a great developer is not just about learning new technologies, but also about finding your purpose and style with your team.</li> <li>Mentoring is an excellent way to leave a legacy and bring 10 people around you who are smarter than they are.</li> <li>The speaker encouraged the audience to write beautiful code and to go forth and become better developers.</li> <li>He recommended checking out the engineering blog of his company, Picnic, for more information on how they do software engineering.</li> </ul>"},{"location":"goto_sw_arch_list/#build-software-like-a-bag-of-marbles-not-a-castle-of-lego-hannes-lowette-yow-2022","title":"Build Software Like a Bag of Marbles, Not a Castle of LEGO \u2022 Hannes Lowette \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=wkFx2R4uk2A</p> <ul> <li>Plugins in .NET6 make it easy to structure and modularize code.</li> <li>Before distributing your code, learn about proper SOLID principles.</li> <li>Plugins offer a lot of tools out-of-the-box in .NET6, making it easier to add, remove, or replace functionality.</li> <li>Don't introduce deployment problems while solving code issues; take this advice from personal experience.</li> <li>It's okay not to be at step four, five, eight, or any other step \u2013 everyone grows and learns at their own pace.</li> <li>The speaker encourages attendees to connect with them on Twitter, LinkedIn, or ICQ to chat about code, guitars, or learning.</li> </ul>"},{"location":"goto_sw_arch_list/#energy-efficient-software-architecture-for-developers-henrik-brbak-christensen-goto-2023","title":"Energy-Efficient Software Architecture for Developers \u2022 Henrik B\u00e6rbak Christensen \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=xVKJvUHCanQ</p> <ul> <li>Start by measuring the utilization of your on-premise service centers and finding ways to increase it.</li> <li>Look for low hanging fruits, such as using more power-efficient processors or optimizing your code.</li> <li>Learn a programming language that is commonly used in cloud computing, such as Go, C++, Java, or C#.</li> <li>Consider using arm processors, which use less energy than x86 processors.</li> <li>Keep in mind the saying \"Perfection is a cheat, not when there's nothing more to add but when there's nothing left to take away.\" Try to simplify your systems and remove unnecessary features.</li> <li>It may be difficult to sell the idea of reducing features or salary, but it could lead to cost savings and improved performance.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=4aiAkUm7rzQ</p> <ul> <li>Structurizr is a set of tools for creating software architecture diagrams and documentation.</li> <li>It uses a Domain Specific Language (DSL) to describe the system and its components, and then generates diagrams and textual descriptions based on this information.</li> <li>The DSL is written in Clojure, but can be used from any JVM language.</li> <li>Structurizr has several components:<ul> <li>A web-based modeling tool for creating and editing the DSL scripts.</li> <li>A Java library for parsing the DSL scripts and generating diagrams and documentation.</li> <li>A set of plugins for integrating with other tools, such as Jira and Confluence.</li> </ul> </li> <li>The tooling is free and open source, and can be found at structuralize.com/DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#large-scale-architecture-the-unreasonable-effectiveness-of-simplicity-randy-shoup-yow-2022","title":"Large-Scale Architecture: The Unreasonable Effectiveness of Simplicity \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=oejXFgvAwTA</p> <ul> <li>Event-driven architecture can help to decouple systems and make them more scalable</li> <li>Asynchronous messaging is a common way to implement event-driven architectures, but it can also be done with synchronous HTTP requests</li> <li>Testing asynchronous event-driven systems can be more difficult than testing synchronous systems, but it's possible to test individual components or services in isolation</li> <li>When testing asynchronous systems, it's important to consider the order and timing of events, as well as how they affect the state of the system</li> <li>Testing strategies for event-driven systems may include using mocks or stubs for dependencies, using message brokers that support test features, and using tools that can simulate message traffic.</li> </ul> <p>Please note that this summary is based on my understanding of the conversation, and it might not be 100% accurate.</p>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-principles-practices-rebecca-parsons-yow-2022","title":"Building Evolutionary Architectures: Principles &amp; Practices \u2022 Rebecca Parsons \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=jTX45V5JuN4</p> <ul> <li>Rebecca Parsons discussed the role of architects in communicating with stakeholders and decision-makers</li> <li>Architects need to be able to explain technical concepts in terms that connect with business value</li> <li>Architecture decisions should be made based on their impact on business requirements, not just technical considerations</li> <li>It's important to communicate the consequences of making certain decisions, such as increased development time or reduced scalability</li> <li>Architects should focus on building relationships and trust with stakeholders over time</li> <li>Architects can use objective measures, such as risk assessments or cost-benefit analyses, to make their case for certain decisions</li> <li>Communication is a critical skill for architects, and they need to learn how to convey technical concepts in plain language</li> <li>It's important to be able to explain the \"why\" behind architecture decisions, not just the \"how\" or \"what\"</li> <li>Architects should be proactive in identifying potential issues and bringing them up with stakeholders early on</li> <li>Ultimately, architects need to be able to communicate effectively with decision-makers to ensure that their technical decisions align with business goals.</li> </ul>"},{"location":"goto_sw_arch_list/#minimum-viable-architecture-randy-shoup-yow-2022","title":"Minimum Viable Architecture \u2022 Randy Shoup \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=9Q7GANXn02k</p> <ul> <li>The talk focuses on how to build a scalable system for an online game.</li> <li>The speaker emphasizes the importance of decoupling components, such as database and web server, using message queues or event sourcing techniques.</li> <li>He suggests starting with a simple monolithic architecture first and then gradually evolving it into microservices when necessary.</li> <li>The speaker highlights the trade-offs between using a relational database vs NoSQL solutions depending on the use case.</li> <li>He also discusses different caching strategies, such as distributed caching and client-side caching.</li> <li>The talk covers various aspects of building an online game system, including matchmaking, session management, and game logic processing.</li> <li>The speaker encourages developers to consider security implications, such as authentication and authorization, from the beginning when designing their systems.</li> <li>He suggests using containerization techniques like Docker for easier deployment and scaling of microservices.</li> <li>The talk concludes with a Q&amp;A session where the speaker answers questions about specific technologies and provides additional insights based on his experience.</li> </ul>"},{"location":"goto_sw_arch_list/#c4-models-as-code-simon-brown-yow-2022_1","title":"C4 Models as Code \u2022 Simon Brown \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=f7i2wxQVffk</p> <ul> <li>Simon presented his open-source tool, \"ArchiMate Modeler\", which allows users to model and visualize their architecture using the ArchiMate language.</li> <li>The tool is built on top of Electron, React, and Redux, making it cross-platform and easy to use.</li> <li>It supports importing and exporting models in various formats, including JSON and XML.</li> <li>Simon also discussed some of the features he plans to add to the tool, such as improved error handling and support for custom plugins.</li> <li>He emphasized the importance of using a standardized language like ArchiMate to model architecture, as it helps ensure consistency and clarity across different teams and stakeholders.</li> <li>Simon answered questions from the audience, discussing topics such as integration with other tools, support for specific ArchiMate elements, and potential use cases for the tool.</li> </ul>"},{"location":"goto_sw_arch_list/#the-next-big-thing-in-software-architecture-dave-farley-goto-2023","title":"The Next Big Thing In Software Architecture \u2022 Dave Farley \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=DCWo9DuywYo</p> <ul> <li>Actor model is a programming paradigm that allows for the creation of complex, concurrent systems.</li> <li>Each actor can have its own state and behavior, and they communicate with each other by sending messages.</li> <li>Actor systems are highly fault-tolerant and can recover from failures automatically.</li> <li>Akka is a popular framework for building actor systems in Java and Scala.</li> <li>Actors can be used to build a wide range of applications, including web servers, games, and distributed systems.</li> <li>Actors provide a simple but powerful abstraction for building complex systems, allowing developers to focus on the problem at hand rather than worrying about low-level details.</li> <li>Akka provides features such as clustering and persistence, making it easy to build distributed and fault-tolerant systems.</li> <li>Actor systems are a good choice for building concurrent and distributed applications that need to be highly available and scalable.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-rebecca-parsons-neal-ford-james-lewis-goto-2023","title":"Building Evolutionary Architectures \u2022 Rebecca Parsons, Neal Ford &amp; James Lewis \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=m2ZlX1je3as</p> <ul> <li>Introduction of Dr. Rebecca Parsons and Neal Ford, discussing the evolution of software development and technology.</li> <li>The importance of understanding the past to shape the future of software development.</li> <li>Evolving programming languages and their impact on developers' productivity and creativity.</li> <li>The role of constraints in shaping programming languages and design patterns.</li> <li>Exploring different paradigms: object-oriented, functional, and logical programming.</li> <li>Balancing the tension between innovation and maintainability in software development.</li> <li>Embracing change and evolving best practices in a rapidly changing industry.</li> <li>The impact of cloud computing, serverless architecture, and quantum computing on software development.</li> <li>Exploring artificial intelligence, machine learning, and their implications for software developers.</li> <li>Addressing the ethical considerations in technology development and its societal impacts.</li> <li>Concluding thoughts on the importance of staying informed and adapting to changes in the industry.</li> </ul>"},{"location":"goto_sw_arch_list/#patterns-of-legacy-displacement-rob-horn-ian-cartwright-goto-2022","title":"Patterns of Legacy Displacement \u2022 Rob Horn &amp; Ian Cartwright \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=noOoLULfInc</p> <ul> <li>Replacing a legacy system is not just about replacing the technology, but also about re-engineering business processes.</li> <li>It's important to understand why the current system was built that way and what problems it was designed to solve.</li> <li>The new system should be designed to solve the same problems and meet the same needs as the old one, but in a more efficient and effective way.</li> <li>Involving stakeholders in the design process can help ensure that the new system meets their needs and is easy for them to use.</li> <li>It's important to plan for data migration and to test the new system thoroughly before deploying it.</li> <li>Replacing a legacy system can be a complex and time-consuming process, but it can also bring significant benefits in terms of efficiency, effectiveness, and agility.</li> </ul>"},{"location":"goto_sw_arch_list/#i-made-everything-loosely-coupled-does-my-app-fall-apart-gregor-hohpe-goto-2022","title":"I Made Everything Loosely Coupled. Does My App Fall Apart? \u2022 Gregor Hohpe \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=w9a7eI6BlVc</p> <ul> <li>The speaker discussed how modern technology has shifted the way we can create loosely coupled systems.</li> <li>They emphasized that automation code is what holds a loosely coupled application together, and it is through this code that you define your system's composition.</li> <li>Key takeaways:<ul> <li>Event-driven architecture is still important to understand as an architect.</li> <li>Modern technology allows us to code our system's composition and coupling.</li> <li>Automation code defines how a loosely coupled application holds together.</li> </ul> </li> <li>Resources provided by the speaker include their website, serverless land, and books on the topic.</li> </ul>"},{"location":"goto_sw_arch_list/#coevolution-of-architecture-code-closing-the-gap-dave-thomas-yow-2022","title":"Coevolution of Architecture &amp; Code - Closing The Gap \u2022 Dave Thomas \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=slGZMTFPElo</p> <p>Summary:</p> <ul> <li>Continuous Integration (CI) is the practice of integrating code into a shared repository frequently, which helps in identifying integration issues early on.</li> <li>Continuous Delivery (CD) is the ability to get changes of all types\u2014including new features, configuration changes, bug fixes and experiments\u2014into production or into the hands of users safely and quickly in a sustainable way.</li> <li>The main difference between CI and CD is that CI focuses on integrating code while CD focuses on delivering it to the end-users.</li> <li>Continuous Deployment (CD) is an automated process that pushes changes to production without human intervention.</li> <li>Testing is crucial in both CI and CD as it helps in identifying issues early on and ensuring the quality of the software being delivered.</li> <li>DevOps culture emphasizes collaboration between development and operations teams, breaking down silos, and sharing responsibilities for software delivery.</li> <li>Shipping code frequently does not necessarily mean delivering value to users, and it's essential to focus on delivering value rather than just shipping code.</li> <li>The main goal of CI/CD is to deliver high-quality software quickly and safely while maintaining a sustainable development process.</li> </ul> <p>Source: Transcript from the talk \"Continuous Integration vs Continuous Delivery\" by Jez Humble.</p>"},{"location":"goto_sw_arch_list/#microservices-from-the-trenches-sander-hoogendoorn-goto-2022","title":"Microservices from the Trenches \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=UFFmT4Z5frw</p> <ul> <li>The talk is about software architecture and how to make it scalable, maintainable, and testable.</li> <li>The speaker emphasizes the importance of small teams and small components (microservices) for productivity.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker shares his experience with building a scalable architecture for a large company with multiple products.</li> <li>He highlights the importance of having a single responsibility principle in designing microservices and how it leads to better maintainability and testability.</li> <li>He also emphasizes the need for automation in testing, deployment, and monitoring, as well as the use of DevOps practices.</li> <li>The speaker encourages the audience to keep learning, experimenting, and iterating in software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-the-hard-parts-neal-ford-mark-richards-goto-2023","title":"Software Architecture: The Hard Parts \u2022 Neal Ford &amp; Mark Richards \u2022 GOTO 2023","text":"<p>URL: https://www.youtube.com/watch?v=rIgTE9aDVj4</p> <ul> <li>Neal Ford and Mark Richards are discussing their book, \"The Building Microservices Development Handbook\".</li> <li>They discuss the importance of understanding the trade-offs and decisions made when building microservices.</li> <li>The second law of the Hard Parts book is that why is more important than how.</li> <li>They emphasize the importance of understanding the reasoning behind implementation choices in order to make informed decisions.</li> <li>They aim to exemplify this concept in the Hard Parts book.</li> </ul>"},{"location":"goto_sw_arch_list/#the-lost-art-of-software-design-simon-brown-yow-2019","title":"The Lost Art of Software Design \u2022 Simon Brown \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=gNj8I4uSTgc</p> <ul> <li>The session was about architecture characters and their importance in software development.</li> <li>Architecture characters are archetypes that represent common approaches to designing and building software systems.</li> <li>They provide a shared vocabulary for discussing architectural decisions and help teams make informed trade-offs.</li> <li>Neil Ford's book \"The IT Architect: Leading IT Decisions, Motivating IT Teams\" discusses 15 architecture characters in detail.</li> <li>The session covered four architecture characters - the architect as a craftsperson, the architect as a chef, the architect as a gardener, and the architect as a toolsmith.</li> <li>Each character has their own strengths, weaknesses, and approaches to solving problems.</li> <li>Understanding these characters can help teams make better architectural decisions and improve their development practices.</li> <li>The session also discussed the importance of feedback loops in software development and how architecture characters can help teams create effective feedback mechanisms.</li> <li>Finally, Neil Ford offered a free download of his books until the end of the year as a thank you for attending the session.</li> </ul>"},{"location":"goto_sw_arch_list/#team-topologies-software-architecture-complexity-james-lewis-goto-2022","title":"Team Topologies, Software Architecture &amp; Complexity \u2022 James Lewis \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=izLg4NkJQO4</p> <ul> <li>The talk discusses the characteristics of high-performing teams</li> <li>High-performing teams are cross-functional and self-organizing</li> <li>They have a shared understanding of their mission, goals, and ways of working</li> <li>Team members trust each other to do their best work</li> <li>Teams need to be small (less than 10 people) and co-located</li> <li>Amazon's leadership principles align with the characteristics of high-performing teams</li> <li>The book \"Team Topologies\" by Matthew Skelton and Manuel Pais is recommended for further reading on this topic.</li> </ul> <p>Bibliography:</p> <ul> <li>Team Topologies by Matthew Skelton and Manuel Pais</li> <li>Accelerate by Nicole Forsgren, Jez Humble, and Gene Kim</li> <li>The Phoenix Project by Gene Kim, Kevin Behr, and George Spafford</li> <li>The DevOps Handbook by Gene Kim, Patrick Debois, John Willis, and Jez Humble</li> <li>An Elegant Puzzle by Will Larson</li> <li>High Output Management by Andrew S. Grove</li> <li>Drive by Daniel H. Pink</li> <li>The Five Dysfunctions of a Team by Patrick Lencioni</li> <li>The Lean Startup by Eric Ries</li> <li>Continuous Delivery by Jez Humble and David Farley</li> </ul>"},{"location":"goto_sw_arch_list/#beyond-rest-contract-testing-in-the-age-of-grpc-kafka-graphql-matt-fellows-yow-2022","title":"Beyond REST - Contract Testing in the Age of gRPC, Kafka &amp; GraphQL \u2022 Matt Fellows \u2022 YOW! 2022","text":"<p>URL: https://www.youtube.com/watch?v=ESM84C7QKl8</p> <ul> <li>Integration testing is important in a distributed system context where there are many teams and services involved</li> <li>The idea of having a budget for your CI pipeline can help ensure that lead time for recovery, batching changes, etc. don't become issues</li> <li>Contra testing is one form of integration test but there are others as well</li> <li>Thinking about time can be a useful way to help find a balance between different types of tests and their execution times</li> </ul>"},{"location":"goto_sw_arch_list/#loosely-coupled-lotteries-cloudy-casinos-nederlandse-loterij-case-st-joris-kuipers-goto-2022","title":"Loosely Coupled Lotteries &amp; Cloudy Casinos: Nederlandse Loterij Case St. \u2022 Joris Kuipers \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=PUqalWaZaXY</p> <ul> <li>Microservices are a way of structuring an application as a collection of small autonomous services.</li> <li>Each microservice:<ul> <li>Is developed around a specific business capability.</li> <li>Runs in its own process and communicates with other services using a lightweight mechanism, often an HTTP resource API.</li> <li>Can be deployed independently.</li> <li>Can be managed by different teams.</li> </ul> </li> <li>Advantages of microservices:<ul> <li>Easier to understand and maintain.</li> <li>Faster development cycles.</li> <li>Better fault isolation.</li> <li>Scalability.</li> </ul> </li> <li>Disadvantages of microservices:<ul> <li>Increased operational complexity.</li> <li>Network latency.</li> <li>Distributed transaction management.</li> <li>Service coordination.</li> </ul> </li> <li>To decide whether to use monolithic or microservices architecture, consider the size and complexity of the application, the team's experience, and the organization's culture.</li> <li>When adopting microservices, start small, with a single service, and gradually add more as needed.</li> <li>Use practices such as automated testing, continuous integration, and deployment to manage the increased complexity of microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#simplicity-complexity-the-beauty-the-beast-sander-hoogendoorn-kevlin-henney-goto-2022","title":"Simplicity &amp; Complexity: The Beauty &amp; the Beast? \u2022 Sander Hoogendoorn &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=JAl3QFae_dE</p> <ul> <li>Sander is a consultant for companies that want to use data-driven decision making.</li> <li>He enjoys helping people find insights in their own data and seeing the impact it has on their business.</li> <li>Sander's favorite tool for data visualization is Tableau.</li> <li>In his free time, he enjoys traveling and experiencing different cultures.</li> <li>One of his most memorable travel experiences was seeing Monty Python in a church in Belfast with his family.</li> </ul>"},{"location":"goto_sw_arch_list/#architects-live-in-the-first-derivative-gregor-hohpe-yow-2019","title":"Architects Live in the First Derivative \u2022 Gregor Hohpe \u2022 YOW! 2019","text":"<p>URL: https://www.youtube.com/watch?v=5B9xPo8U9JU</p> <ul> <li>The talk was about how architecture and agile can work together, and the role of an architect in an agile organization.</li> <li>Agile is about bringing change, and architecture is there to bring options.</li> <li>Architecture and agile go together because both are about bringing change.</li> <li>There are different roles for an architect in an agile organization, such as a \"change agent\" or a \"catalyst\".</li> <li>The traditional role of an architect may not be necessary in an agile organization, where change is constant.</li> <li>Architects should focus on bringing options and facilitating change, rather than dictating solutions.</li> <li>Architects should work closely with development teams to understand their needs and help them make decisions.</li> <li>An architect's role may change over time as the organization evolves and adapts to new challenges.</li> <li>It is important for an architect to have a deep understanding of the technology and business, and to be able to communicate effectively with different stakeholders.</li> <li>The talk emphasized the importance of bringing different perspectives and dimensions to architecture and decision making.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-for-developers-simon-brown-yow-2017","title":"Software Architecture for Developers \u2022 Simon Brown \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=dtVI7PvgVsQ</p> <ul> <li>Software architecture is the high-level design of a software system and it's important to consider it early in the development process</li> <li>There are different architectural styles, such as monolithic and microservices. Each has its own trade-offs and should be chosen based on the specific needs of the project.</li> <li>Modularity is key to good design, regardless of the architectural style. It allows for easier maintenance, testing, and scaling.</li> <li>Understanding the dependencies between different parts of the system is crucial for making informed decisions about its architecture.</li> <li>If you can't build monoliths properly, don't do microservices. Make sure to have a solid understanding of how to structure your code before moving on to more complex architectures.</li> </ul>"},{"location":"goto_sw_arch_list/#shortening-the-architectural-feedback-loop-eltjo-r-poort-goto-2022","title":"Shortening the Architectural Feedback Loop \u2022 Eltjo R. Poort \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=lshfKKeB1Io</p> <ul> <li>Architects need to understand the business needs and requirements of their stakeholders</li> <li>The architecture feedback loop is the process by which architectural decisions are shared, discussed, and improved upon among stakeholders</li> <li>Shortening the feedback loop helps ensure that architectural decisions align with business needs and reduces risks</li> <li>Politics, not technology or requirements, often drive decision-making in organizations</li> <li>Architects should focus on the outcomes of their decisions rather than technical solutions to avoid strong opinions that are unhelpful</li> <li>Five tips for shortening the architecture feedback loop:<ol> <li>Share concerns and decisions continuously</li> <li>Invite feedback and be open to being wrong</li> <li>Simplify your documentation template</li> <li>Get involved in delivery</li> <li>Be vulnerable and open to feedback</li> </ol> </li> </ul>"},{"location":"goto_sw_arch_list/#enterprise-architecture-architecting-the-enterprise-gregor-hohpe-yow-2017","title":"Enterprise Architecture = Architecting the Enterprise? \u2022 Gregor Hohpe \u2022 YOW! 2017","text":"<p>URL: https://www.youtube.com/watch?v=hhlxFtV_tZo</p> <ul> <li>The role of an IT Architect is to bridge the gap between technical and business perspectives.</li> <li>An IT Architect should have a broad range of skills, including communication, problem solving, and leadership.</li> <li>Having diverse experiences in different areas of IT can help provide unique viewpoints when approaching architecture.</li> <li>There is high demand for Enterprise Architects who can provide significant business value.</li> <li>The book \"37 Things One Architect Knows About IT Transformation\" contains stories, anecdotes, and opinions about the role of an IT Architect in a large Enterprise.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-scaling-down-complexity-in-software-james-lewis-kevlin-henney-goto-2022","title":"Expert Talk: Scaling Down Complexity in Software \u2022 James Lewis &amp; Kevlin Henney \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=miYyinA-Nxc</p> <ul> <li>James Lewis is a principal consultant at Thoughtworks.</li> <li>He has been working with Thoughtworks for 18 years and has experience in software development, architecture, and design.</li> <li>In this transcript, James Lewis talks about the technology radar and its importance in staying up-to-date with emerging technologies.</li> <li>The technology radar is a tool used by Thoughtworks to assess and categorize new technologies based on their relevance and maturity.</li> <li>It consists of four quadrants: Techniques, Tools, Platforms, and Languages &amp; Frameworks.</li> <li>Each quadrant has four categories: Ring 1 (Adopt), Ring 2 (Trial), Ring 3 (Assess), and Ring 4 (Hold).</li> <li>James Lewis talks about the importance of having a balanced portfolio of technologies in an organization.</li> <li>He also discusses the challenges of adopting new technologies, such as the risk of vendor lock-in and the need for proper training and support.</li> <li>He emphasizes the importance of having a clear strategy and vision when it comes to technology adoption.</li> <li>James Lewis also talks about some of the emerging technologies that are currently on Thoughtworks' radar, such as serverless computing, blockchain, and quantum computing.</li> <li>He discusses the potential benefits and challenges of these technologies and provides insights into how organizations can start experimenting with them.</li> <li>Finally, James Lewis shares his thoughts on the future of technology and the importance of staying up-to-date with emerging trends and developments.</li> </ul>"},{"location":"goto_sw_arch_list/#the-zen-of-programming-sander-hoogendoorn-goto-2022","title":"The Zen of Programming \u2022 Sander Hoogendoorn \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=syGnlE_oosM</p> <ul> <li>The talk is about the speaker's experience and lessons learned during their career as a software developer.</li> <li>They emphasize the importance of taking small steps, asking questions, and never stopping to learn.</li> <li>Here are some key takeaways from the talk:<ul> <li>Take small steps in everything you do, including writing code, learning new technologies, and making career decisions.</li> <li>Don't be afraid to ask questions and admit what you don't know.</li> <li>Learn from your mistakes and use them to improve.</li> <li>Never stop learning and stay up-to-date with the latest technologies.</li> <li>Have fun and enjoy what you do.</li> <li>Take care of yourself and your mental health.</li> <li>Remember to take your mom out for dinner more often.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#from-monolith-to-state-of-the-art-banking-flavio-deroo-goto-2022","title":"From Monolith to State-of-the-Art Banking \u2022 Flavio Deroo \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=gVucnhnyYTw</p> <ul> <li>Solaris Bank is a German bank that provides banking services through APIs.</li> <li>They decided to migrate their monolithic system to an event-driven architecture using AWS Lambda and other managed services like DynamoDB, SNS, and SQS.</li> <li>The migration was done in two phases: the first phase involved decoupling the monolith into microservices and integrating them with the new architecture, while the second phase involved migrating data from the old system to the new one.</li> <li>They used a tool called AWS Serverless Application Repository (SAR) to package their Lambda functions and dependencies, making it easier to deploy and manage them.</li> <li>They also used AWS App Mesh to manage service-to-service communication and AWS Glue for data integration.</li> <li>The new architecture provided several benefits like better scalability, availability, and cost-efficiency compared to the old monolithic system.</li> <li>They faced some challenges during the migration process, such as dealing with cold starts in Lambda functions, managing stateful services, and ensuring data consistency between microservices.</li> <li>However, they managed to overcome these issues by using techniques like function warmup, implementing eventual consistency, and using distributed tracing tools like AWS X-Ray.</li> <li>Overall, the migration was a success, and Solaris Bank is now able to provide better banking services through their APIs using the new architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#restful-web-api-patterns-practices-cookbook-mike-amundsen-alianna-inzana-goto-2022","title":"Restful Web API Patterns &amp; Practices Cookbook \u2022 Mike Amundsen &amp; Alianna Inzana \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=OewdV0gQ67o</p> <ul> <li>Mike Amundsen's new book, \"Design and Build Great APIs,\" focuses on the importance of designing great APIs and how to achieve that goal.</li> <li>The book is divided into four sections: Foundations, Design, Implementation, and Operations &amp; Management.</li> <li>The Foundations section covers API basics, including what they are, why they're important, and their history.</li> <li>In the Design section, Amundsen discusses designing APIs with the user in mind, using scenarios to help guide decisions.</li> <li>The Implementation section dives into the technical aspects of building an API, such as choosing the right protocols and formats.</li> <li>The Operations &amp; Management section covers maintaining and scaling an API after it's been built, including monitoring and testing.</li> <li>Amundsen emphasizes the importance of collaboration between teams when designing APIs, using tools like design documents to ensure everyone is on the same page.</li> <li>He also stresses the need for iteration and refinement in API design, encouraging developers to continually improve their APIs based on user feedback.</li> <li>Throughout the book, Amundsen provides practical advice and real-world examples to help guide readers through the process of designing great APIs.</li> <li>He encourages developers to make informed choices based on their specific use cases and environments.</li> <li>Writing the book has been a valuable learning experience for Amundsen, as he's gained new insights into API design and best practices.</li> </ul>"},{"location":"goto_sw_arch_list/#diagrams-as-code-20-simon-brown-goto-2021","title":"Diagrams as Code 2.0 \u2022 Simon Brown \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Za1-v4Zkq5E</p> <ul> <li>The talk was about the Structurizr DSL, a domain-specific language for creating software architecture diagrams.</li> <li>Software architecture is important because it helps us understand how our systems work and make better decisions when developing them.</li> <li>A diagram can help us communicate complex ideas in a simple way, but creating good diagrams can be difficult.</li> <li>Structurizr DSL aims to simplify the process of creating software architecture diagrams by using plain text instead of drawing tools.</li> <li>The language is based on C4 model, which consists of four levels of abstraction: system context, container, component, and class.</li> <li>By using a text-based approach, we can version control our diagrams, use continuous integration, and generate documentation automatically.</li> <li>Structurizr DSL supports various export formats, such as PNG, SVG, and PlantUML.</li> <li>The talk included a live coding demonstration of creating a software architecture diagram using Structurizr DSL.</li> <li>The presenter emphasized the importance of consistency in naming conventions when creating diagrams.</li> <li>The presenter also showed how to use the dsl cookbook, which contains examples and best practices for using Structurizr DSL.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-managing-complexity-in-software-hadi-hariri","title":"Expert Talk: Managing Complexity in Software \u2022 Hadi Hariri","text":"<p>URL: https://www.youtube.com/watch?v=P7CfWtR-ECk</p>"},{"location":"goto_sw_arch_list/#summary","title":"Summary:","text":"<ul> <li>Hadi Hariri talks about the current state of software development and how it has become more complex over time.</li> <li>He mentions that the industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Hariri emphasizes the importance of simplicity in software design, saying that it requires discipline and effort to achieve.</li> <li>He also discusses the trade-offs between complexity and simplicity and how developers should strive for a balance between the two.</li> <li>Hariri suggests that the industry has become too focused on delivering features quickly, often at the expense of code quality and maintainability.</li> <li>He encourages developers to prioritize simplicity in their work and to be mindful of the long-term consequences of complexity.</li> </ul>"},{"location":"goto_sw_arch_list/#key-points","title":"Key Points:","text":"<ul> <li>Software development has become more complex over time.</li> <li>Simplicity requires discipline and effort to achieve.</li> <li>The industry's focus on productivity and feature delivery has led to codebases becoming harder to maintain and understand.</li> <li>Developers should strive for a balance between complexity and simplicity.</li> <li>Prioritizing simplicity can lead to better code quality and maintainability in the long run.</li> </ul>"},{"location":"goto_sw_arch_list/#data-mesh-data-driven-value-at-scale-zhamak-dehghani-samia-rahman-goto-2022","title":"Data Mesh: Data-Driven Value at Scale \u2022 Zhamak Dehghani &amp; Samia Rahman \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=CDWp_xyCdzw</p> <ul> <li>Zhamak is the author of \"Designing Data-Intensive Applications\" and a partner at Neo4j.</li> <li>Samia is a data scientist who used the value-based design process from Zhamak's book to improve her company's product development.</li> <li>Zhamak's book emphasizes the importance of understanding the value that a system provides before designing it, and using that understanding to guide decisions about technology and architecture.</li> <li>Samia found that this approach helped her team focus on delivering value to their customers more quickly and effectively.</li> <li>The conversation also touches on the role of data in product development, the challenges of building distributed systems, and the importance of continuous learning and improvement.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-continuous-architecture-pierre-pureur-kurt-bittner-goto-2022","title":"Expert Talk: Continuous Architecture \u2022 Pierre Pureur &amp; Kurt Bittner \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=_cgnL96VeME</p> <ul> <li>Continuous Architecture is a way to ensure that architecture decisions are aligned with business goals and can evolve over time.</li> <li>The four essential activities of Continuous Architecture are focusing on quality attributes, driving and revisiting architecture decisions, knowing your technical debt, and implementing feedback loops.</li> <li>Quality attributes are the four fundamental aspects of a system: performance, security, scalability, and maintainability.</li> <li>Architecture decisions should be based on these quality attributes, and should be revisited regularly to ensure they still meet the needs of the business.</li> <li>Technical debt is the cost of making suboptimal architecture decisions, and it's important to be aware of it and address it as soon as possible.</li> <li>Feedback loops are essential for learning from mistakes and improving decision-making in the future. They can be implemented through various mechanisms such as code reviews, automated testing, and monitoring.</li> <li>The Continuous Architecture approach emphasizes collaboration between stakeholders, including business leaders, developers, and operations teams, to ensure that architecture decisions align with business goals and are executed effectively.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-software-engineering-dave-farley-steve-smith-goto-2022","title":"Modern Software Engineering \u2022 Dave Farley &amp; Steve Smith \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=80LbSyTCKas</p> <ul> <li>Dave Farley is a software developer, consultant, and coach.</li> <li>He co-authored the book \"Continuous Delivery\" with Jez Humble.</li> <li>The goal of Continuous Delivery is to make delivering software changes as easy, reliable, and fast as possible.</li> <li>The three main pillars of Continuous Delivery are: automation, version control, and testing.</li> <li>Testing should be automated, repeatable, and consistent.</li> <li>Small, frequent changes are easier to manage than large, infrequent ones.</li> <li>Automated tests should run quickly and provide fast feedback.</li> <li>The deployment process should be automated, reliable, and repeatable.</li> <li>Continuous Delivery requires a cultural shift towards collaboration, trust, and accountability.</li> <li>DevOps is a culture and a set of practices that encourages collaboration between development and operations teams.</li> <li>DevOps emphasizes automation, continuous improvement, and feedback loops.</li> <li>The goal of DevOps is to create a fast, reliable, and secure software delivery pipeline.</li> <li>Continuous Integration (CI) is the practice of integrating code changes into a shared repository frequently.</li> <li>Continuous Deployment (CD) is the practice of deploying code changes to production automatically after they pass all tests.</li> <li>Version control is essential for managing code changes and collaborating with others.</li> <li>Feature flags are a way to decouple feature releases from code deployments.</li> <li>The \"Build, Test, Release\" mindset focuses on delivering value quickly and safely.</li> <li>Continuous Delivery requires a holistic approach that considers the entire software delivery pipeline.</li> <li>DevOps is not just about tools and technology but also about people and culture.</li> </ul>"},{"location":"goto_sw_arch_list/#expert-talk-devops-software-architecture-simon-brown-dave-farley-hannes-lowette-goto-2021","title":"Expert Talk: DevOps &amp; Software Architecture \u2022 Simon Brown, Dave Farley &amp; Hannes Lowette \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=Qv92qaIGbDg</p> <p>Summary:</p> <ul> <li>The speaker, John Allspaw, is discussing his experiences and insights on incident management and resilience engineering.</li> <li>Resilience engineering focuses on understanding how systems fail and how to make them more robust.</li> <li>It's important to recognize that failure is a natural part of any system, and it's impossible to prevent all failures.</li> <li>The goal should be to minimize the impact of failures when they do occur.</li> <li>To do this, it's essential to have a deep understanding of how the system works, including its weak points and vulnerabilities.</li> <li>It's also important to have a culture of learning and improvement, where incidents are seen as opportunities to learn and improve, rather than as failures to be punished.</li> <li>The speaker emphasizes the importance of communication and collaboration in incident management, both within teams and between different organizations.</li> <li>He also discusses the challenges of managing complex systems, where there are many interdependencies and feedback loops, and where small changes can have large unintended consequences.</li> <li>The speaker stresses the need for humility and caution when making changes to complex systems, as even seemingly minor adjustments can have significant impacts.</li> <li>He also highlights the value of automation and monitoring in incident management, but cautions against relying too heavily on technology and neglecting the human element.</li> <li>Finally, the speaker emphasizes the importance of continual learning and improvement in resilience engineering, and encourages organizations to adopt a proactive approach to managing incidents and failures.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=7NAyn1DC420</p> <ul> <li>Vaughn Vernon is the author of \"Strategic Monoliths and Microservices: Driving Innovation Using Purposeful Architecture.\"</li> <li>The book discusses how to make informed decisions about monoliths and microservices.</li> <li>The first part of the book focuses on understanding the domain, including modeling, language, and communication.</li> <li>The second part of the book dives into implementing strategic monoliths and microservices using various programming languages and architectural patterns.</li> <li>The goal is to provide a complementary resource to Vaughn's previous book, \"Reactive DDD.\"</li> <li>James Higginbotham interviewed Vaughn Vernon about his new book for GOTO Conferences.</li> </ul>"},{"location":"goto_sw_arch_list/#strategic-monoliths-microservices-teaser-vaughn-vernon-james-higginbotham-goto-2022","title":"Strategic Monoliths &amp; Microservices (Teaser) \u2022 Vaughn Vernon &amp; James Higginbotham \u2022 GOTO 2022","text":"<p>URL: https://www.youtube.com/watch?v=vhAtH9NW-WA</p> <ul> <li>The importance of viewing software projects as learning experiences through experimentation and discovery is highlighted.</li> <li>Today's C-level executives in technology are different from those 30 or 40 years ago; having a solid architecture requires understanding the software being developed.</li> <li>Events are all about human communication, and thinking synchronously can lead to trouble because \"life is not a podcast.\"</li> <li>The speaker expresses difficulty in defining what software architecture is and suggests making architecture decisions at the last responsible moment.</li> <li>Developing with monoliths initially allows for faster development.</li> <li>A promotion for Go To Conferences and their YouTube channel is made, using the promo code \"book club\" for registration.</li> </ul>"},{"location":"goto_sw_arch_list/#architecting-for-scale-lee-atchison-ken-gavranovic-goto-2021","title":"Architecting For Scale \u2022 Lee Atchison &amp; Ken Gavranovic \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=n_yZB0ZrsxU</p> <ul> <li>Lee Atchison is an experienced technology executive, author, and international speaker.</li> <li>He works as a Senior Director at New Relic, where he focuses on helping the company scale their architecture.</li> <li>Lee has extensive experience in building and managing large-scale, cloud-based web applications and services.</li> <li>In this interview, Ken and Lee talk about his new book \"Architecting for Scale\", which covers best practices for designing scalable systems.</li> <li>The second edition of the book includes updates on the latest trends and technologies in cloud computing, containers, microservices, DevOps, and more.</li> <li>Lee shares insights from his experience working at companies like Amazon and Akamai Technologies.</li> <li>He emphasizes the importance of considering scale as a fundamental aspect of software design.</li> <li>The interview also covers topics like reliability, fault-tolerance, observability, monitoring, and managing system complexity.</li> <li>Lee provides practical advice for teams building cloud-native applications, including tips on capacity planning, performance optimization, and team organization.</li> <li>He encourages developers to adopt a \"shift left\" mindset, focusing on quality and reliability from the beginning of the development process.</li> <li>Lee also highlights the importance of continuous learning and staying up-to-date with new technologies and best practices in the field.</li> </ul> <p>Additional Resources:</p> <ul> <li>Lee Atchison's website</li> <li>Architecting for Scale (Second Edition)</li> </ul>"},{"location":"goto_sw_arch_list/#the-hidden-costs-of-poor-database-access-denis-rosa-goto-2019","title":"The Hidden Costs of Poor Database Access \u2022 Denis Rosa \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=t9b2TZiZUpM</p> <p>Summary of Transcript:</p> <ul> <li>Relational databases have been the standard for many years, but they are not always the best choice for storing hierarchical data structures.</li> <li>Hierarchical data models can be more efficient and performant than relational models in certain scenarios.</li> <li>There are various ways to store hierarchical data, such as nested sets, materialized paths, closure tables, and recursive trees.</li> <li>Nested sets are a popular way to represent hierarchical data, but they have some limitations and can be slow for certain operations.</li> <li>Materialized paths are another method that is more efficient for reading, but not writing.</li> <li>Closure tables store the relationships between nodes in a separate table, which makes it easy to query, but can be slow when there are many relationships.</li> <li>Recursive trees use a recursive function to traverse the tree and can be slower than other methods, but they allow for more flexibility in how the tree is stored.</li> <li>There are some libraries available that help with storing hierarchical data, such as <code>acts_as_tree</code> and <code>ancestry</code>.</li> <li>When choosing a method to store hierarchical data, consider the size of the dataset, the frequency of reads and writes, and the complexity of the queries.</li> <li>It's important to keep performance in mind when working with large datasets, especially for write-heavy applications.</li> <li>The speaker encourages developers to experiment with different methods and choose the one that fits their specific use case best.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-22-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 2/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=PmRLX57ChTE</p> <ul> <li>The conversation covers the importance of managing software architecture and dependencies to improve collaboration, maintainability, and scalability.</li> <li>Adam Tornhill explains his experience working with large codebases and how understanding coupling can help identify potential issues early on.</li> <li>He emphasizes the need for a data-driven approach in making informed decisions about software design and refactoring.</li> <li>The conversation touches upon the importance of granularity and modeling concepts when building an architecture, highlighting that focusing too much on technical building blocks could lead to heavy team coupling.</li> <li>Adam introduces his book 'Your Code as a Crime Scene' and the tool, CodeScene, which help developers analyze codebases and understand dependencies, enabling them to prioritize refactoring efforts effectively.</li> <li>The conversation closes with Adam sharing his experience working with various companies and how understanding dependencies can lead to cost savings in software development projects.</li> </ul>"},{"location":"goto_sw_arch_list/#software-design-x-rays-part-12-adam-tornhill-sven-johann-goto-2021","title":"Software Design X-Rays Part 1/2 \u2022 Adam Tornhill &amp; Sven Johann \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=-z5EWVyRhOo</p> <ul> <li>Hotspots are areas of the codebase that require attention and improvement.</li> <li>There are different types of hotspots, including:<ul> <li>Lines of Code (LOC) - visualization to gain situational awareness.</li> <li>Cyclomatic Complexity - number of linearly independent paths through a program's source code.</li> <li>Clone Detection - identifying duplicate or similar code fragments that violate the DRY (Don't Repeat Yourself) principle.</li> </ul> </li> <li>The discussion focused on findings and prioritization work done on the code level to address these hotspots.</li> <li>Further talks are planned to discuss organizational problems that can be detected and addressed.</li> </ul>"},{"location":"goto_sw_arch_list/#service-meshes-istio-linkerd-or-no-mesh-at-all-hanna-prinz-eberhard-wolff-goto-2021","title":"Service Meshes: Istio, Linkerd - or No Mesh at All? \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=kwUgrSG_ZKI</p> <ul> <li>Service meshes are a way to manage and control communication between microservices in a distributed system.</li> <li>They provide features such as service discovery, load balancing, circuit breaking, rate limiting, and security.</li> <li>Some popular service mesh implementations include Istio, Linkerd, Consul, and AWS App Mesh.</li> <li>Service meshes can be implemented using sidecar proxies or a data plane proxy that is integrated into the application code.</li> <li>Sidecar proxies are easier to set up but have a higher performance overhead, while data plane proxies have lower overhead but require more integration work.</li> <li>Some benefits of using service meshes include:<ul> <li>Improved observability and monitoring of distributed systems.</li> <li>Simplified management of communication between microservices.</li> <li>Enhanced security with features such as mutual TLS authentication and authorization.</li> </ul> </li> <li>Some potential drawbacks of using service meshes include:<ul> <li>Increased complexity and overhead.</li> <li>Difficulty in choosing the right implementation for your needs.</li> <li>The need to learn new tools and concepts.</li> </ul> </li> <li>To decide whether a service mesh is right for your organization, consider factors such as the size and complexity of your microservices architecture, the level of control you want to have over communication between services, and your team's familiarity with service mesh concepts and implementations.</li> </ul> <pre><code>\n\n## Is Domain-Driven Design Overrated? \u2022 Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=ZZp9RQEGeqQ](https://www.youtube.com/watch?v=ZZp9RQEGeqQ)\n\n - Recipes are a good starting point, especially for beginners\n- Following a recipe closely can be helpful at the start of a project\n- However, it's important not to be dogmatic and continue to follow a recipe exactly in the long run\n- Contexts are the most valuable contribution of recipes, they provide a boundary within which you can make different decisions from others\n- Use contexts to help guide your decision making process.\n\n\n## Kafka in the Wild \u2022 Laura Schornack &amp; Maureen Penzenik \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=iMx8otu3rFg](https://www.youtube.com/watch?v=iMx8otu3rFg)\n\n * Advancing domain driven design (DDD) from one application to enterprise DDD\n* Sharing data sets across many applications, avoiding rework and Kafka spider webs\n* Having a cleaner API strategy and real-time strategy throughout the enterprise\n* Merging with the data side of the house for a unified operational and analytical approach\n* Using DDD principles from operational systems to solve similar challenges in analytics environments (breaking up monoliths)\n* Applying Jamaat Dagani's Data Mesh principles, extending domain driven design to break up data monoliths\n* Ensuring access control and secure data products according to the business owner's approved use for the data.\n\n\n## Organization: A Tool for Software Architects \u2022 Eberhard Wolff \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=wwzn4l_gmco](https://www.youtube.com/watch?v=wwzn4l_gmco)\n\n * Transcript is about a talk on software architecture and design.\n* The speaker discusses the importance of aesthetics in software development.\n* Aesthetics can lead to better problem solving and more efficient code.\n* The speaker suggests that architects should have a \"categorical imperative\" for software engineering, ensuring that their designs are both functional and beautiful.\n* The talk includes references to various tools and concepts used in software development, such as Mckinsey workshops, media solutions architecture, and the use of design patterns.\n* The speaker also mentions the importance of collaboration and communication in software development, suggesting that architects should be skilled in these areas in order to create effective designs.\n* Overall, the talk emphasizes the value of aesthetics in software development and encourages architects to consider both form and function in their work.\n\n\n## What Are Reactive Systems? \u2022 Dave Farley \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=Ysn6eInApYM](https://www.youtube.com/watch?v=Ysn6eInApYM)\n\n * Messaging allows for location transparency and clustering\n* The code doesn't need to change in any way to make clustering work\n* The infrastructure can handle the load balancing and allocation\n* Messaging separates accidental complexity (running stuff on a computer) from essential complexity (domain logic or function)\n* This approach allows for focus on the problem being solved rather than the technical details\n* Relational databases work in a similar way internally\n* The core of the exchange built this way could process 6.5 million trades per second on a single thread\n\n\n## Idiomatic RabbitMQ \u2022 Gavin M. Roy \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=fNbdgWe5Tbs](https://www.youtube.com/watch?v=fNbdgWe5Tbs)\n\n * RabbitMQ is a message broker that can handle high volumes of messages and provide reliability, scalability, and flexibility.\n* It has features such as message durability, delivery acknowledgements, publisher confirms, and message priority.\n* When using RabbitMQ, it's important to think about the design of your messaging system and how messages are routed and consumed.\n* Consider using a fanout exchange for simplicity, direct exchanges for fine-grained control, or topic exchanges for more complex routing scenarios.\n* It's also crucial to consider message serialization and deserialization formats, as well as error handling and retry mechanisms.\n* When designing your messaging system, keep in mind the principles of loose coupling, high cohesion, and failure isolation.\n* Using RabbitMQ can provide benefits such as improved system resilience, scalability, and maintainability, but it also requires careful planning and design.\n\n\n## Continuous Architecture in Practice Part 2/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=IIy4Adg4WR0](https://www.youtube.com/watch?v=IIy4Adg4WR0)\n\n * Continuous Architecture: Evolving Technical Leadership at Scale is a new book by Eoin Woods, Murat Erder and Pierre Pureur\n* The authors discussed their motivation for writing the book and what they hope to achieve with it in this interview\n* The book is aimed at software architects who are looking to improve their skills and adapt to changing circumstances\n* It covers topics such as how to manage technical debt, how to work effectively with other teams and how to stay up-to-date with new technologies\n* The authors also discuss the importance of communication and collaboration in architecture roles\n* The book is based on the authors' own experiences and draws on real-world examples to illustrate its points\n* It is available for pre-order now and will be published in June 2021.\n\n\n## Continuous Architecture in Practice Part 1/2 \u2022 Eoin Woods &amp; Simon Brown \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=963Ls1X17zs](https://www.youtube.com/watch?v=963Ls1X17zs)\n\n * Documentation is essential for software development, but many teams have not yet reached this point.\n* Younger or less mature engineering teams may avoid documentation, but they often realize its importance in two to three years.\n* Architecture Decision Records (ADRs) are becoming more popular, as they allow capturing and documenting key decisions made during the development process.\n* Recording the rationale behind these decisions can prove valuable in the future.\n* While the concept of capturing and checking decisions into code is not new, only a few teams practice it. The growing popularity of ADRs shows that this trend is changing.\n\n\n## Learnings from Running 1000s of Production RabbitMQ Clusters \u2022 Lovisa Johansson \u2022 RabbitMQ Summit\n\nURL: [https://www.youtube.com/watch?v=nxQrpLfX3rs](https://www.youtube.com/watch?v=nxQrpLfX3rs)\n\n * CloudAMQP is a managed RabbitMQ service that provides various configurations for different use cases.\n* Some applications require high throughput, while others prioritize high availability and consistency.\n* Customers can easily set up a cluster specified for their selected use case based on best practice recommendations.\n* CloudAMQP has a list of recommendations for new users to quickly start using RabbitMQ.\n* The speaker invites the community to contribute to the list or share different opinions.\n\n\n## Stop Punching Yourself in the Face \u2022 Hannes Lowette \u2022 GOTO 2020\n\nURL: [https://www.youtube.com/watch?v=_-ne2kwF8tc](https://www.youtube.com/watch?v=_-ne2kwF8tc)\n\n * Hannes' talk focuses on the importance of being a responsible developer\n* He shares a story about \"Chad\", a fictional developer who is well-meaning but often makes mistakes due to carelessness or lack of knowledge.\n* To address this issue, Hannes created the \"red certification program\" to help developers become more responsible and aware of best practices.\n* The website redcert.com contains a quiz and resources for developers to learn about responsible development.\n* Hannes encourages developers to follow @redcert on Twitter and spread the word about being a responsible developer.\n* He also shares his personal background, including his role at Access in Belgium, having three kids, and his hobbies of building guitars and playing with Legos.\n* His contact information is shared as well, including his Twitter handle (@hannesvdv) and icq number (358491287).\n\n\n## Software Architecture for Developers Part 2/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021\n\nURL: [https://www.youtube.com/watch?v=gDlE4q3mozY](https://www.youtube.com/watch?v=gDlE4q3mozY)\n\n * Simon is a software architect and author of the book \"Software Architecture for Developers\"\n* The book focuses on how to design good software architecture, focusing on practical techniques for developers\n* He emphasizes that software architecture should not be overcomplicated or made too complex\n* Good architecture should provide flexibility and make it easier for future changes\n* A good architect should be able to understand the needs of their customers and stakeholders, as well as being technically competent\n* The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n* Simon recommends several books for further learning: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n* He also mentions that the book will be available as an e-book, audiobook, and paperback in May 2021.\n\nNote: I am not sure if you meant to write this summary as a markdown style or just plain text, but here it is in markdown format.\n```vbnet\n- Simon is a software architect and author of the book \"Software Architecture for Developers\"\n- The book focuses on how to design good software architecture with practical techniques for developers\n- He emphasizes that software architecture should not be overcomplicated or made too complex\n- Good architecture should provide flexibility and make it easier for future changes\n- A good architect should understand the needs of their customers and stakeholders, as well as being technically competent\n- The role of a software architect is changing, with more emphasis on collaboration and working closely with developers\n- Simon recommends several books: \"Design It!\", \"Clean Code\", and \"Documenting Software Architectures\"\n- The book will be available as an e-book, audiobook, and paperback in May 2021.\n</code></pre>"},{"location":"goto_sw_arch_list/#why-architectural-work-comes-before-coding-part-12-simon-brown-stefan-tilkov-goto-2021","title":"Why Architectural Work Comes Before Coding Part 1/2 \u2022 Simon Brown &amp; Stefan Tilkov \u2022 GOTO 2021","text":"<p>URL: https://www.youtube.com/watch?v=TE4rKZ7M1aM</p> <ul> <li>Discussing modeling in software development</li> <li>Models are abstractions of the system that we're trying to build</li> <li>Modeling is a way for us to think about what our system should do before we start writing code</li> <li>Two main reasons to model: communication and documentation</li> <li>Three types of models: data, behavioral, and structural</li> <li>Tools like Lucidchart, Visio, or Draw.io can be used for modeling</li> <li>UML (Unified Modeling Language) is a widely used notation for modeling in software development</li> <li>UML provides various ways to customize the model but it can also be complex and powerful than needed</li> <li>Go To Conference offers a promo code BOOKCLUB for viewers of this episode.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-2-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 2 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=nbqh1EK_FU8</p> <ul> <li>The role of an architect is to provide value and get out of the way</li> <li>Architectural decisions should be made with flexibility in mind, allowing for changes to be made easily in the future</li> <li>Manager systems architectural evolution: have a plan for how you want to move the system forward, as no system can tolerate staying the same forever</li> <li>Avoid creating roadblocks or becoming a bottleneck in any way, whether through system decisions, development environment decisions, or process decisions</li> <li>Provide value to the people who have to suffer through your decisions and try not to inhibit their work too much.</li> </ul>"},{"location":"goto_sw_arch_list/#balancing-choreography-and-orchestration-bernd-rucker-goto-2020","title":"Balancing Choreography and Orchestration \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=zt9DFMkjkEA</p> <p>Summary:</p> <ul> <li>Orchestration and choreography are two different communication styles used in microservices architecture.</li> <li>Orchestration is command-driven, centralized, and has a unidirectional flow of control. Choreography is event-driven, decoupled, and has a bidirectional flow of control.</li> <li>Both orchestration and choreography have their own advantages and disadvantages. Orchestration provides better observability and control, while choreography promotes loose coupling and autonomy.</li> <li>It's important to balance both styles in a microservices architecture based on the use case and requirements.</li> <li>The direction of dependency and responsibility should be considered when deciding between orchestration and choreography for a specific service.</li> <li>Orchestration is not necessarily centralized, and choreography is not always decoupled. It depends on the implementation and design.</li> </ul> <p>Q&amp;A:</p> <ul> <li>What is the difference between synchronous and asynchronous communication?<ul> <li>Synchronous communication waits for a response before continuing, while asynchronous communication does not.</li> </ul> </li> <li>Can you have orchestration in an event-driven architecture?<ul> <li>Yes, it's possible to use command-driven orchestration in an event-driven architecture by having a centralized component that sends commands to other services.</li> </ul> </li> <li>How do you ensure consistency between microservices?<ul> <li>Consistency can be ensured using various techniques such as eventual consistency, transactions, and event sourcing. It depends on the use case and requirements.</li> </ul> </li> <li>What are some tools for implementing orchestration and choreography?<ul> <li>Tools for orchestration include Kubernetes, AWS Step Functions, and Azure Logic Apps. Tools for choreography include Apache Kafka, RabbitMQ, and AWS EventBridge.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#five-things-every-developer-should-know-about-software-architecture-simon-brown-goto-2020","title":"Five Things Every Developer Should Know about Software Architecture \u2022 Simon Brown \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=9Az0q2XHtH8</p> <p>Here are the five things every developer should know about software architecture, as presented by Kevlin Henney:</p> <ul> <li>Architecture is a significant decision that is hard to change. It's not just code or infrastructure, but encompasses both and how they interact.</li> <li>Good architecture enables change, rather than dictating it. It provides choices, rather than limiting them.</li> <li>The design of software and the organization of teams are intimately related. Architecture should support communication and collaboration between teams.</li> <li>Microservices are not a silver bullet or a default choice. They should be used only when they provide a clear advantage over other architectural styles.</li> <li>When considering microservices, think about the problem you're trying to solve, rather than starting from scratch with a view to rewrite your monolith as a collection of microservices. You may end up with a distributed monolith if you're not careful.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-part-1-stefan-tilkov-goto-2020","title":"\u201cGood Enough\u201d Architecture Part 1 \u2022 Stefan Tilkov \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=RtRpL3Ndi0c</p> <ul> <li>The talk discussed the importance of architecture in software development</li> <li>Architecture is defined as the stuff that's hard to change, and it's important to be explicit about it</li> <li>The speaker advised against creating bottlenecks or roadblocks and being someone who everyone else has to wait on</li> <li>Motivation comes from cross-functional teams that can deliver something end-to-end</li> <li>Decisions should be made at the level closest to the actual problem, where the work happens</li> <li>The speaker encouraged having few rules, making it easier for people to adhere to them.</li> </ul>"},{"location":"goto_sw_arch_list/#software-is-details-kevlin-henney-goto-2020","title":"Software Is Details \u2022 Kevlin Henney \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=kX0prJklhUE</p> <ul> <li>The speaker discussed the importance of understanding and testing software configurations.</li> <li>Many systems have latent configuration errors due to lack of checking and testing.</li> <li>Configuration is often seen as a detail, but it can be critical to the functioning of the software.</li> <li>The speaker quoted Robert Persig's observation that even seemingly unimportant parts, like a screw on a motorcycle, can be vital to the overall function of the system.</li> <li>The speaker encouraged the audience to expand their knowledge of software configurations and to test them thoroughly.</li> </ul>"},{"location":"goto_sw_arch_list/#automating-processes-in-modern-architectures-bernd-rucker-goto-2020","title":"Automating Processes in Modern Architectures \u2022 Bernd R\u00fccker \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IBfuKA9Nc3M</p> <ul> <li>Workflows are a way to manage the state of long-running processes</li> <li>Visual processes, such as BPMN, make it easier to discuss and change workflows</li> <li>Event driven choreography is useful but not a magic cure-all, and orchestration is still necessary at certain points in an architecture</li> <li>Decentralized and asynchronous event driven choreography can be used</li> <li>Q&amp;A:<ul> <li>How do you handle errors in workflows?<ul> <li>There are several ways to handle errors in workflows, such as using catch events or error boundaries. It depends on the specific use case.</li> </ul> </li> <li>Can you use microservices with a monolithic workflow engine?<ul> <li>Yes, it is possible to use microservices with a monolithic workflow engine, but it may not be the best approach. It is better to have a decentralized architecture where each service has its own state management and workflow capabilities.</li> </ul> </li> <li>How do you handle retries in workflows?<ul> <li>Retries can be handled using compensation mechanisms or by configuring the workflow engine to automatically retry failed tasks. It depends on the specific use case.</li> </ul> </li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#getting-started-with-service-mesh-hanna-prinz-eberhard-wolff-goto-2020","title":"Getting started with Service Mesh \u2022 Hanna Prinz &amp; Eberhard Wolff \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=w14ge2838Vs</p> <ul> <li>Service meshes are a way to add functionality like traffic management, security, and observability to distributed applications.</li> <li>The most popular service mesh implementations include Istio, Linkerd, and Consul Connect.</li> <li>Service meshes can be installed as sidecars alongside application containers in a Kubernetes cluster or using a data plane proxy such as Envoy.</li> <li>Service meshes provide features like traffic management (route requests to specific versions of services), security (mutual TLS authentication, authorization policies), and observability (tracing, logging, metrics).</li> <li>It is important to consider the trade-offs when deciding whether to use a service mesh, such as added complexity and potential performance overhead.</li> <li>The hosts recommended some resources for learning more about service meshes, including the \"Service Mesh Patterns\" book and the \"Getting Started with Service Mesh on Kubernetes\" guide. They also suggested trying out examples of applications using service meshes, such as Istio and Linkerd.</li> </ul>"},{"location":"goto_sw_arch_list/#why-are-distributed-systems-so-hard-denise-yu-goto-2020","title":"Why Are Distributed Systems so Hard? \u2022 Denise Yu \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=IzbYUjPAm5A</p> <ul> <li>Humans are the last line of defense against failures in complex systems</li> <li>Designing for humans means:<ul> <li>Empathizing with every human who interfaces with the system</li> <li>Challenging ourselves to design for the humans who operate and build the systems</li> <li>Choosing tools and processes that promote learning and sustainable pace</li> <li>Understanding and designing for the whole system, including the human parts</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#when-to-use-microservices-and-when-not-to-sam-newman-martin-fowler-goto-2020","title":"When To Use Microservices (And When Not To!) \u2022 Sam Newman &amp; Martin Fowler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=GBTdnfD6s5Q</p> <ul> <li>Microservices are a way of structuring an application as a collection of small services, which can be developed and maintained independently</li> <li>Benefits of using microservices include easier scalability, faster deployment, and increased flexibility</li> <li>Challenges of using microservices include increased complexity and the need for more sophisticated deployment and monitoring tools</li> <li>When considering whether to use microservices, it's important to consider the needs and constraints of your organization, as well as the specific requirements of your application</li> <li>It's not necessary to use a specific technology or platform in order to adopt a microservices architecture</li> <li>To get the most out of using microservices, it's important to have a clear understanding of the problem you're trying to solve and to be willing to adapt your organization and processes as needed.</li> </ul>"},{"location":"goto_sw_arch_list/#saas-deep-dive-designing-and-building-multi-tenant-solutions-tod-golding-goto-2020","title":"SaaS Deep Dive: Designing and Building Multi-Tenant Solutions \u2022 Tod Golding \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=joz0DoSQDNw</p> <ul> <li>Multi-tenancy is important for SaaS applications</li> <li>There are different ways to implement multi-tenancy, such as:<ul> <li>Shared database with separate schemas or tables</li> <li>Separate databases for each tenant</li> <li>Virtual private cloud (VPC) for each tenant</li> </ul> </li> <li>It's best to limit the developer awareness of multi-tenancy through good design and architecture constructs</li> <li>Data partitioning and finding the right fit for your data on a micro service by micro service basis is important</li> <li>Tenant isolation is another layer of protection on top of authentication and authorization</li> <li>Metrics, monitoring, and alerting are also important considerations for multi-tenancy in SaaS applications.</li> </ul> <p>Contact:</p> <ul> <li>Email address provided in the presentation for further questions or information.</li> </ul>"},{"location":"goto_sw_arch_list/#practical-end-to-end-container-security-at-scale-yashvier-kosaraju-goto-2020","title":"Practical End-to-End Container Security at Scale \u2022 Yashvier Kosaraju \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=rcrmTHOIz24</p> <ul> <li>Container security is becoming increasingly important as containers are being used more widely in production environments.</li> <li>Containers can introduce new attack surfaces, such as image vulnerabilities, container breakouts, and privilege escalation.</li> <li>To secure containers, it's essential to have a comprehensive security strategy that includes image scanning, runtime protection, network segmentation, access control, and monitoring.</li> <li>Image scanning can help identify known vulnerabilities, configuration errors, and malware in container images before they are deployed in production.</li> <li>Runtime protection can help detect and prevent suspicious activities in running containers, such as unauthorized access, process injection, and network communication.</li> <li>Network segmentation can limit the attack surface by isolating containers in different networks or subnets.</li> <li>Access control can restrict who can access and manage containers, images, and other container resources.</li> <li>Monitoring can help detect and respond to security incidents by providing real-time visibility into container activities, such as CPU usage, memory consumption, network traffic, and process behavior.</li> <li>Some popular container security tools include Clair, Trivy, Aqua Security, Twistlock, Anchore Engine, and Falco.</li> <li>Best practices for container security include keeping containers up-to-date, minimizing image sizes, using multi-stage builds, configuring resource limits, disabling unnecessary services, and monitoring container activities.</li> <li>Resources for learning more about container security include the CNCF Container Security Special Interest Group, the Open Container Initiative (OCI), and the Red Hat Enterprise Linux Container Host Security Guide.</li> </ul>"},{"location":"goto_sw_arch_list/#ray-a-system-for-distributed-applications-dean-wampler-goto-2020","title":"Ray: A System for Distributed Applications \u2022 Dean Wampler \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=uPeCk7Wx8HU</p> <ul> <li>Introduced Ray, an open-source distributed computing framework developed by RISELab at UC Berkeley.</li> <li>Ray provides a single API for building and running applications at scale, and can be used to parallelize CPU/GPU workloads and build distributed services.</li> <li>Ray is designed to handle complex workloads and provide fault tolerance, allowing users to build highly available systems with minimal overhead.</li> <li>Some common use cases for Ray include machine learning, AI, data analytics, and gaming.</li> <li>Ray has a growing community of users and contributors, and is used by several large companies including Amazon Web Services, Microsoft, and Google.</li> <li>Ray can be used in conjunction with other frameworks such as TensorFlow and PyTorch to provide distributed training capabilities for machine learning models.</li> <li>Ray's architecture includes a global control plane that manages cluster resources and a set of worker nodes that execute tasks and store data.</li> <li>Ray provides a set of high-level APIs for building applications, including:<ul> <li>Actors: Object-like entities that can be used to parallelize workloads and share state.</li> <li>Tasks: Functions that can be executed in parallel on the cluster.</li> <li>Datasets: Distributed data structures that allow users to perform efficient data processing tasks at scale.</li> </ul> </li> <li>Ray also provides several lower-level APIs for advanced use cases, including direct access to the underlying object store and network communication layer.</li> <li>Ray's performance is competitive with other distributed computing frameworks, and it can be used to build highly scalable systems with minimal overhead.</li> <li>Ray has a flexible deployment model, allowing users to run it on their own hardware or in the cloud using managed services such as Amazon ECS and Kubernetes.</li> <li>Ray has several resources available for learning and development, including documentation, tutorials, and community support.</li> <li>Ray is an open-source project, licensed under the Apache 2.0 license.</li> </ul>"},{"location":"goto_sw_arch_list/#dont-get-blamed-for-your-choices-hannes-lowette-goto-2020","title":"Don\u2019t Get Blamed for Your Choices \u2022 Hannes Lowette \u2022 GOTO 2020","text":"<p>URL: https://www.youtube.com/watch?v=Mo9hm51NXxw</p> <ul> <li>Hannes' talk is about the \"Chad developer\" who makes decisions based on emotions and personal preferences rather than data and facts.</li> <li>The Chad developer often fails to deliver software in a better way because they don't make informed decisions.</li> <li>Hannes emphasizes the importance of making data-driven decisions as a team, using tools such as A/B testing to gather information and make informed choices.</li> <li>He encourages developers to avoid falling into the trap of being a Chad developer by making informed decisions based on data and facts.</li> <li>Hannes also talks about his company, Access, which offers consulting services and confidence coaching for teams looking to improve their decision-making processes.</li> <li>He ends his talk by encouraging the audience to spread the message of making better decisions as a team and becoming better developers in the process.</li> </ul>"},{"location":"goto_sw_arch_list/#clean-architecture-with-aspnet-core-30-jason-taylor-goto-2019","title":"Clean Architecture with ASP.NET Core 3.0 \u2022 Jason Taylor \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=dK4Yb6-LxAk</p> <ul> <li>The speaker presented an approach for building REST APIs using ASP.NET Core and OpenAPI.</li> <li>Controllers in this approach should not contain business logic, only HTTP request/response handling.</li> <li>Application logic is contained in the application layer.</li> <li>Well-defined view models should be created and consumed by controllers.</li> <li>Open API bridges the gap between front-end and back-end and automates the generation of OpenAPI specifications and clients using a simple msbuild task.</li> <li>The speaker recommended trying out this approach by grabbing the code or installing the template.</li> <li>Key points:<ul> <li>Controllers should not contain any business logic.</li> <li>Application logic lives in the application layer.</li> <li>Use well-defined view models and consume them in controllers.</li> <li>OpenAPI automates generation of specifications and clients.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#explore-your-microservices-architecture-with-graph-theory-network-science-nicki-watt-goto-2019","title":"Explore your Microservices Architecture with Graph Theory &amp; Network Science \u2022 Nicki Watt \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=0G5O1ffYIPI</p> <ul> <li>The speaker presented a case study on using graph databases and graph algorithms to analyze microservice architecture.</li> <li>They used the Neo4j database and Cypher query language for data modeling and analysis.</li> <li>They collected data from various sources such as JIRA, GitHub, and logs.</li> <li>They modeled the data in a graph format where nodes represent entities such as services, repositories, and users, and edges represent relationships between them.</li> <li>They used graph algorithms such as community detection, centrality measures, and pathfinding to analyze the data.</li> <li>They identified clusters of related services, key services that act as hubs, and service dependencies.</li> <li>They also analyzed issues, pull requests, and commits to identify patterns and trends in development workflows.</li> <li>The analysis helped them understand the complexity of their microservice architecture, identify bottlenecks, and optimize their development processes.</li> <li>The speaker recommended the book \"Graph Algorithms: Practical Examples in Apache Spark and Neo4j\" by Mark Needham and Aimee Hodler for further reading on this topic.</li> </ul>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=wjF4X9t3FMk</p>"},{"location":"goto_sw_arch_list/#summary-of-transcript","title":"Summary of Transcript:","text":"<ul> <li>The speaker talks about the importance of keeping up with technology and how things move fast in the tech industry.</li> <li>They mention that while it can be hard to keep up, it's necessary to stay updated on new technologies and tools.</li> <li>They highlight the benefits of using Kubernetes for container orchestration, but caution against ignoring other options like Docker Swarm.</li> <li>The speaker emphasizes the importance of testing new technology in production environments to fully understand its impact.</li> <li>They also stress the need to prioritize security and make it everyone's job.</li> <li>The speaker mentions some organizations that are doing great work in the tech industry, including Red Hat, SUSE, IBM, and others.</li> </ul>"},{"location":"goto_sw_arch_list/#good-enough-architecture-stefan-tilkov-goto-2019","title":"\"Good Enough\" Architecture \u2022 Stefan Tilkov \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=PzEox3szeRc</p> <ul> <li>Architectural decisions should be made consciously, weighing the risks and benefits of simplicity versus adaptability.</li> <li>The YAGNI (You Ain't Gonna Need It) principle means choosing the simplest thing that will work, creating evolvable structures.</li> <li>Manage your system's evolution by making deliberate decisions about what to change and how to change it within the possibilities of its original design.</li> <li>An architect's role is not to force personal tastes on everyone else in the company, but to do meaningful and valuable work and get out of the way as fast as possible.</li> </ul>"},{"location":"goto_sw_arch_list/#battle-of-the-circuit-breakers-resilience4j-vs-istio-nicolas-frankel-goto-2019","title":"Battle of the Circuit Breakers: Resilience4J vs Istio \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=kR2sm1zelI4</p> <ul> <li>The speaker discussed using circuit breakers and caching to manage errors and improve performance in web applications.</li> <li>A circuit breaker is a design pattern used to prevent a system from repeatedly attempting to perform an operation that is likely to fail, thus avoiding overloading the system.</li> <li>Caching is a technique for storing frequently accessed data in memory to reduce the time it takes to retrieve it.</li> <li>The speaker demonstrated using the Hystrix library, which provides circuit breaker and caching functionality, in a Java-based web application.</li> <li>The speaker discussed how to configure the circuit breaker's behavior, such as setting a threshold for the number of failures before tripping the circuit, and how to use caching to improve performance by storing frequently accessed data in memory.</li> <li>The speaker also discussed the trade-offs between using a circuit breaker and caching, such as the risk of serving stale data from the cache, and the importance of monitoring and testing the system to ensure it is behaving as expected.</li> </ul>"},{"location":"goto_sw_arch_list/#visualizing-cloud-systems-lynn-langit-goto-2019","title":"Visualizing Cloud Systems \u2022 Lynn Langit \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=HHitdmje1ok</p> <ul> <li>The speaker is Lin Lang, an architect at Capital One.</li> <li>She talked about how her team uses a combination of data science and software engineering to build systems that can be used by researchers around the world.</li> <li>She discussed their use of visualization tools, such as 3D printing, to help communicate complex scientific concepts and data to non-scientists.</li> <li>She also touched on the importance of reproducibility in scientific research and how it can be improved through better communication and collaboration between researchers and engineers.</li> <li>The speaker highlighted a picture of a ribosome, which was visualized by Venki Ramakrishnan and his collaborators, who were awarded the Nobel Prize for their work on this.</li> <li>She encouraged the audience to learn more about bioinformatics and to work on visualization of systems to improve their quality and reproducibility.</li> </ul>"},{"location":"goto_sw_arch_list/#re-architecting-2-tier-to-3-tier-thomas-hejlsberg-niels-hallenberg-goto-2019","title":"Re-architecting 2-tier to 3-tier \u2022 Thomas Hejlsberg &amp; Niels Hallenberg \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=AQJYLGg1JCk</p> <ul> <li>The presentation is about a case study on how a large organization implemented event sourcing and CQRS in their system.</li> <li>The main challenges were:<ul> <li>Handling the complexity of multiple teams working on different parts of the system</li> <li>Ensuring good enough quality for each team to work with</li> <li>Deciding when the implementation is done</li> </ul> </li> <li>The solution was to create a cookbook that engaged a number of application programmers to go through and decode.</li> <li>The importance of forming teams with dedicated tasks was emphasized.</li> </ul>"},{"location":"goto_sw_arch_list/#monolith-decomposition-patterns-sam-newman-goto-2019","title":"Monolith Decomposition Patterns \u2022 Sam Newman \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=9I9GdSQ1bbM</p> <ul> <li>The talk is about designing distributed systems, specifically focusing on building a system for selling CDs in a record store.</li> <li>The speaker emphasizes the importance of understanding the problem domain and defining clear requirements before diving into the design.</li> <li>They introduce the CAP theorem and discuss the trade-offs between consistency, availability, and partition tolerance in distributed systems.</li> <li>The speaker presents several patterns for building distributed systems:<ol> <li>Sharding - breaking data into smaller chunks and distributing them across multiple nodes.</li> <li>Replication - storing multiple copies of data to increase availability and handle failures.</li> <li>Quorums - a mechanism for achieving consistency in replicated data stores.</li> <li>Command Query Responsibility Segregation (CQRS) - separating reads and writes to simplify the system design.</li> <li>Event Sourcing - storing the history of changes as events, which can be used to reconstruct the state of the system.</li> <li>Sagas - coordinating multiple services in a distributed transaction using a saga pattern.</li> </ol> </li> <li>The speaker also highlights the importance of monitoring and logging in distributed systems for debugging and maintaining the system.</li> </ul>"},{"location":"goto_sw_arch_list/#how-to-become-a-great-software-architect-eberhard-wolff-goto-2019","title":"How to Become a Great Software Architect \u2022 Eberhard Wolff \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=v_nhv6aY1Kg</p> <ul> <li>Transcript is a garbled text that appears to be a result of broken OCR or similar technology.</li> <li>It's difficult to make out any coherent meaning from the transcript, but here are some potential phrases and words that can be discerned:<ul> <li>software communications agencies</li> <li>soccer cage soccer</li> <li>cappuccinos haut place of hope</li> <li>minister otto schily dem selbstmord</li> <li>actully in response to be on the go 22</li> <li>bruno bevor es oft dass die etikette</li> <li>sind wird f\u00fcr komplexe zwei mutige den architekt und meint nur im may not cold den mietern des tempels</li> <li>manchmal important to be der communicator kombat der das management</li> <li>software steckt ratte mimi nie ins bett ihres of technical problems er wurde an der station slater disney think about cars konnte bessere minsk</li> <li>der ist am problem to mac edition bordet bei dem crash is enough to say</li> <li>transcript appears to be a result of broken OCR or similar technology.</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#uncoupling-michael-nygard-goto-2018","title":"Uncoupling \u2022 Michael Nygard \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=esm-1QXtA2Q</p> <ul> <li>Functional/operational coupling is the same for GraphQL and REST</li> <li>Semantic coupling in GraphQL is stronger because of its web-like object querying, but can be mitigated by using interface layer objects instead of domain layer objects</li> <li>In pure REST (Level 5 Richardson style), semantic coupling is strong as consumers are allowed to change any aspect of the representation and put it back, encouraging knowledge about everything in that resource.</li> </ul>"},{"location":"goto_sw_arch_list/#prioritizing-technical-debt-as-if-time-and-money-matters-adam-tornhill-goto-2019","title":"Prioritizing Technical Debt as if Time and Money Matters \u2022 Adam Tornhill \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fl4aZ2KXBsQ</p> <ul> <li>The talk was about using behavioral code analysis to prioritize technical depth when working on software design.</li> <li>Behavioral code analysis is a way of analyzing the structure and behavior of code to understand how it changes over time.</li> <li>Prioritizing technical depth means focusing on making the most important parts of the system easier to change, rather than trying to make every part of the system perfect.</li> <li>Locality of change is an enabler for scaling up systems because it allows teams to work on different parts of the system independently without affecting each other.</li> <li>Behavioral code analysis and these techniques for prioritizing technical depth have a place in software development because they give insights that cannot be obtained from the code alone.</li> <li>The main use case for this analysis is that they help focus expertise and attention to the parts of the system that are likely to change the most.</li> <li>The talk concluded with a thank you to the audience for attending and listening.</li> </ul>"},{"location":"goto_sw_arch_list/#building-resilient-frontend-architecture-monica-lent-goto-2019","title":"Building Resilient Frontend Architecture \u2022 Monica Lent \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=TqfbAXCCVwE</p> <ul> <li>The talk is about software architecture in front-end development.</li> <li>Front-end developers should care about software architecture because it helps to build scalable and maintainable applications.</li> <li>Software architecture can be defined as the high-level structure of a system, including its components and their relationships.</li> <li>There are different architectural patterns that can be applied in front-end development, such as monolithic, modular, or micro-frontends.</li> <li>The talk covers some principles of good software architecture, such as separation of concerns, single responsibility, and loose coupling.</li> <li>It also discusses common pitfalls in front-end architecture, such as mixing business logic with presentation logic or using global state.</li> <li>Finally, the talk encourages front-end developers to learn from other communities of programming languages or paradigms and to keep an open mind about software architecture.</li> </ul>"},{"location":"goto_sw_arch_list/#building-a-blockchain-in-erlang-ulf-wiger-goto-2019","title":"Building a Blockchain in Erlang \u2022 Ulf Wiger \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=QLwFpT_0c4U</p> <ul> <li>Erlang is a dynamic symbolic language</li> <li>State machines are used in Eternity blockchain to manage state transitions and handle messages</li> <li>Cubic quickcheck is used for property-based testing, which helps ensure the correctness of state transitions</li> <li>Proper is an open-source equivalent to cubic quickcheck for other languages</li> <li>Eternity foundation provides incubators and grants for developers interested in working on the Eternity blockchain</li> </ul>"},{"location":"goto_sw_arch_list/#all-the-worlds-a-staging-server-heidi-waterhouse-goto-2019","title":"All The World\u2019s A Staging Server \u2022 Heidi Waterhouse \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=eyvrtU4dYgM</p> <ul> <li>Software development is complex</li> <li>Testing is important to ensure software works as expected</li> <li>\"Test in production\" is a strategy to test software on live systems with real users and data</li> <li>Reasons to test in production:<ul> <li>Tests are more realistic, closer to user behavior</li> <li>Faster feedback loop, issues can be fixed immediately</li> <li>Easier to scale tests, no need for separate testing environments</li> <li>Reduces the risk of missing critical bugs</li> </ul> </li> <li>Steps to test in production safely:<ul> <li>Start with a small set of users and increase over time</li> <li>Use feature flags to enable/disable features for testing</li> <li>Monitor systems closely during testing</li> <li>Have a rollback plan if issues arise</li> </ul> </li> <li>Common misconceptions about testing in production:<ul> <li>Testing can't be done in production because it will affect users</li> <li>It is not possible to test in production because of regulatory reasons</li> <li>Testing in production is risky</li> </ul> </li> <li>Using flags allows for gradual rollouts and rollbacks, reducing risk</li> <li>Monitoring is crucial when testing in production</li> <li>Benefits of testing in production include:<ul> <li>Faster feedback loop</li> <li>More realistic test environment</li> <li>Easier to scale tests</li> <li>Reduced risk of missing critical bugs</li> </ul> </li> <li>Test in production because you are testing anyway</li> <li>Use feature flags to reduce risk</li> <li>Monitor closely and have a rollback plan ready</li> </ul>"},{"location":"goto_sw_arch_list/#a-case-for-outside-in-design-sandro-mancuso-goto-2019","title":"A Case For Outside-In Design \u2022 Sandro Mancuso \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=fKHYBnuPApY</p> <ul> <li>The speaker is discussing their experiences with technical debt and how to manage it effectively.</li> <li>They define technical debt as the difference between what was planned and what was actually built.</li> <li>Technical debt can be beneficial in some cases, such as when it allows for faster delivery of a product. However, it can also become a hindrance if not managed properly.</li> <li>The speaker suggests using the \"London style\" TDG (Test-Driven Gardening) approach to manage technical debt. This involves test-driving the code and continuously refactoring it to keep it clean and maintainable.</li> <li>They also recommend using tools like SonarQube to monitor the health of the codebase and identify areas that need improvement.</li> <li>The speaker shares their experiences pairing with another developer and experimenting with different TDD styles, such as the \"elastic\" style and the \"classic\" style.</li> <li>They emphasize the importance of continuous learning and improving one's skills to stay up-to-date with the latest tools and techniques in software development.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-fast-microvm-for-serverless-computing-radu-weiss-arun-gupta-goto-2019","title":"Secure &amp; Fast microVM for Serverless Computing \u2022 Radu Weiss &amp; Arun Gupta \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=oKKOBsqQndY</p> <ul> <li>Firecracker is a virtual machine monitor (VMM) that uses the Linux KVM to create and manage microVMs.</li> <li>It is designed to provide secure and fast isolation for multi-tenant container environments.</li> <li>Firecracker has a small attack surface, with only about 200K lines of code, which makes it easier to audit and maintain.</li> <li>The VMM has a minimalist design, with only the necessary components included to provide efficient and secure virtualization.</li> <li>It supports lightweight networking and block storage devices, allowing for fast creation and destruction of microVMs.</li> <li>Firecracker is well-suited for use in serverless and container orchestration platforms, where it can provide secure and fast isolation for functions and containers.</li> <li>The project is open source and available on GitHub.</li> </ul>"},{"location":"goto_sw_arch_list/#cqrs-event-sourcing-apps-with-axon-pivotal-cloud-foundry-s-v-beelen-b-wilcock-goto-2019","title":"CQRS &amp; Event Sourcing Apps with Axon &amp; Pivotal Cloud Foundry \u2022 S. v. Beelen &amp; B. Wilcock \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=moRDmcl5_WY</p> <ul> <li>Introduction to Axon Framework and Axon Server</li> <li>Demonstration of a simple event sourcing and CQRS pattern using Axon Framework</li> <li>Explanation of the reference architecture for Axon Trader, a trading platform built with Axon Framework and Axon Server</li> <li>Overview of the Wallet demo, an example of how to use Axon Framework with Spring Boot and PCF</li> <li>Q&amp;A session on using Axon Framework and Axon Server in cloud-native applications.</li> </ul>"},{"location":"goto_sw_arch_list/#from-spring-boot-apps-to-functional-kotlin-nicolas-frankel-goto-2019","title":"From Spring Boot Apps to Functional Kotlin \u2022 Nicolas Frankel \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=f6a78mCrSeE</p> <p>Summary:</p> <ul> <li>Spring Boot is a popular framework for building web applications in Java.</li> <li>The presenter discussed some of the problems with using magic strings and annotations in Spring Boot, such as difficulty in understanding code and refactoring.</li> <li>He suggested using Kotlin instead of Java to take advantage of its type safety and null safety features, which can help eliminate some common errors.</li> <li>The presenter then discussed how to remove magic from Spring Boot by gradually migrating from annotations to the functional programming style. This involves:<ul> <li>Migrating routes from controller classes to route DSL files.</li> <li>Replacing beans with a bean DSL.</li> <li>Using the web MVC DSL instead of reactive programming.</li> </ul> </li> <li>The presenter also mentioned that Spring Boot is working on improving its functional programming support in future releases.</li> </ul> <p>The repository for this talk can be found at https://github.com/bodden/spring-boot-magic.</p>"},{"location":"goto_sw_arch_list/#modern-continuous-delivery-ken-mugrage-goto-2019_1","title":"Modern Continuous Delivery \u2022 Ken Mugrage \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=w008iz_UwDk</p> <ul> <li>Transcript summary:<ul> <li>The talk covers the challenges and strategies for decomposing monolithic applications into microservices.</li> <li>Key takeaways include the need to understand the business domain, design services with clear boundaries, and use appropriate technology and architecture patterns.</li> <li>The importance of automation, monitoring, and security are also emphasized.</li> </ul> </li> <li>Key points:<ol> <li>Understand the business domain and context before decomposing a monolith.</li> <li>Design services with clear boundaries that align with business capabilities.</li> <li>Use appropriate technology and architecture patterns for each service.</li> <li>Implement automation for building, testing, and deploying services.</li> <li>Monitor services to ensure they are performing as expected.</li> <li>Implement security measures to protect services and data.</li> </ol> </li> <li>Quotes:<ul> <li>\"The first thing you need to do is understand the business domain.\"</li> <li>\"Design services with clear boundaries that align with business capabilities.\"</li> <li>\"Use appropriate technology and architecture patterns for each service.\"</li> <li>\"Implement automation for building, testing, and deploying services.\"</li> <li>\"Monitor services to ensure they are performing as expected.\"</li> <li>\"Implement security measures to protect services and data.\"</li> </ul> </li> </ul>"},{"location":"goto_sw_arch_list/#temporal-modelling-mathias-verraes-goto-2019","title":"Temporal Modelling \u2022 Mathias Verraes \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=KNqOWT0lOYY</p> <ul> <li>Blockchain technology allows for decentralized and distributed databases that can record transactions between two parties efficiently and in a verifiable and permanent way.</li> <li>Bitcoin is an example of a popular blockchain technology that enables the transfer of value without needing a trusted third party, like a bank or government.</li> <li>Transactions are grouped into blocks and added to the blockchain through a process called mining, which involves solving complex mathematical problems.</li> <li>The decentralized nature of blockchain technology means that it is not controlled by any single entity, making it more secure and resistant to tampering.</li> <li>Blockchain technology has potential applications beyond cryptocurrency, such as supply chain management, voting systems, and digital identities.</li> <li>In the context of online payments, blockchain technology can provide faster and cheaper transactions compared to traditional methods like credit cards or PayPal.</li> <li>The time it takes for a transaction to be confirmed on the Bitcoin network is around 10 minutes, but this can vary depending on the network's congestion.</li> <li>In the case of online payments with blockchain technology, the confirmation of the transaction is crucial to ensure that the payment has been processed correctly and cannot be reversed.</li> <li>It is possible to use other blockchain networks that offer faster confirmation times, such as Ethereum or Ripple. However, they may have different trade-offs in terms of cost, security, and adoption.</li> <li>In summary, while there are some technical considerations when it comes to using blockchain technology for online payments, the main advantage is that it allows for decentralized and secure transactions without needing a trusted third party.</li> </ul>"},{"location":"goto_sw_arch_list/#getting-to-grips-with-kubernetes-rbac-liz-rice-goto-2019","title":"Getting to Grips with Kubernetes RBAC \u2022 Liz Rice \u2022 GOTO 2019","text":"<p>URL: https://www.youtube.com/watch?v=4HMRFcg6nEY</p> <ul> <li>Kubernetes is a container orchestration tool</li> <li>Security in Kubernetes involves configuring permissions upfront and following the principle of least privilege</li> <li>Users and groups are first-class things in a Linux system, but including eTI's they're expected to be defined somewhere else in Kubernetes</li> <li>There are different ways that users can authenticate with Kubernetes, such as using a username and password or using a token</li> <li>Once a user is authenticated, they need to have the correct permissions to perform certain actions on resources</li> <li>These permissions are granted through RBAC rules, which specify who can do what on which resources</li> <li>It's important to configure these permissions correctly, as giving too many permissions to a user or group can lead to security vulnerabilities</li> <li>There are three different types of resources in Kubernetes: namespaces, clusters, and eTI's</li> <li>Namespaces are virtual clusters that allow users to organize their resources</li> <li>Clusters are the physical infrastructure that runs Kubernetes</li> <li>eTI's are external resources that can be accessed through Kubernetes</li> <li>There are also different types of permissions in Kubernetes: verbs, resources, and namespaces</li> <li>Verbs are the actions that a user can perform on a resource, such as 'get' or 'delete'</li> <li>Resources are the objects that a user can interact with, such as pods or services</li> <li>Namespaces are the virtual clusters where resources are organized</li> <li>eTI's can have their own set of permissions and resources</li> <li>To specify RBAC rules, you can use YAML files or the kubectl command line tool</li> <li>It's also possible to use third-party tools like Open Policy Agent to enforce RBAC rules</li> <li>When configuring RBAC rules, it's important to consider the different types of users and their roles in Kubernetes</li> <li>For example, a developer might need different permissions than an administrator</li> <li>You can also specify RBAC rules based on the user or group that is requesting access</li> <li>It's important to test RBAC rules thoroughly before deploying them in a production environment</li> <li>Make sure that users and groups only have the necessary permissions, and that eTI's are properly secured</li> <li>Finally, it's recommended to use a network policy tool like Calico or Kubernetes Network Policy to restrict traffic between pods and services. This can help prevent security vulnerabilities caused by lateral movement in your cluster.</li> </ul>"},{"location":"goto_sw_arch_list/#the-world-after-microservice-migration-w-service-mesh-contract-testing-d-mitrovic-goto-2018","title":"The World after Microservice Migration w/ Service Mesh &amp; Contract Testing \u2022 D. Mitrovic \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=MxhcFPRkzlw</p> <p>Summary:</p> <ul> <li>The speaker talks about the microservices architecture they adopted at Atlassian.</li> <li>They discuss how they use OpenAPI (formerly known as Swagger) to document their APIs and how they use a tool called Swagger Packet Validator to ensure that the documentation is up-to-date.</li> <li>They also talk about how they handle legacy systems and ensure that new microservices can communicate with them without issues.</li> <li>They used OpenAPI to define incoming and outgoing contracts for their services, which allowed them to split a monolithic application into smaller microservices while ensuring compatibility between them.</li> <li>They recorded all possible requests to and from the legacy system, converted them into packed files using OpenAPI tools, and then used these contracts to check if the new providers were behaving as expected. This approach allowed them to ensure that the legacy system would continue to work as intended after they separated it into smaller components.</li> <li>They emphasized the importance of testing their microservices thoroughly before deploying them, using a tool called Postman to test all possible request scenarios and ensuring compatibility with different clients.</li> </ul>"},{"location":"goto_sw_arch_list/#the-7-quests-of-resilient-software-design-uwe-friedrichsen-goto-2018","title":"The 7 Quests of Resilient Software Design \u2022 Uwe Friedrichsen \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=v8hh0mB35wQ</p> <ul> <li>The speaker discussed seven quests that a company might face when trying to implement resilient software design.</li> <li>The first quest is understanding the problem domain and modeling it correctly. This includes identifying the boundaries of the system, the entities within it, and their relationships.</li> <li>The second quest is mastering functional design. The speaker noted that as a domain, software engineering is still quite bad at this, and distributed systems add an extra twist to the challenge.</li> <li>The third quest is picking up distributed systems. This includes understanding concepts such as eventual consistency, sharding, and CAP theorem.</li> <li>The fourth quest is learning how to deal with partial failure. The speaker noted that in a distributed system, it's not a question of if something will fail, but when and where.</li> <li>The fifth quest is mastering observability. This includes logging, monitoring, and tracing, which are crucial for understanding what is happening within a complex system.</li> <li>The sixth quest is learning how to deal with concurrency. The speaker noted that this is a hard problem, and it's made even harder in a distributed system where there are multiple processes running concurrently.</li> <li>The seventh quest is learning how to deal with legacy systems. The speaker noted that many companies have legacy systems that they need to integrate with, and doing so can be challenging.</li> <li>The speaker emphasized that resilient software design is not just about the technology, but also about the people and the processes. It requires a cultural shift towards a more empirical approach, where experiments are used to test assumptions and hypotheses.</li> </ul>"},{"location":"goto_sw_arch_list/#event-driven-microservices-not-just-about-events-allard-buijze-goto-2018","title":"Event-Driven Microservices - not (just) about Events! \u2022 Allard Buijze \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=DzGuDNHsOQ0</p> <ul> <li>Events are a way of modeling messages in a microservices architecture</li> <li>They can stimulate location transparency, but beware of creating tight couplings between services</li> <li>It's important to consider bounded contexts when designing events</li> <li>Other reasons for communication between services should also be considered, such as RPC or REST</li> <li>Modeling messages explicitly can retain value over time</li> <li>Evolve your way into microservices, don't just go there straight away.</li> </ul>"},{"location":"goto_sw_arch_list/#event-based-architecture-and-implementations-with-kafka-and-atom-eberhard-wolff-goto-2018","title":"Event-based Architecture and Implementations with Kafka and Atom \u2022 Eberhard Wolff \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=Ecg7lvvm8aU</p> <ul> <li>Introduction to microservices</li> <li>Definition of microservices: small, independent services that communicate with each other using APIs</li> <li>Benefits of using microservices: scalability, resilience, and development speed</li> <li>Challenges of using microservices: data consistency, service discovery, and monitoring</li> <li>Different ways to implement communication between microservices: REST, gRPC, and message queues</li> <li>Comparison between REST and gRPC: performance and complexity</li> <li>Introduction to Kafka: a distributed streaming platform for building real-time data pipelines</li> <li>Benefits of using Kafka for microservices communication: scalability, fault tolerance, and message durability</li> <li>Example of using Kafka for implementing event sourcing pattern</li> <li>Comparison between Kafka and traditional message queues: throughput and latency</li> <li>Best practices for designing and implementing microservices: data modeling, service boundaries, and testing strategies</li> <li>Conclusion: microservices are not a silver bullet, but can be a powerful tool in certain scenarios. It's important to understand the trade-offs and choose the right technology for the job.</li> </ul>"},{"location":"goto_sw_arch_list/#modular-monoliths-simon-brown-goto-2018","title":"Modular Monoliths \u2022 Simon Brown \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=5OjqD-ow8GE</p> <ul> <li>Monolithic architecture is a single, self-contained application where the UI, business logic, and data access are combined into a single program.</li> <li>Microservices architecture breaks down an application into smaller, independently deployable services that can communicate with each other using APIs.</li> <li>Pros of monolithic architecture: simpler to develop and deploy, less operational overhead, better performance due to fewer network calls.</li> <li>Cons of monolithic architecture: scalability issues, difficulty in maintaining large codebases, slow development cycles due to the need for frequent redeployments.</li> <li>Pros of microservices architecture: easier to scale and maintain, independent deployment of services, faster development cycles due to modularity.</li> <li>Cons of microservices architecture: operational complexity, network latency, service discovery, data consistency, and testing challenges.</li> <li>Choosing between monolithic or microservices depends on the specific needs of the project and the team's expertise. It is not a one-size-fits-all decision.</li> <li>When choosing microservices, it is essential to ensure that the services communicate with each other using APIs and that diagrams match the code.</li> <li>Microservices architecture requires more operational overhead, such as service discovery and communication between services.</li> <li>Monolithic architecture can be a good choice for small teams or projects with simple requirements.</li> <li>It is possible to start with a monolithic architecture and transition to microservices later if needed.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-in-the-age-of-things-frank-buschmann-goto-2018","title":"Software Architecture in the Age of Things \u2022 Frank Buschmann \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=_qggqkROlE4</p> <ul> <li>Introduced himself as a software architect and developer working on IoT.</li> <li>Mentioned that the world is changing rapidly due to technology and IoT is one of the major drivers of this change.</li> <li>Discussed some challenges faced by IoT developers such as security, scalability, networking and connectivity, etc.</li> <li>Talked about designing for failure in IoT systems.</li> <li>Mentioned that software architects need to understand the business domain they are working on.</li> <li>Discussed the importance of feedback loops in IoT development.</li> <li>Emphasized on making IoT a place worth living in as software developers have a lot of control over it.</li> </ul>"},{"location":"goto_sw_arch_list/#unconditional-code-michael-feathers-goto-2018","title":"Unconditional Code \u2022 Michael Feathers \u2022 GOTO 2018","text":"<p>URL: https://www.youtube.com/watch?v=AnZ0uTOerUI</p> <ul> <li>Error handling is an important aspect of software development.</li> <li>The term \"error\" can be misleading and may not accurately represent what is happening in the code.</li> <li>Instead of thinking about errors, it may be more productive to think about the conditions under which the code can run unconditionally.</li> <li>Using structures like option monads and exception handling can help make the code less prone to error.</li> <li>It's important to consider the design of the code and how it can be structured to be less prone to error.</li> <li>By using design and generalization, it may be possible to expand the conditions under which the code can run unconditionally.</li> <li>The goal is to make it as easy as possible for users to do the right thing, and to make it more difficult for them to do the wrong thing.</li> </ul>"},{"location":"goto_sw_arch_list/#ddd-today-modeling-uncertainty-vaughn-vernon-goto-2017","title":"DDD Today - Modeling Uncertainty \u2022 Vaughn Vernon \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8Y-XPlXOWoA</p> <p>Summary of Transcript:</p> <ul> <li>Vaughn Vernon's talk focuses on Domain-Driven Design (DDD) and how to make it work in practice.</li> <li>Key takeaways include the importance of context, language, and modeling, as well as the use of events and bounded contexts.</li> <li>The speaker emphasizes the need to avoid using technical terms in the business model and to name events with verbs and past tense.</li> <li>Other tips include avoiding anemic models, modeling aggregates as entities, and using a consistent naming convention for events.</li> <li>The talk also touches on the use of CQRS and Event Sourcing as part of a DDD implementation.</li> </ul>"},{"location":"goto_sw_arch_list/#building-evolutionary-architectures-patrick-kua-goto-2017","title":"Building Evolutionary Architectures \u2022 Patrick Kua \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=8bEsNT7jdC4</p> <ul> <li>The main focus of N26 is to provide a mobile-first banking experience.</li> <li>They are regulated by the German financial regulatory authority and have a full European banking license.</li> <li>N26 offers a free account with no monthly fees, but they also offer premium accounts with additional features for a monthly fee.</li> <li>The company has implemented various security measures to protect its customers' data and funds, including two-factor authentication and encryption.</li> <li>They use automation and DevSecOps practices to ensure that security scales as the company grows.</li> <li>N26 is named after the 26 moves required to solve a Rubik's Cube, representing their goal of simplifying complex financial transactions.</li> </ul>"},{"location":"goto_sw_arch_list/#a-crystal-ball-to-prioritize-technical-debt-adam-tornhill-goto-2017","title":"A Crystal Ball to Prioritize Technical Debt \u2022 Adam Tornhill \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=SdUewLCHWvU</p> <ul> <li>The talk was about the concept of \"technical debt\" in software development and how to address it using a prioritization technique.</li> <li>Technical debt is the difference between the current state of the codebase and the ideal state, taking into account factors like complexity, maintainability, and test coverage.</li> <li>The technique presented consists of 3 steps: measure technical debt, prioritize it, and then address it through refactoring or rewriting.</li> <li>To measure technical debt, the speaker suggested using a combination of metrics such as cyclomatic complexity, code duplication, and test coverage.</li> <li>To prioritize technical debt, the speaker proposed using a scoring system based on factors like business value, risk, and effort required to address it.</li> <li>The speaker also emphasized the importance of continuous improvement and regular code reviews to prevent technical debt from accumulating.</li> <li>The talk ended with a Q&amp;A session where the speaker answered questions about specific tools, techniques, and experiences related to addressing technical debt.</li> </ul>"},{"location":"goto_sw_arch_list/#shopifys-architecture-to-handle-80k-rps-celebrity-sales-simon-eskildsen-goto-2017","title":"Shopify's Architecture to Handle 80K RPS Celebrity Sales \u2022 Simon Eskildsen \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=N8NWDHgWA28</p> <ul> <li>The company uses a custom built distributed data store called FlockDB.</li> <li>It is written in Scala and runs on top of Apache Mesos.</li> <li>The system has thousands of nodes, each node with 48 cores and 256GB RAM.</li> <li>There are around 10 billion writes per day.</li> <li>Each write op takes about 3ms to complete.</li> <li>Data is sharded by user ID.</li> <li>FlockDB is used for storing social graph data and metadata.</li> <li>The company uses Apache Kafka for stream processing, log aggregation and real-time data ingestion.</li> <li>They are considering using Kubernetes in the future.</li> <li>They do not currently use MySQL binlog with Kafka but it might be considered if there were other use cases for it.</li> </ul>"},{"location":"goto_sw_arch_list/#serverless-the-future-of-software-architecture-peter-sbarski-goto-2017","title":"Serverless: the Future of Software Architecture \u2022 Peter Sbarski \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=LAWjdZYrUgI</p> <ul> <li>Service-oriented architecture is an approach to software design that emphasizes the use of small, loosely coupled services to build complex systems.</li> <li>Services are independent components that communicate with each other using well-defined interfaces and protocols.</li> <li>The main benefits of service-oriented architecture include flexibility, scalability, and maintainability.</li> <li>To successfully implement a service-oriented architecture, it is important to carefully design the services and their interfaces, as well as to choose an appropriate communication protocol.</li> <li>Microservices are a type of service-oriented architecture that emphasizes even greater independence and simplicity of the individual services.</li> <li>Service meshes are a way to manage the communication between microservices in a distributed system.</li> <li>When designing a service-oriented architecture, it is important to consider aspects such as data consistency, security, and monitoring.</li> <li>It is also important to keep in mind that service-oriented architecture is not always the best choice for every project, and that other approaches such as monolithic architectures may be more appropriate in certain cases.</li> <li>The speaker is the founder of a consulting company that specializes in service-oriented architecture and microservices.</li> </ul>"},{"location":"goto_sw_arch_list/#the-many-meanings-of-event-driven-architecture-martin-fowler-goto-2017","title":"The Many Meanings of Event-Driven Architecture \u2022 Martin Fowler \u2022 GOTO 2017","text":"<p>URL: https://www.youtube.com/watch?v=STKCRSUsyP0</p> <ul> <li>Event-driven systems are those where events cause other things to happen</li> <li>Events should be modeled as facts that have happened in the past, e.g., \"UserRegistered\"</li> <li>Event-driven systems can be more resilient and scalable than traditional request/response architectures</li> <li>Events can be used for communication between services, data integration, and system auditing</li> <li>There are common patterns for event-driven systems: Event Notification, Event Port, Event Sourcing, Command Query Responsibility Segregation (CQRS), and Event-Carried State Transfer (ECST)</li> <li>Event-driven systems can be more complex to understand and debug than traditional architectures, so it's important to be precise in the use of terminology.</li> </ul>"},{"location":"goto_sw_arch_list/#whoops-where-did-my-architecture-go-oliver-gierke-goto-2016","title":"Whoops! Where Did My Architecture Go? \u2022 Oliver Gierke \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=v1XIcgFUIEw</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#building-theories-is-building-value-george-fairbanks-goto-2016","title":"Building Theories is Building Value \u2022 George Fairbanks \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=Led34f3Pcq4</p> <p>Error</p>"},{"location":"goto_sw_arch_list/#visualise-document-explore-your-software-architecture-simon-brown-goto-2016","title":"Visualise, Document &amp; Explore Your Software Architecture \u2022 Simon Brown \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=GM_J_jRp62g</p> <ul> <li>The speaker discusses their experience using Gliffy and the potential security concerns of storing data on the cloud.</li> <li>They mention that they are creating an on-premises API to store data locally for added security.</li> <li>The speaker expresses their preference for using cloud-based tools, but notes that the current tooling in this area is immature.</li> <li>They ponder whether there needs to be a mind shift change for people to start using the cloud more or if on-premise solutions need to be built.</li> <li>They mention that they don't want to lose functionality by packaging up an on-premise version of their current cloud-based solution.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-as-systems-dissolve-eoin-woods-goto-2016","title":"Software Architecture as Systems Dissolve \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=XanSoFchPbw</p> <ul> <li>Security engineering is important for software developers, but there is often a disconnect between the security community and software development teams.</li> <li>There is a lack of intersection between the two communities, with few software developers attending security conferences and vice versa.</li> <li>The security community needs to do a better job of speaking the language of software developers and helping them prioritize security measures.</li> <li>Hacking can happen to anyone, as demonstrated by the hacking of hacking team, a company that produces hacking technology.</li> <li>It is important for software developers to take security measures seriously and apply best practices to their work.</li> </ul>"},{"location":"goto_sw_arch_list/#continuous-architecture-murat-erder-goto-2016","title":"Continuous Architecture \u2022 Murat Erder \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3xw3a35yLOQ</p> <ul> <li>Continuous architecture is a set of principles and tools that can help architects make their work more relevant and practical.</li> <li>It involves breaking down silos, collaborating with developers and other teams, and continuously delivering value to the organization.</li> <li>The principles of continuous architecture include:<ol> <li>Embrace Change</li> <li>Deliver Value Continuously</li> <li>Make Architecture Everyone's Job</li> <li>Practice Continuous Discovery</li> <li>Use Appropriate Tools and Techniques</li> <li>Organize Around Capabilities</li> </ol> </li> <li>The continuous architecture mindset involves making architecture real and relevant, rather than something that sits on the side and is in constant conflict with other teams or the organization.</li> </ul>"},{"location":"goto_sw_arch_list/#from-homogeneous-monolith-to-heterogeneous-microservices-architecture-chad-fowler-goto-2015","title":"From Homogeneous Monolith to Heterogeneous Microservices Architecture \u2022 Chad Fowler \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=sAsRtZEGMMQ</p> <ul> <li>Introduction to the speaker and their background in software development.</li> <li>Explanation of the company's use of Elixir and its benefits for building scalable, fault-tolerant systems.</li> <li>Discussion on how the company transitioned from a monolithic architecture to a microservice architecture using Elixir.</li> <li>Explanation of the challenges faced during the transition and how they were overcome.</li> <li>Comparison of the differences between monolithic and microservice architectures.</li> <li>Explanation of the importance of service discovery, load balancing, and message routing in a microservice architecture.</li> <li>Discussion on the company's future plans for further optimizing their architecture, including potentially refactoring to a monolith.</li> <li>Q&amp;A with the audience.</li> </ul>"},{"location":"goto_sw_arch_list/#reactive-systems-21st-architecture-for-21st-century-systems-dave-farley-goto-2015","title":"Reactive Systems: 21st Architecture for 21st Century Systems \u2022 Dave Farley \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=RuHkNGrwD5o</p> <ul> <li>Synchronous and asynchronous communication have different trade-offs.</li> <li>Synchronous communication is simpler and easier to reason about, but can lead to performance issues if not managed carefully.</li> <li>Asynchronous communication can be more complex and harder to reason about, but can provide better performance and scalability.</li> <li>When designing a system, it's important to consider the needs of the application and choose the appropriate communication style accordingly.</li> <li>It's possible to mix synchronous and asynchronous communication in a single system, but care must be taken to ensure that they are properly isolated and managed.</li> <li>A gateway service can be used to manage synchronous communication between services in an otherwise asynchronous system.</li> <li>When using a database commit as a synchronous action, it's important to limit the amount of data being committed to avoid performance issues.</li> <li>Agent Lee is a fundamental communication protocol that can be built upon to create other communication styles.</li> </ul>"},{"location":"goto_sw_arch_list/#mobile-first-architectures-alexander-stigsen-goto-2015","title":"Mobile-First Architectures \u2022 Alexander Stigsen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=Xh43D4E2e2M</p> <ul> <li>Mobile devices, drones, and IoT devices have limited network connectivity, which can lead to high latency when trying to access data from a centralized server.</li> <li>To address this issue, it's important to bring the data and computation together on the device itself, a concept known as endpoint computing or client cloud computing.</li> <li>This approach can help reduce latency and improve the user experience by allowing devices to process and display information more quickly.</li> <li>One example of endpoint computing is using mobile devices to perform tasks that would normally be done on a desktop computer, such as video editing or data analysis.</li> <li>Another example is using drones to process sensor data in real-time, rather than sending it back to a central server for processing.</li> <li>Endpoint computing can also help reduce the amount of data that needs to be transmitted over a network, which can save bandwidth and improve overall performance.</li> <li>As mobile devices and IoT devices become more powerful, it's likely that we will see more applications of endpoint computing in the future.</li> </ul>"},{"location":"goto_sw_arch_list/#evolutionary-architecture-microservices-rebecca-parsons-goto-2015","title":"Evolutionary Architecture &amp; Microservices \u2022 Rebecca Parsons \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=WhHtVUlJNA0</p> <ul> <li>Microservices is an architectural style that emphasizes small, loosely coupled services.</li> <li>Continuous delivery is important for microservices because it enables quick and easy deployment and updating of individual services.</li> <li>The book \"Building Microservices\" started out as a book about continuous delivery.</li> <li>Microservices are the first major architectural paradigm to come along since continuous delivery became popular.</li> <li>Operations departments will not like it if you implement microservices without involving them, because their processes for monitoring and error recovery will be different.</li> </ul>"},{"location":"goto_sw_arch_list/#deliberate-architecture-robert-smallshire-goto-2016","title":"Deliberate Architecture \u2022 Robert Smallshire \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=3cjSpH4SYpU</p> <ul> <li>Software quality attributes are non-functional requirements that affect how a system operates.</li> <li>Examples of software quality attributes include performance, security, usability, and maintainability.</li> <li>Different stakeholders have different priorities when it comes to software quality attributes. For example, developers may be more concerned with maintainability, while users may be more interested in usability.</li> <li>Software architects play a key role in ensuring that software quality attributes are considered and addressed in the design and development of a system.</li> <li>A good starting point for improving software quality in an organization is to have software architects act as champions for software quality attributes. By focusing on these attributes, other aspects of the system such as features will take care of themselves.</li> </ul>"},{"location":"goto_sw_arch_list/#secure-by-design-the-architects-guide-to-security-design-principles-eoin-woods-goto-2016","title":"Secure by Design \u2013 the Architect's Guide to Security Design Principles \u2022 Eoin Woods \u2022 GOTO 2016","text":"<p>URL: https://www.youtube.com/watch?v=4qN3JBGd1g8</p> <ul> <li>Security is about trade-offs and making informed decisions</li> <li>10 principles of security:<ul> <li>Good security requires good design.</li> <li>It's impossible to make anything foolproof because fools are so ingenious.</li> <li>Treat people as a resource to be developed not a problem to be solved.</li> <li>The difficulty of doing something is inversely proportional to how often it is done.</li> <li>If you don't actively manage security, it will managedly get worse.</li> <li>Security is not a product, but a process.</li> <li>Complexity is the enemy of security.</li> <li>Security is a non-competitive advantage.</li> <li>There's no point in having security unless people use it.</li> <li>The most secure system is one that is turned off and disconnected.</li> </ul> </li> <li>References:<ul> <li>NCSC (National Cyber Security Centre)</li> <li>NIPC (National Infrastructure Protection Center)</li> <li>\"Security Engineering\" by Ross Anderson, Cambridge University</li> </ul> </li> </ul> <p>[^1]: Transcript from Video of talk</p>"},{"location":"goto_sw_arch_list/#the-front-end-architecture-revolution-david-nolen-goto-2015","title":"The Front End Architecture Revolution \u2022 David Nolen \u2022 GOTO 2015","text":"<p>URL: https://www.youtube.com/watch?v=nDNU2pmuJA8</p> <ul> <li>Rest is a set of ideas for simplifying web development</li> <li>The main components of rest are:</li> <li>Immutable data structures (using functional programming)</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration</li> <li>These ideas can help reduce complexity in web development by:</li> <li>Making it easier to reason about code</li> <li>Encouraging reusable components</li> <li>Minimizing the amount of boilerplate code</li> <li>It's important to continually evaluate assumptions and biases, and consider unfamiliar but time-tested ideas for complexity reduction.</li> <li>Some examples of these ideas include:</li> <li>Functional programming concepts like closures and Lisp</li> <li>Declarative data fetching with a query language</li> <li>Server-rendered HTML and client-side hydration.</li> </ul>"},{"location":"goto_sw_arch_list/#software-architecture-vs-code-simon-brown-goto-2014","title":"Software Architecture vs. Code \u2022 Simon Brown \u2022 GOTO 2014","text":"<p>URL: https://www.youtube.com/watch?v=GAFZcYlO5S0</p> <ul> <li>Starts by drawing diagrams to decompose problems</li> <li>Uses UML notation for clarity and consistency, but not necessary</li> <li>Diagramming helps clarify responsibilities and interactions between components</li> <li>Helps identify high-level components in a system</li> <li>Can use TDD or other testing strategies once components are identified</li> <li>Diagrams serve as starting point for further development and evolution of the system</li> <li>Encourages thinking about the system in terms of components and their relationships, which is useful for microservices architecture</li> </ul>"},{"location":"blog/design/design_for_the_utopia/","title":"Designing for Utopia in a Dystopian Era: Insights from Chris Atherton's GOTO 2022 Talk","text":"<p>In the compelling GOTO 2022 presentation, Design for the Utopia You Want, Not the Dystopia You're In, Chris Atherton provides a profound exploration of the intersection between design, psychology, and the socio-political landscape of our times. The talk, available on YouTube, delves into how designers and individuals can navigate the complex web of modern challenges to foster a more utopian society.</p>"},{"location":"blog/design/design_for_the_utopia/#the-designers-dilemma","title":"The Designer's Dilemma","text":"<p>Atherton opens by identifying as a designer deeply interested in human needs and motivations. The talk pivots on the critical role designers play in shaping human interaction with technology and, by extension, each other. By understanding user interactions, designers can create or adapt tools that enhance or impede human agency. The speaker emphasizes the need to be vigilant about how designs are used, often in ways never intended, highlighting the adaptability required in both creation and utilization.</p>"},{"location":"blog/design/design_for_the_utopia/#navigating-dystopian-themes","title":"Navigating Dystopian Themes","text":"<p>The discussion dives into the prevalence of dystopian themes in popular culture, from Blade Runner to Terminator, contrasting them with the more insidious and real dystopias we face today \u2014 like climate change and pandemics. Atherton examines \"techwear,\" a fashion response to dystopian themes, and how it has evolved from a testosterone-heavy aesthetic to a more inclusive one. Despite the grim realities we face, the presentation encourages finding humor and humanity even in dark times.</p>"},{"location":"blog/design/design_for_the_utopia/#technology-and-agency","title":"Technology and Agency","text":"<p>A significant part of the talk revolves around technology's impact on personal agency. From the privacy erosions on platforms like Facebook to the societal implications of Bitcoin mining, Atherton urges us to consider the pervasive and often unseen influence of technology on our lives. Furthermore, the speaker delves into the concept of learned helplessness, a psychological state when someone believes they have no control over their circumstances and stops trying to change them, often exacerbated by technology's relentless demands and complexities.</p>"},{"location":"blog/design/design_for_the_utopia/#psychological-insights-for-a-utopian-future","title":"Psychological Insights for a Utopian Future","text":"<p>Atherton brings in psychological theories to bolster her argument for mindful design and living. She references William James's attention theory, Martin Seligman's learned helplessness, and the mere exposure effect, among others, to explain how repeated, unexamined interactions with technology can shape our behaviors and beliefs in undesirable ways.</p>"},{"location":"blog/design/design_for_the_utopia/#acting-for-the-utopia-you-want","title":"Acting for the Utopia You Want","text":"<p>The crux of Atherton's message is a call to action. She cites Keanu Reeves's practice of not engaging in futile arguments and Greta Thunberg's advocacy for direct action towards the Utopia we desire. The talk underscores the importance of recognizing when we might be falling into patterns of learned helplessness and intentionally rehearsing things that we believe to be good, thereby actively participating in the creation of a better future.</p>"},{"location":"blog/design/design_for_the_utopia/#concluding-thoughts","title":"Concluding Thoughts","text":"<p>Chris Atherton's talk at the GOTO 2022 conference is more than a presentation; it's a rallying cry for designers, technologists, and citizens to introspect and act with intentionality. By understanding the psychological underpinnings of our interactions with technology and society, we can move towards a future that is less about adapting to dystopia and more about creating Utopia. The advice is clear: act for the Utopia you want, dress however you like, but importantly, take action against the forces that seek to diminish our agency and potential.</p> <p>As we navigate these challenging times, let us draw inspiration from Atherton's insights and the examples set by figures like Reeves and Thunberg. Let's strive to recognize and overcome the learned helplessness that can ensnare us, choosing instead to engage in meaningful actions that lead us towards a more hopeful, utopian future.</p> <p>To watch the full presentation and delve deeper into these compelling themes, visit the talk, Design for the Utopia You Want, Not the Dystopia You're In on YouTube.</p> <p>Act for the Utopia you want, dress how you like, but take action.</p>"}]}